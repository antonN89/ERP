
&НаСервере
Процедура Рин1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Рин1_ДобавитьНовыеЭлементыНаСервере();
	
	//bercut080419
	Если не РольДоступна("Рин1_ДобавлениеИзменениеETIMВНоменклатуре") Тогда
		Если Объект.Ссылка.Пустая() Тогда 
			Элементы.ГруппаКлассыИСвойстваETIM.Видимость = Ложь;
		Иначе
			Если РольДоступна("Рин1_ОсновнаяРоль") Тогда
				Элементы.ГруппаРедактирования.Видимость = Ложь;
				Элементы.ГруппаПросмотра.Видимость = Истина;
			Иначе 
				Элементы.ГруппаКлассыИСвойстваETIM.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе 
		Элементы.ГруппаРедактирования.Видимость = Истина;
		Элементы.ГруппаПросмотра.Видимость = Ложь;
	КонецЕсли;
	//
	СвойстваКласса.Параметры.УстановитьЗначениеПараметра("КлассETIM", Объект.КлассETIM);
	
	ГИГ_ДобавитьНовыеЭлементыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Рин1_ДобавитьНовыеЭлементыНаСервере()
	
	//bercut200319
	Элементы.ДекорацияПредставлениеКласса.Видимость = Ложь;
	ОбработкаСвойствКлассов();
	//	
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_КлассETIMПриИзмененииВместо(Элемент)
	
	ОбработкаСвойствКлассов();
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_КлассETIMОбработкаВыбораВместо(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КлассETIM) Тогда
		
		Если не Объект.КлассETIM = ВыбранноеЗначение Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтаФорма, ВыбранноеЗначение);
			ПоказатьВопрос(Оповещение,"Установленные значения свойств будут утеряны. Согласны?", Режим, 0);
		КонецЕсли;
		
	Иначе 
		Объект.КлассETIM = ВыбранноеЗначение; 
		Если Не ЭтаФорма.Записать() Тогда
			ТекстСообщения = НСтр("ru='Ошибка записи элемента!'");
			ПоказатьПредупреждение(Неопределено, ТекстСообщения);
			Возврат;
		иначе 
			ОбработкаСвойствКлассов();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ВыбранноеЗначение) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе 
		ОбработкаИзмененияКлассаETIM(); //удалим все записи
		Объект.КлассETIM = ВыбранноеЗначение;
		Если Не ЭтаФорма.Записать() Тогда
			ТекстСообщения = НСтр("ru='Ошибка записи элемента!'");
			ПоказатьПредупреждение(Неопределено, ТекстСообщения);
			Возврат;
		иначе 
			ОбработкаСвойствКлассов();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияКлассаETIM() 
	
	//удалим все записи
	НаборЗначений = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.СоздатьНаборЗаписей();
	НаборЗначений.Отбор.Номенклатура.Установить(Объект.Ссылка);
	НаборЗначений.Записать();
	
КонецПроцедуры // ОбработкаИзмененияКлассаETIM()

&НаСервере
Процедура ОбработкаСвойствКлассов()
	
	Если РольДоступна("Рин1_ДобавлениеИзменениеETIMВНоменклатуре") Тогда
		
		Если ЗначениеЗаполнено(Объект.КлассETIM) Тогда
			Элементы.ДекорацияПредставлениеКласса.Видимость = Истина;
			Элементы.ДекорацияПредставлениеКласса.Заголовок = Объект.КлассETIM.ПредставлениеГруппыКласса;
			Элементы.ГруппаСвойстваЗначения.Видимость = Истина;

			СвойстваКласса.Параметры.УстановитьЗначениеПараметра("КлассETIM", Объект.КлассETIM);
			
		Иначе 
			
			Элементы.ГруппаСвойстваЗначения.Видимость = Ложь;
			
		КонецЕсли;
		
	Иначе 
		
		Если не ЗначениеЗаполнено(Объект.КлассETIM) Тогда
			
			Элементы.ГруппаСводная2.Заголовок = "Номенклатуре не присвоен класс ETIM";
			Элементы.СводнаяТаблица2.Видимость = Ложь;
			Элементы.ДекорацияПредставление1.Заголовок = "";
			Элементы.ДекорацияПредставление1.Заголовок = "";
			Элементы.ДекорацияПредставление2.Заголовок = "";
			Элементы.ДекорацияПредставление3.Заголовок = "";
			Элементы.ДекорацияПредставление4.Заголовок = "";
			
		Иначе 
			
			Элементы.ДекорацияПредставление1.Заголовок = "Группа " + Строка(Объект.КлассETIM.Родитель);
			Элементы.ДекорацияПредставление2.Заголовок = " " + Объект.КлассETIM.Родитель.ПредставлениеГруппыКласса;
			Элементы.ДекорацияПредставление3.Заголовок = " / Класс " + Строка(Объект.КлассETIM);
			Элементы.ДекорацияПредставление4.Заголовок = " " + Объект.КлассETIM.ПредставлениеГруппыКласса;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьСводнуюТаблицу();
	
КонецПроцедуры //ОбработкаСвойствКлассов()

&НаСервере
Процедура ОбновитьСводнуюТаблицу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Рин1_ЗначенияСвойствНоменклатуры.Свойство КАК СвойствоСсылка,
	|	Рин1_ЗначенияСвойствНоменклатуры.ГруппаПредставление КАК Группа,
	|	Рин1_ЗначенияСвойствНоменклатуры.КлассПредставление КАК Класс,
	|	Рин1_ЗначенияСвойствНоменклатуры.СвойствоПредставление КАК Свойство,
	|	Рин1_ЗначенияСвойствНоменклатуры.Value_A КАК Значение,
	|	"""" КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Рин1_ЗначенияСвойствНоменклатуры КАК Рин1_ЗначенияСвойствНоменклатуры
	|ГДЕ
	|	Рин1_ЗначенияСвойствНоменклатуры.Номенклатура = &Номенклатура
	|	И НЕ Рин1_ЗначенияСвойствНоменклатуры.Value_A = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Рин1_ЗначенияСвойствНоменклатуры.Свойство,
	|	Рин1_ЗначенияСвойствНоменклатуры.ГруппаПредставление,
	|	Рин1_ЗначенияСвойствНоменклатуры.КлассПредставление,
	|	Рин1_ЗначенияСвойствНоменклатуры.СвойствоПредставление,
	|	ВЫБОР
	|		КОГДА Рин1_ЗначенияСвойствНоменклатуры.Value_L = 2
	|			ТОГДА ""Да""
	|		ИНАЧЕ ""Нет""
	|	КОНЕЦ,
	|	""""
	|ИЗ
	|	РегистрСведений.Рин1_ЗначенияСвойствНоменклатуры КАК Рин1_ЗначенияСвойствНоменклатуры
	|ГДЕ
	|	Рин1_ЗначенияСвойствНоменклатуры.Номенклатура = &Номенклатура
	|	И НЕ Рин1_ЗначенияСвойствНоменклатуры.Value_L = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Рин1_ЗначенияСвойствНоменклатуры.Свойство,
	|	Рин1_ЗначенияСвойствНоменклатуры.ГруппаПредставление,
	|	Рин1_ЗначенияСвойствНоменклатуры.КлассПредставление,
	|	Рин1_ЗначенияСвойствНоменклатуры.СвойствоПредставление,
	|	Рин1_ЗначенияСвойствНоменклатуры.Value_N,
	|	Рин1_СвойстваКлассаETIM.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Рин1_ЗначенияСвойствНоменклатуры КАК Рин1_ЗначенияСвойствНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Рин1_СвойстваКлассаETIM КАК Рин1_СвойстваКлассаETIM
	|		ПО Рин1_ЗначенияСвойствНоменклатуры.Свойство = Рин1_СвойстваКлассаETIM.Ссылка
	|ГДЕ
	|	Рин1_ЗначенияСвойствНоменклатуры.Номенклатура = &Номенклатура
	|	И НЕ Рин1_ЗначенияСвойствНоменклатуры.Value_N = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Рин1_ЗначенияСвойствНоменклатуры.Свойство,
	|	Рин1_ЗначенияСвойствНоменклатуры.ГруппаПредставление,
	|	Рин1_ЗначенияСвойствНоменклатуры.КлассПредставление,
	|	Рин1_ЗначенияСвойствНоменклатуры.СвойствоПредставление,
	|	Рин1_ЗначенияСвойствНоменклатуры.Value_RZ,
	|	Рин1_СвойстваКлассаETIM.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Рин1_ЗначенияСвойствНоменклатуры КАК Рин1_ЗначенияСвойствНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Рин1_СвойстваКлассаETIM КАК Рин1_СвойстваКлассаETIM
	|		ПО Рин1_ЗначенияСвойствНоменклатуры.Свойство = Рин1_СвойстваКлассаETIM.Ссылка
	|ГДЕ
	|	НЕ Рин1_ЗначенияСвойствНоменклатуры.Value_R1 = 0
	|	И Рин1_ЗначенияСвойствНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	СводнаяТаблица.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // ОбновитьСводнуюТаблицу()

#Область ОбработкаЗначенииСвойствНаФормеИВРегистре

&НаКлиенте
Процедура Рин1_СвойстваКлассаПриАктивизацииСтрокиВместо(Элемент)
	
	ОбработкаЗначенийСвойств(Элемент.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗначенийСвойств(Свойство) //обрабатываем данные из регистра на форме
	
	Если  не Свойство = Неопределено Тогда 
		
		Если Свойство.ТИП = Перечисления.Рин1_ТипСвойства.A Тогда  //таблица
			
			Элементы.ГруппаТЧ_Значений.Видимость = Истина;
			Элементы.ГруппаКоллекция_Значений.Видимость = Ложь;	
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Рин1_СвойстваКлассаETIMValue.Value_A КАК Значение,
			|	Рин1_СвойстваКлассаETIMValue.ПредставлениеЗначения КАК Представление,
			|	ВЫБОР
			|		КОГДА НЕ ВложенныйЗапрос.Value_A ЕСТЬ NULL
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Пометка
			|ИЗ
			|	Справочник.Рин1_СвойстваКлассаETIM.Value КАК Рин1_СвойстваКлассаETIMValue
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Рин1_ЗначенияСвойствНоменклатуры.Свойство КАК Свойство,
			|			Рин1_ЗначенияСвойствНоменклатуры.Value_A КАК Value_A
			|		ИЗ
			|			РегистрСведений.Рин1_ЗначенияСвойствНоменклатуры КАК Рин1_ЗначенияСвойствНоменклатуры
			|		ГДЕ
			|			Рин1_ЗначенияСвойствНоменклатуры.Номенклатура = &Номенклатура) КАК ВложенныйЗапрос
			|		ПО Рин1_СвойстваКлассаETIMValue.Ссылка = ВложенныйЗапрос.Свойство
			|			И Рин1_СвойстваКлассаETIMValue.ПредставлениеЗначения = ВложенныйЗапрос.Value_A
			|ГДЕ
			|	Рин1_СвойстваКлассаETIMValue.Ссылка = &Свойство";
			
			Запрос.УстановитьПараметр("Свойство", Свойство);
			Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
			
			Результат = Запрос.Выполнить();
			
			ЗначенияСвойства.Загрузить(Результат.Выгрузить()); //+ пометка
			
		Иначе
			
			Элементы.ГруппаТЧ_Значений.Видимость = Ложь;
			Элементы.ГруппаКоллекция_Значений.Видимость = Истина;	
			
			ЕдиницаИзмерения1 = Свойство.ЕдиницаИзмерения;
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура",Объект.Ссылка);
			Отбор.Вставить("Свойство", Свойство);
			
			Если  Свойство.ТИП = Перечисления.Рин1_ТипСвойства.L Тогда  //булево
				
				Элементы.ValueL.Видимость = Истина;
				Элементы.ValueN.Видимость = Ложь;
				Элементы.ValueR.Видимость = Ложь;
				Элементы.ГруппаЕдиницаИзмерения.Видимость = Ложь;
				
				Value_L = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.Получить(Отбор).Value_L;
				
			ИначеЕсли Свойство.ТИП = Перечисления.Рин1_ТипСвойства.N Тогда   //число
				
				Элементы.ValueL.Видимость = Ложь;
				Элементы.ValueN.Видимость = Истина;
				Элементы.ValueR.Видимость = Ложь;
				Элементы.ГруппаЕдиницаИзмерения.Видимость = ?(ЕдиницаИзмерения1 = "",Ложь,Истина);
				
				Value_N = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.Получить(Отбор).Value_N;
				
			ИначеЕсли Свойство.ТИП = Перечисления.Рин1_ТипСвойства.R Тогда  //число
				
				Элементы.ValueL.Видимость = Ложь;
				Элементы.ValueN.Видимость = Ложь;
				Элементы.ValueR.Видимость = Истина;
				Элементы.ГруппаЕдиницаИзмерения.Видимость = ?(ЕдиницаИзмерения1 = "",Ложь,Истина);
				Элементы.ДекорацияДиапазон.Видимость = Истина;
				
				Value_R  = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.Получить(Отбор).Value_R;
				Value_R1 = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.Получить(Отбор).Value_R1;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработкаЗначенийСвойств(Свойство)

&НаКлиенте
Процедура Рин1_Value_A_ПриИзмененииВместо(Элемент)
	
	Свойство = Элементы.СвойстваКласса.ТекущиеДанные.Свойство;
	
	Пометка               = Элементы.ЗначенияСвойства.ТекущиеДанные.Пометка;
	Значение              = Элементы.ЗначенияСвойства.ТекущиеДанные.Значение;
	ЗначениеПредставление = Элементы.ЗначенияСвойства.ТекущиеДанные.Представление;
	
	ИзменитьValue_A(Пометка, Свойство, Значение, ЗначениеПредставление);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьValue_A(Пометка, Свойство, Значение, ЗначениеПредставление)
	
	НаборЗначений = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.СоздатьНаборЗаписей();
	НаборЗначений.Отбор.Номенклатура.Установить(Объект.Ссылка);
	НаборЗначений.Отбор.Свойство.Установить(Свойство); 
	
	НаборЗначений.Прочитать();
	
	Если Пометка Тогда 
		
		Для каждого Строка Из ЗначенияСвойства Цикл
			
			Строка.Пометка = ложь;
			
		КонецЦикла;
		
		//управляем пометкой
		Отбор = Новый Структура;
		Отбор.Вставить("Значение",Значение);
		
		НайденнаяСтрока = ЗначенияСвойства.НайтиСтроки(Отбор);
		
		Если НайденнаяСтрока.Количество() > 0 Тогда
			НайденнаяСтрока[0].Пометка = Истина;
		КонецЕсли;		
		
		//создаем или корректируем НаборЗначений
		Если НаборЗначений.Количество() = 0 Тогда 
			
			НовЗнач = НаборЗначений.Добавить();
			НовЗнач.Номенклатура = Объект.Ссылка;
			НовЗнач.Свойство = Свойство;
			НовЗнач.ГруппаПредставление   = Свойство.Владелец.Родитель.ПредставлениеГруппыКласса;
			НовЗнач.КлассПредставление    = Свойство.Владелец.ПредставлениеГруппыКласса;
			НовЗнач.СвойствоПредставление = Свойство.ПредставлениеСвойства;
			НовЗнач.Value_A = ЗначениеПредставление;
			
		Иначе  
			
			НаборЗначений[0].Номенклатура = Объект.Ссылка;
			НаборЗначений[0].Свойство = Свойство;
			НаборЗначений[0].ГруппаПредставление   = Свойство.Владелец.Родитель.ПредставлениеГруппыКласса;
			НаборЗначений[0].КлассПредставление    = Свойство.Владелец.ПредставлениеГруппыКласса;
			НаборЗначений[0].СвойствоПредставление = Свойство.ПредставлениеСвойства;
			НаборЗначений[0].Value_A = ЗначениеПредставление;
			
		КонецЕсли;				
		
	Иначе 
		
		//удаляем запись если нет другой пометки
		Если НаборЗначений.Количество() > 0 Тогда
			
			НаборЗначений.Удалить(НаборЗначений[0]);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗначений.Записать();
	
	ОбновитьСводнуюТаблицу();
	
КонецПроцедуры  //ИзменитьValue_A(Пометка, Свойство, Значение, ЗначениеПредставление)

&НаКлиенте
Процедура Рин1_Value_N_ПриИзмененииВместо(Элемент)
	
	Свойство = Элементы.СвойстваКласса.ТекущиеДанные.Свойство;
	Значение = Value_N;
	ИзменитьValue_N(Свойство, Значение);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьValue_N(Свойство, Значение)
	
	НаборЗначений = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.СоздатьНаборЗаписей();
	НаборЗначений.Отбор.Номенклатура.Установить(Объект.Ссылка);
	НаборЗначений.Отбор.Свойство.Установить(Свойство); 
	
	НаборЗначений.Прочитать();
	
	//создаем или корректируем НаборЗначений
	Если НаборЗначений.Количество() = 0 Тогда 
		
		НовЗнач = НаборЗначений.Добавить();
		НовЗнач.Номенклатура = Объект.Ссылка;
		НовЗнач.Свойство = Свойство;
		НовЗнач.ГруппаПредставление   = Свойство.Владелец.Родитель.ПредставлениеГруппыКласса;
		НовЗнач.КлассПредставление    = Свойство.Владелец.ПредставлениеГруппыКласса;
		НовЗнач.СвойствоПредставление = Свойство.ПредставлениеСвойства;
		НовЗнач.Value_N = Значение;
		
	Иначе  
		
		НаборЗначений[0].Номенклатура = Объект.Ссылка;
		НаборЗначений[0].Свойство = Свойство;
		НаборЗначений[0].ГруппаПредставление   = Свойство.Владелец.Родитель.ПредставлениеГруппыКласса;
		НаборЗначений[0].КлассПредставление    = Свойство.Владелец.ПредставлениеГруппыКласса;
		НаборЗначений[0].СвойствоПредставление = Свойство.ПредставлениеСвойства;
		НаборЗначений[0].Value_N = Значение;
		
	КонецЕсли;	
	
	НаборЗначений.Записать();
	
	ОбновитьСводнуюТаблицу();
	
КонецПроцедуры //ИзменитьValue_N(Свойство, Значение)

&НаКлиенте
Процедура Рин1_Value_L_ПриИзмененииВместо(Элемент)
	
	Свойство = Элементы.СвойстваКласса.ТекущиеДанные.Свойство;
	Значение = Value_L;
	ИзменитьValue_L(Свойство, Значение);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьValue_L(Свойство, Значение)
	
	НаборЗначений = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.СоздатьНаборЗаписей();
	НаборЗначений.Отбор.Номенклатура.Установить(Объект.Ссылка);
	НаборЗначений.Отбор.Свойство.Установить(Свойство); 
	
	НаборЗначений.Прочитать();
	
	//создаем или корректируем НаборЗначений
	Если НаборЗначений.Количество() = 0 Тогда 
		
		НовЗнач = НаборЗначений.Добавить();
		НовЗнач.Номенклатура = Объект.Ссылка;
		НовЗнач.Свойство = Свойство;
		НовЗнач.ГруппаПредставление   = Свойство.Владелец.Родитель.ПредставлениеГруппыКласса;
		НовЗнач.КлассПредставление    = Свойство.Владелец.ПредставлениеГруппыКласса;
		НовЗнач.СвойствоПредставление = Свойство.ПредставлениеСвойства;
		НовЗнач.Value_L = Значение;
		
	Иначе  
		
		НаборЗначений[0].Номенклатура = Объект.Ссылка;
		НаборЗначений[0].Свойство = Свойство;
		НаборЗначений[0].ГруппаПредставление   = Свойство.Владелец.Родитель.ПредставлениеГруппыКласса;
		НаборЗначений[0].КлассПредставление    = Свойство.Владелец.ПредставлениеГруппыКласса;
		НаборЗначений[0].СвойствоПредставление = Свойство.ПредставлениеСвойства;
		НаборЗначений[0].Value_L = Значение;
		
	КонецЕсли;	
	
	НаборЗначений.Записать();
	
	ОбновитьСводнуюТаблицу();
	
КонецПроцедуры //ИзменитьValue_L(Свойство, Значение)

&НаКлиенте
Процедура Рин1_Value_R_ПриИзмененииВместо(Элемент)
	
	Если  Value_R1 < Value_R Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "В диапазоне значений, второе значение не может быть меньше первого. Запись отменена!";
		Сообщение.Поле = "Value_R1";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Свойство  = Элементы.СвойстваКласса.ТекущиеДанные.Свойство;
	Значение  = Value_R;
	Значение1 = Value_R1;
	ИзменитьValue_R(Свойство, Значение, Значение1);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьValue_R(Свойство, Значение, Значение1)
	
	НаборЗначений = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.СоздатьНаборЗаписей();
	НаборЗначений.Отбор.Номенклатура.Установить(Объект.Ссылка);
	НаборЗначений.Отбор.Свойство.Установить(Свойство); 
	
	НаборЗначений.Прочитать();
	
	//создаем или корректируем НаборЗначений
	Если НаборЗначений.Количество() = 0 Тогда 
		
		НовЗнач = НаборЗначений.Добавить();
		НовЗнач.Номенклатура = Объект.Ссылка;
		НовЗнач.Свойство = Свойство;
		НовЗнач.ГруппаПредставление   = Свойство.Владелец.Родитель.ПредставлениеГруппыКласса;
		НовЗнач.КлассПредставление    = Свойство.Владелец.ПредставлениеГруппыКласса;
		НовЗнач.СвойствоПредставление = Свойство.ПредставлениеСвойства;
		НовЗнач.Value_R  = Значение;
		НовЗнач.Value_R1 = Значение1;
		НовЗнач.Value_RZ = Строка(Значение) + "-" + Строка(Значение1);
		
	Иначе  
		
		НаборЗначений[0].Номенклатура = Объект.Ссылка;
		НаборЗначений[0].Свойство = Свойство;
		НаборЗначений[0].ГруппаПредставление   = Свойство.Владелец.Родитель.ПредставлениеГруппыКласса;
		НаборЗначений[0].КлассПредставление    = Свойство.Владелец.ПредставлениеГруппыКласса;
		НаборЗначений[0].СвойствоПредставление = Свойство.ПредставлениеСвойства;
		НаборЗначений[0].Value_R  = Значение;
		НаборЗначений[0].Value_R1 = Значение1;
		НаборЗначений[0].Value_RZ = Строка(Значение) + "-" + Строка(Значение1);
		
	КонецЕсли;	
	
	НаборЗначений.Записать();
	
	ОбновитьСводнуюТаблицу();
	
КонецПроцедуры  //ИзменитьValue_R(Свойство, Значение, Значение1)

#КонецОбласти

#Область ГИГ_

&НаСервере
Функция ВидыНоменклатурыИдентичныеПоНастройкамКонтроляУникальности(ВидНоменклатуры)
	
	ИдентичныеВидыНоменклатуры = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыДляКонтроля.ИмяРеквизита,
	|	РеквизитыДляКонтроля.ЭтоДопРеквизит,
	|	РеквизитыДляКонтроля.Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроля
	|ГДЕ
	|	РеквизитыДляКонтроля.Ссылка = &ВидНоменклатуры
	|	И РеквизитыДляКонтроля.Уникален
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыДляКонтроля.Ссылка КАК ВидНоменклатуры,
	|	РеквизитыДляКонтроля.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыДляКонтроля.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	РеквизитыДляКонтроля.Свойство КАК Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроля
	|ГДЕ
	|	РеквизитыДляКонтроля.Ссылка.ТипНоменклатуры = &ТипНоменклатуры
	|	И РеквизитыДляКонтроля.Уникален
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНоменклатуры,
	|	ИмяРеквизита,
	|	ЭтоДопРеквизит,
	|	Свойство
	|ИТОГИ ПО
	|	ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Объект.ТипНоменклатуры);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитовТекВидаНоменклатуры = РезультатыЗапроса[0].Выгрузить();
	КолРеквизитовДляКонтроля = ТаблицаРеквизитовТекВидаНоменклатуры.Количество();
	
	РеквизитыВидовНоменклатуры   = РезультатыЗапроса[1];
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит, Свойство");
	
	ВыборкаПоВиду = РеквизитыВидовНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВиду.Следующий() Цикл
		
		СоответствуетУсловиям = Истина;
		
		ВыборкаПоРеквизитам = ВыборкаПоВиду.Выбрать();
		КолРеквизитовВида = ВыборкаПоРеквизитам.Количество();
		
		Если КолРеквизитовВида = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если КолРеквизитовВида <> КолРеквизитовДляКонтроля Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоРеквизитам.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРеквизитам);
			
			Если ТаблицаРеквизитовТекВидаНоменклатуры.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СоответствуетУсловиям = Ложь;
			КонецЕсли;
			
			Если Не СоответствуетУсловиям Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не СоответствуетУсловиям Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентичныеВидыНоменклатуры.Добавить(ВыборкаПоВиду.ВидНоменклатуры);
		
	КонецЦикла;
	
	Возврат ИдентичныеВидыНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ГИГ_ДобавитьНовыеЭлементыНаСервере()
	///<-- Гигабайт (Чернов А.С.): КратностьПартии
	Элемент = Элементы.Добавить("ГруппаКратностьПартии", Тип("ГруппаФормы"), Элементы.СворачиваемаяГруппаЕдиницыИзмерения);
	Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Элемент.Отображение = ОтображениеОбычнойГруппы.Нет;
	Элемент.ОтображатьЗаголовок = Ложь;
	Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	Элемент = Элементы.Добавить("ГИГ_ИспользоватьКратностьПартии", Тип("ПолеФормы"), Элементы.ГруппаКратностьПартии); 
	Элемент.Вид = ВидПоляФормы.ПолеФлажка;
	Элемент.ПутьКДанным = "Объект.ГИГ_ИспользоватьКратностьПартии"; 
	Элемент.Заголовок = "Кратность упаковки:";
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
	Элемент = Элементы.Добавить("ГИГ_КратностьПартии", Тип("ПолеФормы"), Элементы.ГруппаКратностьПартии); 
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГИГ_КратностьПартии"; 
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	Элемент = Элементы.Добавить("ГИГ_ЕдиницаКратности", Тип("ПолеФормы"), Элементы.ГруппаКратностьПартии); 
	Элемент.Вид = ВидПоляФормы.ПолеНадписи;
	Элемент.ПутьКДанным = "Объект.ЕдиницаИзмерения"; 
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	///--> Гигабайт (Чернов А.С.)
	
	// + [Rineco], [Киселев А.Н.] [27.10.2021] 
	// Задача: [№ 17389], [#редактируем заголовок]
	Элементы.Производитель.Заголовок = "Производитель";
	// - [Rineco], [Киселев А.Н.] [27.10.2021]
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьЭлементаПоРеквизитам()
	
	СтрокиУникальных = ТаблицаНастроекРеквизитов.НайтиСтроки(Новый Структура("Уникален", Истина));
	
	Если СтрокиУникальных.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиУникальных Цикл
				
		ЕстьУникальные = Истина;
		
		Если СтрокаТаблицы.ЭтоДопРеквизит Тогда
			
			СтрокаТаблицы.Значение = ЭтаФорма[СтрокаТаблицы.ПутьКДанным];
			
		Иначе
			
			Если СтрокаТаблицы.ИмяРеквизита = "ВидНоменклатуры" Тогда
				СтрокаТаблицы.Значение = Объект.ВидНоменклатуры;
			Иначе
				СтрокаТаблицы.Значение = Объект[СтрокаТаблицы.ПутьКДанным];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРеквизитов = ТаблицаНастроекРеквизитов.Выгрузить(СтрокиУникальных);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	
	ИмяТаблицы = "ТаблицаНоменклатура";
	
	ТекстОсновногоЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	" + ИмяТаблицы + ".Ссылка КАК Номенклатура,
	|	Истина КАК НайденоПоДопРеквизитам
	|ИЗ
	|	Справочник.Номенклатура КАК " + ИмяТаблицы;
	
	ТекстУсловия = "
	|ГДЕ
	|	(Не " + ИмяТаблицы + ".ЭтоГруппа)";
	
	// Генерируем текст условия запроса по реквизитам номенклатуры.
	МассивСтрокРеквизитов = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Ложь));
	
	Для Каждого СтрокаУсловия Из МассивСтрокРеквизитов Цикл
		
		Если СтрокаУсловия.ИмяРеквизита = "ВидНоменклатуры" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстУсловия = ТекстУсловия +
		"
		|  И " + ИмяТаблицы + "." + СтрокаУсловия.ИмяРеквизита + " = &" + СтрокаУсловия.ПутьКДанным;
		
		Запрос.УстановитьПараметр(СтрокаУсловия.ПутьКДанным, СтрокаУсловия.Значение);
		
	КонецЦикла;
	
	// Добавить условие по видам номенклатуры с идентичными настройками контроля уникальности.
	ВидыИдентичныеПоНастройкам = ВидыНоменклатурыИдентичныеПоНастройкамКонтроляУникальности(Объект.ВидНоменклатуры);
	ТекстУсловия = ТекстУсловия +
	"
	|  И " + ИмяТаблицы + ".ВидНоменклатуры В (&ВидыНоменклатуры)";
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыИдентичныеПоНастройкам);
	
	// Генерируем текст условия запроса по дополнительным реквизитам.
	ТекстЗапроса = ТекстОсновногоЗапроса;
	СчетчикУсловий = 1;
	
	МассивСтрокДопРеквизитов = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Истина));
	Для Каждого СтрокаУсловияДопРеквизита Из МассивСтрокДопРеквизитов Цикл
		
		ИмяТаблицыСУсловием = ИмяТаблицы + "СУсловиемПоДопРеквизиту_" + СчетчикУсловий;
		
		ТекстУсловия = ТекстУсловия +
		"
		|  И " + ИмяТаблицыСУсловием + ".Свойство = &Свойство_" + СтрокаУсловияДопРеквизита.ПутьКДанным + 
		"
		|  И " + ИмяТаблицыСУсловием + ".Значение = &Значение_" + СтрокаУсловияДопРеквизита.ПутьКДанным;
		
		Запрос.УстановитьПараметр("Свойство_" + СтрокаУсловияДопРеквизита.ПутьКДанным, СтрокаУсловияДопРеквизита.Свойство);
		Запрос.УстановитьПараметр("Значение_" + СтрокаУсловияДопРеквизита.ПутьКДанным, СтрокаУсловияДопРеквизита.Значение);
		
		ТекстСоединения = "
		| ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК " + ИмяТаблицыСУсловием + "
		| ПО " + ИмяТаблицы + ".Ссылка = " + ИмяТаблицыСУсловием + ".Ссылка";
		
		ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ТекстСоединения;
		СчетчикУсловий = СчетчикУсловий + 1;
		
	КонецЦикла;
	
	Запрос.Текст = ТекстОсновногоЗапроса + ТекстУсловия;
	
	ТаблицаНайдено.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти


