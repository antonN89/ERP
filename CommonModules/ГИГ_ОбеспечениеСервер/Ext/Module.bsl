Процедура РазложитьПоВариантамОбеспечения(Приемник, Источник, ЗапонятьКоэффициентУпаковки = Ложь)
	
	Если ЗапонятьКоэффициентУпаковки Тогда
		КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(Источник);
	КонецЕсли;
	
	ИменаСвойств = Новый Соответствие();
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно, "ОтгрузитьОбособленно");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.Обособленно,          "Обособленно");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.Отгрузить,            "Отгрузить");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.СоСклада,             "Резервировать");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.ИзЗаказов,            "РезервироватьКСроку");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.Требуется,            "Обеспечить");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.НеТребуется,          "НеОбеспечивать");
	ИменаСвойств.Вставить(Перечисления.ВариантыОбеспечения.ПустаяСсылка(),       "НеОбеспечивать");
	
	Для Каждого Строка Из Источник Цикл
		
		Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			Таблица = Приемник.Услуги.ВсеВариантыОбеспечения;
			
		ИначеЕсли Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			
			Таблица = Приемник.Работы[ИменаСвойств.Получить(Строка.ВариантОбеспечения)];
			
		ИначеЕсли Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			
			КлючТаблицы = ИменаСвойств.Получить(Строка.ВариантОбеспечения);
			
			// Вариант обеспечения отсутствует для поступления товаров
			КлючТаблицы = ?(КлючТаблицы = Неопределено, "Отгрузить", КлючТаблицы);
			
			Таблица = Приемник.Товары[КлючТаблицы];
			
		Иначе
			
			Таблица = Приемник.Тара[ИменаСвойств.Получить(Строка.ВариантОбеспечения)];
			
		КонецЕсли;
		
		СтрокаПриемника = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, Строка);
		
		СтрокаПриемника.КоэффициентУпаковки = 0;
		
		Если ЗапонятьКоэффициентУпаковки Тогда
			Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
				СтрокаПриемника.КоэффициентУпаковки = КоэффициентыУпаковок[Строка.Номенклатура][Строка.Упаковка];
			Иначе
				СтрокаПриемника.КоэффициентУпаковки = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКорректировки(Корректировка, Количество, Реквизиты)

	Работа = Реквизиты.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа;
	Товар  = Реквизиты.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	Тара   = Реквизиты.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

	Обособленно = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
	СоСклада    = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Отгрузить   = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	ОтгрузитьОбособленно = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ИзЗаказов   = Реквизиты.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов;
	Пустой      = Реквизиты.ВариантОбеспечения.Пустая();

	Если Работа Тогда

		//Обеспечение заказов работами.
		Если Обособленно Или ОтгрузитьОбособленно Тогда

			НоваяСтрока = Корректировка.ОбеспечениеЗаказовРаботами.Добавить();

			НоваяСтрока.Период = Реквизиты.ДатаОтгрузкиРабот;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты, "Назначение, Подразделение, Номенклатура, Характеристика");

			НоваяСтрока.КОбеспечению = Количество;

		КонецЕсли;

	ИначеЕсли Товар Или Тара Тогда

		//Товары к отгрузке.
		Если СоСклада Или Отгрузить Или ОтгрузитьОбособленно Тогда

			НоваяСтрока = Корректировка.ТоварыКОтгрузке.Добавить();

			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты, "Склад, Номенклатура, Характеристика, Серия");

			Если СоСклада Тогда
				НоваяСтрока.ВРезерве = Количество;
			Иначе
				НоваяСтрока.КОтгрузке = Количество;
			КонецЕсли;

			Если ОтгрузитьОбособленно Тогда
				НоваяСтрока.Назначение = Реквизиты.Назначение;
			КонецЕсли;

		КонецЕсли;

		//График движения товаров.
		Если ИзЗаказов Или Пустой Тогда

			НоваяСтрока = Корректировка.ГрафикПоступленияТоваров.Добавить();

			НоваяСтрока.ДатаСобытия = Реквизиты.ДатаОтгрузки;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты, "Склад, Номенклатура, Характеристика");

			Если ИзЗаказов Или Пустой Тогда

				НоваяСтрока.КоличествоИзЗаказов = - Количество;

			ИначеЕсли Обособленно Тогда

				НоваяСтрока.Назначение = Реквизиты.Назначение;
				НоваяСтрока.КоличествоПодЗаказ  = - Количество;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьВКорректировку(Корректировка, Таблица)

	Для Каждого СтрокаТовары Из Таблица Цикл

		ДобавитьСтрокуКорректировки(Корректировка, СтрокаТовары.Количество, СтрокаТовары);

	КонецЦикла;

КонецПроцедуры

Функция ОтборТоварыКОтгрузке(ТаблицаВыделенныеСтроки)
	
	ОтборТоварыКОтгрузке = ТаблицаВыделенныеСтроки.СкопироватьКолонки("Номенклатура,Характеристика,Склад,Назначение,Серия,Ссылка");
	ВариантОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Для Каждого СтрокаТаблицы Из ТаблицаВыделенныеСтроки Цикл
		НоваяСтрока = ОтборТоварыКОтгрузке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если СтрокаТаблицы.ВариантОбеспечения <> ВариантОтгрузитьОбособленно Тогда
			НоваяСтрока.Назначение = ПустоеНазначение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборТоварыКОтгрузке;
	
КонецФункции

Функция ТаблицыОформлено(Таблица, ОформитьПоНакладным, ОформитьПоОрдерам)

	ОформитьПоОрдерам.Колонки.Добавить("Списано",  ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	ОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	Отгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();

	НоваяТаблица = Новый ТаблицаЗначений();
	НоваяТаблица.Колонки.Добавить("НомерСтроки",     ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0));
	НоваяТаблица.Колонки.Добавить("Номенклатура",    Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	НоваяТаблица.Колонки.Добавить("Характеристика",  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	НоваяТаблица.Колонки.Добавить("Склад",           Новый ОписаниеТипов("СправочникСсылка.Склады"));
	НоваяТаблица.Колонки.Добавить("Назначение",      Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	НоваяТаблица.Колонки.Добавить("Серия",           Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	НоваяТаблица.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));

	НоваяТаблица.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	НоваяТаблица.Колонки.Добавить("ДатаОтгрузки",       ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	НоваяТаблица.Колонки.Добавить("ДатаОтгрузкиРабот",  ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	НоваяТаблица.Колонки.Добавить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	НоваяТаблица.Колонки.Добавить("Количество",         ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	НоваяТаблица.Колонки.Добавить("КоличествоВЗаказе", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	НоваяТаблица.Колонки.Добавить("КодСтроки",         ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0));
	
	ПоНакладным = НоваяТаблица;
	ПоОрдерам   = НоваяТаблица.СкопироватьКолонки();
	
	ОтборПоНакладным = Новый Структура("КодСтроки");
	ОтборПоОрдерам = Новый Структура("Номенклатура, Характеристика, Склад, Назначение, Серия");
	Для каждого СтрокаТовары Из Таблица Цикл

		
		//Оформленное по накладным.
		ОтборПоНакладным.КодСтроки = СтрокаТовары.КодСтроки;
		НайденныеСтроки = ОформитьПоНакладным.НайтиСтроки(ОтборПоНакладным);
		Если НайденныеСтроки.Количество() > 0 Тогда

			Количество = НайденныеСтроки[0].Количество;
			
			ЭтоСтрокаКОформлению = СтрокаТовары.Отменено <> Истина
									И (СтрокаТовары.ВариантОбеспечения = Отгрузить Или СтрокаТовары.ВариантОбеспечения = ОтгрузитьОбособленно);
			
			АналитикаСовпадает = СтрокаТовары.Номенклатура = НайденныеСтроки[0].Номенклатура
			                     И СтрокаТовары.Характеристика = НайденныеСтроки[0].Характеристика
			                     И СтрокаТовары.Склад = НайденныеСтроки[0].Склад
			                     И СтрокаТовары.Серия = НайденныеСтроки[0].Серия;
			
			КоличествоПоДокументу = ?(ЭтоСтрокаКОформлению И АналитикаСовпадает, СтрокаТовары.Количество, 0);
			
			НоваяСтрока = ПоНакладным.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.КоличествоВЗаказе = СтрокаТовары.Количество;
			
		КонецЕсли;
		
	КонецЦикла;

	//Списание оформленного по накладным.
	Для каждого СтрокаТовары Из ПоНакладным Цикл

		ЗаполнитьЗначенияСвойств(ОтборПоОрдерам, СтрокаТовары);
		Если СтрокаТовары.ВариантОбеспечения <> ОтгрузитьОбособленно Тогда
			ОтборПоОрдерам.Назначение = ПустоеНазначение;
		КонецЕсли;

		НайденныеСтроки = ОформитьПоОрдерам.НайтиСтроки(ОтборПоОрдерам);
		Если НайденныеСтроки.Количество() > 0 Тогда

			НайденныеСтроки[0].Списано = НайденныеСтроки[0].Списано + СтрокаТовары.Количество;

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТовары Из ОформитьПоОрдерам Цикл

		Если СтрокаТовары.Количество > СтрокаТовары.Списано Тогда //Несписанные по накладным остатки.

			НоваяСтрока = ПоОрдерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);

			НоваяСтрока.ВариантОбеспечения = ?(СтрокаТовары.Назначение <> ПустоеНазначение, ОтгрузитьОбособленно, Отгрузить);
			НоваяСтрока.Количество = СтрокаТовары.Количество - СтрокаТовары.Списано;

		КонецЕсли;

	КонецЦикла;
	
	// Если по накладным в строке отгружено меньше чем заказе, необходимо переместить в данные по накладным количество из ордеров.
	// Пример:
	// В заказе 10 штук
	// ПоНакладным 5 штук
	// ПоОрдерам 4 штуки
	// Перемещаем 4 штуки в таблицу ПоНакладным. В итоге ПоНакладным 9 штук, ПоОрдерам 0 штук.
	// Данное перемещение позволяет привязать остатки полученные из таблицы ПоОрдерам к кодам строк.
	
	Для каждого СтрокаТовары Из ПоНакладным Цикл
		
		Если СтрокаТовары.КоличествоВЗаказе > СтрокаТовары.Количество Тогда
			ЗаполнитьЗначенияСвойств(ОтборПоОрдерам, СтрокаТовары);
			НайденныеСтроки = ПоОрдерам.НайтиСтроки(ОтборПоОрдерам);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОтборПоОрдерамБезСерий = Новый Структура("Номенклатура, Характеристика, Склад, Назначение");
				ЗаполнитьЗначенияСвойств(ОтборПоОрдерамБезСерий, СтрокаТовары);
				НайденныеСтроки = ПоОрдерам.НайтиСтроки(ОтборПоОрдерамБезСерий);
			КонецЕсли;
			
			Для каждого СтрокаОрдера Из НайденныеСтроки Цикл
				
				ОсталосьСписать = СтрокаТовары.КоличествоВЗаказе - СтрокаТовары.Количество;
				ДляСписания = ?(ОсталосьСписать > СтрокаОрдера.Количество, СтрокаОрдера.Количество, ОсталосьСписать);
				СтрокаТовары.Количество = СтрокаТовары.Количество + ДляСписания;
				СтрокаОрдера.Количество = СтрокаОрдера.Количество - ДляСписания;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	Ссылки = Новый Массив();
	Единицы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ссылки, "ЕдиницаИзмерения");

	Результат = Новый Структура("ПоНакладным, ПоОрдерам", ПоНакладным, ПоОрдерам);
	Возврат Результат;

КонецФункции

Процедура ДобавитьВКорректировкуУчестьПриИнвентаризации(Корректировка, Таблица, ТаблицаОформлено)
	
	Если Не ТаблицаОформлено.Колонки.Найти("КоличествоКорректировка") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("КодСтроки");
	Для Каждого СтрокаТовары Из Таблица Цикл
		
		Если СтрокаТовары.КодСтроки > 0 Тогда
			
			Отбор.КодСтроки = СтрокаТовары.КодСтроки;
			НайденныеСтроки = ТаблицаОформлено.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				КоличествоИзменение = НайденныеСтроки[0].Количество + НайденныеСтроки[0].КоличествоКорректировка
					- СтрокаТовары.Количество;
				Количество = 0;
				Если КоличествоИзменение > 0 Тогда
					Количество = Мин(НайденныеСтроки[0].КоличествоКорректировка, КоличествоИзменение);
				КонецЕсли;
				Если Количество > 0 Тогда
					ДобавитьСтрокуКорректировки(Корректировка, Количество, СтрокаТовары);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураОтбораОстатков()

	Отбор = Новый Структура();
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеКлиентСервер.КлючиПотребностей("Товар"));
	Отбор.Вставить("Товары", Таблица);
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеКлиентСервер.КлючиПотребностей("Работа"));
	Отбор.Вставить("Работы", Таблица);
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеКлиентСервер.КлючиПотребностей("ТоварОбособленный"));
	Отбор.Вставить("ТоварыОбособленные", Таблица);

	Возврат Отбор;

КонецФункции

Процедура ДобавитьАналитики(Приемник, Источник, МассивСкладов = Неопределено)

	Для Каждого Строка Из Источник Цикл

		ДобавитьАналитику(Приемник, Строка, МассивСкладов);

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьАналитику(Приемник, ДанныеЗаполнения, МассивСкладов = Неопределено)

	Если ДанныеЗаполнения.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда

		//Необходимо получать остатки обеспечения работой для данного подразделения.
		НоваяСтрока = Приемник.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);

	ИначеЕсли МассивСкладов = Неопределено Тогда

		//Необходимо получать остатки обеспечения обособленным товаром/тарой для данного склада.
		НоваяСтрока = Приемник.ТоварыОбособленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);

		//Необходимо получать остатки обеспечения для выбранной позиции номенклатуры для данного склада.
		НоваяСтрока = Приемник.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);

	Иначе

		//Аналитики по всем складам.
		Для Каждого Склад Из МассивСкладов Цикл

			НоваяСтрока = Приемник.ТоварыОбособленные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
			НоваяСтрока.Склад = Склад;

			НоваяСтрока = Приемник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
			НоваяСтрока.Склад = Склад;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьПриращенияКоличестваВТаблице(Таблица, КлючСтроки)

	МаксИндекс = Таблица.Количество() - 1;
	Индекс = МаксИндекс;
	ЕстьЗаписи = Индекс >= 0;

	Пока ЕстьЗаписи Цикл

		Строка = Таблица[Индекс];
		ЗаполнитьЗначенияСвойств(КлючСтроки, Строка);

		ИзмениласьЗапись = Ложь;

		НарастающийИтог = 0;
		// Цикл по сочетанию номенклатура\характеристика\склад.
		Пока Не ИзмениласьЗапись Цикл

			Строка = Таблица[Индекс];
			Строка.Количество = Строка.Количество - НарастающийИтог;
			НарастающийИтог = НарастающийИтог + Строка.Количество;

			// Переход к предыдущей записи.
			Индекс = Индекс - 1;
			ЕстьЗаписи = Индекс >= 0;

			ИзмениласьЗапись = Не ЕстьЗаписи Или ОбеспечениеКлиентСервер.ИзменилсяКлюч(КлючСтроки, Таблица[Индекс]);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьПриращенияДоступныхОстатков(ДоступныеОстатки)

	СтруктураКлюча = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаСклад();
	РассчитатьПриращенияКоличестваВТаблице(ДоступныеОстатки.Товары, СтруктураКлюча);

	СтруктураКлюча = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаСкладНазначение();
	РассчитатьПриращенияКоличестваВТаблице(ДоступныеОстатки.ТоварыОбособленные, СтруктураКлюча);

	СтруктураКлюча = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаПодразделениеНазначение();
	РассчитатьПриращенияКоличестваВТаблице(ДоступныеОстатки.Работы, СтруктураКлюча);

КонецПроцедуры

Функция РезервыИзЗаказов(ТаблицаВыделенныеСтроки,
		                      ОформитьПоНакладным,
		                      ТаблицаНевыделенныеСтроки,
		                      Ссылка,
		                      ГруппаСкладов,
		                      ТаблицаДляПроведения,
		                      ПараметрыЗаполнения)
	
	ПереченьВариантов = Новый Массив;
	ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.ИзЗаказов);
	
	ЗначенияПараметровЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", ПереченьВариантов, Истина, Ложь);
	
	//Группировка потребностей по вариантам обеспечения (строки с одинаковой логикой обеспечения).
	Потребности = ОбеспечениеСервер.ТаблицыПотребностейПоВариантамОбеспечения();
	РазложитьПоВариантамОбеспечения(Потребности, ТаблицаВыделенныеСтроки, ЗначенияПараметровЗаполнения.ЗаполнятьЦелымиУпаковками);
	
	//Группировка невыделенных строк (строки-конкуренты для списания доступных остатков) по вариантам обеспечения.
	НевыделенныеСтроки = ОбеспечениеСервер.ТаблицыПотребностейПоВариантамОбеспечения();
	РазложитьПоВариантамОбеспечения(НевыделенныеСтроки, ТаблицаНевыделенныеСтроки);
	
	//Таблица Корректировок регистров обеспечения, для имитации проведения редактируемого документа.
	Корректировка = ОбеспечениеСервер.СтруктураКорректировкиОбеспечения();
	
	// Дополнительные сторно записи, если необходимы.
	Если ТаблицаДляПроведения <> Неопределено Тогда
		ДобавитьВКорректировку(Корректировка, ТаблицаДляПроведения);
	КонецЕсли;
	
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.Отгрузить);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.Резервировать);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.РезервироватьКСроку);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Товары.ОтгрузитьОбособленно);
	
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.Отгрузить);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.Резервировать);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.РезервироватьКСроку);
	ДобавитьВКорректировку(Корректировка, НевыделенныеСтроки.Тара.ОтгрузитьОбособленно);
	
	//Количество, которое считается отгруженным для обрабатываемых строк.
	ОтборТоварыКОтгрузке = ОтборТоварыКОтгрузке(ТаблицаВыделенныеСтроки);
	ОформитьПоОрдерам = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(ОтборТоварыКОтгрузке, Корректировка.ТоварыКОтгрузке);
	
	ТаблицыОформлено = ТаблицыОформлено(ТаблицаВыделенныеСтроки, ОформитьПоНакладным, ОформитьПоОрдерам);
	
	ДобавитьВКорректировку(Корректировка, ТаблицыОформлено.ПоНакладным);
	ДобавитьВКорректировкуУчестьПриИнвентаризации(
		Корректировка, НевыделенныеСтроки.Товары.ОтгрузитьОбособленно, ТаблицыОформлено.ПоНакладным);
	ДобавитьВКорректировку(Корректировка, ТаблицыОформлено.ПоОрдерам);
	
	//Сторно движений документа.
	ОбеспечениеСервер.СторноДвиженийДокумента(Корректировка, Новый Структура("Ссылка", Ссылка),);
	
	//Получение структуры доступных остатков и плановых поставок товаров и работ с учетом корректировок.
	Отбор = СтруктураОтбораОстатков();
	МассивСкладов = ОбеспечениеСервер.СкладыГруппы(ГруппаСкладов);
	ДобавитьАналитики(Отбор, ТаблицаВыделенныеСтроки, МассивСкладов);
	
	ДоступныеОстатки = ОбеспечениеСервер.ДоступныеОстатки(Отбор, Корректировка);
	РассчитатьПриращенияДоступныхОстатков(ДоступныеОстатки);
	
	Возврат ДоступныеОстатки;
	
КонецФункции

Процедура ПрименитьПараметрыДокумента(Параметры, СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения)
	
	СтатусКВыполнению    = Истина;
	ГруппаСкладов        = Неопределено;
	МенеджерРегистра     = Неопределено;
	ТаблицаДляПроведения = Неопределено;
	
	Если Параметры <> Неопределено Тогда

		Если Параметры.Свойство("СтатусКВыполнению") Тогда
			СтатусКВыполнению = Параметры.СтатусКВыполнению;
		КонецЕсли;

		Если Параметры.Свойство("ГруппаСкладов") Тогда
			ГруппаСкладов = Параметры.ГруппаСкладов;
		КонецЕсли;

		Если Параметры.Свойство("МенеджерРегистра") Тогда
			МенеджерРегистра = Параметры.МенеджерРегистра;
		КонецЕсли;

		Если Параметры.Свойство("ТаблицаДляПроведения") Тогда
			ТаблицаДляПроведения = Параметры.ТаблицаДляПроведения;
		КонецЕсли;

		Если Параметры.Свойство("ИмяМенеджераРегистра") Тогда
			МенеджерРегистра = РегистрыНакопления[Параметры.ИмяМенеджераРегистра];
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция СоздатьХранилищеЗаполнитьИзОбъекта(Объект, ПутиКДанным)
	
	Пути = ОбеспечениеСервер.ПутиКДаннымПоУмолчанию();
	Хранилище = Новый Структура(Пути);
	
	Для Каждого Свойство Из ПутиКДанным Цикл
		Хранилище.Вставить(Свойство.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Хранилище, Объект);
	
//++ НЕ УТ
	// В заказе переработчику нет поля, хранящего назначение для обособленных материалов под заказ на производство.
	// Необходимо получить назначение по правилам заказа на производство.
	Данные = ПутиКДанным.Получить("Данные");
	Если Данные <> Неопределено Тогда
		Для Каждого Свойство Из Данные Цикл
			Хранилище.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЦикла;
	КонецЕсли;
//-- НЕ УТ
	
	Хранилище.Вставить("НазначениеШапки", Хранилище.Назначение);
	Возврат Хранилище;
	
КонецФункции

Функция ВыделенныеСтрокиВТаблицу(ТаблицаТовары, ВыделенныеСтроки, Объект, ПутиКДанным)
	
	Хранилище = СоздатьХранилищеЗаполнитьИзОбъекта(Объект, ПутиКДанным);
	Хранилище.Вставить("Упаковка");
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеСервер.ПутиКДаннымПоУмолчанию());
	Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаТовары = ТаблицаТовары.НайтиПоИдентификатору(Идентификатор);
		ЗаполнитьЗначенияСвойств(Хранилище, СтрокаТовары);
		
		Если Хранилище.Отменено = Истина Или Хранилище.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		ОбеспечениеКлиентСервер.ЗаполнитьЗначенияСвойствСРазличиемИмен(НоваяСтрока, Хранилище, ПутиКДанным);
		
		НоваяСтрока.Идентификатор = СтрокаТовары.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаЗаполнениеОбеспечения(ИдентификаторыСтрок, Объект, ТабЧасть, ПараметрыЗаполнения, ПараметрыДокумента = Неопределено) Экспорт
	
	Перем СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения, ДробитьУпаковки;
	ПрименитьПараметрыДокумента(ПараметрыДокумента, СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра, ТаблицаДляПроведения);
	
	//Таблица выделенных строк табличной части.
	ТаблицаВыделенныеСтроки = ВыделенныеСтрокиВТаблицу(ТабЧасть, ИдентификаторыСтрок, Объект, ПараметрыДокумента.ПутиКДанным);
	
	ОтборОформлено = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(
		Новый Структура(
			"Ссылка, КодСтроки",
			ОбеспечениеКлиентСервер.ОписаниеТиповЗаказыКОбеспечению(), ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0)));
	
	Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = ТабЧасть.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = 0;
		ЗаполнитьЗначенияСвойств(ОтборОформлено.Добавить(), ВыделеннаяСтрока);
	КонецЦикла;
	
	ОформитьПоНакладным = МенеджерРегистра.ТаблицаОформлено(ОтборОформлено);
	
	//Таблица невыделенных строк табличной части.
	ТаблицаНевыделенныеСтроки = Новый ТаблицаЗначений; //СтрокиВТаблицу(ТабЧасть, Объект, ПараметрыДокумента.ПутиКДанным);
	
	Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = ТабЧасть.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = ВыделеннаяСтрока.Количество;
	КонецЦикла;
	
	Результат = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияУниверсальный(
		ТаблицаВыделенныеСтроки,
		ОформитьПоНакладным,
		ТаблицаНевыделенныеСтроки,
		Объект.Ссылка,
		ГруппаСкладов,
		ТаблицаДляПроведения,
		ПараметрыЗаполнения);
	
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Для каждого Строка Из Результат Цикл
		ЗаполнитьЗначенияСвойств(Строка, ТабЧасть.НайтиПоИдентификатору(Строка.Идентификатор), "Номенклатура, Характеристика");
	КонецЦикла; 	
	
	Результат.Колонки.Удалить("Идентификатор");
	Результат.Колонки.Удалить("Приоритет");
	Результат.Колонки.Удалить("ПриоритетТипаОбеспечения");
	Результат.Колонки.Удалить("СкладНаименование");
	
	РезервыИзЗаказов = РезервыИзЗаказов(
		ТаблицаВыделенныеСтроки,
		ОформитьПоНакладным,
		ТаблицаНевыделенныеСтроки,
		Объект.Ссылка,
		ГруппаСкладов,
		ТаблицаДляПроведения,
		ПараметрыЗаполнения);
		
	Для каждого ТекСтрока Из РезервыИзЗаказов.Товары Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаДоступности) Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ДатаОтгрузки       = ТекСтрока.ДатаДоступности;
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов;
		
	КонецЦикла;
	
	//++Гольм А.А. (Гигабайт) 23.04.2019 17:26:13
	// добавим обособденное обеспечение
	Результат.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Для каждого ТекСтрока Из РезервыИзЗаказов.ТоварыОбособленные Цикл		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ДатаОтгрузки       = ТекСтрока.ДатаДоступности;
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
	КонецЦикла;
	//--Гольм А.А. (Гигабайт) 23.04.2019 17:31:36
		
	Возврат Результат;
	
КонецФункции

//ИсходноеПроцедура ДополнитьОбеспечение(Таблица, Параметры) Экспорт //<++ Гигабайт Казаков М.В.
//20200922 ГлазуновДВ
Процедура ДополнитьОбеспечение(Таблица, Параметры, ТаблицаКРаспределению = Неопределено) Экспорт 
		
	СкладыДляОпределенияСхем = Новый Массив;
	СкладыДляОпределенияСхем.Добавить(Параметры.Склад);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ; 
	
	//bercut160120 по тз удаляем из таблицы схемы с реквизитом в истине
	ТаблицаДоступныхСхемОбеспечения = ГИГ_МодульСервер.ГИГ_ПолучитьТаблицуДоступныхСхемОбеспечения(СкладыДляОпределенияСхем);
	ТаблицаСхем = ТаблицаДоступныхСхемОбеспечения.СкопироватьКолонки();
	Для каждого Строка Из ТаблицаДоступныхСхемОбеспечения Цикл
		Если не Строка.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСхем.Добавить(),Строка);
		КонецЕсли;
	КонецЦикла;
	//bercut060320
	ДополнительныеДанные = Новый Структура;
	//
	
	Запрос.УстановитьПараметр("Табл",	Таблица);
	Запрос.УстановитьПараметр("Склад",	Параметры.Склад);
	Запрос.УстановитьПараметр("Товары",	Параметры.СтрокиТовары);
	Запрос.УстановитьПараметр("ТаблицаСхем",ТаблицаСхем);
	Запрос.УстановитьПараметр("ДатаЗаказа",	?(Параметры.Дата < ТекущаяДата(),ТекущаяДата(),Параметры.Дата));
	
	#Область ТекстЗапроса
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИсходныйНомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Табл.Идентификатор КАК Идентификатор,
	|	Табл.Склад КАК Склад,
	|	Табл.ВариантОбеспечения КАК ВариантОбеспечения,
	|	Табл.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Табл.Количество КАК Количество,
	|	Табл.Отгружено КАК Отгружено,
	|	Табл.Приоритет КАК Приоритет,
	|	Табл.ПриоритетТипаОбеспечения КАК ПриоритетТипаОбеспечения,
	|	Табл.СкладНаименование КАК СкладНаименование
	|ПОМЕСТИТЬ ВТТаблицаОбеспечения
	|ИЗ
	|	&Табл КАК Табл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСхем.Склад КАК Склад,
	|	ТаблицаСхем.СкладИсточник КАК СкладИсточник,
	|	ТаблицаСхем.СхемаОбеспечения КАК СхемаОбеспечения,
	|	ТаблицаСхем.СрокОбеспеченияМин КАК СрокОбеспеченияМин,
	|	ТаблицаСхем.СрокОбеспеченияМакс КАК СрокОбеспеченияМакс
	|ПОМЕСТИТЬ ВТдоступныеСхемы
	|ИЗ
	|	&ТаблицаСхем КАК ТаблицаСхем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСкладыДляПеремещения
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТдоступныеСхемы КАК ВТдоступныеСхемы
	|		ПО Склады.Ссылка = ВТдоступныеСхемы.СкладИсточник
	|			И (ВТдоступныеСхемы.Склад = &Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.ВНаличииОстаток КАК ВНаличии,
	|	Т.ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада,
	|	Т.ВРезервеПодЗаказОстаток КАК ВРезервеПодЗаказ
	|ПОМЕСТИТЬ ВтСвободныеОстатки
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Склад В
	|					(ВЫБРАТЬ
	|						ВТСкладыДляПеремещения.Ссылка
	|					ИЗ
	|						ВТСкладыДляПеремещения)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТТовары.Номенклатура
	|					ИЗ
	|						ВТТовары)) КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	СУММА(Т.Свободно) КАК Свободно,
	|	&ДатаЗаказа КАК ДатаДоступности,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТДоступныеДляПеремещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Склад КАК Склад,
	|		Т.ВНаличии - Т.ВРезервеСоСклада - Т.ВРезервеПодЗаказ КАК Свободно,
	|		Т.Номенклатура КАК Номенклатура,
	|		Т.Характеристика КАК Характеристика
	|	ИЗ
	|		ВтСвободныеОстатки КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Склад,
	|		Т.Количество,
	|		Т.Номенклатура,
	|		Т.Характеристика
	|	ИЗ
	|		ВТТовары КАК ВТТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
	|			ПО ВТТовары.Номенклатура = Т.Номенклатура
	|				И ВТТовары.Характеристика = Т.Характеристика
	|				И (Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
	|				И (Т.Количество < 0)) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Склад,
	|	Т.Количество + ЕСТЬNULL(ОстаткиСклада.ВНаличии - ОстаткиСклада.ВРезервеСоСклада - ОстаткиСклада.ВРезервеПодЗаказ, 0),
	|	Т.ДатаДоступности,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|ИЗ
	|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК ОстаткиСклада
	|		ПО Т.Склад = ОстаткиСклада.Склад
	|			И Т.Характеристика = ОстаткиСклада.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО Т.Номенклатура = ВТТовары.Номенклатура
	|			И Т.Характеристика = ВТТовары.Характеристика,
	|	ВТСкладыДляПеремещения КАК ВТСкладыДляПеремещения
	|ГДЕ
	|	Т.ДатаДоступности > ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Набор.Номенклатура КАК Номенклатура,
	|	СУММА(Набор.ВНаличии) КАК Доступно,
	|	Набор.Склад КАК Склад,
	|	Набор.СхемаОбеспечения КАК СхемаОбеспечения,
	|	СУММА(Набор.СпособОбеспеченияПотребностейСрокИсполненияЗаказа) КАК СрокОбеспеченияМин,
	|	СУММА(Набор.СпособОбеспеченияПотребностейГарантированныйСрокОтгрузки) КАК СрокОбеспеченияМакс,
	|	Набор.ГИГ_Приоритет КАК СхемаОбеспеченияГИГ_Приоритет,
	|	Набор.ГИГ_ЗакупкаСПроизводства КАК СхемаОбеспеченияГИГ_ЗакупкаСПроизводства,
	|	Набор.Характеристика КАК Характеристика,
	|	Набор.ДатаДоступности КАК ДатаДоступности
	|ПОМЕСТИТЬ ВТСхемы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГИГ_НоменклатураНаСкладеПоставщика.Номенклатура КАК Номенклатура,
	|		ГИГ_НоменклатураНаСкладеПоставщика.Характеристика КАК Характеристика,
	|		ГИГ_НоменклатураНаСкладеПоставщика.Количество КАК ВНаличии,
	|		ВТдоступныеСхемы.Склад КАК Склад,
	|		ВТдоступныеСхемы.СхемаОбеспечения КАК СхемаОбеспечения,
	|		ВТдоступныеСхемы.СрокОбеспеченияМин КАК СпособОбеспеченияПотребностейСрокИсполненияЗаказа,
	|		ВТдоступныеСхемы.СрокОбеспеченияМакс КАК СпособОбеспеченияПотребностейГарантированныйСрокОтгрузки,
	|		&ДатаЗаказа КАК ДатаДоступности,
	|		СхемыОбеспечения.ГИГ_Приоритет КАК ГИГ_Приоритет,
	|		СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства КАК ГИГ_ЗакупкаСПроизводства
	|	ИЗ
	|		ВТТовары КАК ВТТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГИГ_НоменклатураНаСкладеПоставщика КАК ГИГ_НоменклатураНаСкладеПоставщика
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТдоступныеСхемы КАК ВТдоступныеСхемы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыОбеспечения КАК СхемыОбеспечения
	|					ПО ВТдоступныеСхемы.СхемаОбеспечения = СхемыОбеспечения.Ссылка
	|						И (НЕ СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства)
	|				ПО ГИГ_НоменклатураНаСкладеПоставщика.Склад = ВТдоступныеСхемы.СкладИсточник
	|					И (ВТдоступныеСхемы.Склад = &Склад)
	|			ПО ВТТовары.Номенклатура = ГИГ_НоменклатураНаСкладеПоставщика.Номенклатура
	|				И ВТТовары.Характеристика = ГИГ_НоменклатураНаСкладеПоставщика.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура,
	|		ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Характеристика,
	|		0,
	|		ВТдоступныеСхемы.Склад,
	|		ВТдоступныеСхемы.СхемаОбеспечения,
	|		ВТдоступныеСхемы.СрокОбеспеченияМин + ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки,
	|		ВТдоступныеСхемы.СрокОбеспеченияМакс + ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки,
	|		&ДатаЗаказа,
	|		СхемыОбеспечения.ГИГ_Приоритет,
	|		СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства
	|	ИЗ
	|		ВТТовары КАК ВТТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства КАК ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТдоступныеСхемы КАК ВТдоступныеСхемы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыОбеспечения КАК СхемыОбеспечения
	|					ПО ВТдоступныеСхемы.СхемаОбеспечения = СхемыОбеспечения.Ссылка
	|						И (СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства)
	|				ПО ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СкладПоставщика = ВТдоступныеСхемы.СкладИсточник
	|					И (ВТдоступныеСхемы.Склад = &Склад)
	|			ПО ВТТовары.Номенклатура = ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура
	|				И ВТТовары.Характеристика = ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТДоступныеДляПеремещения.Номенклатура,
	|		ВТДоступныеДляПеремещения.Характеристика,
	|		ВТДоступныеДляПеремещения.Свободно,
	|		ВТдоступныеСхемы.Склад,
	|		ВТдоступныеСхемы.СхемаОбеспечения,
	|		ВТдоступныеСхемы.СрокОбеспеченияМин,
	|		ВТдоступныеСхемы.СрокОбеспеченияМакс,
	|		ВТДоступныеДляПеремещения.ДатаДоступности,
	|		СхемыОбеспечения.ГИГ_Приоритет,
	|		СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства
	|	ИЗ
	|		ВТДоступныеДляПеремещения КАК ВТДоступныеДляПеремещения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТдоступныеСхемы КАК ВТдоступныеСхемы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыОбеспечения КАК СхемыОбеспечения
	|				ПО ВТдоступныеСхемы.СхемаОбеспечения = СхемыОбеспечения.Ссылка
	|			ПО ВТДоступныеДляПеремещения.Склад = ВТдоступныеСхемы.СкладИсточник
	|				И (ВТдоступныеСхемы.Склад = &Склад)) КАК Набор
	|ГДЕ
	|	Набор.ВНаличии > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Номенклатура,
	|	Набор.Склад,
	|	Набор.СхемаОбеспечения,
	|	Набор.Характеристика,
	|	Набор.ДатаДоступности,
	|	Набор.ГИГ_Приоритет,
	|	Набор.ГИГ_ЗакупкаСПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаОбеспечения.Идентификатор КАК Идентификатор,
	|	ВТТаблицаОбеспечения.Склад КАК Склад,
	|	ВТТаблицаОбеспечения.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВТТаблицаОбеспечения.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТТаблицаОбеспечения.Количество КАК Количество,
	|	ВТТаблицаОбеспечения.Отгружено КАК Отгружено,
	|	ВТТаблицаОбеспечения.Приоритет КАК Приоритет,
	|	ВТТаблицаОбеспечения.ПриоритетТипаОбеспечения КАК ПриоритетТипаОбеспечения,
	|	ВТТаблицаОбеспечения.СкладНаименование КАК СкладНаименование,
	|	ВТТовары.Номенклатура КАК Номенклатура,
	|	ВТТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТСтрокиКРаспределению
	|ИЗ
	|	ВТТаблицаОбеспечения КАК ВТТаблицаОбеспечения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО ВТТаблицаОбеспечения.Идентификатор = ВТТовары.НомерСтроки
	|			И (ВТТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|				ИЛИ ВТТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаОбеспечения.Идентификатор КАК Идентификатор,
	|	ВТТаблицаОбеспечения.Склад КАК Склад,
	|	ВТТаблицаОбеспечения.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВТТаблицаОбеспечения.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТТаблицаОбеспечения.Количество КАК Количество,
	|	ВТТаблицаОбеспечения.Отгружено КАК Отгружено,
	|	ВТТаблицаОбеспечения.Приоритет КАК Приоритет,
	|	ВТТаблицаОбеспечения.ПриоритетТипаОбеспечения КАК ПриоритетТипаОбеспечения,
	|	ВТТаблицаОбеспечения.СкладНаименование КАК СкладНаименование,
	|	ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка) КАК ГИГ_СхемаОбеспечения,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК ГИГ_СрокПоставки
	|ИЗ
	|	ВТТаблицаОбеспечения КАК ВТТаблицаОбеспечения
	|ГДЕ
	|	ВТТаблицаОбеспечения.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И ВТТаблицаОбеспечения.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтрокиКРаспределению.Идентификатор КАК Идентификатор,
	|	ВТСтрокиКРаспределению.Склад КАК Склад,
	|	ВТСтрокиКРаспределению.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВТСтрокиКРаспределению.Количество КАК Количество,
	|	ВТСтрокиКРаспределению.Отгружено КАК Отгружено,
	|	ВТСтрокиКРаспределению.Приоритет КАК Приоритет,
	|	ВТСтрокиКРаспределению.ПриоритетТипаОбеспечения КАК ПриоритетТипаОбеспечения,
	|	ВТСтрокиКРаспределению.СкладНаименование КАК СкладНаименование,
	|	ВТСтрокиКРаспределению.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВТСхемы.СхемаОбеспечения, ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка)) КАК ГИГ_СхемаОбеспечения,
	|	ЕСТЬNULL(ВТСхемы.Доступно, 0) КАК Доступно,
	|	ВЫБОР
	|		КОГДА ВТСхемы.ДатаДоступности ЕСТЬ NULL
	|			ТОГДА &ДатаЗаказа
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТСхемы.ДатаДоступности, ДЕНЬ, ВТСхемы.СрокОбеспеченияМакс)
	|	КОНЕЦ КАК ДатаОтгрузки,
	|	ЕСТЬNULL(ВТСхемы.СхемаОбеспеченияГИГ_Приоритет, 9999) КАК ПриоритетСхемы,
	|	ЕСТЬNULL(ВТСхемы.СхемаОбеспеченияГИГ_ЗакупкаСПроизводства, ЛОЖЬ) КАК ЗакупкаСПроизводства,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК ГИГ_СрокПоставки,
	|	ЕСТЬNULL(ВТСхемы.СрокОбеспеченияМакс, 0) КАК СрокОбеспеченияМакс,
	|	ЕСТЬNULL(ВТСхемы.СрокОбеспеченияМин, 0) КАК СрокОбеспеченияМин
	|ИЗ
	|	ВТСтрокиКРаспределению КАК ВТСтрокиКРаспределению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСхемы КАК ВТСхемы
	|		ПО ВТСтрокиКРаспределению.Склад = ВТСхемы.Склад
	|			И ВТСтрокиКРаспределению.Номенклатура = ВТСхемы.Номенклатура
	|			И ВТСтрокиКРаспределению.Характеристика = ВТСхемы.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетСхемы,
	|	ДатаОтгрузки
	|ИТОГИ
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(ВариантОбеспечения),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(Отгружено),
	|	МАКСИМУМ(Приоритет),
	|	МАКСИМУМ(ПриоритетТипаОбеспечения),
	|	МАКСИМУМ(СкладНаименование),
	|	МАКСИМУМ(Доступно)
	|ПО
	|	Идентификатор";
	
	#КонецОбласти
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДополненнаяТаблица = Результат[8].Выгрузить();
	
	ВыборкаКРаспределению = Результат[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКРаспределению.Следующий() Цикл
		
		КРаспределению = ВыборкаКРаспределению.Количество;
		
		ВыборкаКРаспределениюСтроки = ВыборкаКРаспределению.Выбрать();
		
		Пока КРаспределению > 0 Цикл
			
			Если НЕ ВыборкаКРаспределениюСтроки.Следующий() Тогда
				
				НовСтрока = ДополненнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаКРаспределению);
				НовСтрока.Количество = КРаспределению;
				
				//тут идет пустая схема!!! хотя есть схема с производства?!
				//bercut 060320	
				
				Массив = Параметры.СтрокиТовары.НайтиСтроки(Новый Структура("ИсходныйНомерСтроки",ВыборкаКРаспределению.Идентификатор));
				Если не Массив.Количество() = 0 Тогда
					
//Исходное					//ЗапросДополнительный = Новый Запрос;
					//ЗапросДополнительный.Текст = 
					//"ВЫБРАТЬ
					//|	ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки КАК СрокПоставки
					//|ИЗ
					//|	РегистрСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства КАК ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства
					//|ГДЕ
					//|	ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура = &Номенклатура
					//|	И ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СкладПоставщика = &СкладПоставщика";
					//
					//ЗапросДополнительный.УстановитьПараметр("Номенклатура", Массив[0].Номенклатура);
					//ЗапросДополнительный.УстановитьПараметр("СкладПоставщика", ДополнительныеДанные.ГИГ_СкладПоставщика);
				//{{20200922 ГлазуновДВ
					ЗапросДополнительный = Новый Запрос;
					ЗапросДополнительный.Текст = 
					"ВЫБРАТЬ
					|	ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки КАК СрокПоставки,
					|	СхемыОбеспечения.СпособОбеспеченияПотребностей.СрокИсполненияЗаказа КАК Мин,
					|	СхемыОбеспечения.СпособОбеспеченияПотребностей.ГарантированныйСрокОтгрузки КАК Макс
					|ИЗ
					|	РегистрСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства КАК ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства,
					|	РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
					|ГДЕ
					|	ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура = &Номенклатура
					|	И ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СкладПоставщика = &СкладПоставщика
					|	И СхемыОбеспечения.СхемаОбеспечения = &СхемаОбеспечения
					|	И СхемыОбеспечения.Склад = &Склад";
				
					ЗапросДополнительный.УстановитьПараметр("Номенклатура", Массив[0].Номенклатура);
					ЗапросДополнительный.УстановитьПараметр("СхемаОбеспечения", Массив[0].Номенклатура.СхемаОбеспечения);
					ЗапросДополнительный.УстановитьПараметр("СкладПоставщика", Массив[0].Номенклатура.СхемаОбеспечения.ГИГ_СкладПоставщика);
					ЗапросДополнительный.УстановитьПараметр("Склад", ВыборкаКРаспределению.Склад);
					
					РезультатЗапроса = ЗапросДополнительный.Выполнить();

					Если ДополнительныеДанные.Свойство("ГИГ_СхемаОбеспечения") И Не Параметры.СтрокиТовары[0].ГИГ_СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда
						НовСтрока.ГИГ_СхемаОбеспечения = ДополнительныеДанные.ГИГ_СхемаОбеспечения;
						Если ДополнительныеДанные.Свойство("СрокПоставки") Тогда
							НовСтрока.ГИГ_СрокПоставки = ДополнительныеДанные.СрокПоставки;
						Иначе
							НовСтрока.ГИГ_СрокПоставки = Строка(ДополнительныеДанные.СрокОбеспеченияМин + РезультатЗапроса.Выгрузить()[0].СрокПоставки) + " - " + 
							Строка(ДополнительныеДанные.СрокОбеспеченияМакс + РезультатЗапроса.Выгрузить()[0].СрокПоставки) + " дн.";
						КонецЕсли;
				//ДАТАОТГРУЗКИ						
						Если ДополнительныеДанные.ДатаОтгрузки < ТекущаяДата() Тогда
							НовСтрока.ДатаОтгрузки = ТекущаяДата() + РезультатЗапроса.Выгрузить()[0].СрокПоставки * 86400 + РезультатЗапроса.Выгрузить()[0].Макс * 86400; //ДополнительныеДанные.СрокОбеспеченияМакс*86400;
						Иначе 	
							НовСтрока.ДатаОтгрузки = ДополнительныеДанные.ДатаОтгрузки;// + РезультатЗапроса.Выгрузить()[0].СрокПоставки*86400;//??? + ДополнительныеДанные.СрокОбеспеченияМакс*86400;
						КонецЕсли;
					Иначе	
						Если Не РезультатЗапроса.Пустой() Тогда
					//}}20200922 ГлазуновДВ
							НовСтрока.ГИГ_СхемаОбеспечения = Массив[0].Номенклатура.СхемаОбеспечения;
							НовСтрока.ГИГ_СрокПоставки = Строка(РезультатЗапроса.Выгрузить()[0].Мин + РезультатЗапроса.Выгрузить()[0].СрокПоставки) + " - " + 
							Строка(РезультатЗапроса.Выгрузить()[0].Макс + РезультатЗапроса.Выгрузить()[0].СрокПоставки) + " дн.";
							НовСтрока.ДатаОтгрузки = ТекущаяДата() + РезультатЗапроса.Выгрузить()[0].СрокПоставки * 86400 + РезультатЗапроса.Выгрузить()[0].Макс * 86400;
						Иначе
							НовСтрока.ДатаОтгрузки = Дата(3999,09,09);
						КонецЕсли;
					КонецЕсли;
				Иначе 
					НовСтрока.ДатаОтгрузки = Дата(3999,09,09);
				КонецЕсли;
				//
			////{{20200922 ГлазуновДВ
			//	Если ТаблицаКРаспределению <> Неопределено Тогда
			//		НоваяСтрокаРаспределено = ТаблицаКРаспределению.Добавить();
			//		ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределено, НовСтрока);
			//		НоваяСтрокаРаспределено.Количество = НовСтрока.Количество; 
			//		НоваяСтрокаРаспределено.ГИГ_СрокПоставки = НовСтрока.ГИГ_СрокПоставки; 
			//	КонецЕсли;
			////}}20200922 ГлазуновДВ	
				Прервать; 
			КонецЕсли;	 
			
		//{{20200922 ГлазуновДВ
			ЗапросДополнительный = Новый Запрос;
			ЗапросДополнительный.Текст = 
			"ВЫБРАТЬ
			|	ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки КАК СрокПоставки,
			|	СхемыОбеспечения.СпособОбеспеченияПотребностей.СрокИсполненияЗаказа КАК Мин,
			|	СхемыОбеспечения.СпособОбеспеченияПотребностей.ГарантированныйСрокОтгрузки КАК Макс
			|ИЗ
			|	РегистрСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства КАК ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства,
			|	РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
			|ГДЕ
			|	ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура = &Номенклатура
			|	И ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СкладПоставщика = &СкладПоставщика
			|	И СхемыОбеспечения.СхемаОбеспечения = &СхемаОбеспечения
			|	И СхемыОбеспечения.Склад = &Склад";
			
			ЗапросДополнительный.УстановитьПараметр("Номенклатура", ВыборкаКРаспределениюСтроки.Номенклатура);
			ЗапросДополнительный.УстановитьПараметр("СкладПоставщика", ВыборкаКРаспределениюСтроки.Номенклатура.СхемаОбеспечения.ГИГ_СкладПоставщика);
			ЗапросДополнительный.УстановитьПараметр("СхемаОбеспечения", ВыборкаКРаспределениюСтроки.Номенклатура.СхемаОбеспечения); 
			ЗапросДополнительный.УстановитьПараметр("Склад", ВыборкаКРаспределениюСтроки.Склад); 				
			
			РезультатЗапроса = ЗапросДополнительный.Выполнить();
			
			ДополнительныеДанные.Очистить();
			ДополнительныеДанные.Вставить("ГИГ_СхемаОбеспечения", ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения);
			ДополнительныеДанные.Вставить("СрокОбеспеченияМин", ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин);
			ДополнительныеДанные.Вставить("СрокОбеспеченияМакс", ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс);
			ДополнительныеДанные.Вставить("ГИГ_СкладПоставщика", ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения.ГИГ_СкладПоставщика);
			ДополнительныеДанные.Вставить("ДатаОтгрузки", ВыборкаКРаспределениюСтроки.ДатаОтгрузки);
			//
			Если Не РезультатЗапроса.Пустой() И Не ЗначениеЗаполнено(ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения) Тогда
				ДополнительныеДанные.Очистить();
				ДополнительныеДанные.Вставить("ГИГ_СхемаОбеспечения", ВыборкаКРаспределениюСтроки.Номенклатура.СхемаОбеспечения);
				ДополнительныеДанные.Вставить("СрокОбеспеченияМин", РезультатЗапроса.Выгрузить()[0].Мин);
				ДополнительныеДанные.Вставить("СрокОбеспеченияМакс", РезультатЗапроса.Выгрузить()[0].Макс);
				ДополнительныеДанные.Вставить("ГИГ_СкладПоставщика", ВыборкаКРаспределениюСтроки.Склад);
				ДополнительныеДанные.Вставить("ДатаОтгрузки", ТекущаяДата() + (РезультатЗапроса.Выгрузить()[0].Макс + РезультатЗапроса.Выгрузить()[0].СрокПоставки)*86400);
			КонецЕсли;
			//
			КоличествоРаспределено = 0;
			Если ТаблицаКРаспределению <> Неопределено Тогда
				Для Каждого СтрокаРаспределено Из ТаблицаКРаспределению Цикл
					Если ВыборкаКРаспределениюСтроки.Номенклатура = СтрокаРаспределено.Номенклатура
						И ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения = СтрокаРаспределено.ГИГ_СхемаОбеспечения
						И "" + ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин + " - " + ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс + " дн." = СтрокаРаспределено.ГИГ_СрокПоставки Тогда
						
						КоличествоРаспределено = КоличествоРаспределено + СтрокаРаспределено.Количество;  
					
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если  Не ВыборкаКРаспределениюСтроки.Доступно - КоличествоРаспределено > 0 Тогда
				//Переносим данные строки ТЧ объекта в "ДополнительныеДанные", когда распределение не нужно
				ДополнительныеДанные.Очистить();
				Если Не ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда
					Если ТаблицаКРаспределению <> Неопределено Тогда
						НоваяСтрокаРаспределено = ТаблицаКРаспределению.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределено, ВыборкаКРаспределениюСтроки);
						НоваяСтрокаРаспределено.Количество = КРаспределению; 
						НоваяСтрокаРаспределено.ГИГ_СрокПоставки = ?(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин = ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс,"",Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин)+" - ")+Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс) + " дн."; 
					КонецЕсли;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		//}}20200922 ГлазуновДВ	
			
//Исходное			Если ВыборкаКРаспределениюСтроки.Доступно < КРаспределению 
			Если (ВыборкаКРаспределениюСтроки.Доступно - КоличествоРаспределено) < КРаспределению 
				И ЗначениеЗаполнено(ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения) 
				И НЕ ВыборкаКРаспределениюСтроки.ЗакупкаСПроизводства Тогда
				Количество = ВыборкаКРаспределениюСтроки.Доступно - КоличествоРаспределено;
			Иначе
				Количество = КРаспределению;
			КонецЕсли;
			
		//{{20200922 ГлазуновДВ
			//Если  Не ВыборкаКРаспределениюСтроки.Доступно - КоличествоРаспределено > 0 Тогда
			//	//Переносим данные строки ТЧ объекта в "ДополнительныеДанные", когда распределение не нужно
			//	СтрокаОбъекта = Параметры.СтрокиТовары[0];
			//	ДополнительныеДанные.Очистить();
			//	Если Не ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда
			//		Если ТаблицаКРаспределению <> Неопределено Тогда
			//			НоваяСтрокаРаспределено = ТаблицаКРаспределению.Добавить();
			//			ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределено, ВыборкаКРаспределениюСтроки);
			//			НоваяСтрокаРаспределено.Количество = КРаспределению; 
			//			НоваяСтрокаРаспределено.ГИГ_СрокПоставки = ?(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин = ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс,"",Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин)+" - ")+Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс) + " дн."; 
			//		КонецЕсли;
			//	//	ДополнительныеДанные.Вставить("ГИГ_СхемаОбеспечения", СтрокаОбъекта.ГИГ_СхемаОбеспечения);
			//	//	ДополнительныеДанные.Вставить("СрокПоставки", СтрокаОбъекта.ГИГ_СрокПоставки);
			//	//	ДополнительныеДанные.Вставить("СрокОбеспеченияМин", "");
			//	//	ДополнительныеДанные.Вставить("СрокОбеспеченияМакс", "");
			//	//	ДополнительныеДанные.Вставить("ГИГ_СкладПоставщика", СтрокаОбъекта.ГИГ_СхемаОбеспечения.ГИГ_СкладПоставщика);
			//	//	ДополнительныеДанные.Вставить("ДатаОтгрузки", СтрокаОбъекта.ДатаОтгрузки);
			//	КонецЕсли;
			//	//Количество = 0;
			//	//КРаспределению = КРаспределению - Количество;
			//	Продолжить;
			//КонецЕсли;
			Если ТаблицаКРаспределению <> Неопределено Тогда
				Если Не ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда
					НоваяСтрокаРаспределено = ТаблицаКРаспределению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределено, ВыборкаКРаспределениюСтроки);
					НоваяСтрокаРаспределено.Количество = Количество; 
					НоваяСтрокаРаспределено.ГИГ_СрокПоставки = ?(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин = ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс,"",Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин)+" - ")+Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс) + " дн."; 
				КонецЕсли;
			КонецЕсли;
		//}}20200922 ГлазуновДВ	
			
			НовСтрока = ДополненнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаКРаспределениюСтроки);
			НовСтрока.Количество = Количество; 
			Если ЗначениеЗаполнено(НовСтрока.ГИГ_СхемаОбеспечения) Тогда
				НовСтрока.ГИГ_СрокПоставки = ?(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин = ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс,"",Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин)+" - ")+Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс) + " дн."; 
			КонецЕсли;
			//
			Если ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда
			
				Если не РезультатЗапроса.Пустой() Тогда
					НовСтрока.ГИГ_СхемаОбеспечения = ВыборкаКРаспределениюСтроки.Номенклатура.СхемаОбеспечения;
					НовСтрока.ГИГ_СрокПоставки = Строка(РезультатЗапроса.Выгрузить()[0].СрокПоставки + РезультатЗапроса.Выгрузить()[0].Мин) + " - " + 
					Строка(РезультатЗапроса.Выгрузить()[0].СрокПоставки + РезультатЗапроса.Выгрузить()[0].Макс) + " дн.";
					НовСтрока.ДатаОтгрузки = ТекущаяДата() + (РезультатЗапроса.Выгрузить()[0].Макс + РезультатЗапроса.Выгрузить()[0].СрокПоставки)*86400;//??? + ДополнительныеДанные.СрокОбеспеченияМакс*86400;
				Иначе
					НовСтрока.ДатаОтгрузки = Дата(3999,09,09);
				КонецЕсли;
				
			Иначе
				Если НовСтрока.ДатаОтгрузки <= НачалоДня(ТекущаяДата()) Тогда
					НовСтрока.ДатаОтгрузки = ТекущаяДата() + ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс*86400; 
				КонецЕсли;
			КонецЕсли;
			//
			ДополнительныеДанные.Очистить();
			КРаспределению = КРаспределению - Количество;
			//
		КонецЦикла;
		
	КонецЦикла;
	
	ДополненнаяТаблица.Сортировать("Идентификатор, ДатаОтгрузки");
	
	Таблица = ДополненнаяТаблица;
	
КонецПроцедуры //++> Гигабайт Казаков М.В.

Функция ТекстЗапросаСхыемыДляПеремещения(ПолучитьВТ = Ложь)

	ТекстЗапроса = 
	 
		"ВЫБРАТЬ
		|	Товары.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Отменено КАК Отменено
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения
		|ПОМЕСТИТЬ ВтТаблицаТоваров
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	НЕ Товары.ГИГ_СхемаОбеспечения = &ПустаяСхемаОбеспечения
		|	И НЕ Товары.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.ГИГ_СхемаОбеспечения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЗ.ГИГ_СхемаОбеспечения КАК СхемаОбеспечения,
		|	СхемыОбеспечения.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей КАК СкладОтправитель
		|ПОМЕСТИТЬ ВтСхемыКПеремещению
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтТаблицаТоваров.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения,
		|		КОЛИЧЕСТВО(СхемыОбеспечения.СхемаОбеспечения) КАК КоличествоУзлов
		|	ИЗ
		|		РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаТоваров КАК ВтТаблицаТоваров
		|			ПО (ВтТаблицаТоваров.ГИГ_СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтТаблицаТоваров.ГИГ_СхемаОбеспечения) КАК ВЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
		|		ПО ВЗ.ГИГ_СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения
		|			И (ВЗ.КоличествоУзлов = 1)
		|			И (СхемыОбеспечения.СпособОбеспеченияПотребностей.ТипОбеспечения = &ТипОбеспеченияПеремещение)
		|";
	

	Возврат ?(ПолучитьВТ,ТекстЗапроса,СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ВтСхемыКПеремещению",""));
	
КонецФункции // ТекстЗапросаСхыемыДляПеремещения()

Функция ЕстьСхемыДляПеремещения(Знач Объект) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаСхыемыДляПеремещения();
	//	"ВЫБРАТЬ
	//	|	Товары.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения,
	//	|	Товары.Отменено КАК Отменено
	//	|ПОМЕСТИТЬ Товары
	//	|ИЗ
	//	|	&Товары КАК Товары
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	Товары.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения
	//	|ПОМЕСТИТЬ ВтТаблицаТоваров
	//	|ИЗ
	//	|	Товары КАК Товары
	//	|ГДЕ
	//	|	НЕ Товары.ГИГ_СхемаОбеспечения = &ПустаяСхемаОбеспечения
	//	|	И НЕ Товары.Отменено
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Товары.ГИГ_СхемаОбеспечения
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВЗ.ГИГ_СхемаОбеспечения КАК СхемаОбеспечения
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		ВтТаблицаТоваров.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения,
	//	|		КОЛИЧЕСТВО(СхемыОбеспечения.СхемаОбеспечения) КАК КоличествоУзлов
	//	|	ИЗ
	//	|		РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
	//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаТоваров КАК ВтТаблицаТоваров
	//	|			ПО (ВтТаблицаТоваров.ГИГ_СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения)
	//	|	
	//	|	СГРУППИРОВАТЬ ПО
	//	|		ВтТаблицаТоваров.ГИГ_СхемаОбеспечения) КАК ВЗ
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
	//	|		ПО ВЗ.ГИГ_СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения
	//	|			И (ВЗ.КоличествоУзлов = 1)
	//	|			И (СхемыОбеспечения.СпособОбеспеченияПотребностей.ТипОбеспечения = &ТипОбеспеченияПеремещение)";
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(,"ГИГ_СхемаОбеспечения,Отменено, НомерСтроки"));
	Запрос.УстановитьПараметр("ПустаяСхемаОбеспечения", ПредопределенноеЗначение("Справочник.СхемыОбеспечения.ПустаяСсылка"));
	Запрос.УстановитьПараметр("ТипОбеспеченияПеремещение", ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Перемещение"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ЕстьСхемыДляПеремещения()

Функция ТаблицаПеремещенийПоЗаказу(Объект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаСхыемыДляПеремещения(Истина);
	Запрос.Текст = Запрос.Текст+ПодборТоваровСервер.РазделительПакетаЗапросов();
	Запрос.Текст = Запрос.Текст+
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВтСхемыКПеремещению.СкладОтправитель КАК СкладОтправитель,
	|	Товары.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСхемыКПеремещению КАК ВтСхемыКПеремещению
	|		ПО Товары.ГИГ_СхемаОбеспечения = ВтСхемыКПеремещению.СхемаОбеспечения
	|";
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	МАКСИМУМ(Товары.ДатаОтгрузки) КАК ДатаОтгрузки
	//|ИЗ
	//|	Товары КАК Товары";
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(,"ГИГ_СхемаОбеспечения,Отменено, НомерСтроки"));
	Запрос.УстановитьПараметр("ПустаяСхемаОбеспечения", ПредопределенноеЗначение("Справочник.СхемыОбеспечения.ПустаяСсылка"));
	Запрос.УстановитьПараметр("ТипОбеспеченияПеремещение", ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Перемещение"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	//
	//Выборка = МассивРезультатов[1].Выполнить().Выбрать();
	//Выборка.Следующий();
	//ДатаОтгрузки = Выборка.ДатаОтгрузки;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура СформироватьПеремещенияПоСхемамОбеспечения(Объект, Отказ) Экспорт

	ТаблицаПеремещений = Неопределено;
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ТаблицаПеремещений",ТаблицаПеремещений) ИЛИ ТаблицаПеремещений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабСклады = ТаблицаПеремещений.Скопировать(,"СкладОтправитель");
	ТабСклады.Свернуть("СкладОтправитель");
	УстановитьПривилегированныйРежим(Истина);
	Для каждого Стр Из ТабСклады Цикл
		МассивСтрок = ТаблицаПеремещений.НайтиСтроки(Новый Структура("СкладОтправитель",Стр.СкладОтправитель));
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("АвтоформированиеПеремещения",Истина);
		ДанныеЗаполнения.Вставить("Основание",Объект.Ссылка);
		ДанныеЗаполнения.Вставить("Склад",Объект.Склад);
		ДанныеЗаполнения.Вставить("ТаблицаТовары",ТаблицаПеремещений.Скопировать(МассивСтрок));
		
		ДокЗаказПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
		ДокЗаказПеремещение.Дата = ТекущаяДатаСеанса();
		ДокЗаказПеремещение.СкладОтправитель = Стр.СкладОтправитель;
		
		Попытка
			ДокЗаказПеремещение.Заполнить(ДанныеЗаполнения);
			Для Каждого СтрТч Из ДокЗаказПеремещение.Товары Цикл
				СтрТч.НачалоОтгрузки = ДокЗаказПеремещение.Дата;
			КонецЦикла;
			ДокЗаказПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		Исключение	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(),,,,Отказ);
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	//Отказ = Истина;
	
КонецПроцедуры

Функция ПолучитьСпособОбеспеченияПоСхеме(СхемаОбеспечения,Склад) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СхемыОбеспечения.СпособОбеспеченияПотребностей КАК СпособОбеспечения,
		|	СхемыОбеспечения.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей КАК ИсточникОбеспечения,
		|	СхемыОбеспечения.СпособОбеспеченияПотребностей.ТипОбеспечения КАК ТипОбеспечения
		|ИЗ
		|	РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
		|ГДЕ
		|	СхемыОбеспечения.СхемаОбеспечения = &СхемаОбеспечения
		|	И СхемыОбеспечения.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СхемаОбеспечения", СхемаОбеспечения);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат,Выборка);
	
	Возврат Результат;
	
КонецФункции
