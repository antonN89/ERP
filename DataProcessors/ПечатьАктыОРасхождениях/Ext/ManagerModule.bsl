
&Вместо("ЗаполнитьТабличныйДокументТорг2")
Процедура Рин1_ЗаполнитьТабличныйДокументТорг2(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПечатьВНоменклатуреПоставщкика)
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьАктыОРасхождениях.ПФ_MXL_ТОРГ2_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ДанныеСчетовФактур         = ДанныеДляПечати.ДанныеСчетовФактур.Выбрать();
	ДанныеПечати               = ДанныеДляПечати.ДанныеПечати.Выбрать();
	ТаблицаТоваров             = ДанныеДляПечати.ДанныеТовары.Выгрузить();
	ТаблицаТоваровПоДокументам = ДанныеДляПечати.ДанныеТоваровПоДокументам.Выгрузить();
	ТаблицаКурсовВалют         = ДанныеДляПечати.ДанныеКурсовВалют.Выгрузить();
	
	ПересчитатьСуммыВВалютеРегламентированногоУчета(ТаблицаТоваров, ТаблицаКурсовВалют, "ТОРГ2");
	
	ПервыйДокумент = Истина;
	
	Если ПечатьВНоменклатуреПоставщкика Тогда
		КолонкаКодов = "НоменклатураПартнераАртикул";
	Иначе
		КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
		Если НЕ ЗначениеЗаполнено(КолонкаКодов) Тогда
			КолонкаКодов = "Артикул";
		КонецЕсли;
	КонецЕсли;
		
	Пока ДанныеПечати.Следующий() Цикл
	
		Если НЕ ДанныеПечати.ЕстьРасхождения Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 нет расхождений. Печать акта об установленном расхождении по количеству и качеству при приемке %2 не требуется.';
					|en = 'No discrepancies in the %1 document. Printing of the certificate of quantity and quality discrepancy upon receipt %2 is not required.'"),
				ДанныеПечати.Ссылка,
				НСтр("ru = 'товарно-материальных ценностей';
					|en = 'inventory'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТекстНДСВШапкеТаблицы = ?(ДанныеПечати.ЦенаВключаетНДС, "", " " + НСтр("ru = '(Без НДС)';
																				|en = '(VAT exempt)'", Метаданные.Языки.Русский.КодЯзыка));
		
		Область = Макет.ПолучитьОбласть("ШапкаПервойСтраницы");
		////++Шерстюк Ю.Ю. 20.04.2021 Задача 7713
		Область.Параметры.ДатаДень = День(ДанныеПечати.ДатаДокумента);
		пМесяц = ПолучитьСклоненияСтроки(Формат(ДанныеПечати.ДатаДокумента,"ДФ='MMMM'"),,"ПД=Родительный");
		Если пМесяц.Количество() > 0 Тогда 
			Область.Параметры.ДатаМесяц = НРег(пМесяц[0]);
		КонецЕсли;
		Область.Параметры.ДатаГод = Год(ДанныеПечати.ДатаДокумента);
		//--Шерстюк Ю.Ю.
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.НомерДокумента, Ложь, Истина);
		Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		//++Шерстюк Ю.Ю. 20.04.2021 20.04.2021 Задача 7713
		//Область.Параметры.Грузоотправитель = ДанныеПечати.Грузоотправитель;
		тзКонтактнаяИнформация = ДанныеПечати.Грузоотправитель.КонтактнаяИнформация;
		Для Каждого СтрТзКонИнф из  тзКонтактнаяИнформация Цикл 
			Если СтрТзКонИнф.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда 
				Область.Параметры.Грузоотправитель = СтрТзКонИнф.Представление;
			КонецЕсли;
		КонецЦикла;
		//--Шерстюк Ю.Ю.
		Область.Параметры.Производитель = ДанныеПечати.Производитель;
		Область.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.СтраховаяКомпания = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.СтраховаяКомпания, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоставкиТоваров", ДанныеПечати.ДатаДоставкиТоваров));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаОтправленияТоваров", ДанныеПечати.ДатаОтправленияТоваров));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоговораПоставки", ДанныеПечати.ДатаДоговораПоставки));
		ДанныеСчетовФактур.Сбросить();
		Если ДанныеСчетовФактур.НайтиСледующий(Новый Структура("ДокументОснование", ДанныеПечати.Ссылка)) Тогда
			Область.Параметры.Заполнить(ДанныеСчетовФактур);
			Область.Параметры.НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеСчетовФактур.НомерСчетаФактуры);
			Область.Параметры.Заполнить(ПараметрыПоДате("ДатаСчетаФактуры", ДанныеСчетовФактур.ДатаСчетаФактуры));
		КонецЕсли;
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаКоммерческогоАкта", ДанныеПечати.ДатаКоммерческогоАкта));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВетеринарногоСвидетельства", ДанныеПечати.ДатаВетеринарногоСвидетельства));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаЖелезнодорожнойНакладной", ДанныеПечати.ДатаЖелезнодорожнойНакладной));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДокументаОВызовеПредставителяПартнера", ДанныеПечати.ДатаДокументаОВызовеПредставителяПартнера));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаКоносамента", ДанныеПечати.ДатаКоносамента));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВскрытияТары", ДанныеПечати.ДатаВскрытияТары));
		Область.Параметры.ВызываемыйПредставительПартнера = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ВызываемыйПредставительПартнера, НСтр("ru = 'грузоотправителя, поставщика, производителя';
																																					|en = 'of sender, supplier, manufacturer'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.ВидДокументаОВызовеПредставителяПартнера = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ВидДокументаОВызовеПредставителяПартнера, НСтр("ru = 'телеграмма, факс, телефонограмма, радиограмма';
																																									|en = 'telegram, fax, telephone message, radiogram'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.ОснованиеДляСоставленияАкта = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ОснованиеДляСоставленияАкта, НСтр("ru = 'приказ, распоряжение';
																																			|en = 'order, reference'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.РуководительФИО = ДанныеПечати.Руководитель;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Область, ДанныеПечати.Ссылка);
		
		// + [Rineco], [Киселев А.Н.] [11.10.2021] 
		// Задача: [№ 19351], [#Акт О Расхождениях После Приемки]
		Если ДанныеПечати.Ссылка.Товары.Количество() > 0 Тогда
			Если  ЗначениеЗаполнено(ДанныеПечати.Ссылка.Товары[0]) И ТипЗнч(ДанныеПечати.Ссылка.Товары[0].ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				Если ЗначениеЗаполнено(ДанныеПечати.Ссылка.Товары[0].ДокументОснование.ДатаВходящегоДокумента) Тогда
					Область.Параметры.ДатаСчетаФактурыДень	= День(ДанныеПечати.Ссылка.Товары[0].ДокументОснование.ДатаВходящегоДокумента);
					Область.Параметры.ДатаСчетаФактурыМесяц	= НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(Формат(ДанныеПечати.Ссылка.Товары[0].ДокументОснование.ДатаВходящегоДокумента, "ДФ=ММММ"),2));	
					Область.Параметры.ДатаСчетаФактурыГод	=  Формат(Год(ДанныеПечати.Ссылка.Товары[0].ДокументОснование.ДатаВходящегоДокумента),"ЧГ=");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		// - [Rineco], [Киселев А.Н.] [11.10.2021]
				
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод таблицы приемки товаров
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровШапка");
		ТабличныйДокумент.Вывести(Область);
		ТаблицаПриемкиТоваров = ДанныеПечати.ТаблицаПриемкиТоваров.Выгрузить();
		Для Каждого Строка Из ТаблицаПриемкиТоваров Цикл
			Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровСтрока");
			Область.Параметры.Заполнить(Строка);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровПодвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №2 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаВторойСтраницы");
		ТабличныйДокумент.Вывести(Область);
			
		// Вывод состояния транспорта по документам
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТранспортаПоДокументам", 4);
		
		// Вывод таблицы товаров по документам
		Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамШапка");
		ТабличныйДокумент.Вывести(Область);
		Строки = ТаблицаТоваровПоДокументам.НайтиСтроки(Новый Структура("Ссылка",ДанныеПечати.Ссылка));
		Для Каждого Строка Из Строки Цикл
			Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамСтрока");
			Область.Параметры.Заполнить(Строка);
			Если ПечатьВНоменклатуреПоставщкика Тогда
				
			Иначе
				Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
					Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
						Строка.НоменклатураНаименование,
						Строка.ХарактеристикаНаименование);
				Иначе
					Область.Параметры.Товар = Строка.ТекстовоеОписание;
				КонецЕсли;
			КонецЕсли;
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамПодвал");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод состояния транспорта по факту
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТранспортаПоФакту", 4);
		
		// Вывод таблицы итогов
		Область = Макет.ПолучитьОбласть("ТаблицаИтогов");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод первой части таблицы товаров
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Строка");
		Товары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			Если ПечатьВНоменклатуреПоставщкика Тогда
				Область.Параметры.Товар   = Товар.НоменклатураПартнера;
			Иначе
				Если ЗначениеЗаполнено(Товар.НоменклатураНаименование) Тогда
					Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
						Товар.НоменклатураНаименование,
						Товар.ХарактеристикаНаименование);
				Иначе
					Область.Параметры.Товар = Товар.ТекстовоеОписание;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №3 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаТретьейСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Условий Хранения Товара До Вскрытия
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "УсловияХраненияТовараДоВскрытия", 4);
		
		// Вывод Температуры При Разгрузке
		Область = Макет.ПолучитьОбласть("ТемператураПриРазгрузке");
		Область.Параметры.ТемператураПриРазгрузке = ДанныеПечати.ТемператураПриРазгрузке;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Состояния Тары И Упаковки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТарыИУпаковки", 4);
			
		// Вывод содержания наружной маркировки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СодержаниеНаружнойМаркировки", 4);
		
		// Вывод даты вскрытия тары
		Область = Макет.ПолучитьОбласть("ДатаВскрытияТары");
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВскрытияТары", ДанныеПечати.ДатаВскрытияТары));
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Организации Взвесившей И Опломбировавшей Товар
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ОрганизацияВзвесившаяИОпломбировавшаяТовар", 4);
		
		// Вывод Порядока Отбора Товара Для Выборочной Проверки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПорядокОтбораТовараДляВыборочнойПроверки", 4);
		
		// Вывод второй части таблицы товаров
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;

		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Строка");
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			Если ЗначениеЗаполнено(КолонкаКодов) Тогда
				Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			КонецЕсли;
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №4 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаЧетвертойСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод способа определения количества
		Область = Макет.ПолучитьОбласть("СпособОпределенияКоличества");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		// Вывод места определения количества
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "МестоОпределенияКоличества", 4);
		// Вывод сведений об исправности весоизмерительных приборов
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СведенияОбИсправностиВесоизмерительныхПриборов", 4);
		// Вывод прочих данных
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПрочиеДанные", 4);
		// Вывод подробного описания дефектов
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПодробноеОписаниеДефектов", 4);
		// Вывод заключения комиссии
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ЗаключениеКомиссии", 4);
		// Вывод приложения
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "Приложение", 4);
		
		// Вывод членов комиссии
		Область = Макет.ПолучитьОбласть("ЧленыКомиссии");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера", ДанныеПечати.ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера));
		Область.Параметры.ПредседательКомиссииФИО = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ПредседательКомиссии);
		Область.Параметры.ЧленКомиссии1ФИО    = ДанныеПечати.ЧленКомиссии1;
		Область.Параметры.ЧленКомиссии2ФИО    = ДанныеПечати.ЧленКомиссии2;
		Область.Параметры.ЧленКомиссии3ФИО    = ДанныеПечати.ЧленКомиссии3;
		Область.Параметры.ГлавныйБухгалтерФИО = ДанныеПечати.ГлавныйБухгалтер;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод решения руководителя
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "РешениеРуководителя", 4);
		
		// Вывод кладовщика
		Область = Макет.ПолучитьОбласть("Кладовщик");
		Область.Параметры.КладовщикПринявшийТоварФИО = ДанныеПечати.КладовщикПринявшийТовар;
		ТабличныйДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;

КонецПроцедуры
