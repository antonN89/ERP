&НаКлиенте
Перем ЗакрытиеРазрешено;

// РАБОТА С ФАЙЛОМ
&НаКлиенте
Процедура ПолеВводаФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = "Текст(*.xlsx;*.xls)|*.xlsx;*.xls";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Файл = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ТекРасширение   = ПолучитьРасширениеИмениФайла(Файл);
		ТекДвоичнДанные = Новый ДвоичныеДанные(Файл);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДвоичнДанные); 
		ПрочитатьЛисты(АдресВХранилище,ТекРасширение);
	Иначе
		Файл = "";
	КонецЕсли;
	
КонецПроцедуры

// Выделяет из полного имени файла имя файла без расширения.
//
// Параметры
//  ПолноеИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   ИмяФайлаБезРасширения – короткое имя файла.
//
&НаСервере
Функция ПолучитьИмяФайлаБезРасширения(ПолноеИмяФайла)
    Перем ФайлТМП, РасширениеФайла, ИмяФайлаБезРасширения;

    ФайлТМП = РазложитьСтрокуВМассивПодстрок(ПолноеИмяФайла, "\");
    ФайлТМП = ФайлТМП[ФайлТМП.Количество()-1];
    РасширениеФайла  = "." + ПолучитьРасширениеИмениФайла(ФайлТМП);
    ИмяФайлаБезРасширения = СтрЗаменить(ФайлТМП, РасширениеФайла, "");

    Возврат ИмяФайлаБезРасширения;

КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
&НаСервере
Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла)
    Перем Расширение;

    Расширение = ПолучитьСтрокуОтделеннойСимволом(ИмяФайла, ".");
    Возврат Расширение;

КонецФункции

// Удаляет кавычки с начала и конца строки, если они есть.
//
// Параметры:
//  Строка - входная строка;
//
// Возвращаемое значение:
//  Строка - строка без двойных кавычек.
//
&НаСервере
Функция УдалитьКавычки(Знач Строка, Кавычка = """")

    Пока Лев(Строка, 1) = Кавычка Цикл
        Строка = Сред(Строка, 2);
    КонецЦикла;

    Пока Прав(Строка, 1) = Кавычка Цикл
        Строка = Лев(Строка, СтрДлина(Строка) - 1);
    КонецЦикла;

    Возврат Строка;

КонецФункции

&НаСервере
Процедура УдалитьКолонкиСНулевойШириной(ТаблицаРезультат)
    Перем МассивПустыхКолонок;

    // Найдем пустые колонки.
    МассивПустыхКолонок = Новый Массив;
    Для Каждого Колонка ИЗ ТаблицаРезультат.Колонки Цикл
        Если Колонка.Ширина = 0 Тогда
            МассивПустыхКолонок.Добавить(Колонка.Имя);
        КонецЕсли;
    КонецЦикла;

    // Удалим пустые колонки.
    Для Каждого ПустаяКолонка ИЗ МассивПустыхКолонок Цикл
        ТаблицаРезультат.Колонки.Удалить(ПустаяКолонка);
    КонецЦикла;

КонецПроцедуры

// Удаляет из строки указанное количество символов справа.
//
// Параметры:
//  Текст         - Строка - строка, в которой необходимо удалить последние символы;
//  ЧислоСимволов - Число  - количество удаляемых символов.
//
&НаСервере
Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов)

    Текст = Лев(Текст, СтрДлина(Текст) - ЧислоСимволов);

КонецПроцедуры

// Функция возвращает часть строки после последнего встреченного символа в строке
&НаСервере
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)

    ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
    Пока ПозицияСимвола >= 1 Цикл
        Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
            Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1);
        КонецЕсли;
        ПозицияСимвола = ПозицияСимвола - 1;
    КонецЦикла;

    Возврат "";

КонецФункции



// ЧТЕНИЕ ФАЙЛА 
&НаСервере
Функция ПолучитьСписокЛистов_EXCEL1C(Адрес,ТекРасширение)
	Перем ТабличныйДокумент, ОбластьТД;
	Перем СписокЛистов;
	
	СписокЛистов = Новый СписокЗначений;
	СписокЛистов.Очистить();
	
	ДанныйФайл = ПолучитьИзВременногоХранилища(Адрес);
	ФайлЕксель = ПолучитьИмяВременногоФайла(ТекРасширение);
	ДанныйФайл.Записать(ФайлЕксель);
	ПутьВременногоФайла =  ФайлЕксель;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		// Выполняется долго на больших файлах.
		ТабличныйДокумент.Прочитать(ФайлЕксель, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		// сообщение о том, что необходимо сохранить файл ч/з норм офис
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Структура выбранного файла системе не доступна!"+Символы.ПС+"Необходимо создать новую книгу в формате EXCEL, скопировать содержимое указанного выйла и сохранить новый файл с нужным расщирением!";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Возврат СписокЛистов;
	КонецПопытки;
	
	Для Каждого ОбластьТД ИЗ ТабличныйДокумент.Области Цикл
		СписокЛистов.Добавить(ОбластьТД.Имя);
	КонецЦикла;
	
	Возврат СписокЛистов;
	
КонецФункции

// Метод "EXCEL1C" для файлов EXCEL с расширениями: xlsx, xls, ods.
//
// Параметры:
//		ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением).
//      ИмяЛиста - Имя листа файла (платформа 8.3.10).
//		СтрокаЗаголовка (по умолчанию = 1) - Номер строки файла типа MXL, в которой расположены заголовки колонок.
//		Не используется. 
//		В обработке 1-я строка анализируется для сопоставления колонок файла с реквизитами объектов 1С.
//		НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из файла.
//		КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из файла.
//		Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся в файле.
//		КолвоСтрокФайла - Количество строк в файле. Возвращается в вызвавшую процедуру.
//
// Возвращаемые значения:
//         ТаблицаРезультат - Результат считывания данных из файла.
//
&НаСервере
Процедура ЗагрузитьМетодом_EXCEL1C(АдресВХранилище, Знач ИмяЛиста = "", Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокФайла = 0)
	Перем ТабличныйДокумент, ОбластьФайла, КолВоКолонокФайла, ИмяКолонки, Область, ТекущаяОбласть, нСтрока, нКолонка, НоваяСтрокаТФ, ЗначениеЯчейки;
	Перем ТаблицаРезультат;
	
	ТаблицаРезультат = РеквизитФормыВЗначение("ТаблицаДанных");
	
	ФайлЕксель = ПутьВременногоФайла;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		// Выполняется долго на больших файлах.
		ТабличныйДокумент.Прочитать(ФайлЕксель, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		// сообщение о том, что необходимо сохранить файл ч/з норм офис
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Структура выбранного файла системе не доступна!"+Символы.ПС+"Необходимо создать новую книгу в формате EXCEL, скопировать содержимое указанного выйла и сохранить новый файл с нужным расщирением!";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	КонецПопытки;
	
	ОбластьФайла = ТабличныйДокумент;
	Если ВерсияПриложенияМеньше8310() Тогда
		// Платформа 8.3.9 и более ранние (Файл EXCEL как 1 лист).
		КолвоСтрокФайла = ОбластьФайла.ВысотаТаблицы;
		КолВоКолонокФайла = ОбластьФайла.ШиринаТаблицы;
	Иначе
		// Платформа 8.3.10 (Облать = Лист данных).
		ОбластьФайла = ТабличныйДокумент.ПолучитьОбласть(ИмяЛиста);
		КолВоСтрокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоВертикали();
		КолВоКолонокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоГоризонтали();
	КонецЕсли;
	
	// Проверка заполненности листа.
	Если КолвоСтрокФайла = 0 Тогда
		// Завершение работы.
		// Закрытие Объектов.
		ТабличныйДокумент = Неопределено;
	КонецЕсли;
	
	// 1-я строка. Заголовки.
	НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
	НоваяСтрокаТФ.НомерСтроки = 1;
	Для ит=1 ПО КолВоКолонокФайла Цикл
		нКолонка = СтрЗаменить(ит, Символы.НПП, "");
		ИмяКолонки = "N" + нКолонка;
		НоваяСтрокаТФ[ИмяКолонки] = СтрЗаменить(СокрЛП(ОбластьФайла.ПолучитьОбласть("R1" + "C"+нКолонка).ТекущаяОбласть.Текст), Символы.ПС, "");
		
		// Используется при формировании таблицы на форме обработки.
		ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
		ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
		ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
	КонецЦикла;
	
	НачСтрока = ?(НачСтрока = 0, 2, НачСтрока);
	КонСтрока = ?(КонСтрока = 0, КолвоСтрокФайла, КонСтрока);
	
	Если Объект.ЗагружатьДоСтроки <> 0 тогда
		КонСтрока = Объект.ЗагружатьДоСтроки;
	КонецЕсли;
	
	Для нСтрокаТФ = НачСтрока ПО КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ.НомерСтроки = нСтрокаТФ;
		НоваяСтрокаТФ[0] = нСтрокаТФ;
		нСтрока = СтрЗаменить(нСтрокаТФ, Символы.НПП, "");
		Для нКолонкаТФ = 1 ПО КолВоКолонокФайла Цикл
			нКолонка = СтрЗаменить(нКолонкаТФ, Символы.НПП, "");
			Область = ОбластьФайла.ПолучитьОбласть("R"+нСтрока+"C"+нКолонка);
			ТекущаяОбласть = Область.ТекущаяОбласть;
			Попытка
				ЗначениеЯчейки = ТекущаяОбласть.Значение;        // Число, Дата.      				
				//++Шерстюк Ю.Ю. 15.07.2021 Задача 12381 если артикул начинается с "0", то преобразуется в число и откидывается "0", а потом не можем найти номенклатуру по артикулу
				Если Лев(ТекущаяОбласть.Текст,1) = "0" Тогда 
					ЗначениеЯчейки = СокрЛП(ТекущаяОбласть.Текст);    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					ЗначениеЯчейки = ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(ЗначениеЯчейки);
					Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда
						ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					КонецЕсли;
				Иначе
					ЗначениеЯчейки = Неопределено;
					Если Область.Рисунки.Количество() > 0 Тогда    // Изображение.
						ЗначениеЯчейки = ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками(Область, нСтрока, нКолонка, "УИД");
					КонецЕсли;
				КонецЕсли;

				КонецЕсли;
				//--Шерстюк Ю.Ю.
			Исключение
				ЗначениеЯчейки = СокрЛП(ТекущаяОбласть.Текст);    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					ЗначениеЯчейки = ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(ЗначениеЯчейки);
					Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда
						ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					КонецЕсли;
				Иначе
					ЗначениеЯчейки = Неопределено;
					Если Область.Рисунки.Количество() > 0 Тогда    // Изображение.
						ЗначениеЯчейки = ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками(Область, нСтрока, нКолонка, "УИД");
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;
			
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаРезультат,"ТаблицаДанных");
	ПроверитьНаСервере(ИмяЛистаФайла);
	
КонецПроцедуры



// ЗАГРУЗКА ФАЙЛА 
&НаСервере
Процедура ЗагрузитьНаСервере(ИмяАртикул,ИмяОстаток="",ИмяКолонкиСрокПоставки="",КоличествоСтрокКЗагрузке)
	// перед загрузкой удаляем записи регистра!!
	ОчиститьДанныеРегистра(ИмяОстаток,ИмяКолонкиСрокПоставки);
	
	//++Шерстюк Ю.Ю. 14.06.19
	//ТаблицаДанныхДляЗагрузки =  ТаблицаДанных.Выгрузить(,""+ИмяАртикул+","+ИмяОстаток+"");
	ТаблицаДанныхДляЗагрузки =  ТаблицаДанных.Выгрузить(,""+ИмяАртикул+","+ИмяОстаток+","+ИмяКолонкиСрокПоставки+"");
	
	//--Шерстюк Ю.Ю. 14.06.19
	ТаблНесоотвествий.Очистить();
	ТаблицаНеНайденныхСоответствий = ТаблНесоотвествий;
	Ном = 1;
	КонтрольСтрокЗагрузки = 1;
	Если КоличествоСтрокКЗагрузке = 0 Тогда 
		КоличествоСтрокКЗагрузке = ТаблицаДанныхДляЗагрузки.Количество();
	КонецЕсли;	
	СозданоЗаписей = 0;	
	//++Шерстюк Ю.Ю. 14.06.19
	СозданоЗаписейСрокиПоставки = 0;
	пПустаяссылкаНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	//--Шерстюк Ю.Ю. 14.06.19
	
	Для Каждого СтрокаТаблицы из ТаблицаДанныхДляЗагрузки цикл
		Если КоличествоСтрокКЗагрузке < КонтрольСтрокЗагрузки Тогда Продолжить; КонецЕсли;	
		//++Шерстюк Ю.Ю. 14.06.19
		//Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		Номенклатура = пПустаяссылкаНоменклатура;
		//--Шерстюк Ю.Ю. 14.06.19
		// 1 этап справочник "Номенклатура"
		СтруктураОтбора = Новый Структура();
		//начало блока изменений @гигабайт Яшин В.В. 05.02.2019 г.
		//при преобразовании значеения в типизированное значение 1С, артикул мог преобразоваться с число
		Если ТипЗнч(СтрокаТаблицы[""+ИмяАртикул]) = Тип("Число") Тогда
			СтрокаТаблицы[""+ИмяАртикул] = СтрЗаменить(Строка(СтрокаТаблицы[""+ИмяАртикул]), Символы.НПП, "");
		ИначеЕсли ТипЗнч(СтрокаТаблицы[""+ИмяАртикул]) = Тип("Строка") Тогда
			СтрокаТаблицы[""+ИмяАртикул] = СтрЗаменить(СтрокаТаблицы[""+ИмяАртикул], Символы.НПП, "");
		КонецЕсли;
		//конец блока изменений @гигабайт Яшин В.В. 05.02.2019 г.
		СтруктураОтбора.Вставить("Артикул",СтрокаТаблицы[""+ИмяАртикул]);
		
		ВыборкаНоменклатура = Справочники.Номенклатура.Выбрать(,,СтруктураОтбора);
		Пока ВыборкаНоменклатура.Следующий() цикл
			//начало блока изменений @гигабайт Яшин В.В. 05.02.2019 г.
			Если ВыборкаНоменклатура.Производитель = Объект.Производитель тогда
			 Номенклатура =  ВыборкаНоменклатура.Ссылка;
			КонецЕсли;
			//конец блока изменений @гигабайт Яшин В.В. 05.02.2019 г.
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Номенклатура) тогда
			
			//++ Шерстюк Ю.Ю. 14.06.19
			Если ИмяОстаток <> "" Тогда 
			//--Шерстюк Ю.Ю. 14.06.19
				Если СтрокаТаблицы[""+ИмяОстаток] <> "" тогда
					Если Число(СтрокаТаблицы[""+ИмяОстаток]) > 0 Тогда 
						НоваяЗапись = РегистрыСведений.ГИГ_НоменклатураНаСкладеПоставщика.СоздатьМенеджерЗаписи();
						НоваяЗапись.Активность = Истина;
						НоваяЗапись.ДатаЗаписи = Объект.ДатаЗаписи;
						НоваяЗапись.Количество = Число(СтрокаТаблицы[""+ИмяОстаток]);
						НоваяЗапись.Номенклатура = Номенклатура;
						//начало блока изменений @гигабайт Яшин В.В. 05.02.2019 г.
						//НоваяЗапись.Поставщик = Объект.ПоставщикПрайса;
						//НоваяЗапись.Производитель = Объект.Производитель;
						//конец блока изменений @гигабайт Яшин В.В. 05.02.2019 г.
						НоваяЗапись.Склад = Объект.Склад;
						НоваяЗапись.Записать(Истина);
						МетаданныеОбъекта = Метаданные.РегистрыСведений.ГИГ_НоменклатураНаСкладеПоставщика;
						ТекстСообщения = "Обработка данных об остатках номенклатуры производителя на складах."; 
						ЗаписьЖурналаРегистрации(
												"Данные. Добавление",
												УровеньЖурналаРегистрации.Информация,
												МетаданныеОбъекта,
												НоваяЗапись,
												ТекстСообщения);
						СозданоЗаписей = СозданоЗаписей+1;
						
					КонецЕсли;
				КонецЕсли;
				
			  //++ Шерстюк Ю.Ю. 14.06.19
		     КонецЕсли;
		     //-- Шерстюк Ю.Ю. 14.06.19
			
			
			//++Шерстюк Ю.Ю. 14.06.19
			Если ИмяКолонкиСрокПоставки <> "" Тогда
				Если СтрокаТаблицы[""+ИмяКолонкиСрокПоставки] <> "" Тогда
					пСрокПоставки = Число(СтрокаТаблицы[""+ИмяКолонкиСрокПоставки]);
					Если пСрокПоставки > 0 Тогда
						
						пНоваяЗаписьСрокПоставки = РегистрыСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СоздатьМенеджерЗаписи();
						пНоваяЗаписьСрокПоставки.Активность = Истина;
						пНоваяЗаписьСрокПоставки.Номенклатура = Номенклатура;
						пНоваяЗаписьСрокПоставки.СкладПоставщика = Объект.Склад;
						пНоваяЗаписьСрокПоставки.СрокПоставки = пСрокПоставки;
						пНоваяЗаписьСрокПоставки.Записать(Истина);
						
						МетаданныеОбъекта = Метаданные.РегистрыСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства;
						ТекстСообщения = "Обработка данных о сроках поставки номенклатуры на склад поставщика с производства."; 
						ЗаписьЖурналаРегистрации(
												"Данные. Добавление",
												УровеньЖурналаРегистрации.Информация,
												МетаданныеОбъекта,
												НоваяЗапись,
												ТекстСообщения);

						СозданоЗаписейСрокиПоставки = СозданоЗаписейСрокиПоставки + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			//--Шерстюк Ю.Ю. 14.06.19

		Иначе
			СтрокаНЕНайденых = ТаблицаНеНайденныхСоответствий.Добавить();
			СтрокаНЕНайденых.НомерСтроки = Ном;
			СтрокаНЕНайденых.Артикул = СтрокаТаблицы[""+ИмяАртикул];
			Ном = Ном+1;
		КонецЕсли;
		КонтрольСтрокЗагрузки = КонтрольСтрокЗагрузки + 1;
	КонецЦикла;
	
	ТекстСообщения = "Загружено записей регистра ГИГ_НоменклатураНаСкладеПоставщика: "+Строка(СозданоЗаписей) + Символы.ПС + "Загружено записей регистра ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства: "+Строка(СозданоЗаписейСрокиПоставки);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	ФайлEXCEL = Файл;
	ИмяКолонкиАртикул = "Артикул";
	ИмяКолонкиОстаток = "Остаток";
	//++Шерстюк Ю.Ю. 14.06.19
	ИмяКолонкиСрокПоставки = "СрокПоставки";
	//--Шерстюк Ю.Ю. 14.06.19
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РеквизитПоиска",ИмяКолонкиАртикул);
	МассивОтбора = Объект.ПравилаЗагрузки.НайтиСтроки(СтруктураОтбора);
	ИмяАртикул = МассивОтбора[0].ИмяКолонкиФайлаЧтение;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РеквизитПоиска",ИмяКолонкиОстаток);
	МассивОтбора = Объект.ПравилаЗагрузки.НайтиСтроки(СтруктураОтбора);
	//++ Шерстюк Ю.Ю. 14.06.19
	 //ИмяОстаток = МассивОтбора[0].ИмяКолонкиФайлаЧтение;
	Если МассивОтбора.Количество() > 0 Тогда 
		ИмяОстаток = МассивОтбора[0].ИмяКолонкиФайлаЧтение;
	Иначе 
		ИмяОстаток = "";
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РеквизитПоиска",ИмяКолонкиСрокПоставки);
	МассивОтбора = Объект.ПравилаЗагрузки.НайтиСтроки(СтруктураОтбора);
	Если МассивОтбора.Количество() > 0 Тогда 
		ИмяСрокПоставки = МассивОтбора[0].ИмяКолонкиФайлаЧтение;
	Иначе
		ИмяСрокПоставки = "";
	КонецЕсли;
    //--Шерстюк Ю.Ю. 14.06.19
	Состояние("Чтение и загрузка листа "+ИмяЛистаФайла+"");
	
	//++Шерстюк Ю.Ю. 14.06.19
	ЗагрузитьНаСервере(ИмяАртикул,ИмяОстаток,ИмяСрокПоставки,Объект.ЗагружатьДоСтроки);
	//--Шерстюк Ю.Ю. 14.06.19

	//*******************************************************************************
	Документ = ОбработатьПечать("НеНайденныеПозиции");
	
	Если Документ = Неопределено Тогда
		Возврат;
	Иначе 
		ИдентификаторПечатнойФормы = "НеНайденныеПозиции";
		НазваниеПечатнойФормы = НСтр("ru = 'Список не загруженной номенклатуры'");
		Документ.Показать(НазваниеПечатнойФормы);
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ПолучитьИПрочитатьКолонкиФайлаПоПравилу(ТекущееПравилоЗагрузки,ЧислоНеобходимыхКолонок,СтрокаНаименованийКолонок)
	МассивКолонокТаблицы = Новый Структура;
		// наименование необходимых колонок ищем по правилу
	ИмяКолонкиУникальногоИдентификатора     = ТекущееПравилоЗагрузки.КолонкаУникальныйИдентификатор;
	ИмяКолонкиСодержащееНаименование        = ТекущееПравилоЗагрузки.КолонкаНаименования;
	ИмяКолонкиСодержащееЗначениеТарифа      = ТекущееПравилоЗагрузки.КолонкаЗначениеТарифа;
	ИмяКолонкиСодержащееЗначениеЕдИзмТарифа = ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа;
	ИмяКолонкиСодержащееЗначениеБЕдИзм      = ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения;
	ИмяКолонкиСодержащееЗначениеОЕдИзм      = ТекущееПравилоЗагрузки.КолонкаОсновнаяЕдиницаИзмерения;
	ИмяКолонкиСодержащееЗначениеТЕдИзм      = ТекущееПравилоЗагрузки.КолонкаТранспортнаяЕдиницаИзмерения;
	ИмяКолонкиСодержащееЗначениеМинЗаказа   = ТекущееПравилоЗагрузки.КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения;
	ИмяКолонкиСодержащееЗначениеОбъема      = ТекущееПравилоЗагрузки.КолонкаЗначениеОбъема;
	ИмяКолонкиСодержащееЗначениеВес         = ТекущееПравилоЗагрузки.КолонкаЗначениеВеса;
	ИмяКолонкиСодержащееЗначениеШтрихКодБЕИ = ТекущееПравилоЗагрузки.КолонкаШтрихКодДляБазовойЕдиницыИзмерения;
	ИмяКолонкиСодержащееКОЕИ                = ТекущееПравилоЗагрузки.КолонкаКоэффициентОсновнойЕдиницыИзмерения;
	ИмяКолонкиСодержащееКТЕИ                = ТекущееПравилоЗагрузки.КолонкаКоэффициентТранспортнойЕдиницыИзмерения;
	ИмяКолонкиСодержащееКЕИТарифа           = ТекущееПравилоЗагрузки.КолонкаКоэффициентЕдиницыИзмеренияТарифа;
	ИмяКолонкиСодержащееКоличествоЕИТарифа  = ТекущееПравилоЗагрузки.КоличествоЕдиницВТарифе;
	ИмяКолонкиСодержащееМРЦСНДС             = ТекущееПравилоЗагрузки.КолонкаМРЦСНДС;
	ИмяКолонкиСодержащееМРЦБНДС             = ТекущееПравилоЗагрузки.КолонкаМРЦБезНДС;
	ИмяКолонкиСодержащееЗначениеЦК          = ТекущееПравилоЗагрузки.ЦеноваяКатегория;
	ИмяКолонкиСодержащееМинимальногоЗаказаВБазовойЕдиницеИзмерения = ТекущееПравилоЗагрузки.КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения;
	
	ИмяКолонкиСодержащееЗначениеКРасчетаРозничныхЦен          = ТекущееПравилоЗагрузки.КолонкаКРасчетаРозничныхЦен;
	ИмяКолонкиСодержащееЗначениеКРасчетаПлановыхЗакупочныхЦен = ТекущееПравилоЗагрузки.КолонкаКРасчетаПлановыхЗакупочныхЦен;
	
	ИмяКолонкаАналитика1             = ТекущееПравилоЗагрузки.КолонкаАналитика1;
	ИмяКолонкаАналитика2             = ТекущееПравилоЗагрузки.КолонкаАналитика2;
	ИмяКолонкаАналитика3             = ТекущееПравилоЗагрузки.КолонкаАналитика3;
	ИмяКолонкаАналитика4             = ТекущееПравилоЗагрузки.КолонкаАналитика4;
	ИмяКолонкаАналитика5             = ТекущееПравилоЗагрузки.КолонкаАналитика5;
	
	
	
	Для а = 1 по ЧислоНеобходимыхКолонок цикл
		ИмяКолонки = "N"+а;
		// артикул
		Если ЗначениеЗаполнено(ИмяКолонкиУникальногоИдентификатора) и ТипЗнч(ИмяКолонкиУникальногоИдентификатора) = Тип("Строка") тогда
			Если СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиУникальногоИдентификатора) тогда
				ИмяКолонкиФайлаУникальногоИдентификатора = СокрЛП(ИмяКолонки);
				
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаУникальногоИдентификатора = "-";
		КонецЕсли;
		
		
		
		// Наименование
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееНаименование) и ТипЗнч(ИмяКолонкиСодержащееНаименование) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееНаименование) тогда
				ИмяКолонкиФайлаСодержащееНаименование = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееНаименование = "-";
		КонецЕсли;
		
		// Тариф
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеТарифа) и ТипЗнч(ИмяКолонкиСодержащееЗначениеТарифа) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеТарифа) тогда
				ИмяКолонкиФайлаСодержащееЗначениеТарифа = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеТарифа = "-";
		КонецЕсли;
		
		// Единица измерения Тарифа
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеЕдИзмТарифа) и ТипЗнч(ИмяКолонкиСодержащееЗначениеЕдИзмТарифа) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеЕдИзмТарифа) тогда
				ИмяКолонкиФайлаСодержащееЗначениеЕдИзмТарифа = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеЕдИзмТарифа = "-";
		КонецЕсли;
		
		// Базовая единица измерения
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеБЕдИзм) и ТипЗнч(ИмяКолонкиСодержащееЗначениеБЕдИзм) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеБЕдИзм) тогда
				ИмяКолонкиФайлаСодержащееЗначениеБЕдИзм = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеБЕдИзм = "-";
		КонецЕсли;
		
		// Основная единица измерения
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеОЕдИзм) и ТипЗнч(ИмяКолонкиСодержащееЗначениеОЕдИзм) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеОЕдИзм) тогда
				ИмяКолонкиФайлаСодержащееЗначениеОЕдИзм = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеОЕдИзм = "-";
		КонецЕсли;
		
		// Транспортная единица измерения
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеТЕдИзм) и ТипЗнч(ИмяКолонкиСодержащееЗначениеТЕдИзм) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеТЕдИзм) тогда
				ИмяКолонкиФайлаСодержащееЗначениеТЕдИзм = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеТЕдИзм = "-";
		КонецЕсли;
		
		// Минимальный заказ
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеМинЗаказа) и ТипЗнч(ИмяКолонкиСодержащееЗначениеМинЗаказа) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеМинЗаказа) тогда
				ИмяКолонкиФайлаСодержащееЗначениеМинЗаказа = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеМинЗаказа = "-";
		КонецЕсли;
		
		// Объем
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеОбъема) и ТипЗнч(ИмяКолонкиСодержащееЗначениеОбъема) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеОбъема) тогда
				ИмяКолонкиФайлаСодержащееЗначениеОбъема = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеОбъема = "-";
		КонецЕсли;
		
		// Вес
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеВес) и ТипЗнч(ИмяКолонкиСодержащееЗначениеВес) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеВес) тогда
				ИмяКолонкиФайлаСодержащееЗначениеВес = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеВес = "-";
		КонецЕсли;
		
		
		// Штрих код
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеШтрихКодБЕИ) и ТипЗнч(ИмяКолонкиСодержащееЗначениеШтрихКодБЕИ) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеШтрихКодБЕИ) тогда
				ИмяКолонкиФайлаСодержащееЗначениеШтрихКодБЕИ = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеШтрихКодБЕИ = "-";
		КонецЕсли;
		
		// Коэффициенты
		// К Основной единицы
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееКОЕИ) и ТипЗнч(ИмяКолонкиСодержащееКОЕИ) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееКОЕИ) тогда
				ИмяКолонкиФайлаСодержащееЗначениеКОЕИ = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеКОЕИ = "-";
		КонецЕсли;
		
		// К Транспортной единицы
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееКТЕИ) и ТипЗнч(ИмяКолонкиСодержащееКТЕИ) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееКТЕИ) тогда
				ИмяКолонкиФайлаСодержащееЗначениеКТЕИ = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеКТЕИ = "-";
		КонецЕсли;
		
		// К единицы измерения тарифа
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееКЕИТарифа) и ТипЗнч(ИмяКолонкиСодержащееКЕИТарифа) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееКЕИТарифа) тогда
				ИмяКолонкиФайлаСодержащееЗначениеКЕИТарифа = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеКЕИТарифа = "-";
		КонецЕсли;
		
		// Количество единицы измерения тарифа
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееКоличествоЕИТарифа) и ТипЗнч(ИмяКолонкиСодержащееКоличествоЕИТарифа) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееКоличествоЕИТарифа) тогда
				ИмяКолонкиФайлаСодержащееЗначениеКоличествоЕИТарифа = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеКоличествоЕИТарифа = "-";
		КонецЕсли;
		
		//К Расчета розничных цен
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеКРасчетаРозничныхЦен) и ТипЗнч(ИмяКолонкиСодержащееЗначениеКРасчетаРозничныхЦен) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеКРасчетаРозничныхЦен) тогда
				ИмяКолонкиФайлаСодержащееЗначениеКРасчетаРозничныхЦен = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеКРасчетаРозничныхЦен = "-";
		КонецЕсли;
		
		//К Расчета плановых закупочных цен
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеКРасчетаПлановыхЗакупочныхЦен) и ТипЗнч(ИмяКолонкиСодержащееЗначениеКРасчетаПлановыхЗакупочныхЦен) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеКРасчетаПлановыхЗакупочныхЦен) тогда
				ИмяКолонкиФайлаСодержащееЗначениеКРасчетаПлановыхЗакупочныхЦен = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениКРасчетаПлановыхЗакупочныхЦен = "-";
		КонецЕсли;
		
		// Поля МРЦ
		// МРЦ с НДС
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееМРЦСНДС) и ТипЗнч(ИмяКолонкиСодержащееМРЦСНДС) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееМРЦСНДС) тогда
				ИмяКолонкиФайлаСодержащееЗначениеМРЦСНДС = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеМРЦСНДС = "-";
		КонецЕсли;
		
		// МРЦ без НДС
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееМРЦБНДС) и ТипЗнч(ИмяКолонкиСодержащееМРЦБНДС) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееМРЦБНДС) тогда
				ИмяКолонкиФайлаСодержащееЗначениеМРЦБНДС = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеМРЦБНДС = "-";
		КонецЕсли;
		
		// доп поля
		// Минимальный Заказ
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееМинимальногоЗаказаВБазовойЕдиницеИзмерения) и ТипЗнч(ИмяКолонкиСодержащееМинимальногоЗаказаВБазовойЕдиницеИзмерения) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееМинимальногоЗаказаВБазовойЕдиницеИзмерения) тогда
				ИмяКолонкиФайлаСодержащееЗначениеМинимальногоЗаказаВБазовойЕдиницеИзмерения = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеМинимальногоЗаказаВБазовойЕдиницеИзмерения = "-";
		КонецЕсли;
		// Ценовая категория
		Если ЗначениеЗаполнено(ИмяКолонкиСодержащееЗначениеЦК) и ТипЗнч(ИмяКолонкиСодержащееЗначениеЦК) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкиСодержащееЗначениеЦК) тогда
				ИмяКолонкиФайлаСодержащееЗначениеЦК = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееЗначениеЦК = "-";
		КонецЕсли;

		// данные групп аналитики
		Если ЗначениеЗаполнено(ИмяКолонкаАналитика1) и ТипЗнч(ИмяКолонкаАналитика1) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкаАналитика1) тогда
				ИмяКолонкиФайлаСодержащееАналитика1 = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееАналитика1 = "-";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяКолонкаАналитика2) и ТипЗнч(ИмяКолонкаАналитика2) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкаАналитика2) тогда
				ИмяКолонкиФайлаСодержащееАналитика2 = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееАналитика2 = "-";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяКолонкаАналитика3) и ТипЗнч(ИмяКолонкаАналитика3) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкаАналитика3) тогда
				ИмяКолонкиФайлаСодержащееАналитика3 = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееАналитика3 = "-";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяКолонкаАналитика4) и ТипЗнч(ИмяКолонкаАналитика4) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкаАналитика4) тогда
				ИмяКолонкиФайлаСодержащееАналитика4 = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееАналитика4 = "-";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяКолонкаАналитика5) и ТипЗнч(ИмяКолонкаАналитика5) = Тип("Строка") тогда
			Если  СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[имяКолонки],Символы.ПС,"")) = СокрЛП(ИмяКолонкаАналитика5) тогда
				ИмяКолонкиФайлаСодержащееАналитика5 = СокрЛП(ИмяКолонки);
			КонецЕсли;
		Иначе
			ИмяКолонкиФайлаСодержащееАналитика5 = "-";
		КонецЕсли;
	КонецЦикла;	
	
	МассивКолонокТаблицы.Вставить("КолонкаУникальныйИдентификатор",ИмяКолонкиФайлаУникальногоИдентификатора);
	МассивКолонокТаблицы.Вставить("КолонкаНаименования",ИмяКолонкиФайлаСодержащееНаименование);
	МассивКолонокТаблицы.Вставить("КолонкаЗначениеТарифа",ИмяКолонкиФайлаСодержащееЗначениеТарифа);		
	МассивКолонокТаблицы.Вставить("КолонкаЕдиницаИзмеренияТарифа",ИмяКолонкиФайлаСодержащееЗначениеЕдИзмТарифа); 		
	МассивКолонокТаблицы.Вставить("КолонкаБазоваяЕдиницаИзмерения",ИмяКолонкиФайлаСодержащееЗначениеБЕдИзм);		
	МассивКолонокТаблицы.Вставить("КолонкаОсновнаяЕдиницаИзмерения",ИмяКолонкиФайлаСодержащееЗначениеОЕдИзм);		
	МассивКолонокТаблицы.Вставить("КолонкаТранспортнаяЕдиницаИзмерения",ИмяКолонкиФайлаСодержащееЗначениеТЕдИзм);   		
	МассивКолонокТаблицы.Вставить("КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения",ИмяКолонкиФайлаСодержащееЗначениеМинЗаказа);		
	МассивКолонокТаблицы.Вставить("КолонкаЗначениеОбъема",ИмяКолонкиФайлаСодержащееЗначениеОбъема);		
	МассивКолонокТаблицы.Вставить("КолонкаЗначениеВеса",ИмяКолонкиФайлаСодержащееЗначениеВес);		
	МассивКолонокТаблицы.Вставить("КолонкаШтрихКодДляБазовойЕдиницыИзмерения",ИмяКолонкиФайлаСодержащееЗначениеШтрихКодБЕИ);
	МассивКолонокТаблицы.Вставить("КолонкаКоэффициентОсновнойЕдиницыИзмерения",ИмяКолонкиФайлаСодержащееЗначениеКОЕИ);
	МассивКолонокТаблицы.Вставить("КолонкаКоэффициентТранспортнойЕдиницыИзмерения",ИмяКолонкиФайлаСодержащееЗначениеКТЕИ);
	МассивКолонокТаблицы.Вставить("КолонкаКоэффициентЕдиницыИзмеренияТарифа",ИмяКолонкиФайлаСодержащееЗначениеКЕИТарифа);
	МассивКолонокТаблицы.Вставить("КолонкаМРЦСНДС",ИмяКолонкиФайлаСодержащееЗначениеМРЦСНДС);
	МассивКолонокТаблицы.Вставить("КолонкаМРЦБезНДС",ИмяКолонкиФайлаСодержащееЗначениеМРЦБНДС);
	МассивКолонокТаблицы.Вставить("КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения",ИмяКолонкиФайлаСодержащееЗначениеМинимальногоЗаказаВБазовойЕдиницеИзмерения);
	МассивКолонокТаблицы.Вставить("ЦеноваяКатегория",ИмяКолонкиФайлаСодержащееЗначениеЦК);
	МассивКолонокТаблицы.Вставить("КоличествоЕдиницВТарифе",ИмяКолонкиФайлаСодержащееЗначениеКоличествоЕИТарифа);
	МассивКолонокТаблицы.Вставить("КолонкаКРасчетаРозничныхЦен",ИмяКолонкиФайлаСодержащееЗначениеКРасчетаРозничныхЦен);
	МассивКолонокТаблицы.Вставить("КолонкаКРасчетаПлановыхЗакупочныхЦен",ИмяКолонкиФайлаСодержащееЗначениКРасчетаПлановыхЗакупочныхЦен);
	
	МассивКолонокТаблицы.Вставить("КолонкаАналитика1",ИмяКолонкиФайлаСодержащееАналитика1);
	МассивКолонокТаблицы.Вставить("КолонкаАналитика2",ИмяКолонкиФайлаСодержащееАналитика2);
	МассивКолонокТаблицы.Вставить("КолонкаАналитика3",ИмяКолонкиФайлаСодержащееАналитика3);
	МассивКолонокТаблицы.Вставить("КолонкаАналитика4",ИмяКолонкиФайлаСодержащееАналитика4);
	МассивКолонокТаблицы.Вставить("КолонкаАналитика5",ИмяКолонкиФайлаСодержащееАналитика5);
	
	Возврат МассивКолонокТаблицы;
	
КонецФункции	

&НаСервере
Процедура ПроверитьНаСервере(ИмяЛистаЗагрузки)
	
	КопияТаблицаДанных =  ТаблицаДанных.Выгрузить();
	СтрокаНаименованийКолонок = КопияТаблицаДанных[?(Объект.НомерПервойСтроки = 0,0,Объект.НомерПервойСтроки-1)]; 
	ЧислоКолонокФайла = КопияТаблицаДанных.Колонки.Количество()-2;
	
	Для а = 1 по ЧислоКолонокФайла Цикл 
		Если СтрокаНаименованийКолонок["N"+а] <> "" Тогда 
			СтрокаПравил = Объект.ПравилаЗагрузки.Добавить();
			СтрокаПравил.ИмяКолонкиФайлаЧтение = "N"+а;
			СтрокаПравил.ЗаголовокКолонки = СтрЗаменить(СтрокаНаименованийКолонок["N"+а],Символы.ПС,"");
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем СистемнаяИнформация, СписокЛистов;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПриложенияБезНомераСборки = ВерсияБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
	Объект.ДатаЗаписи = ТекущаяДата();
	ПризПроверки = Ложь;
	СопоставленияВыставлены = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛисты(АдресВХранилище,ТекРасширение)
	//++Шерстюк Ю.Ю. 17.01.20
	Элементы.ИмяЛистаФайла.СписокВыбора.Очистить();
	//--Шерстюк Ю.Ю. 17.01.20
	СписокЛистов =  ПолучитьСписокЛистов_EXCEL1C(АдресВХранилище,ТекРасширение);
	
	Для Каждого СтрокаСписка из СписокЛистов цикл
		СтрокаТаблицыПравил = Элементы.ИмяЛистаФайла.СписокВыбора.Добавить();
		СтрокаТаблицыПравил.Значение = СтрокаСписка.Значение; 
	КонецЦикла;	
	Если  СписокЛистов.Количество() = 1 тогда
		ИмяЛистаФайла = СписокЛистов[0].Значение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтруктуру(Команда)
	ТекДвоичнДанные = Новый ДвоичныеДанные(Файл);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТекДвоичнДанные); 
	Если ЗначениеЗаполнено(ИмяЛистаФайла) Тогда 
		Объект.ПравилаЗагрузки.Очистить();
		// формируем табличку в реквизитах объекта....
		ЗагрузитьМетодом_EXCEL1C(АдресВХранилище, ИмяЛистаФайла);	// Считать 1-ый лист из списка по алфавиту.
	КонецЕсли;
	ПризПроверки = Истина;
	УправлениеФормой();
КонецПроцедуры


// ПРЕОБРАЗОВАНИЕ СТРОКИ К ТИПИЗОВАННОМУ ЗНАЧЕНИЮ 1С.

&НаСервере
Функция ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(Знач ИсходноеЗначение)
	
	Если НЕ ИсходноеЗначение = "" Тогда
		//++Шерстюк Ю.Ю. 17.01.20 добавляем доп условие, т.к. если в артикуле есть ведущие "0" и не будет букв,
		//то преобразуется число и артикул будет неверный
		//Если ТолькоЦифрыИЗапятаяВСтроке(ИсходноеЗначение, Истина, Ложь) Тогда
	  Если ТолькоЦифрыИЗапятаяВСтроке(ИсходноеЗначение, Истина, Ложь) и (Лев(ИсходноеЗначение,1) <> "0") Тогда
	
		////--Шерстюк Ю.Ю. 17.01.20
			Попытка
				Возврат Число(ИсходноеЗначение);
			Исключение
				Возврат ИсходноеЗначение
			КонецПопытки;
		Иначе
			Если ВРег(ИсходноеЗначение) = "ИСТИНА" ИЛИ ВРег(ИсходноеЗначение) = ("ИСТИНА"+Символы.ПС) ИЛИ ВРег(ИсходноеЗначение) = "TRUE" ИЛИ ВРег(ИсходноеЗначение) = ("TRUE"+Символы.ПС) Тогда
				Возврат Истина;
			ИначеЕсли ВРег(ИсходноеЗначение) = "ЛОЖЬ" ИЛИ  ВРег(ИсходноеЗначение) = ("ЛОЖЬ"+Символы.ПС) ИЛИ ВРег(ИсходноеЗначение) = "FALSE" ИЛИ ВРег(ИсходноеЗначение) = ("FALSE"+Символы.ПС) Тогда
				Возврат Ложь;
			Иначе
				Возврат ПреобразоватьИзСтрокиВДату(ИсходноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсходноеЗначение
	
КонецФункции

// Проверяет, содержит ли строка только цифры и запятую.
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки
//  УчитыватьЛидирующиеНули - Булево - Флаг учета лидирующих нулей, если Истина, то ведущие нули пропускаются
//  УчитыватьПробелы        - Булево - Флаг учета пробелов, если Истина, то пробелы при проверке игнорируются
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
&НаСервере
Функция ТолькоЦифрыИЗапятаяВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если Сред(СтрокаПроверки, 1, 1) = "-" Тогда
		СтрокаПроверки = Сред(СтрокаПроверки, 2, СтрДлина(СтрокаПроверки));
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку
		Пока Сред(СтрокаПроверки, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы
		
	Возврат СтрДлина(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	СтрокаПроверки, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", ""), ",", "")
	) = 0;
	
КонецФункции

// Преобразование строки вида "01.01.13" или "01.01.2013" к значению типа "дата".
// Возможны друние форматы даты в файле EXCEL.
&НаСервере
Функция ПреобразоватьИзСтрокиВДату(Знач СтрокаДаты)
	Перем ScrptCtrl, OutDate;
	
	Попытка
		ScrptCtrl = Новый COMОбъект("MSScriptControl.ScriptControl");
		ScrptCtrl.Language="vbscript";
		OutDate = ScrptCtrl.Eval("CDate(""" + СтрокаДаты + """)");
		Возврат OutDate;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат СтрокаДаты;
	
КонецФункции 

// ПОЛУЧЕНИЕ ЗНАЧЕНИЯ ДЛЯ РЕКВИЗИТА ТИПА "ФАЙЛ КАРТИНКИ".

&НаСервере
Функция ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками(Знач Область, Знач нСтрока, Знач нКолонка, Знач ПравилоИмяФайлаКартинки = "УИД")
	Перем Рисунок, ит, ИмяФайлаРисунка;
	Перем ЗначениеЯчейки;
	
	ит = 0;
	ЗначениеЯчейки = "";
	Для Каждого Рисунок ИЗ Область.Рисунки Цикл
		ит = ит + 1;
		Если ПравилоИмяФайлаКартинки = "УИД" Тогда
			ИмяФайлаРисунка = КаталогВременныхФайлов() + Новый УникальныйИдентификатор() + ".jpg";
		Иначе
			ИмяФайлаРисунка = КаталогВременныхФайлов() + "С" + нСтрока + "К" + нКолонка + ".jpg";
		КонецЕсли;
		Попытка
			Рисунок.Картинка.Записать(ИмяФайлаРисунка);
			ЗначениеЯчейки = ЗначениеЯчейки + ИмяФайлаРисунка + ?(ит < Область.Рисунки.Количество(), Символы.ПС, "");
		Исключение
			// Поле картинки недоступно для чтения.
		КонецПопытки;
	КонецЦикла;
	
	Возврат ЗначениеЯчейки;
	
КонецФункции

// ОБЩЕГО НАЗНАЧЕНИЯ и обработки формы
&НаСервере
Функция ВерсияБезНомераСборки(Знач Версия)
	Перем Массив, Результат;
	
	Массив = РазложитьСтрокуВМассивПодстрок(Версия, ".");
	
	Если Массив.Количество() < 3 Тогда
		Возврат Версия;
	КонецЕсли;
	
	Результат = "[Редакция].[Подредакция].[Релиз]";
	Результат = СтрЗаменить(Результат, "[Редакция]",    Массив[0]);
	Результат = СтрЗаменить(Результат, "[Подредакция]", Массив[1]);
	Результат = СтрЗаменить(Результат, "[Релиз]",       Массив[2]);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВерсияПриложенияМеньше8310()
	Перем Версия;
	Версия = СтрЗаменить(ВерсияПриложенияБезНомераСборки, ".", "");
	Версия = Число(Версия);
	Возврат Версия <= 839;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	Перем МассивСтрок;
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(СокрЛП(Стр));
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(СокрЛП(Лев(Стр, Поз - 1)));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(СокрЛП(Стр));
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(СокрЛП(Лев(Стр,Поз - 1)));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаКлиенте
Процедура ИмяЛистаФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(АдресВХранилище) и НЕ ЗначениеЗаполнено(ИмяЛистаФайла) Тогда
		ПолучитьСписокЛистов_EXCEL1C(АдресВХранилище,ТекРасширение);		
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция  ПроверитьЗначениеВыбораНаСервере(СтрочкаКонтроля)
	Приз = Истина;
	ТаблВыбранныхЭлементов = Объект.ПравилаЗагрузки.Выгрузить(,"РеквизитПоиска"); 
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РеквизитПоиска",СтрочкаКонтроля);
	МассивВыбранныхЭлементов =  ТаблВыбранныхЭлементов.НайтиСтроки(СтруктураОтбора);
	Если МассивВыбранныхЭлементов.Количество() > 1 Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сопоставление по полю "+СтрочкаКонтроля+" запрещено указывать для нескольких колонок таблицы!";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Приз = Ложь;
	КонецЕсли;
	Возврат приз;
КонецФункции

&НаСервере
Процедура ПроверкаВыбора()
	
	ТаблВыбранныхЭлементов = Объект.ПравилаЗагрузки.Выгрузить(,"РеквизитПоиска");
	ТаблВыбранныхЭлементов.Свернуть("РеквизитПоиска");
	//++Шерстюк Ю.Ю. 14.06.19
	//Если ТаблВыбранныхЭлементов.Количество() > 2 Тогда 
	Если ТаблВыбранныхЭлементов.Количество() >= 2 Тогда
	//--Шерстюк Ю.Ю. 14.06.19
		СопоставленияВыставлены = Истина;
	Иначе
		СопоставленияВыставлены = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиРеквизитПоискаПриИзменении(Элемент)
	// проверка на повторный выбор одного и того же элемента списка.... такая ситуация не допустима.
	ТекЗначениеРеквизита = Элементы.ПравилаЗагрузки.ТекущиеДанные.РеквизитПоиска;
	ПризнакВозможностиВыбора = ПроверитьЗначениеВыбораНаСервере(ТекЗначениеРеквизита);
	Если ПризнакВозможностиВыбора = Ложь Тогда 
		Элементы.ПравилаЗагрузки.ТекущиеДанные.РеквизитПоиска = "";
	КонецЕсли;	
	ПроверкаВыбора();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ФайлПриИзменении(Элемент)
	ПрочитатьЛисты(АдресВХранилище,ТекРасширение);	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеРегистра(ИмяОстаток="",ИмяКолонкиСрокПоставки="")
	//++Шерстюк Ю.Ю. 21.01.20 
	Если ИмяОстаток<>"" Тогда 
	
		ТекЗапись = РегистрыСведений.ГИГ_НоменклатураНаСкладеПоставщика.СоздатьНаборЗаписей();
		//начало блока изменений @гигабайт Яшин В.В. 05.02.2019 г.
		//ТекЗапись.Отбор.Поставщик.Установить(Объект.ПоставщикПрайса);
		//ТекЗапись.Отбор.Производитель.Установить(Объект.Производитель);
		//начало блока изменений @гигабайт Яшин В.В. 05.02.2019 г.
		ТекЗапись.Отбор.Склад.Установить(Объект.Склад);
		ТекЗапись.Прочитать();
		ТекЗапись.Очистить();
		ТекЗапись.Записать(Истина);
	КонецЕсли;
	//--Шерстюк Ю.Ю. 21.01.20 

	
	//++Шерстюк Ю.Ю. 14.06.19
	Если ИмяКолонкиСрокПоставки <> "" Тогда
		ТекЗапись = РегистрыСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СоздатьНаборЗаписей();
		ТекЗапись.Отбор.СкладПоставщика.Установить(Объект.Склад);
		ТекЗапись.Прочитать();
		ТекЗапись.Очистить();
		ТекЗапись.Записать(Истина);
	КонецЕсли;

	//--Шерстюк Ю.Ю. 14.06.19
КонецПроцедуры

&НаСервере
Функция   ОбработатьПечать(ИдентификаторКомандыПечати);
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(ИдентификаторКомандыПечати);
	ТекущийОбъект.Печать(КоллекцияПечатныхФорм,ТаблНесоотвествий);
	ТабличныйДокумент = КоллекцияПечатныхФорм[0].ТабличныйДокумент;
	Возврат ТабличныйДокумент;
КонецФункции

// Конструктор для параметра КоллекцияПечатныхФорм процедуры Печать.
//
// ВозвращаемоеЗначение:
//  ТаблицаЗначений - пустая коллекция печатных форм:
//   * ИмяМакета - Строка - идентификатор печатной формы;
//   * ИмяВРЕГ - Строка - идентификатор в верхнем регистре символов для быстрого поиска;
//   * СинонимМакета - Строка - представление печатной формы;
//   * ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//   * Экземпляров - Число - количество копий, которое необходимо вывести на печать;
//   * Картинка - Картинка - (не используется);
//   * ПолныйПутьКМакету - Строка - используется для быстрого перехода к редактированию макета печатной формы;
//   * ИмяФайлаПечатнойФормы - Строка - имя файла;
//                           - Соответствие - имена файлов для каждого объекта:
//                              ** Ключ - ЛюбаяСсылка - ссылка на объект печати;
//                              ** Значение - Строка - имя файла;
//   * ОфисныеДокументы - Соответствие - коллекция печатных форм в формате офисных документов:
//                         ** Ключ - Строка - адрес во временном хранилище двоичных данных печатной формы;
//                         ** Значение - Строка - имя файла печатной формы.
&НаСервере
Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов) 
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить("ИмяМакета");
	Макеты.Колонки.Добавить("ИмяВРЕГ");
	Макеты.Колонки.Добавить("СинонимМакета");
	Макеты.Колонки.Добавить("ТабличныйДокумент");
	Макеты.Колонки.Добавить("Экземпляров");
	Макеты.Колонки.Добавить("Картинка");
	Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	Макеты.Колонки.Добавить("ОфисныеДокументы");
	
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(ИменаМакетов, ",");
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = Макеты.Найти(ИмяМакета, "ИмяМакета");
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

&НаКлиенте
Процедура УправлениеФормой()
	Элементы.Загрузить.Доступность = ПризПроверки и СопоставленияВыставлены;
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖРОбъектов(Команда)
	МассивСобытий = Новый Массив;
	МассивСобытий.Добавить("Данные. Добавление");
	
	ПараметрыФормы = Новый Структура("СобытиеЖурналаРегистрации,ДатаНачала, ДатаОкончания,Комменарий",
			                         МассивСобытий,НачалоДня(ТекущаяДата()) , ТекущаяДата(), "Обработка данных об остатках номенклатуры производителя на складах.");
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы);
КонецПроцедуры

// закрытие формы
&НаСервере
Процедура ПриЗакрытииНаСервере()
	ФайлЕксель = ПутьВременногоФайла;
	Если ФайлЕксель <> "" Тогда 
		Попытка
			УдалитьФайлы(ФайлЕксель);
		Исключение
			Сообщить("Не удалось удалить временный файл:"+ФайлЕксель);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы = Ложь тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = "Работа в данном окне не завершена! Необходимо корректное зактрытие обработки!";
		Отказ = Истина;
	ИначеЕсли ЗакрытиеРазрешено = Неопределено Тогда
		ПриЗакрытии(ЗавершениеРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытиеРазрешено = Истина;
		Закрыть();			
	КонецЕсли;	
	
КонецПроцедуры
