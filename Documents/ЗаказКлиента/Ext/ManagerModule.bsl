
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки");
	
КонецФункции

&Вместо("ЗаполнитьВариантОбеспечения")
Функция Рин1_ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий, ЗависимыеРеквизиты)
	
	ЭтоВыборОбеспеченияСУчетомСерий = Операция = "СтрокаТовары"
	И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	СтруктураДействий = Новый Структура;
	
	Если Операция = "СтрокиТовары" Тогда
		Реквизиты = "КоличествоУпаковок,Количество,СуммаПроцентОбщий,СуммаАвтоматическойСкидки,СуммаАвтоматическойСкидкиОтменено,СуммаАвтоматическойСкидкиБезВозвратнойТары,СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары,СуммаРучнойСкидки,СуммаРучнойСкидкиОтменено,СуммаРучнойСкидкиБезВозвратнойТары,СуммаРучнойСкидкиОтмененоБезВозвратнойТары,Сумма,СуммаОтменено,СуммаНДС,СуммаНДСОтменено,СуммаНДСБезВозвратнойТары,СуммаНДСОтмененоБезВозвратнойТары,СуммаСНДС,СуммаСНДСОтменено,СуммаСНДСБезВозвратнойТары,СуммаСНДСОтмененоБезВозвратнойТары";
	Иначе
		Реквизиты = "КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки";
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(Реквизиты, ЗависимыеРеквизиты);
	
	Если Форма <> Неопределено Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ЗаполнитьДатыОтгрузки = Ложь;
	
	// + [Rineco], [Киселев А.Н.] [10.08.2021] 
	// Задача: [№ 13619], [#Устанавливаем дату в зависимости от флага]
	// Было:
	//ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДатаСеанса()), Объект.ЖелаемаяДатаОтгрузки);
	// Стало:
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"Рин1_ОбеспечиватьКакМожноРаньше") И Объект.Рин1_ОбеспечиватьКакМожноРаньше Тогда
		ДатаПоУмолчанию = НачалоДня(ТекущаяДатаСеанса());
	Иначе 
		ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДатаСеанса()), Объект.ЖелаемаяДатаОтгрузки);
	КонецЕсли;
	// - [Rineco], [Киселев А.Н.] [10.08.2021]
	
	
	
	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	
	ПараметрыОбновленияДатыОтгрузки = ОбеспечениеСервер.ПараметрыОбновленияДатыОтгрузкиВДокументе();
	ПараметрыОбновленияДатыОтгрузки.ОтгружатьОднойДатой    = Объект.НеОтгружатьЧастями;
	
	// + [Rineco], [Киселев А.Н.] [10.08.2021] 
	// Задача: [№ 13619], [#Устанавливаем дату в зависимости от флага]
	// Было:
	//ПараметрыОбновленияДатыОтгрузки.ЖелаемаяДатаОтгрузки   = Объект.ЖелаемаяДатаОтгрузки;
	// Стало:
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"Рин1_ОбеспечиватьКакМожноРаньше") И Объект.Рин1_ОбеспечиватьКакМожноРаньше Тогда
		ПараметрыОбновленияДатыОтгрузки.ЖелаемаяДатаОтгрузки   = НачалоДня(ТекущаяДатаСеанса());
		ПараметрыОбновленияДатыОтгрузки.Вставить("ОбеспечиватьКакМожноРаньше",Истина);
	Иначе 
		ПараметрыОбновленияДатыОтгрузки.ЖелаемаяДатаОтгрузки   = Объект.ЖелаемаяДатаОтгрузки;
	КонецЕсли;
	// - [Rineco], [Киселев А.Н.] [10.08.2021]	
	ПараметрыОбновленияДатыОтгрузки.ДатаОтгрузкиВДокументе = Объект.ДатаОтгрузки;
	
	ОбеспечениеСервер.СдвинутьДатыИСвернутьДублиСтрок(ДанныеЗаполнения, Операция, ПараметрыОбновленияДатыОтгрузки);

	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		
		// Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда
			
			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.Товары[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
			
		Иначе
			ТекСтрокаТовары = Объект.Товары.Вставить(Объект.Товары.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;

		// Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад, ДатаОтгрузки");
		
		//ОбновитьДополнительныеРеквизитыТЧ(ТекСтрокаТовары);
		//<++ Гигабайт Казаков М.В.	Схемы обеспечения потребностей	
		ДанныеСхемыОбеспечения = Новый Структура("ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки");
		ЗаполнитьЗначенияСвойств(ДанныеСхемыОбеспечения, СтрокаОбеспечения);
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, ДанныеСхемыОбеспечения);
		//++> Гигабайт Казаков М.В.

		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
		КонецЕсли;
		Если Объект.НеОтгружатьЧастями Тогда
			ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок" Или ДатаПоУмолчанию > Объект.ДатаОтгрузки И СтрокаОбеспечения.Отгружено = 0 Тогда
				Объект.ДатаОтгрузки = ДатаПоУмолчанию;
				ЗаполнитьДатыОтгрузки = Истина;
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
		
		//bercut130320
		// + [Rineco], [Киселев А.Н.] [11.08.2021] 
		// Задача: [№ 13619], [#Контроль статуса]
		// Задача: [№ 24811], [#обернуть в попытку]
		Попытка
			РасчетДатыКлиента = НЕ ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется И Форма.РИНЭКО_СтатусИзменилсяКВыполнению; 
			
			Если НЕ РасчетДатыКлиента Тогда
				РасчетДатыКлиента = Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению И Форма.РИНЭКО_ИзменилсяВариантОбеспечения;  
			КонецЕсли;
		Исключение
			РасчетДатыКлиента = Ложь;
		КонецПопытки;
		Если РасчетДатыКлиента Тогда 
			Если ТекСтрокаТовары.ДатаКлиента = Дата(1,1,1) Тогда
				ТекСтрокаТовары.ДатаКлиента = ТекСтрокаТовары.ДатаОтгрузки;
			ИначеЕсли ТекСтрокаТовары.ДатаКлиента = Дата(3999,09,09) и не ТекСтрокаТовары.ДатаОтгрузки = Дата(3999,09,09) Тогда 	
				ТекСтрокаТовары.ДатаКлиента = ТекСтрокаТовары.ДатаОтгрузки;
			КонецЕсли;
		КонецЕсли;

		
		// - [Rineco], [Киселев А.Н.] [11.08.2021]
		//
		
	КонецЦикла;

	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);

	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказКлиента));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Если ЗаполнитьДатыОтгрузки Тогда
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);
	
КонецФункции

Процедура ОбновитьДополнительныеРеквизитыТЧ(ТекущаяСтрока)
	
	Если не ТекущаяСтрока.Упаковка.Числитель = 0 Тогда
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Упаковка.Числитель;
	Иначе 
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	
	Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		
		//временная заглушка
		Если не ТекущаяСтрока.ЦенаСоСкидкой = 0 Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.ЦенаСоСкидкой;
		КонецЕсли;
		//
		ТекущаяСтрока.ПроцентОбщий = (100-100/(ТекущаяСтрока.Цена/ТекущаяСтрока.ЦенаСоСкидкой));
		Если не ТекущаяСтрока.ПроцентОбщий = 0 Тогда
			ТекущаяСтрока.СуммаПроцентОбщий = (ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентОбщий))*ТекущаяСтрока.КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.СуммаПроцентОбщий = 0;
		КонецЕсли;
		Если не ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр((ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена)/(100/ТекущаяСтрока.ПроцентАвтоматическойСкидки),2);
		Иначе 
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		КонецЕсли;
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки; 
		ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ТекущаяСтрока.ПроцентАвтоматическойСкидки; 
		
	Иначе
		
		//временная заглушка
		Если не ТекущаяСтрока.ЦенаСоСкидкой = 0 Тогда
		  ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.ЦенаСоСкидкой;
		КонецЕсли;
		//
		Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаПроцентОбщий = (ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки))*ТекущаяСтрока.КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.СуммаПроцентОбщий = 0;
		КонецЕсли;
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий; 		
		
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения данных из заказов клиентов, используемых в обработке "Состояние обеспечения заказов".
// Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
// Возвращаемое значение:
// 		Строка - Текст запроса - Текст запроса для выборки данных.
//
&Вместо("ТекстЗапросаЗаказовКОбеспечению")
Функция Рин1_ТекстЗапросаЗаказовКОбеспечению()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка                КАК Заказ,
	|	Т.КодСтроки             КАК КодСтроки,
	|	Т.НомерСтроки           КАК НомерСтроки,
	|	0                       КАК НомерСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО            КАК Продукция,
	|	НЕОПРЕДЕЛЕНО            КАК Этап,
	|	0                       КАК ЭтапПорядок,
	|	
	|	Т.Номенклатура          КАК Номенклатура,
	|	Т.Характеристика        КАК Характеристика,
	|	Т.Склад                 КАК Склад,
	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
	|ВЫБОР
	|	КОГДА Т.ГИГ_Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ТОГДА ТаблицаДокумента.Назначение
	|	ИНАЧЕ Т.ГИГ_Назначение
	|КОНЕЦ КАК Назначение,
	//|	ТаблицаДокумента.Назначение     КАК Назначение,
	///--> Гигабайт (Чернов А.С.) 
	|	ТаблицаДокумента.Подразделение  КАК Подразделение,
	|	
	|	Т.ВариантОбеспечения    КАК ВариантОбеспечения,
	|	Т.ДатаОтгрузки          КАК ДатаОтгрузки,
	|	
	|	Т.Упаковка              КАК Упаковка,
	|	Т.Количество            КАК Количество,
	|	
	|	ТаблицаДокумента.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ТаблицаДокумента.НеОтгружатьЧастями   КАК НеОтгружатьЧастями,
	|	ТаблицаДокумента.Дата                 КАК Дата,
	|	ТаблицаДокумента.Партнер              КАК Партнер,
	|	ТаблицаДокумента.Менеджер             КАК Менеджер,
	|	ТаблицаДокумента.Статус               КАК Статус,
	|	ИСТИНА                        КАК СтатусИспользуется
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ТаблицаДокумента
	|		ПО Т.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	Т.Ссылка В (&Заказы)
	|	И ТаблицаДокумента.Проведен
	|	И Т.Отменено = ЛОЖЬ
	|	И ТаблицаДокумента.ПометкаУдаления = ЛОЖЬ
//++Шерстюк Ю.Ю. 05.02.2021 добавим условие: строки заказы в статусе "На согласовании" 
//с действием Отгрузить/Отгрузить обособленно должны попадать в обработку Состояние	обеспечения, т.к.резервы в этом состоянии уже есть: Задача 4441
	
	//|	И Т.ВариантОбеспечения В (
	//|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	//|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	//|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	//|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	  | И (Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов))
	  |		ИЛИ ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	  |			И (Т.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	  |				ИЛИ Т.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
//--Шерстюк Ю.Ю.	
	|	)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&Вместо("ТекстЗапросаТаблицаГрафикОтгрузкиТоваров")
Функция Рин1_ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.ДатаОтгрузки           КАК Период,
	|	ТаблицаТовары.ДатаОтгрузки           КАК ДатаОтгрузки,
	//{Гига suv 10.01.2018 СхемыОбеспеченияДляЗаказов
	|	ТаблицаТовары.ГИГ_СхемаОбеспечения   КАК ГИГ_СхемаОбеспечения,
	//Гига suv 10.01.2018}
	// ++ Меликов / 27.02.2020 / Распределение товаров в пути
	| 	ТаблицаТовары.КодСтроки 			 КАК ГИГ_КодСтроки,
	// -- Меликов
	|
	|	ТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ТаблицаТовары.Характеристика         КАК Характеристика,
	|	ТаблицаТовары.Склад                  КАК Склад,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			&Назначение
	|		КОНЕЦ                                            КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                            КАК КоличествоИзЗаказов,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                            КАК КоличествоПодЗаказ,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                            КАК КоличествоНеобеспечено
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И (&Статус В(
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
	|
	|			И ТаблицаТовары.ВариантОбеспечения В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает в менеджере временных таблиц таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЗаказКлиента - документ, по которому создаются временные таблицы
//  Склад					 - СправочникСсылка.Склады		 - склад, по которому создаются временные таблицы.
//
&Вместо("ВременныеТаблицыТоваровЗаказа")
Процедура Рин1_ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, Заказ, Склад)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.Склад КАК Склад,
	|	Заказы.ЗаказКлиента.Подразделение КАК Подразделение,
	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
	|ВЫБОР
	|	КОГДА Товары.ГИГ_Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ТОГДА Заказы.ЗаказКлиента.Назначение
	|	ИНАЧЕ Товары.ГИГ_Назначение
	|КОНЕЦ КАК Назначение,
	//|	Заказы.ЗаказКлиента.Назначение КАК Назначение,
	///--> Гигабайт (Чернов А.С.) 
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	|	СУММА(Заказы.ЗаказаноОстаток) КАК Заказано,
	|	МАКСИМУМ(Товары.Упаковка) КАК Упаковка1,
	|	МИНИМУМ(Товары.Упаковка) КАК Упаковка2,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНоменклатураЗаказаОбособленная
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &Заказ) КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК Товары
	|		ПО Заказы.ЗаказКлиента = Товары.Ссылка
	|			И Заказы.КодСтроки = Товары.КодСтроки
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|	И НЕ Товары.Отменено
	|	//&Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.Склад,
	|	Заказы.ЗаказКлиента.Подразделение,
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
	|ВЫБОР
	|	КОГДА Товары.ГИГ_Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ТОГДА Заказы.ЗаказКлиента.Назначение
	|	ИНАЧЕ Товары.ГИГ_Назначение
	|КОНЕЦ
	//|	Заказы.ЗаказКлиента.Назначение
	///--> Гигабайт (Чернов А.С.)
	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Заказано КАК Заказано,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка1 <> Товары.Упаковка2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Упаковка1
	|	КОНЕЦ КАК Упаковка,
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НоменклатураЗаказаОбособленная
	|ИЗ
	|	ВТНоменклатураЗаказаОбособленная КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Ссылка.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	СУММА(Товары.Количество) КАК Заказано,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ НоменклатураЗаказаНеОбособленная
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	(Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказовКлиента)
	|	И Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|	//&Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Склад,
	|	Товары.Ссылка.Подразделение,
	|	Товары.Серия,
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	|	Товары.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Склад", "И Товары.Склад В(&Склад)");
		Запрос.УстановитьПараметр("Склад", Склад);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказовКлиента",
	ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	
	Запрос.Выполнить();
	
КонецПроцедуры

//{Гига suv 16.01.2018 СхемыОбеспеченияДляЗаказов
//Для автоматического формирования перемещений
// Создает в менеджере временных таблиц таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЗаказКлиента - документ, по которому создаются временные таблицы
//  Склад					 - СправочникСсылка.Склады		 - склад, по которому создаются временные таблицы
//
Процедура ВременныеТаблицыТоваровЗаказаДляПеремещений(МенеджерВременныхТаблиц, Заказ, Склад = Неопределено,ТаблицаТоваров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыПоСхеме.НомерСтроки КАК НомерСтроки,
	|	ТоварыПоСхеме.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения
	|ПОМЕСТИТЬ ТоварыПоСхеме
	|ИЗ
	|	&ТоварыПоСхеме КАК ТоварыПоСхеме
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
	|	ЗаказКлиентаТовары.КодСтроки КАК КодСтроки,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ЗаказКлиентаТовары.Склад КАК Склад,
	|	ЗаказКлиентаТовары.Ссылка.Подразделение КАК Подразделение,
	|	ЗаказКлиентаТовары.Количество КАК Количество,
	|	ЗаказКлиентаТовары.Упаковка КАК Упаковка,
	|	ТоварыПоСхеме.НомерСтроки КАК НомерСтроки,
	|	ТоварыПоСхеме.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения,
	|	ЗаказКлиентаТовары.ГИГ_СрокПоставки КАК ГИГ_СрокПоставки,
	|	ЗаказКлиентаТовары.ГИГ_Назначение КАК ГИГ_Назначение,
	|	ЗаказКлиентаТовары.СрокПоставки КАК СрокПоставки,
	|	ЗаказКлиентаТовары.Серия КАК Серия
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	ТоварыПоСхеме КАК ТоварыПоСхеме
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО (ЗаказКлиентаТовары.Ссылка = &Заказ)
	|			И ТоварыПоСхеме.НомерСтроки = ЗаказКлиентаТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.Склад КАК Склад,
	|	Заказы.ЗаказКлиента.Подразделение КАК Подразделение,
	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
	|ВЫБОР
	|	КОГДА Товары.ГИГ_Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ТОГДА Заказы.ЗаказКлиента.Назначение
	|	ИНАЧЕ Товары.ГИГ_Назначение
	|КОНЕЦ КАК Назначение,
	//|	Заказы.ЗаказКлиента.Назначение КАК Назначение,
	///--> Гигабайт (Чернов А.С.) 
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	|	СУММА(Заказы.ЗаказаноОстаток) КАК Заказано,
	|	МАКСИМУМ(Товары.Упаковка) КАК Упаковка1,
	|	МИНИМУМ(Товары.Упаковка) КАК Упаковка2,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНоменклатураЗаказаОбособленная
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &Заказ) КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаТовары КАК Товары
	|		ПО Заказы.ЗаказКлиента = Товары.Ссылка
	|			И Заказы.КодСтроки = Товары.КодСтроки
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|	//&Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.Склад,
	|	Заказы.ЗаказКлиента.Подразделение,
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
	|ВЫБОР
	|	КОГДА Товары.ГИГ_Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ТОГДА Заказы.ЗаказКлиента.Назначение
	|	ИНАЧЕ Товары.ГИГ_Назначение
	|КОНЕЦ
	//|	Заказы.ЗаказКлиента.Назначение
	///--> Гигабайт (Чернов А.С.)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Заказано КАК Заказано,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка1 <> Товары.Упаковка2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Упаковка1
	|	КОНЕЦ КАК Упаковка,
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НоменклатураЗаказаОбособленная
	|ИЗ
	|	ВТНоменклатураЗаказаОбособленная КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Ссылка.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	СУММА(Товары.Количество) КАК Заказано,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ НоменклатураЗаказаНеОбособленная
	|ИЗ
	|	ВтТаблицаТовары КАК Товары
	|ГДЕ
	|	(Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|			ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказовКлиента)
	|	И Товары.Ссылка = &Заказ
	|	//&Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Склад,
	|	Товары.Ссылка.Подразделение,
	|	Товары.Серия,
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	|	Товары.ГИГ_СхемаОбеспечения,
	|	Товары.ГИГ_СрокПоставки,
	//Гига suv 12.01.2018}
	|	Товары.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Склад", "И Товары.Склад В(&Склад)");
		Запрос.УстановитьПараметр("Склад", Склад);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ТоварыПоСхеме", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказовКлиента",
	ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	
	Запрос.Выполнить();
	
КонецПроцедуры

&Перед("ДобавитьКомандыСозданияНаОсновании")
Процедура Рин1_ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры)
	
	Документы.Рин1_КорректировкаРезервовТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

&Вместо("КомплектПечатныхФорм")
Функция Рин1_КомплектПечатныхФорм()
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ЗаказКлиента", НСтр("ru = 'Заказ клиента (выводить скидки)';
		|en = 'Sales order (display discounts)'"), 1);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ЗаказКлиентаБезСкидок", НСтр("ru = 'Заказ клиента (не выводить скидки)';
		|en = 'Sales order (do not display discounts)'"), 0);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплату", НСтр("ru = 'Счет на оплату (выводить скидки)';
		|en = 'Proforma invoice (display discounts)'"), 1);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплатуБезСкидок", НСтр("ru = 'Счет на оплату (не выводить скидки)';
		|en = 'Proforma invoice (do not display discounts)'"), 0);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплатуСФаксимиле", НСтр("ru = 'Счет на оплату с факсимиле (выводить скидки)';
		|en = 'Proforma invoice with facsimile (display discounts)'"), 0);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплатуСФаксимилеБезСкидок", НСтр("ru = 'Счет на оплату с факсимиле (не выводить скидки)';
		|en = 'Proforma invoice with facsimile (do not display discounts)'"), 0);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("НеВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ЗаказКлиента", НСтр("ru = 'Заказ клиента';
		|en = 'Sales order'"), 1);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплату", НСтр("ru = 'Счет на оплату';
		|en = 'Proforma invoice'"), 1);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплатуСФаксимиле", НСтр("ru = 'Счет на оплату с факсимиле';
		|en = 'Proforma invoice with facsimile'"), 0);
	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм,
	"ЗаданиеНаОтборРазмещениеТовара", 
	НСтр("ru = 'Задание на отбор товаров';
	|en = 'Goods picking job'"),0);
	
	//
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ЗаказКлиентаУСП", НСтр("ru = 'Заказ клиента и условные сроки поставки (выводить скидки)';
	|en = 'Sales order USP(display discounts)'"), 1);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ЗаказКлиентаБезСкидокУСП", НСтр("ru = 'Заказ клиента и условные сроки поставки(не выводить скидки)';
	|en = 'Sales order USP(do not display discounts)'"), 0);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплатуСФаксимилеУСП", НСтр("ru = 'Счет на оплату с факсимиле и условные сроки поставки (выводить скидки)';
	|en = 'Proforma invoice with facsimile USP(display discounts)'"), 0);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплатуСФаксимилеБезСкидокУСП", НСтр("ru = 'Счет на оплату с факсимиле и условные сроки поставки (не выводить скидки)';
	|en = 'Proforma invoice with facsimile USP(do not display discounts)'"), 0);
	//
	
	ЗаказКлиентаЛокализация.КомплектПечатныхФорм(КомплектПечатныхФорм);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

&Перед("ДобавитьКомандыПечати")
Процедура Рин1_ДобавитьКомандыПечати(КомандыПечати)
	
	Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
	//20200918 ГлазуновДВ добавили команду печати Заказ с факсимиле
		// Заказ клиента (не выводить скидки)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказКлиента";
		КомандаПечати.Представление = НСтр("ru = 'Заказ клиента с факсимиле (не выводить скидки)';
		|en = 'Sales order USP(do not display discounts)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
	//20200918 ГлазуновДВ добавили команду печати Заказ с факсимиле
		// Заказ клиента (не выводить скидки)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказКлиента";
		КомандаПечати.Представление = НСтр("ru = 'Заказ клиента с факсимиле (выводить скидки)';
		|en = 'Sales order USP(do not display discounts)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		
		//сказали отключить 050320
		//20200917 ГлазуновДВ включаем печатные формы "ЗаказКлиентаУСП"
		// Заказ клиента (не выводить скидки)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказКлиентаУСП";
		КомандаПечати.Представление = НСтр("ru = 'Заказ клиента с факсимиле и условные сроки поставки (не выводить скидки)';
		|en = 'Sales order USP(do not display discounts)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
	//20200917 ГлазуновДВ добавили команду печати факсимиле
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		// Заказ клиента (выводить скидки)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказКлиентаУСП";
		КомандаПечати.Представление = НСтр("ru = 'Заказ клиента с факсимиле и условные сроки поставки (выводить скидки)';
		|en = 'Sales order USP(display discounts)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
	//20200917 ГлазуновДВ добавили команду печати факсимиле
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		// Счет на оплату (не выводить скидки)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор = "СчетНаОплатуУСП";
		КомандаПечати.Представление = НСтр("ru = 'Счет на оплату с факсимиле и условные сроки поставки (не выводить скидки)';
		|en = 'Proforma invoice with facsimile (do not display discounts)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		// Счет на оплату (выводить скидки)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор = "СчетНаОплатуУСП";
		КомандаПечати.Представление = НСтр("ru = 'Счет на оплату с факсимиле и условные сроки поставки (выводить скидки)';
		|en = 'Proforma invoice with facsimile (display discounts)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
	КонецЕсли;
	
КонецПроцедуры

//{{20200512 ГлазуновДВ Добавлено по заданию видимости поступивших Сумм Оплат по Заказу Клиента, если заказ находится на согласовании
&Вместо("ТекстЗапросаДляРасчетаСостоянийЗаказов")
// Функция возвращает текст запроса для расчета состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция Рин1_ТекстЗапросаДляРасчетаСостоянийЗаказов() Экспорт
	
	ТекстЗапроса ="
		|ВЫБРАТЬ 
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказКлиента.Проведен
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
		|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
		|// ОЖИДАЕТСЯ АВАНС ДО ОБЕСПЕЧЕНИЯ //////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению) И
		|		ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения)
		|// ГОТОВ К ОБЕСПЕЧЕНИЮ ///////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВТСостоянияОбеспечения.ОбеспечениеТребуется ЕСТЬ NULL 
		|		И ВТСостоянияОбеспечения.ОбеспечениеТребуется
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОбеспечению)
		|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ОТГРУЗКИ ////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению) ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
		|		И ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки)
		|// ОЖИДАЕТСЯ ОБЕСПЕЧЕНИЕ ////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВТСостоянияОбеспечения.ОбеспечениеТребуется ЕСТЬ NULL 
		|		И (ВТСостоянияОбеспечения.ОбеспечениеТребуется
		|		ИЛИ ВТСостоянияОбеспечения.ОбеспечениеИзЗаказовОжидается
		|		ИЛИ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОбеспечение)
		|// ГОТОВ К ОТГРУЗКЕ //////////////////////////////////////////////////////////
		|	КОГДА
		|		(НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется ЕСТЬ NULL 
		|		И НЕ ВТСостоянияОбеспечения.ОбеспечениеТребуется
		|		И НЕ ВТСостоянияОбеспечения.ОбеспечениеИзЗаказовОжидается
		|		И НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется)
		|		ИЛИ ВТРасхожденияОрдерНакладная.ТребуетсяОрдер
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОтгрузке)
		|// В ПРОЦЕССЕ ОТГРУЗКИ //////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению))
		|		И (ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|			ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И (ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) <> 0 
		|			ИЛИ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0) <> 0
		|			ИЛИ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) <> 0)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки)
		|// ОЖИДАЕТСЯ ОПЛАТА ПОСЛЕ ОТГРУЗКИ /////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
		|		ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)) И
		|		ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) = 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток, 0) > 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки)
		|// ГОТОВ К ЗАКРЫТИЮ ////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт) И &КонтролироватьЗакрытиеЗаказа
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКЗакрытию)
		|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус В
		|				(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению), 
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
		|КОНЕЦ КАК Состояние,
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказКлиента.Проведен
		|	ТОГДА
		|		ДАТАВРЕМЯ(1,1,1)
		|// ДАТА СОГЛАСОВАНИЯ ///////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|	ТОГДА
		|		ДокументЗаказКлиента.ДатаСогласования
		|// ДАТА АВАНСА /////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению) И
		|		ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ПРЕДОПЛАТЫ /////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению) И
		|		ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
		|		ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
		|		И ДокументЗаказКлиента.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения ИЛИ
		|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И (ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаКонечныйОстаток, 0) <> 0 ИЛИ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) <> 0)
		|	ТОГДА
		|		ЕСТЬNULL(ДатыОтгрузкиЗаказовКлиентов.МинимальнаяДатаОтгрузки, ДокументЗаказКлиента.ДатаОтгрузки)
		|// ДАТА ОПЛАТЫ ПОСЛЕ ОТГРУЗКИ //////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)) И
		|		ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) = 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток, 0) > 0
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|КОНЕЦ КАК ДатаСобытия,
		|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			ИЛИ ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)) И
		|		ДокументЗаказКлиента.Проведен И
//20200512 ГлазуновДВ отключили проверку по Статусу Заказа Клиента находящегося на согласовании
//		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) КАК ЧИСЛО(31,2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОплаты,
		|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			ИЛИ ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)) И
		|		ДокументЗаказКлиента.Проведен И
//20200512 ГлазуновДВ отключили проверку по Статусу Заказа Клиента находящегося на согласовании
//		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0)) * 100 / ДокументЗаказКлиента.СуммаДокумента КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентОплаты,
		|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеПриход, 0) > 0 И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеПриход, 0)
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОтгрузки,
		|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И 
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаРасход, 0) > 0 И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаРасходСУчетомМерныхТоваров, 0) * 100 / ДокументЗаказКлиента.СуммаДокумента КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ 0
		|КОНЕЦ КАК ПроцентОтгрузки,
		|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен И
		|		((ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0) И
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(31,2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаДолга,
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ((ВЫБОР КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) > 0 ТОГДА
		|			ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0)
		|		ИНАЧЕ
		|			ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0)
		|		КОНЕЦ
		|		* 100
		|		/ ДокументЗаказКлиента.СуммаДокумента) КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентДолга,
		|// РАСХОЖДЕНИЯ ОРДЕР-НАКЛАДНАЯ//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен
		|		И ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|		И ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ЕСТЬNULL(ВТРасхожденияОрдерНакладная.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ)
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК ЕстьРасхожденияОрдерНакладная,
		|//ССЫЛКА НА ЗАКАЗ///////////////////////////////////////////////////////
		|	ДокументЗаказКлиента.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,,ЗаказКлиента В (&МассивЗаказов) И АналитикаУчетаПоПартнерам.Организация = ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Организация) КАК РасчетыСКлиентамиОстатки
		|ПО
		|	ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстатки.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТЗаказыКлиентовОстатки КАК ЗаказыКлиентовОстатки
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТТоварыКОтгрузкеОстатки КАК ТоварыКОтгрузкеОстатки
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ТоварыКОтгрузкеОстатки.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыАктуальностиЗаказовКлиентов КАК ДатыАктуальностиРасчетов
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ДатыАктуальностиРасчетов.ОбъектРасчетов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыОтгрузкиЗаказовКлиентов КАК ДатыОтгрузкиЗаказовКлиентов
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ДатыОтгрузкиЗаказовКлиентов.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТСостоянияОбеспечения КАК ВТСостоянияОбеспечения
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ВТСостоянияОбеспечения.Заказ
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТРасхожденияОрдерНакладная КАК ВТРасхожденияОрдерНакладная
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ВТРасхожденияОрдерНакладная.ЗаказКлиента
		|ГДЕ
		|	ДокументЗаказКлиента.Ссылка В (&МассивЗаказов)
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

//bercut150420 - переопределили логику
//&Вместо("ТекстЗапросаТаблицаОбеспечениеЗаказов")
//Функция Рин1_ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
//	
//	ИмяРегистра = "ОбеспечениеЗаказов";
//	
//	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	ТекстЗапроса =
//	//Формирование потребности
//	"ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
//	|	&Период                                КАК Период,
//	|	ТаблицаТовары.Склад                    КАК Склад,
//	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
//	|	ТаблицаТовары.Характеристика           КАК Характеристика,
//	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
//	|ВЫБОР
//	|	КОГДА ТаблицаТовары.ГИГ_Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
//	|		ТОГДА &Назначение
//	|	ИНАЧЕ ТаблицаТовары.ГИГ_Назначение
//	|КОНЕЦ КАК Назначение,
//	//|	&Назначение                            КАК Назначение,
//	///--> Гигабайт (Чернов А.С.)
//	|	ТаблицаТовары.Количество               КАК Потребность,
//	|	ТаблицаТовары.Количество               КАК КЗаказу,
//	|	0                                      КАК НаличиеПодЗаказ
//	|
//	|ИЗ
//	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
//	|ГДЕ
//	|	ТаблицаТовары.Ссылка = &Ссылка
//	|	И НЕ ТаблицаТовары.Отменено
//	|
//	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
//	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
//	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
//	|
//	|	И ТаблицаТовары.ВариантОбеспечения В(
//	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
//	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
//	|
//	|	И &Статус В(
//	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
//	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
//	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	//Закрытие потребности
//	|ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
//	|	&Период                                КАК Период,
//	|	ТаблицаТовары.Склад                    КАК Склад,
//	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
//	|	ТаблицаТовары.Характеристика           КАК Характеристика,
//	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
//	|ВЫБОР
//	|	КОГДА ТаблицаТовары.ГИГ_Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
//	|		ТОГДА &Назначение
//	|	ИНАЧЕ ТаблицаТовары.ГИГ_Назначение
//	|КОНЕЦ КАК Назначение,
//	//|	&Назначение                            КАК Назначение,
//	///--> Гигабайт (Чернов А.С.)
//	|	ТаблицаТовары.Количество               КАК Потребность,
//	|	0                                      КАК КЗаказу,
//	|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
//	|
//	|ИЗ
//	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
//	|ГДЕ
//	|	ТаблицаТовары.Ссылка = &Ссылка
//	|	И НЕ ТаблицаТовары.Отменено
//	|
//	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
//	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
//	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
//	|
//	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
//	|
//	|	И &Статус В(
//	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
//	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
//	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))";
//	
//	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
//	Возврат ТекстЗапроса;
//	
//КонецФункции

//bercut210420 - переопределили логику
//&Вместо("ТекстЗапросаТаблицаТоварыКОтгрузке")
//Функция Рин1_ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
//	
//	ИмяРегистра = "ТоварыКОтгрузке";
//	
//	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	ТекстЗапроса =
//	//Резервирование товаров
//	"ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
//	|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
//	|	ТаблицаТовары.Склад                    КАК Склад,
//	|	&Партнер			                   КАК Получатель,
//	|	&Ссылка                                КАК ДокументОтгрузки,	
//	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
//	|	ТаблицаТовары.Характеристика           КАК Характеристика,
//	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
//	|	ТаблицаТовары.Серия                    КАК Серия,
//	|	ТаблицаТовары.Количество               КАК ВРезерве,
//	|	0                                      КАК КОтгрузке,
//	|	0                                      КАК КОформлению
//	|ИЗ
//	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
//	|ГДЕ
//	|	ТаблицаТовары.Ссылка = &Ссылка
//	|	И ТаблицаТовары.Количество <> 0
//	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
//	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
//	|	И НЕ ТаблицаТовары.Отменено
//	|
//	|	И(ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
//	|
//	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
//	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован))
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	//Отгрузка товаров
//	|ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
//	|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
//	|	ТаблицаТовары.Склад                    КАК Склад,
//	|	&Партнер			                   КАК Получатель,
//	|	&Ссылка                                КАК ДокументОтгрузки,
//	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
//	|	ТаблицаТовары.Характеристика           КАК Характеристика,
//	|	ВЫБОР
//	|		КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
//	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
//	|			И ЕСТЬNULL(ВЫБОР
//	|					КОГДА ТаблицаТовары.ГИГ_Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
//	|						ТОГДА ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам
//	|					ИНАЧЕ ТаблицаТовары.ГИГ_Назначение.ДвиженияПоСкладскимРегистрам
//	|				КОНЕЦ, ЛОЖЬ)
//	//|			И &ДвиженияПоСкладскимРегистрам 
//	|			ТОГДА ВЫБОР
//	|					КОГДА ТаблицаТовары.ГИГ_Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
//	|						ТОГДА &Назначение
//	|					ИНАЧЕ ТаблицаТовары.ГИГ_Назначение
//	|				КОНЕЦ
//	//|			ТОГДА &Назначение
//	///--> Гигабайт (Чернов А.С.)
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
//	|	КОНЕЦ КАК Назначение,
//	|	ТаблицаТовары.Серия                    КАК Серия,
//	|	0                                      КАК ВРезерве,
//	|	ТаблицаТовары.Количество               КАК КОтгрузке,
//	|	ТаблицаТовары.Количество               КАК КОформлению
//	|ИЗ
//	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
//	|ГДЕ
//	|	ТаблицаТовары.Ссылка = &Ссылка
//	|	И ТаблицаТовары.Количество <> 0
//	|
//	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (
//	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
//	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
//	|
//	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
//	|	И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
//	|	И НЕ ТаблицаТовары.Отменено
//	|
//	|	И ТаблицаТовары.ВариантОбеспечения В(
//	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
//	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
//	
//	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
//	Возврат ТекстЗапроса;
//	
//КонецФункции








