

// Получает информацию товаре - цене продажи и остатках товара.
// Используется в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ГИГ_ПолучитьИнформациюОТовареПриПродаже(Форма) Экспорт
	
	Если Не Форма.ОтображатьОстатки
		Или Форма.ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения
		И Не ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиПоСкладам = Форма.ОстаткиТоваров.ПолучитьЭлементы();
	ОстаткиПоСкладам.Очистить();
	
	ОстаткиПоСкладамПроизводителя = Форма.ОстаткиТоваровПроизводителя;
	ОстаткиПоСкладамПроизводителя.Очистить();
	
	Если Форма.РежимПодбораБезСуммовыхПараметров И Не Форма.ОтображатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиИспользуются = Форма.ТекущаяСтрокаНоменклатуры.ХарактеристикиИспользуются;
	ЭтоТовар = Форма.ТекущаяСтрокаНоменклатуры.ЭтоТовар;
	
	Если Не ЭтоТовар 
		ИЛИ (Форма.НавигацияПоХарактеристикам И 
		Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаХарактеристик.Характеристика))Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = Форма.Валюта;
	Соглашение = Форма.Соглашение;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		
		Если Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаХарактеристик.Характеристика) Тогда
			Возврат;
		КонецЕсли;
		
		ИнформацияОТоваре = ПодборТоваровВызовСервера.ЦенаПродажиИОстаткиТовара(Форма.ТекущаяСтрокаНоменклатуры.Номенклатура, 
							Форма.ТекущаяСтрокаХарактеристик.Характеристика, Соглашение, Валюта, Форма.Склады, Форма.ВидыЦен);
		
	Иначе
		ИнформацияОТоваре = ПодборТоваровВызовСервера.ЦенаПродажиИОстаткиТовара(Форма.ТекущаяСтрокаНоменклатуры.Номенклатура, 
							Неопределено, Соглашение, Валюта, Форма.Склады, Форма.ВидыЦен);
							
		ИнформацияОТовареОбеспечение = ГИГ_МодульВызовСервера.ЦенаПродажиИОстаткиТовара_Обеспечение(Форма.ТекущаяСтрокаНоменклатуры.Номенклатура, 
							Неопределено, Соглашение, Валюта, Форма.Склады, Форма.ВидыЦен);
							
	КонецЕсли;
	
	ЦенаПродажиТовара = ИнформацияОТоваре.Цена;
	
	НаименованиеУпаковкиЕдиницыИзмерения = ?(ЗначениеЗаполнено(ЦенаПродажиТовара.Упаковка), 
											Строка(ЦенаПродажиТовара.Упаковка), 
											Строка(ЦенаПродажиТовара.ЕдиницаИзмерения));
											
	
	// по остаткам производителя
	//Для Каждого ИсточникОбеспечения Из ИнформацияОТовареОбеспечение.ИсточникиОбеспечения Цикл
		
		//СтрокаИсточник = ОстаткиПоСкладамПроизводителя.Добавить();
		//СтрокаИсточник.СхемаОбеспеченияОписание = Строка(ИсточникОбеспечения);
		//
		//СрокиОбеспечения =  СтрокаИсточник.ПолучитьЭлементы();
		
		Для Каждого СтрокаТбл Из ИнформацияОТовареОбеспечение.ТекущиеОстатки Цикл
			
						
			СтрокаОстаткиПоСкладам = ОстаткиПоСкладамПроизводителя.Добавить();
			
			СтрокаОстаткиПоСкладам.Период = СтрокаТбл.Период;
			СтрокаОстаткиПоСкладам.ПериодОписание = Формат(СтрокаОстаткиПоСкладам.Период,"ДЛФ=D");
			СтрокаОстаткиПоСкладам.Доступно = СтрокаТбл.Доступно;
			
			ОписаниеКоличества = ОписаниеДоступногоКоличества(
			СтрокаОстаткиПоСкладам.Доступно,
			НаименованиеУпаковкиЕдиницыИзмерения,
			ХарактеристикиИспользуются,
			Форма.НавигацияПоХарактеристикам);
			
			СтрокаОстаткиПоСкладам.ДоступноОписание = ?(СтрокаОстаткиПоСкладам.Доступно=0,Символ(8734),ОписаниеКоличества);											
			
			СтрокаОстаткиПоСкладам.Склад = СтрокаТбл.Склад;
			СтрокаОстаткиПоСкладам.СкладОписание = Строка(СтрокаТбл.Склад);
			СтрокаОстаткиПоСкладам.СкладДоступенДляВыбора = СкладДоступенДляВыбора(Форма, СтрокаОстаткиПоСкладам.Склад);
			
			СтрокаОстаткиПоСкладам.СхемаОбеспечения = СтрокаТбл.СхемаОбеспечения;
			СтрокаОстаткиПоСкладам.СхемаОбеспеченияОписание = Строка(СтрокаТбл.СхемаОбеспечения);
			
			СтрокаОстаткиПоСкладам.СрокОбеспеченияОписание = ?(СтрокаТбл.СрокОбеспеченияМин = СтрокаТбл.СрокОбеспеченияМакс,"",Строка(СтрокаТбл.СрокОбеспеченияМин)+" - ")+Строка(СтрокаТбл.СрокОбеспеченияМакс) + " дн."; 
			
		//{{20201026 ГлазуновДВ
			Попытка
				Если СтрокаТбл.АктуальностьЗагрузки <> 0 Тогда
				    Дни = СтрокаТбл.АктуальностьЗагрузки/24/60;
					Часы = (Дни - Цел(Дни))*24;
					Минуты = (Часы - Цел(Часы))*60;
					//Секунды = (Минуты - Цел(Минуты))*60;
					СтрокаОстаткиПоСкладам.АктуальностьЗагрузки = Строка(Цел(Дни)) +"д. "+Строка(Цел(Часы)) +"ч. "+ Строка(Цел(Минуты)) +"м.";//+ Строка(Цел(Секунды)) +"с.";
					СтрокаОстаткиПоСкладам.АктуальностьЗагрузкиЧисло = СтрокаТбл.АктуальностьЗагрузки;
				КонецЕсли;
			Исключение
			КонецПопытки;
		//}}20201026 ГлазуновДВ
			
			ОстаткиПоСкладамПроизводителя.Сортировать("Период Возр"); 
		КонецЦикла; 
	//КонецЦикла;										
	
	Для Каждого СтрокаТбл Из ИнформацияОТоваре.ТекущиеОстатки Цикл
		
		СтрокаОстаткиПоСкладам = ОстаткиПоСкладам.Добавить();
		
		СтрокаОстаткиПоСкладам.Период = Форма.ТекущаяДатаСеанса;
		СтрокаОстаткиПоСкладам.ПериодОписание = НСтр("ru = 'Сейчас'");
		СтрокаОстаткиПоСкладам.Доступно = СтрокаТбл.Свободно;
		
		СтрокаОстаткиПоСкладам.ДоступноОписание = ОписаниеДоступногоКоличества(
													СтрокаОстаткиПоСкладам.Доступно,
													НаименованиеУпаковкиЕдиницыИзмерения,
													ХарактеристикиИспользуются,
													Форма.НавигацияПоХарактеристикам);
		
		СтрокаОстаткиПоСкладам.Склад = СтрокаТбл.Склад;
		СтрокаОстаткиПоСкладам.СкладОписание = Строка(СтрокаТбл.Склад);
		СтрокаОстаткиПоСкладам.СкладДоступенДляВыбора = СкладДоступенДляВыбора(Форма, СтрокаОстаткиПоСкладам.Склад);
		
		ПланируемыеОстаткиПоДатам = СтрокаОстаткиПоСкладам.ПолучитьЭлементы();
		
		ЕстьПланируемыеОстатки = Ложь;
		Для Каждого СтрокаТбл Из ИнформацияОТоваре.ПланируемыеОстатки Цикл
			
			Если Не (СтрокаТбл.Склад = СтрокаОстаткиПоСкладам.Склад) Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПланируемыеОстатки = Истина;
			
			СтрокаПланируемыеОстаткиПоДатам = ПланируемыеОстаткиПоДатам.Добавить();
			
			СтрокаПланируемыеОстаткиПоДатам.Период = СтрокаТбл.Период;
			СтрокаПланируемыеОстаткиПоДатам.ПериодОписание = Формат(СтрокаТбл.Период, "ДЛФ=D");
			СтрокаПланируемыеОстаткиПоДатам.Доступно = СтрокаТбл.Доступно;
			
			СтрокаПланируемыеОстаткиПоДатам.ДоступноОписание = ОписаниеДоступногоКоличества(
																СтрокаПланируемыеОстаткиПоДатам.Доступно,
																НаименованиеУпаковкиЕдиницыИзмерения,
																ХарактеристикиИспользуются,
																Форма.НавигацияПоХарактеристикам);
			
			СтрокаПланируемыеОстаткиПоДатам.Склад = СтрокаТбл.Склад;
			СтрокаПланируемыеОстаткиПоДатам.СкладОписание = "";
			СтрокаПланируемыеОстаткиПоДатам.СкладДоступенДляВыбора = СкладДоступенДляВыбора(Форма, СтрокаПланируемыеОстаткиПоДатам.Склад);
			
		КонецЦикла;
		
		Если СтрокаОстаткиПоСкладам.Доступно <= 0  И Не ЕстьПланируемыеОстатки Тогда
			ОстаткиПоСкладам.Удалить(СтрокаОстаткиПоСкладам);	
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

// Возвращает строковое описание доступного количества. Используется при выводе
// строк в таблицу остатков в формах подбора товаров в документ продажи, документ
// закупки.
//
// Параметры
//  КоличествоДоступно (Число) - количество товаров,
//	НаименованиеУпаковкиЕдиницыИзмерения (Строка) - наименование упаковки, единицы измерения,
//	ХарактеристикиИспользуются (Булево) - признак ведения учета по характеристикам у товара,
//	НавигацияПоХарактеристикам (Булево) - признак навигации по характеристикам на форме подбора.
//
// Возвращаемое значение:
//	Строка. Описание доступного количества товаров для текущей строки в форме подбора.
//
Функция ОписаниеДоступногоКоличества(КоличествоДоступно, НаименованиеУпаковкиЕдиницыИзмерения, 
	ХарактеристикиИспользуются, НавигацияПоХарактеристикам)
	
	ДоступноОписание = "";
	
	Если ЗначениеЗаполнено(КоличествоДоступно) Тогда
			ДоступноОписание = Формат(КоличествоДоступно,"ЧДЦ=3") + " " + НаименованиеУпаковкиЕдиницыИзмерения;
	КонецЕсли;
	
	Возврат ДоступноОписание;
	
КонецФункции

// Возвращает признак доступности склада для выбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора товаров.
//
// Возвращаемое значение:
//	Булево.
//
Функция СкладДоступенДляВыбора(Форма, Склад)

	Возврат Не (Форма.Склады.НайтиПоЗначению(Склад) = Неопределено);

КонецФункции


// Процедура вызывается при изменении флажка "Отображать остатки" на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ПриИзмененииОтображенияОстатковПоСкладамДокумента(Форма) Экспорт
	
	Форма.ОтображатьОстатки = Не Форма.ОтображатьОстатки;
	Форма.Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки;
	Форма.Элементы.ОстаткиТоваровПроизводителя.Видимость = Форма.ОтображатьОстатки;
	
	Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания",0.1,Истина);
	ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстатки(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		
		ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстаткиНоменклатурыПоставщика(Форма);
		Форма.Элементы.ОстаткиТоваровПоставщика.Видимость = Форма.ОтображатьОстатки;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму настройки поиска - расширенный или платформенный.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура НастроитьПоиск(Форма) Экспорт
	
	СтруктураПараметров = Неопределено;

	
	ОткрытьФорму("Справочник.Номенклатура.Форма.НастройкаВариантаПоиска", 
		Новый Структура("ВариантПоискаТоваров", Форма.ВариантПоискаТоваров),,,,, Новый ОписаниеОповещения("НастроитьПоискЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Служебная процедура
Процедура НастроитьПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Форма = ДополнительныеПараметры.Форма;
    
    
    СтруктураПараметров = Результат;
    
    Если СтруктураПараметров <> Неопределено Тогда
        
        Если Форма.ВариантПоискаТоваров <> СтруктураПараметров.ВариантПоискаТоваров Тогда
            
            Форма.ВариантПоискаТоваров = СтруктураПараметров.ВариантПоискаТоваров;
            ПодборТоваровКлиентСервер.УстановитьТекущиеСтраницыПоВариантуПоиска(Форма);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры



// табличные части документов
Процедура ПересчитатьДанныеСтроки(СтрокаКПересчету) Экспорт 
	
	СтрокаКПересчету.ПроцентОбщий = СтрокаКПересчету.ПроцентРучнойСкидки + СтрокаКПересчету.ПроцентАвтоматическойСкидки;
	СтрокаКПересчету.СуммаПроцентОбщий = СтрокаКПересчету.СуммаАвтоматическойСкидки + СтрокаКПересчету.СуммаРучнойСкидки;
	
КонецПроцедуры	

Процедура ПересчитатьСтрокиДокумента(ТабличнаяЧасть) Экспорт 
	
	Для Каждого СтрокаКПересчету из ТабличнаяЧасть цикл 
		СтрокаКПересчету.ПроцентОбщий = СтрокаКПересчету.ПроцентРучнойСкидки + СтрокаКПересчету.ПроцентАвтоматическойСкидки;
		СтрокаКПересчету.СуммаПроцентОбщий = СтрокаКПересчету.СуммаАвтоматическойСкидки + СтрокаКПересчету.СуммаРучнойСкидки;
	КонецЦикла;	
	
КонецПроцедуры	

