&НаСервере
Функция ПолучитьМаксимальноеЗначение(Номенклатура,ТекущееЗначениеСкидкиНаценки)
	МаксСкидка = 0;
	Данные = Объект.Соглашение;
	СтруктураОтбора = Новый Структура("ЦеноваяГруппа",Номенклатура.ЦеноваяГруппа);
	МассивСтрок = Данные.ЦеновыеГруппы.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() > 0 Тогда 
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Макс(МассивСтрок[0].ПроцентРучнойСкидки,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки);
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			ПроцентНаценкиОбщий = МассивСтрок[0].ПроцентРучнойНаценки;
			ПроцентНаценкиИнд   = ?(МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки < 0,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки,0);
			Возврат Мин(ПроцентНаценкиОбщий,ПроцентНаценкиИнд);
		КонецЕсли;
	Иначе
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Объект.Соглашение.ПроцентРучнойСкидки;
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			Возврат Объект.Соглашение.ПроцентРучнойНаценки;
		КонецЕсли;
	КонецЕсли;
КонецФункции	

&НаСервере
Функция РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЦеноваяГруппа",СсылкаНоменклатура.ЦеноваяГруппа);
	МассивСтрок = СтруктураТаблиц.Ограничения.НайтиСтроки(СтруктураОтбора);
	ЗначениеСкидки = 0;
	Если МассивСтрок.Количество() > 0 Тогда 
		Попытка		
			Если НЕ МассивСтрок[0].Деактивирован Тогда 
				ЗначениеСкидки = ?(МассивСтрок[0].МаксимальныйПроцентРучнойСкидки = 0,МассивСтрок[0].МаксимальныйПроцентРучнойНаценки,МассивСтрок[0].МаксимальныйПроцентРучнойСкидки);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат ЗначениеСкидки;
КонецФункции

&НаСервереБезКонтекста
Функция СуммаПредоплатыПоСоглашению(Знач Объект, Знач ЭтапыГрафикаОплаты, СуммаВсего)
	
	СуммаПродажи      = Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	СуммаЗалогаЗаТару = ?(Объект.ТребуетсяЗалогЗаТару, СуммаВсего - СуммаПродажи, 0);
	
	Возврат ПродажиСервер.СуммаПредоплатыПоСоглашению(
		Объект,
		ЭтапыГрафикаОплаты,
		СуммаПродажи,
		СуммаЗалогаЗаТару);
	
КонецФункции

&НаСервере
Функция ТестРасчетСк()
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
	
	СписокПрименныхСкидок = Новый СписокЗначений;
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	Если ПримененныеСкидки.ДеревоСкидок.Строки.Количество() > 0 Тогда 
		Для Каждого СтрокаСписка из ПримененныеСкидки.ДеревоСкидок.Строки[0].Строки цикл
			Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий.Количество()>0  Тогда  // есть дополнительные условия по скидке... нужна на них проверка
				Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий[0].Выполнено = Истина тогда
					СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
				КонецЕсли;
			иначе // условий нет.. все скидки - в список...
				СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокПрименныхСкидок;
КонецФункции

&НаСервере
Процедура ГИГ_ДобавитьНовыеЭлементыНаСервере()
	
	КвЧисла = Новый КвалификаторыЧисла(15,2);	
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("ПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.Товары", "% общей скидки", Истина));
	нРеквизиты.Добавить(Новый РеквизитФормы("СуммаПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.Товары", "Общая скидка", Истина));
	ИзменитьРеквизиты(нРеквизиты);
	
	нЭлемент = Элементы.Добавить("ПроцентОбщий", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.ПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.ПодчиненныеЭлементы.ПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	нЭлемент = Элементы.Добавить("СуммаПроцентОбщий", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.СуммаПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.ПодчиненныеЭлементы.СуммаПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СуммаПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	Если Объект.Товары.Количество() <> 0 Тогда 
		Для Каждого ТекущаяСтрока из Объект.Товары цикл
			ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
			ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		КонецЦикла;	
	КонецЕсли;
	
	Элементы.Партнер.УстановитьДействие("ОбработкаВыбора", "ПартнерОбработкаВыбора");
	Элементы.Соглашение.УстановитьДействие("ОбработкаВыбора", "СоглашениеОбработкаВыбора");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ГИГ_РассчитатьПроцентОбщий(ТекущаяСтрока) ///<-- Гигабайт (Чернов А.С.): 
	ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(СтрокаТабличнойЧасти)
	
	// автоматическое заполнение по скидкам / наценкам  при корректировке данных табличной части
	
	Если СтрокаТабличнойЧасти <> Неопределено тогда  
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда 
			СсылкаНоменклатура = СтрокаТабличнойЧасти.Номенклатура;
			Если  СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0 Тогда
				РассчитатьСкидкиНаценкиКлиент();
			КонецЕсли;
			Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 0 Тогда 
				РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура);
			КонецЕсли;
			ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(СтрокаТабличнойЧасти);
		КонецЕсли;
		ГИГ_РассчитатьПроцентОбщий(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
&Вместо("ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок")
Процедура Рин1_ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
			Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаписатьДокументВместо(Команда)
	
		//++Гольм А.А. (Гигабайт)
	Объект.СкидкиРассчитаны = Истина;
	//--Гольм А.А. (Гигабайт)
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	//++Гольм А.А. (Гигабайт)
	ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
&Вместо("КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении")
Процедура Рин1_КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	
	Если Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПартнерБезКЛ" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "РеализацияПоЗаказам" Тогда
		РеализацияПоЗаказамПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "РеализацияПоЗаказу" Тогда
		РеализацияПоЗаказамПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТребуетсяЗалогЗаТару" Тогда
		ТребуетсяЗалогЗаТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыХарактеристика" Тогда
		ТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСерия" Тогда
		ТоварыСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковок" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
		ТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
		ТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидки" Тогда
		ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаРучнойСкидки" Тогда
		ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСумма" Тогда
		ТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаНДС" Тогда
		ТоварыСуммаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
		ТоварыСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСклад" Тогда
		ТоварыСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаВзаиморасчетов" Тогда
		ТоварыСуммаВзаиморасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
		//Добавлено начало ГИГ
	ИначеЕсли Элемент.Имя = "ПроцентОбщий" Тогда
		ПроцентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
		ПроцентПриИзменении(Элемент);
		//Добавлено конецГИГ
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьАвтоматическиеСкидкиЗавершение")
Процедура Рин1_НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры)
	
		Если ВозвращенноеЗначение <> Неопределено Тогда
		
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		//++Гольм А.А. (Гигабайт)
		//ПоказатьОповещениеПользователя(
		//	НСтр("ru = 'Скидки (наценки)'"),
		//	,
		//	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		//	БиблиотекаКартинок.Информация32);
		//--Гольм А.А. (Гигабайт)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение")
Процедура Рин1_НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
	
		АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		//++Гольм А.А. (Гигабайт)
		//СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		//--Гольм А.А. (Гигабайт)
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		СформироватьНадписьВалюты(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьРучнуюСкидкуЗавершение")
Процедура Рин1_НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
	
		АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		//++Гольм А.А. (Гигабайт)
		//СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		//--Гольм А.А. (Гигабайт)
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		СформироватьНадписьВалюты(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
&Вместо("ОбработкаВыбораПодборНаСервере")
Процедура Рин1_ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		//++Гольм А.А. (Гигабайт)
		//СписокСвойств = "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки, Серия";
		СписокСвойств = "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СуммаАвтоматическойСкидки, Серия";
		//--Гольм А.А. (Гигабайт)
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СписокСвойств = СписокСвойств + ", Склад";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		//++Гольм А.А. (Гигабайт)
		ТекущаяСтрока.ПроцентОбщий      = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
		//--Гольм А.А. (Гигабайт)
	КонецЦикла;

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОткрытьПодборВместо(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.РеализацияТоваровУслуг.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		ИЛИ Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'реализацию товаров и услуг'"));
	КонецЕсли;
	//++Гольм А.А. (Гигабайт)
	СкидкаПримененная = ТестРасчетСк();
	//--Гольм А.А. (Гигабайт)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВозвращатьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах", Истина);
	ПараметрыФормы.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	//++Гольм А.А. (Гигабайт)
	ПараметрыФормы.Вставить("ПримененнаяСкидка",      СкидкаПримененная);
	//--Гольм А.А. (Гигабайт)
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	//++Гольм А.А. (Гигабайт)
	ОткрытьФорму("Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Партнер <> ВыбранноеЗначение тогда
		Если Объект.Товары.Количество() <> 0 тогда
			Параметр = Новый Структура("СтароеЗначение,НовоеЗначение",Объект.Партнер,ВыбранноеЗначение);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
	
	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    ОтветНаВопрос = РезультатВопроса;
    ТекПараметр = ДополнительныеПараметры.СтароеЗначение;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
			Объект.Соглашение = ДополнительныеПараметры.НовоеЗначение;
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			СоглашениеПриИзмененииСервер();
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
		КонецЕсли;
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Партнер = ДополнительныеПараметры.НовоеЗначение;
			ПриИзмененииПартнераСервер();
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
				ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
		РассчитатьСкидкиНаценкиРучныеДляТаблЧасти();
	иначе
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
			Объект.Соглашение = ДополнительныеПараметры.СтароеЗначение;
		КонецЕсли;
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Партнер = ДополнительныеПараметры.СтароеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПослеЗаписиПосле(ПараметрыЗаписи)
	
		//Расчет этапов графика оплаты 
	Если  ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ЗначениеЗаполнено(Объект.ЗаказКлиента) 
		И ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение,"ГИГ_РасчетГрафикаПлатежейОтРеализации") Тогда;
		Параметр = Новый Массив();
		Параметр.Добавить(Объект.ЗаказКлиента);
		Оповестить("ОбновитьДокументИБПослеЗаполнения",Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Рин1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	//Программно добавим новые реквизиты на форму
	ГИГ_ДобавитьНовыеЭлементыНаСервере();
	//++Шерстюк Ю.Ю. задача 7345 блокируем основные реквизиты
	////bercut200120/210120
	//Если не РольДоступна("Рин1_РедактированиеРеализации") Тогда	
	//	Элементы.Товары.ТолькоПросмотр = Истина;	
	//КонецЕсли;
	 Если РольДоступна("Рин1_РедактированиеРеализации") или РольДоступна("ПолныеПрава") Тогда	
		Элементы.Товары.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПартнер.ТолькоПросмотр = Ложь;
		Элементы.Партнер.ТолькоПросмотр = Ложь;
		Элементы.Контрагент.ТолькоПросмотр = Ложь;
		Элементы.Договор.ТолькоПросмотр = Ложь;
		Элементы.Склад.ТолькоПросмотр = Ложь;
		Элементы.ГруппаСоглашение.ТолькоПросмотр = Ложь;
		Элементы.ПерезаполнитьРеквизитыПоЗаказу.Доступность = Истина;
		Элементы.Менеджер.ТолькоПросмотр = Ложь;
		Элементы.Подразделение.ТолькоПросмотр = Ложь;

	Иначе
		Элементы.ГруппаСоглашение.ТолькоПросмотр = Истина;
        Элементы.ГруппаПартнер.ТолькоПросмотр = Истина;
		Элементы.Товары.ТолькоПросмотр = Истина;
		Элементы.Партнер.ТолькоПросмотр = Истина;
		Элементы.Контрагент.ТолькоПросмотр = Истина;
		Элементы.Договор.ТолькоПросмотр = Истина;
		Элементы.Склад.ТолькоПросмотр = Истина;
		Элементы.ПерезаполнитьРеквизитыПоЗаказу.Доступность = Ложь;
        Элементы.Менеджер.ТолькоПросмотр = Истина;
		Элементы.Подразделение.ТолькоПросмотр = Истина;
	КонецЕсли;

	//--Шерстюк Ю.Ю.
	
	Если Объект.Ссылка.Пустая() и ЗначениеЗаполнено(Объект.Основание) Тогда
		//дозаполним реквизиты из договора
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Грузополучатель КАК Грузополучатель,
		|	ДоговорыКонтрагентов.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
		|	ДоговорыКонтрагентов.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	ДоговорыКонтрагентов.Грузоотправитель КАК Грузоотправитель,
		|	ДоговорыКонтрагентов.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	ДоговорыКонтрагентов.Руководитель КАК Руководитель,
		|	ДоговорыКонтрагентов.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	ДоговорыКонтрагентов.Отпустил КАК Отпустил,
		|	ДоговорыКонтрагентов.ОтпустилДолжность КАК ОтпустилДолжность,
		|	ДоговорыКонтрагентов.АдресДоставки КАК АдресДоставки,
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &ДоговорСсылка";
		
		Запрос.УстановитьПараметр("ДоговорСсылка", Объект.Договор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект,ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
	КонецЕсли;
	
	ПродажиСервер.ЗаполнитьСписокВыбораАдреса(Элементы.АдресДоставки, Объект.Партнер);
	
	Элементы.ТоварыОткрытьПодбор.Доступность = Ложь;
	Элементы.ТоварыЗагрузитьИзВнешнегоФайла.Доступность = Ложь;
	
	ЗаполнитьСписокВыбораОснование();
	
//{{20200831 ГлазуновДВ (Задача № 2363)
	Если Объект.Ссылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
		Если ЗначениеЗаполнено(Объект.Договор) И Объект.Договор.Рин1_ВозможнаРеализацияБезПереходаПраваСобственности Тогда
			//Если объект.Договор.ГрафикОплаты.Срок
			ДатаДокументаТекущая = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата, ТекущаяДатаСеанса());
		//Заполним по календарным дням
			Объект.ДатаПереходаПраваСобственности = ДатаДокументаТекущая + Объект.Договор.Рин1_СрокДоставки * 86400;
		//Заполним по рабочим дням
			Если Объект.Договор.Рин1_ДниКалендарные Тогда
				//Объект.ДатаПереходаПраваСобственности = ДатаДокументаТекущая + Объект.Договор.Рин1_СрокДоставки * 86400;
				//Объект.ДатаПереходаПраваСобственности = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Объект.Договор.ГрафикОплаты.Календарь, ДатаДокументаТекущая, Объект.Договор.Рин1_СрокДоставки);
				ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
				
				// + [Rineco], [Киселев А.] [27.07.2021] 
				// Задача: [№ 13349], [# Ипользуется другой метод после обновления]
				
				// Было:
				//Объект.ДатаПереходаПраваСобственности = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ПроизводственныйКалендарь, ДатаДокументаТекущая, Объект.Договор.Рин1_СрокДоставки);
				// Стало:
				Объект.ДатаПереходаПраваСобственности = КалендарныеГрафики.ДатаПоКалендарю(ПроизводственныйКалендарь, ДатаДокументаТекущая, Объект.Договор.Рин1_СрокДоставки);
				// - [Rineco], [Киселев А.] [27.07.2021]
				
			КонецЕсли;	
			Рин1_ДатаПереходаПраваСобственностиПриИзмененииСервер();
		КонецЕсли;
	КонецЕсли;
//}}202008031 ГлазуновДВ
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПровестиДокументВместо(Команда)
	
	//++Гольм А.А. (Гигабайт)
	Объект.СкидкиРассчитаны = Истина;
	//--Гольм А.А. (Гигабайт)
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	//++Гольм А.А. (Гигабайт)
	ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	// тут програмно обрабатываем изменения добавленной колонки...
	Если Элемент.Имя = "ПроцентОбщий" Тогда 
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ЗначениеАвтоматической = ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		Если ТекущаяСтрока.ПроцентОбщий <> 0 Тогда 
			ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ЗначениеАвтоматической;
			ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
		Иначе
			Если ЗначениеАвтоматической <> 0 Тогда 
				ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
			КонецЕсли;	
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ЗначениеАвтоматической = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если  ТекущаяСтрока.СуммаПроцентОбщий <> 0 Тогда 
			ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ЗначениеАвтоматической;
			ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
		Иначе
			Если ЗначениеАвтоматической <> 0 Тогда 
				ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
			КонецЕсли;	
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	Иначе
		Если ТекущаяСтрока <> Неопределено Тогда 
			ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("РассчитатьСкидкиНаценкиКлиент")
Процедура Рин1_РассчитатьСкидкиНаценкиКлиент()
	
		СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
	
	Если Не Объект.РеализацияПоЗаказам Тогда
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		РассчитатьПоРеализацииТоваровУслугПоЗаказу();
		Если РеализацияСверхЗаказа Тогда
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		СформироватьНадписьВалюты(ЭтаФорма);
		
	КонецЕсли;
	//++Гольм А.А. (Гигабайт)
	//ПоказатьОповещениеПользователя(
	//	НСтр("ru = 'Скидки (наценки)'"),
	//	,
	//	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
	//	БиблиотекаКартинок.Информация32);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеДляТаблЧасти()
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда 
		АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
		// добавлено ГИГ
		Если Объект.Товары.Количество() > 0 Тогда 
			Для Каждого ТекущаяСтрока из Объект.Товары Цикл 
				// автоматическое заполнение по скидкам / наценкам
				Если ТекущаяСтрока <> Неопределено тогда  
					Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
						СсылкаНоменклатура = ТекущаяСтрока.Номенклатура;
						РассчитатьСкидкиНаценкиКлиент();
						ТекущаяСтрока.ПроцентРучнойСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
						СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
						СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
						Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
						
						ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентАвтоматическойСкидки + ТекущаяСтрока.ПроцентРучнойСкидки;	
						ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура)
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;

	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	ЗначениеСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	ТекЭлемент = Элементы.Товары.ТекущиеДанные;
	ТекЭлемент.ПроцентРучнойСкидки = ЗначениеСкидки;	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПредоплаты(Форма)
	
	СуммаПродажи         = Форма.Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	СуммаЗалогаЗаТару    = ?(Форма.Объект.ТребуетсяЗалогЗаТару, Форма.СуммаВсего - СуммаПродажи, 0);
	
	Форма.СуммаПредоплатыВВалютеДокумента = СуммаПродажи * Форма.ПроцентПредоплаты / 100;
	Форма.СуммаПредоплатыЗаТаруВВалютеДокумента = СуммаЗалогаЗаТару * Форма.ПроцентПредоплатыЗаТару / 100;
	
	Форма.НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Параметр = Новый Структура("СтароеЗначение,НовоеЗначение",Объект.Соглашение,ВыбранноеЗначение);
	Если Объект.РеализацияПоЗаказам Тогда
		
		Если Объект.Соглашение <> ВыбранноеЗначение тогда
			//спрашиваем согласие на то что тч будет очищена или оставить старое соглашение
			Параметр.Вставить("Элемент",Элемент);
			СтандартнаяОбработка = Ложь;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиНовоеСоглашение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом табличная часть товары будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Иначе 
			//спрашиваем не перезаполнить ли тч по заказу покупателя с учетом неотгруженных товаров на дату документа или нет
			СтандартнаяОбработка = Ложь;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиСоглашениеНеИзменилось", ЭтотОбъект,Параметр), НСтр("ru = 'Табличная часть будет очищена и заполнена всеми доступными к отгрузке товарами на дату документа. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		Если Объект.Товары.Количество() <> 0 тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
	//Если Объект.Соглашение <> ВыбранноеЗначение тогда
	//	Если Объект.Товары.Количество() <> 0 тогда
	//		СтандартнаяОбработка = Ложь;
	//		Параметр = Новый Структура("СтароеЗначение,НовоеЗначение",Объект.Соглашение,ВыбранноеЗначение);
	//		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыВидЦеныПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	// ГИГ_Конец
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	//++Гольм А.А. (Гигабайт)
	ПроцентПриИзменении(Элементы.ПроцентОбщий);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыКоличествоУпаковокПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	// ГИГ_Конец
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	//++Гольм А.А. (Гигабайт)
	ПроцентПриИзменении(Элементы.ПроцентОбщий);	
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыНоменклатураПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
		
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	// ГИГ_Конец
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПриНачалеРедактированияВместо(Элемент, НоваяСтрока, Копирование)
	
		ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
	Если Копирование Тогда
		//++Гольм А.А. (Гигабайт)
		//ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		//ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		//--Гольм А.А. (Гигабайт)
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
	
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПроцентРучнойСкидкиПриИзмененииВместо(Элемент)
	
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
	// добавлена проверка на макс ручной
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,Объект.Дата,ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	// конец проверки
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыСтавкаНДСПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыСуммаРучнойСкидкиПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	//++Гольм А.А. (Гигабайт)
	ФлагНаценка = Ложь;
	//--Гольм А.А. (Гигабайт)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	//++Гольм А.А. (Гигабайт)
	// добавлена проверка на макс ручной
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,Объект.Дата,ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
    // конец проверки
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыУпаковкаПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыЦенаПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	// ГИГ_Конец
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
&Вместо("ОбработкаПодбораТоваровИзЗаказа")
Процедура Рин1_ОбработкаПодбораТоваровИзЗаказа(АдресТоваровВХранилище)
	
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	СтруктураПоискаТоваровЗаказа = Новый Структура("КодСтроки,ЗаказКлиента");
	СтруктураПоискаТоваровНакладной = Новый Структура("НомерСтроки");
	СтруктураПоискаСкидки  = Новый Структура("КлючСвязи");
	Для Каждого СтрокаТоваров Из СтруктураТаблиц.Товары Цикл
		
		// Обработка ТЧ товары.
		Если СтрокаТоваров.КодСтроки<>0 И ЗначениеЗаполнено(СтрокаТоваров.ЗаказКлиента) Тогда
			СтруктураПоискаТоваровЗаказа.КодСтроки = СтрокаТоваров.КодСтроки;
			СтруктураПоискаТоваровЗаказа.ЗаказКлиента = СтрокаТоваров.ЗаказКлиента;
			МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваровЗаказа);
		Иначе
			СтруктураПоискаТоваровНакладной.НомерСтроки = СтрокаТоваров.НомерСтроки;
			МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваровНакладной);
		КонецЕсли;
		
		Если МассивСтрокТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧТовары = МассивСтрокТЧТовары[0];
			
			// Удаление подчиненных строк из ТЧ скидки.
			УдалитьСтрокиТЧСкидкиНаценки(СтрокаТЧТовары);
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрокТЧТовары Цикл
				
				// Удаление подчиненных строк из ТЧ скидки.
				УдалитьСтрокиТЧСкидкиНаценки(СтрокаКУдалению);
				
				Объект.Товары.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		КонецЕсли;
		
		//bercut290420
		Если не СтрокаТоваров.ЗаказКлиента = Неопределено Тогда
			//Исходное			М_СтрокаЗаказа = СтрокаТоваров.ЗаказКлиента.Товары.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаТоваров.КлючСвязи));
			//{{20200619 ГлазуновДВ Изменили ключ поиска по строкам заказа при переносе из ПОДБОРА
			М_СтрокаЗаказа = СтрокаТоваров.ЗаказКлиента.Товары.НайтиСтроки(Новый Структура("КодСтроки",СтрокаТоваров.КодСтроки));
			//}}20200619 ГлазуновДВ 
			Если не М_СтрокаЗаказа.Количество() = 0 Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, М_СтрокаЗаказа[0]);
				
				// + [Rineco], [Киселев А.Н.] [13.08.2021] 
				// Задача: [№ 14489], [#Пересчитать табличню часть в валюте]
				РИНЭКО_ПересчитатьТабличнуюЧастьВВалюте(СтрокаТоваров, СтрокаТЧТовары);
				// - [Rineco], [Киселев А.Н.] [13.08.2021]
				
				Если не СтрокаТоваров.КоличествоВОрдере = 0 И НЕ СтрокаТоваров.КоличествоУпаковокВОрдере = 0 И не СтрокаТоваров.КоличествоВОрдере = М_СтрокаЗаказа[0].Количество и не СтрокаТоваров.КоличествоУпаковокВОрдере = М_СтрокаЗаказа[0].КоличествоУпаковок Тогда
					СтрокаТЧТовары.Количество = СтрокаТоваров.КоличествоВОрдере;
					СтрокаТЧТовары.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковокВОрдере;
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
					СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
					ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, Неопределено);
					СтрокаТЧТовары.ПроцентОбщий = СтрокаТЧТовары.ПроцентРучнойСкидки + СтрокаТЧТовары.ПроцентАвтоматическойСкидки;
					СтрокаТЧТовары.СуммаПроцентОбщий = СтрокаТЧТовары.СуммаАвтоматическойСкидки + СтрокаТЧТовары.СуммаРучнойСкидки;
				КонецЕсли;
				
			Иначе 	
				ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
			КонецЕсли;
		КонецЕсли;
		//
		
		Если НЕ ИспользоватьРеализациюПоНесколькимЗаказам 
			И ЗначениеЗаполнено(СтрокаТЧТовары.ЗаказКлиента) 
			И Объект.ЗаказКлиента <> СтрокаТЧТовары.ЗаказКлиента Тогда
			
			Объект.ЗаказКлиента = СтрокаТЧТовары.ЗаказКлиента;
			
		КонецЕсли;
		СтрокаТЧТовары.ИндексНабора = ?(ЗначениеЗаполнено(СтрокаТЧТовары.НоменклатураНабора), 1, 0);
		
	КонецЦикла;
	
	Объект.СкидкиРассчитаны = Ложь;
	
	//РассчитатьПоРеализацииТоваровУслугПоЗаказу();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
	Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	// + [Rineco], [Киселев А.Н.] [09.08.2021] 
	// Задача: [№ 14489], [#Ошибка при заполнении]
	// Было:
	//СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	// Стало:
	ВалютаРегУчета = Справочники.Валюты.ПустаяСсылка();
	ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(ВалютаРегУчета);
	Если ВалютаРегУчета = ВалютаВзаиморасчетовДокумента Тогда
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");		
	КонецЕсли;	
	// - [Rineco], [Киселев А.Н.] [09.08.2021]
	
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ОбновитьИнформациюПоЗаказам();
	Объект.РеализацияПоЗаказам = ЗначениеЗаполнено(Объект.ЗаказКлиента) ИЛИ СписокЗаказов.Количество() > 0;
	ОбновитьОтклоненияОтЗаказа();
	Если Объект.РеализацияПоЗаказам Тогда
		Если Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		КонецЕсли;
	КонецЕсли;
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ОчиститьЭтапыГрафикаОплаты();
	
КонецПроцедуры

&НаСервере
&После("ДоговорПриИзмененииСервер")
Процедура Рин1_ДоговорПриИзмененииСервер()
	
//{{20200604 ГлазуновДВ добавили для исправления недочета (выбор Графика оплаты только по Соглашению не подходит)
	Если ИспользоватьГрафикиОплаты Тогда
		//ГрафикОплаты = Объект.Договор.ГрафикОплаты;
		ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГрафикОплаты");
		Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокРасчетов");
		Если НЕ ЗначениеЗаполнено(ГрафикОплаты) Тогда
			ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
			Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение,"ПорядокРасчетов");
		КонецЕсли;
		ЗаполнитьЭтапыОплатыСервер();
	КонецЕсли;
//}}20200604 ГлазуновДВ
//{{20200831 ГлазуновДВ (Задача № 2363)
	УстановитьВидимостьОпераций();
	Если Объект.Договор.Рин1_ВозможнаРеализацияБезПереходаПраваСобственности Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
		//Если объект.Договор.ГрафикОплаты.Срок
		ДатаДокументаТекущая = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата, ТекущаяДатаСеанса());
	//Заполним по календарным дням
		Объект.ДатаПереходаПраваСобственности = ДатаДокументаТекущая + Объект.Договор.Рин1_СрокДоставки * 86400;
	//Заполним по рабочим дням
		Если Объект.Договор.Рин1_ДниКалендарные Тогда
			//Объект.ДатаПереходаПраваСобственности = ДатаДокументаТекущая + Объект.Договор.Рин1_СрокДоставки * 86400;
			//Объект.ДатаПереходаПраваСобственности = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Объект.Договор.ГрафикОплаты.Календарь, ДатаДокументаТекущая, Объект.Договор.Рин1_СрокДоставки);
			ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
			Объект.ДатаПереходаПраваСобственности = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ПроизводственныйКалендарь, ДатаДокументаТекущая, Объект.Договор.Рин1_СрокДоставки);
		КонецЕсли;	
		Рин1_ДатаПереходаПраваСобственностиПриИзмененииСервер();
	КонецЕсли;
//}}202008031 ГлазуновДВ

	//bercut230120
	ЗаполнитьЗначенияСвойств(Объект,Объект.Договор,"АдресДоставки,БанковскийСчетКонтрагента,Грузополучатель,БанковскийСчетГрузополучателя,БанковскийСчетОрганизации,Грузоотправитель,БанковскийСчетГрузоотправителя,Руководитель,ГлавныйБухгалтер");
	//ЗаполнитьСписокВыбораОснование();
	Объект.Основание = "";
	Элементы.Основание.СписокВыбора.Очистить();
	НовоеОснование = Рин1_ОбновитьОснованиеВместоНаСервере();
	Если не НовоеОснование = "" Тогда
		ЗаполнитьСписокВыбораОснование();
		Если Элементы.Основание.СписокВыбора.НайтиПоЗначению(НовоеОснование) = Неопределено Тогда
			Элементы.Основание.СписокВыбора.Добавить(НовоеОснование);
			Объект.Основание = НовоеОснование;
		КонецЕсли;
	Иначе 
		ЗаполнитьСписокВыбораОснование();
		Объект.Основание = ?(Элементы.Основание.СписокВыбора.Количество() = 0,"",Элементы.Основание.СписокВыбора.Получить(0));
	КонецЕсли;
	//
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОснование()
	
	Для Каждого СтрокаТаблицы Из ТаблицаОснованийДляПечати Цикл 
		Элементы.Основание.СписокВыбора.Добавить(СтрокаТаблицы.Основание,?(СтрНайти(СтрокаТаблицы.Основание,"Заказ") = 0,"",СтрокаТаблицы.Основание));		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеНомер) Тогда
			Элементы.ОснованиеНомер.СписокВыбора.Добавить(СтрокаТаблицы.ОснованиеНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеДата) Тогда
			Элементы.ОснованиеДата.СписокВыбора.Добавить(СтрокаТаблицы.ОснованиеДата,Формат(СтрокаТаблицы.ОснованиеДата,"ДЛФ=D"));
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Основание.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	
КонецПроцедуры

&НаСервере
Функция Рин1_ОбновитьОснованиеВместоНаСервере()
	
	//bercut190520 задача 168
	ОснованиеИзДоговора = "";
	Если Объект.РеализацияПоЗаказам Тогда
		//один заказ клиента
		Если не Объект.ЗаказКлиента = Неопределено Тогда
			
			Если Объект.Договор.ОснованиеЗаказКлиента и Объект.Договор.ТолькоНомерДата Тогда
				НомерЗаказа = Сред(Объект.ЗаказКлиента.Номер,СтрНайти(Объект.ЗаказКлиента.Номер,"-")+1);
				Пока Лев(НомерЗаказа, 1) = "0" Цикл 
					НомерЗаказа = Прав(НомерЗаказа, СтрДлина(НомерЗаказа) - 1);
				КонецЦикла;
				ТолькоНомерДата = "№ " + НомерЗаказа + " от " + Формат(Объект.ЗаказКлиента.Дата,"ДЛФ=DD"); 
				ОснованиеИзДоговора = ?(Объект.Договор.Основание = "",ТолькоНомерДата,Объект.Договор.Основание + " " + ТолькоНомерДата);
			Иначе
				Если Объект.Договор.ОснованиеЗаказКлиента и Элементы.Основание.СписокВыбора.Количество() > 0 Тогда
					ОснованиеИзДоговора = ?(Объект.Договор.Основание = "",Элементы.Основание.СписокВыбора[0].Значение,Объект.Договор.Основание + " " + Элементы.Основание.СписокВыбора[0].Значение);
				Иначе
					ОснованиеИзДоговора = Объект.Договор.Основание;
				КонецЕсли;
			КонецЕсли;
		Иначе
			//много									
			МассивНайденныхСтрок = ТаблицаОснованийДляПечати.НайтиСтроки(Новый Структура("ОснованиеНомер",""));
			Если не МассивНайденныхСтрок.Количество() = 0 Тогда
				СтрокаЗаказы = МассивНайденныхСтрок[0].Основание;
			Иначе 	
				СтрокаЗаказы = "";
			КонецЕсли;
			
			Если Объект.Договор.ОснованиеЗаказКлиента и Объект.Договор.ТолькоНомерДата Тогда
				//заказы могут дублироваться				
				СЗ_ЗаказовКлиента = Новый СписокЗначений;
				Для каждого Строка Из Объект.Товары Цикл
					Если СЗ_ЗаказовКлиента.НайтиПоЗначению(Строка.ЗаказКлиента) = Неопределено Тогда
						СЗ_ЗаказовКлиента.Добавить(Строка.ЗаказКлиента);
					КонецЕсли;
				КонецЦикла;
				СписокЗаказовТолькоНомерДата = "";
				Для каждого Значение Из СЗ_ЗаказовКлиента Цикл
					Если не Значение.Значение = Неопределено Тогда
						СписокЗаказовТолькоНомерДата = СписокЗаказовТолькоНомерДата + "№ " + Сред(Значение.Значение.Номер,СтрНайти(Значение.Значение.Номер,"-")+1) + " от " + Формат(Значение.Значение.Дата,"ДЛФ=DD") + ", ";
					КонецЕсли;
				КонецЦикла;
				ОснованиеИзДоговора = ?(Объект.Договор.Основание = "",Лев(СписокЗаказовТолькоНомерДата,СтрДлина(СписокЗаказовТолькоНомерДата)-2),Объект.Договор.Основание + " " + Лев(СписокЗаказовТолькоНомерДата,СтрДлина(СписокЗаказовТолькоНомерДата)-2));
			Иначе 
				Если Объект.Договор.ОснованиеЗаказКлиента Тогда
					ОснованиеИзДоговора = ?(Объект.Договор.Основание = "",Элементы.Основание.СписокВыбора[0].Значение,Объект.Договор.Основание + " " + Элементы.Основание.СписокВыбора[0].Значение);
				Иначе
					ОснованиеИзДоговора = Объект.Договор.Основание;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	//
	Возврат ОснованиеИзДоговора;
	
КонецФункции

&НаКлиенте
Процедура Рин1_ОбновитьОснованиеВместо(Команда)
	
	Элементы.Основание.СписокВыбора.Очистить();
	ЗаполнитьСписокВыбораОснование();
	НовоеОснование = Рин1_ОбновитьОснованиеВместоНаСервере();
	Если не НовоеОснование = "" Тогда
		Если Элементы.Основание.СписокВыбора.НайтиПоЗначению(НовоеОснование) = Неопределено Тогда
			Элементы.Основание.СписокВыбора.Добавить(НовоеОснование);
		КонецЕсли;
		Объект.Основание = НовоеОснование;	
	Иначе 
		Элементы.Основание.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
		Объект.Основание = ?(Элементы.Основание.СписокВыбора.Количество() = 0,"",Элементы.Основание.СписокВыбора[0]);
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	//++Шерстюк Ю.Ю. 24.03.2021
	Рин1_ОснованиеПриИзмененииПосле(Неопределено);
	//--Шерстюк Ю.Ю.24.03.2021
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервереТаблицаОснованийДляПечати()
	
	ТаблицаОснованийДляПечати.Очистить();
	ТаблицаОснованийДляПечати.Загрузить(Документы.РеализацияТоваровУслуг.ТаблицаОснованийДляПечати(Объект));
	
КонецПроцедуры // ()


&НаКлиенте
&Вместо("РеализацияПоЗаказамПриИзмененииЗавершение")
Процедура Рин1_РеализацияПоЗаказамПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры)
	
	ЗаказКлиента = ДополнительныеПараметры.ЗаказКлиента;
	
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.РеализацияПоЗаказам = Не Объект.РеализацияПоЗаказам;
		Возврат;
	Иначе 
		//bercut210520
		Рин1_ОбновитьОснованиеВместо(неопределено);
		//
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
		Объект.ЗаказКлиента = ЗаказКлиента;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ТоварыОтвязатьОтЗаказа");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюОтвязатьОтЗаказа");
	МассивЭлементов.Добавить("ТоварыГруппаЗаказКлиента");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Объект.РеализацияПоЗаказам);
	
	ПриИзмененииРеализацииПоНесколькимЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиНовоеСоглашение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(ДополнительныеПараметры.Элемент);
		Объект.Соглашение = ДополнительныеПараметры.НовоеЗначение;
		//Объект.РеализацияПоЗаказам = Ложь;
	//{{20200604 ГлазуновДВ добавили для исправления недочета (выбор Графика оплаты только по Соглашению не подходит)	
		СоглашениеПриИзмененииСервер();
	//}}20200604 ГлазуновДВ	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиСоглашениеНеИзменилось(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТчДоступнымиКОтгрузкеТоварами();		
	//{{20200604 ГлазуновДВ добавили для исправления недочета (выбор Графика оплаты только по Соглашению не подходит)	
		СоглашениеПриИзмененииСервер();
	//}}20200604 ГлазуновДВ	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТчДоступнымиКОтгрузкеТоварами()
	
	ДанныеОтбора = Новый Структура(
	"Ссылка,
	|Партнер,
	|Сделка,
	|Контрагент,
	|Договор,
	|Организация,
	|ХозяйственнаяОперация,
	|Соглашение,
	|ВалютаВзаиморасчетов,
	|НалогообложениеНДС,
	|ЦенаВключаетНДС,
	|ПорядокРасчетов,
	|ВернутьМногооборотнуюТару,
	|ТребуетсяЗалогЗаТару,
	|НаправлениеДеятельности");
	
	ЗаполнитьЗначенияСвойств(ДанныеОтбора, Объект);
	
	ПроизвестиЗаполнениеТЧ(ДанныеОтбора);
	
	ЭтаФорма.Модифицированность = Истина;
	
	//ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	//СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьТчДоступнымиКОтгрузкеТоварами()

&НаСервере
Процедура ПроизвестиЗаполнениеТЧ(ДанныеОтбора)
	
	Объект.Товары.Очистить();
	
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(Объект.ЗаказКлиента);
	
	РезультатЗапросаПоОстаткамЗаказов = Документы.РеализацияТоваровУслуг.Рин1_ПолучитьРезультатЗапросаПоОстаткамЗаказов(
		ДанныеОтбора,
		Объект.Склад,
		МассивЗаказов,
		Неопределено);	

	Если РезультатЗапросаПоОстаткамЗаказов[4].Пустой() 
		И РезультатЗапросаПоОстаткамЗаказов[5].Пустой() 
		И ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
		
		ТекстОшибки = НСтр("ru = 'Нет товаров, доступных для отгрузки. Для начала процесса отгрузки необходимо
		|указать действие ""Отгрузить"" в списке товаров для отгружаемых позиций номенклатуры.';
		|en = 'There are no goods available for shipment. To start shipping, specify action ""Ship"" 
		|in the list of goods for the shipped items of products.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ТЗ_ТоварыКОтгрузке = РезультатЗапросаПоОстаткамЗаказов[4].Выгрузить();
	Для каждого Строка Из ТЗ_ТоварыКОтгрузке Цикл
		//исключаем товары которые разрешены к отгрузке датой позже даты документа - иначе ошибка при неоперативном проведении документа
		Если Строка.ДатаОтгрузки > Объект.Дата Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Строка);
		ТекущаяСтрока.Количество = Строка.Количество;		
		ТекущаяСтрока.КоличествоУпаковок = Строка.Количество / Строка.Коэффициент;
		
		//поскольку количество отгружаемого товара может быть меньше чем в заказе то нужно строки пересчитать по нашему алгоритму, как в заказе клиента при изменении количества
		ОбработатьСтрокуТчПриИзмененииКоличества(ТекущаяСтрока);
		
	КонецЦикла;
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ОчиститьЭтапыГрафикаОплаты();
	
КонецПроцедуры // ПроизвестиЗаполнениеТЧ()

// <Описание процедуры>
//строки пересчитать как в заказе клиента при изменении количества
//
&НаСервере
Процедура ОбработатьСтрокуТчПриИзмененииКоличества(ТекущаяСтрока)
	
	//0_3
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);		
	//1_0
	ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой * ТекущаяСтрока.КоличествоУпаковок;
	ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
	ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
	ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
	//2_0
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
	Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	//
	
КонецПроцедуры //ОбработатьСтрокуТчПриИзмененииКоличества(ТекущаяСтрока)

&НаКлиенте
Процедура Рин1_ПриОткрытииПосле(Отказ)
	//++Шерстюк Ю.Ю. 24.03.2021 задача 5465
	//Если Объект.Ссылка.Пустая()  Тогда
	Если Объект.Ссылка.Пустая() и Не Объект.Рин1_ПечатьОснованияКакВДиадок Тогда
	//--Шерстюк Ю.Ю.
		Рин1_ОбновитьОснованиеВместо(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НадписьЭтапыОплатыНажатие")
Процедура Рин1_НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое метода.
//	ПродолжитьВызов(Элемент, СтандартнаяОбработка);
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ДоступноИзменение      = Не Объект.РеализацияПоЗаказам Или ОтклонениеОтУсловийПродаж;
	
	СуммаПродажи         = Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	СуммаЗалогаЗаТару    = ?(Объект.ТребуетсяЗалогЗаТару, СуммаВсего - СуммаПродажи, 0);
	ТребуетсяЗалогЗаТару = Объект.ВернутьМногооборотнуюТару И Объект.ТребуетсяЗалогЗаТару;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",                      ТолькоПросмотр Или Не ДоступноИзменение);
	ПараметрыФормы.Вставить("СуммаОплатыПоДокументу",              СуммаПродажи);
	ПараметрыФормы.Вставить("СуммаЗалогаПоДокументу",              СуммаЗалогаЗаТару);
	ПараметрыФормы.Вставить("ТребуетсяЗалогЗаТару",                ТребуетсяЗалогЗаТару);
	ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару",           Объект.ВернутьМногооборотнуюТару);
	
	//реквизиты
	ПараметрыФормы.Вставить("Соглашение",                          Объект.Соглашение);
	ПараметрыФормы.Вставить("Договор",                             Объект.Договор);
//{{20200604 ГлазуновДВ
	Если Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
		//ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
		Если ИспользоватьГрафикиОплаты Тогда
			//ГрафикОплаты = Объект.Договор.ГрафикОплаты;
			ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГрафикОплаты");
			Если НЕ ЗначениеЗаполнено(ГрафикОплаты) Тогда
				ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
			КонецЕсли;
		КонецЕсли;
		ПараметрыФормы.Вставить("ГрафикОплаты",                    ГрафикОплаты);
	КонецЕсли;
//}}20200604  ГлазуновДВ
	
	ПараметрыФормы.Вставить("Дата",                                Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                              Объект.Валюта);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",             УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ФормаОплаты",                         Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("Касса",                               Объект.Касса);
	ПараметрыФормы.Вставить("БанковскийСчет",                      Объект.БанковскийСчетОрганизации);
	ПараметрыФормы.Вставить("Организация",                         Объект.Организация);
	ПараметрыФормы.Вставить("ИдентификаторПлатежа",                Объект.ИдентификаторПлатежа);
	ПараметрыФормы.Вставить("ПорядокРасчетов",                     Объект.ПорядокРасчетов);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",             Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("ГрафикИсполненияВДоговоре",           ГрафикИсполненияВДоговоре);
	ПараметрыФормы.Вставить("ПорядокОплаты",                       Объект.ПорядокОплаты);
	ПараметрыФормы.Вставить("ВалютаВзаиморасчетов",                Объект.ВалютаВзаиморасчетов);
	
	//настройки
	ПараметрыФормы.Вставить("ПараметрыВыбораРеквизитов",           ПараметрыВыбораРеквизитов);
	ПараметрыФормы.Вставить("ДоступныеПорядкиРасчетов",            ДоступныеПорядкиРасчетов);
	ПараметрыФормы.Вставить("НакладнаяПоЗаказам",                  НЕ Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
																	И Объект.РеализацияПоЗаказам);
	ПараметрыФормы.Вставить("ИмяПоляЗаказ",                        "ЗаказКлиента");
	ПараметрыФормы.Вставить("УпрощенныйРежим",                     НЕ ПараметрыФормы.НакладнаяПоЗаказам ИЛИ ГрафикИсполненияВДоговоре
		ИЛИ ИспользоватьУпрощеннуюСхемуОплатыВПродажах И НЕ ИспользоватьРеализациюПоНесколькимЗаказам);
	ПараметрыФормы.Вставить("РежимРеализации",                     ПараметрыФормы.УпрощенныйРежим И ИспользоватьСтатусыРеализацийТоваровУслуг И НЕ Объект.РеализацияПоЗаказам);
	
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьЭтапыОплатыВоВременноеХранилищеНаСервере());
	ПараметрыФормы.Вставить("АдресТЧВоВременномХранилище", ПоместитьТоварыВоВременноеХранилищеНаСервере());
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыКлиентом", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
&После("СоглашениеПриИзмененииСервер")
Процедура Рин1_СоглашениеПриИзмененииСервер()
	// Вставить содержимое метода.
//{{20200604 ГлазуновДВ добавили для исправления недочета (выбор Графика оплаты только по Соглашению не подходит)
	Если ИспользоватьГрафикиОплаты Тогда
		//ГрафикОплаты = Объект.Договор.ГрафикОплаты;
		ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГрафикОплаты");
		Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокРасчетов");
		Если НЕ ЗначениеЗаполнено(ГрафикОплаты) Тогда
			ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
			Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение,"ПорядокРасчетов");
		КонецЕсли;
		ЗаполнитьЭтапыОплатыСервер();
	КонецЕсли;
//}}20200604 ГлазуновДВ
//{{20200831 ГлазуновДВ (Задача № 2363)
	Если ЗначениеЗаполнено(Объект.Договор)И Объект.Договор.Рин1_ВозможнаРеализацияБезПереходаПраваСобственности Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
		//Если объект.Договор.ГрафикОплаты.Срок
		ДатаДокументаТекущая = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата, ТекущаяДатаСеанса());
	//Заполним по календарным дням
		Объект.ДатаПереходаПраваСобственности = ДатаДокументаТекущая + Объект.Договор.Рин1_СрокДоставки * 86400;
	//Заполним по рабочим дням
		Если Объект.Договор.Рин1_ДниКалендарные Тогда
			//Объект.ДатаПереходаПраваСобственности = ДатаДокументаТекущая + Объект.Договор.Рин1_СрокДоставки * 86400;
			//Объект.ДатаПереходаПраваСобственности = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Объект.Договор.ГрафикОплаты.Календарь, ДатаДокументаТекущая, Объект.Договор.Рин1_СрокДоставки);
			ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
			Объект.ДатаПереходаПраваСобственности = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ПроизводственныйКалендарь, ДатаДокументаТекущая, Объект.Договор.Рин1_СрокДоставки);
		КонецЕсли;	
		Рин1_ДатаПереходаПраваСобственностиПриИзмененииСервер();
	КонецЕсли;
//}}202008031 ГлазуновДВ
КонецПроцедуры

//20200731 ГлазуновДВ Меняем структуру передачи параметров для открытия формы валюты при нажитии
&НаКлиенте
&Вместо("НадписьВалютыНажатие")
Процедура Рин1_НадписьВалютыНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое метода.
	//ПродолжитьВызов(Элемент, СтандартнаяОбработка);
	Перем ЕстьКорректировки;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"         , Объект.Валюта);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов"    , Объект.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов"     , Объект.Товары.Итог("СуммаВзаиморасчетов"));
	СтруктураПараметров.Вставить("СуммаДокумента"          , Объект.Товары.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("Курс"                    , Объект.Курс);
	СтруктураПараметров.Вставить("Кратность"               , Объект.Кратность);
	СтруктураПараметров.Вставить("ДатаДокумента"           , Объект.Дата);
	СтруктураПараметров.Вставить("ЭтоДокументПродажи"      , Истина);
//{{20200731 ГлазуновДВ
	//Объект.РеализацияПоЗаказам
	Если Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
		 Или Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") Тогда
		СтруктураПараметров.Вставить("ДокументОснование"       , Объект.Ссылка);
	//ИначеЕсли Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") Тогда
	//	СтруктураПараметров.Вставить("ДокументОснование"       , Объект.Договор);
	Иначе 
		СтруктураПараметров.Вставить("ДокументОснование"       , Объект.ЗаказКлиента);
	КонецЕсли;
//}}20200731 ГлазуновДВ
	
	ПроверитьНаличиеКорректировок(Объект.Ссылка, ЕстьКорректировки);
	
	СтруктураПараметров.Вставить("ТолькоПросмотр"          , ЕстьКорректировки ИЛИ ЭтаФорма.ТолькоПросмотр);
	
	Если Объект.РеализацияПоЗаказам И Не РазрешеноОтклонениеОтУсловийПродаж() Тогда
		СтруктураПараметров.Вставить("ВалютаДокументаТолькоПросмотр",Истина);
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетовТолькоПросмотр",Истина);
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		СтруктураПараметров.Вставить("НеПоказыватьРасчеты",Истина);
	КонецЕсли;
		
	ДополнительныеПараметры = Новый Структура;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеВзаиморасчеты", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсДокумента", СтруктураПараметров,,,,,ОповещениеОЗакрытии,);

КонецПроцедуры

&НаКлиенте
&Вместо("ОбработатьИзмененияПоКнопкеВзаиморасчеты")
Процедура Рин1_ОбработатьИзмененияПоКнопкеВзаиморасчеты(РезультатЗакрытия, ДополнительныеПараметры)
	// Вставить содержимое метода.
//	ПродолжитьВызов(РезультатЗакрытия, ДополнительныеПараметры);

	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ИзмениласьВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов <> Объект.ВалютаВзаиморасчетов;
		ИзмениласьВалюта = РезультатЗакрытия.Валюта <> Объект.Валюта;
		
		Объект.Валюта = РезультатЗакрытия.Валюта;
		
		Если ИзмениласьВалюта Тогда
			
			Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента) 
				И РезультатЗакрытия.НеобходимПересчетСуммДокумента Тогда
				
//Исходное					ВалютаПриИзмененииСервер(Объект.Валюта);
			//{{20200803 ГлазуновДВ Переопределили распределение сумм
				ЕстьСуммаДокумента = ?(РезультатЗакрытия.Свойство("СуммаДокумента"),Истина,Ложь);
				Если ЕстьСуммаДокумента Тогда
					СуммаКРаспределению = РезультатЗакрытия.СуммаДокумента;
					Рин1_ВалютаПриИзмененииСерверРинеко(Объект.Валюта, СуммаКРаспределению);
				Иначе	
					ВалютаПриИзмененииСервер(Объект.Валюта);
				КонецЕсли;
			//}}20200803 ГлазуновДВ
				ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
				
			КонецЕсли;
			
			ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
			ВалютаДокумента = Объект.Валюта;
//Исходное			Объект.ЭтапыГрафикаОплаты.Очистить();
		//{{20200803 ГлазуновДВ Переопределили распределение сумм
			ЕстьСуммаДокумента = ?(РезультатЗакрытия.Свойство("СуммаДокумента"),Истина,Ложь);
			Если Не ЕстьСуммаДокумента Тогда
				Объект.ЭтапыГрафикаОплаты.Очистить();
			КонецЕсли;
	//{{20200819 ГлазуновДВ добавили для переноса новых сумм в той же валюте		
		Иначе
			Если  РезультатЗакрытия.НеобходимПересчетСуммДокумента Тогда 
				ЕстьСуммаДокумента = ?(РезультатЗакрытия.Свойство("СуммаДокумента"),Истина,Ложь);
				Если ЕстьСуммаДокумента Тогда
					СуммаКРаспределению = РезультатЗакрытия.СуммаДокумента;
					Рин1_ВалютаПриИзмененииСерверРинеко(Объект.Валюта, СуммаКРаспределению);
				Иначе	
					ВалютаПриИзмененииСервер(Объект.Валюта);
				КонецЕсли;
				ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
			КонецЕсли;
	//}}20200819 ГлазуновДВ
		//}}20200803 ГлазуновДВ
			
		КонецЕсли;
		
		Объект.ВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов;
		
		Если ИзмениласьВалютаВзаиморасчетов Тогда
			
		//	ЗаполнитьДоговорПоУмолчанию();  //20200805 снимаем авто-смену договора при изменении валюты взаиморасчетов
			ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			ЗаполнитьПорядокОплатыПоУмолчанию();
			ОчиститьРасшифровкуПлатежа();
			
		КонецЕсли;
		
		Объект.Курс					= РезультатЗакрытия.Курс;
		Объект.Кратность			= РезультатЗакрытия.Кратность;
		Объект.СуммаВзаиморасчетов	= РезультатЗакрытия.СуммаВзаиморасчетов;
		
		ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись();
		
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Рин1_ВалютаПриИзмененииСерверРинеко(НоваяВалюта, СуммаКРаспределению)
	
	Таблица = Объект.Товары;
	СтараяВалюта                = ВалютаДокумента;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	МассивСумм = Новый Массив;
	Для н = 0 По Таблица.Количество()-1 Цикл
		
		ТекСтрока = Таблица[н];
		
		// + [Rineco], [Киселев А.] [27.07.2021] 
		// Задача: [№ 13093], [#РТУ пересчет валютных цен]
		
		// Было:
		
		//ТекСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		//	ТекСтрока.Цена,
		//	СтараяВалюта,НоваяВалюта,
		//	СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс,
		//	СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность);
		
		//МассивСумм.Добавить(
		//РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		//ТекСтрока.СуммаСНДС,
		//СтараяВалюта,НоваяВалюта,
		//СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс,
		//СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность));	
		// Стало:		
		ТекСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		ТекСтрока.Цена,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты);
		МассивСумм.Добавить(
		РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		ТекСтрока.СуммаСНДС,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты));
		// - [Rineco], [Киселев А.] [28.07.2021]
					
	КонецЦикла;
	
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
	
	Если МассивСумм <> Неопределено Тогда
		
		Для н = 0 По Таблица.Количество()-1 Цикл
			ТекСтрока = Таблица[н];
			ТекСтрока.СуммаСНДС = МассивСумм[н];
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(ТекСтрока, Объект.ЦенаВключаетНДС,
				Истина, Истина, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
//Расчет ПроцентаОбщего ЦеныСоСкидкой
	//ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Таблица);
//Расчет ПроцентаОбщего И ЦеныСоСкидкой
	Для каждого СтрТаблица Из Таблица Цикл
		СтрТаблица.ПроцентОбщий = СтрТаблица.ПроцентРучнойСкидки + СтрТаблица.ПроцентАвтоматическойСкидки;
		СтрТаблица.СуммаПроцентОбщий = СтрТаблица.СуммаАвтоматическойСкидки + СтрТаблица.СуммаРучнойСкидки;
		СтрТаблица.ЦенаСоСкидкой = СтрТаблица.Сумма /СтрТаблица.КоличествоУпаковок;
	КонецЦикла;
	
//Подвал Сумм
	//Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет Тогда
	//	ВзаиморасчетыСервер.ПересчитатьСуммыВВалютуРасшифровкаПлатежа(
	//		Объект,
	//		?(Объект.ТребуетсяЗалогЗаТару,
	//			Объект.Товары.Итог("СуммаСНДС"),
	//			Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары")));
	//КонецЕсли;
	//
	//Если НЕ Объект.РеализацияПоЗаказам И НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
	//	Объект.ВалютаВзаиморасчетов = Объект.Валюта;
	//	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	//КонецЕсли;
	
	СтруктураПересчета = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
КонецПроцедуры

//20200814 ГлазуновДВ Заполняем этапы оплаты оплаты перехода права собственности
&НаСервере
&После("ДатаПереходаПраваСобственностиПриИзмененииСервер")
Процедура Рин1_ДатаПереходаПраваСобственностиПриИзмененииСервер()
	// Вставить содержимое метода.
	ЗаполнитьЭтапыОплатыСервер();
КонецПроцедуры

//{{20200831 ГлазуновДВ (Задача № 2363)
&НаСервере
&Вместо("УстановитьВидимостьОпераций")
Процедура Рин1_УстановитьВидимостьОпераций()
	// Вставить содержимое метода.
//	ПродолжитьВызов();
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = ИспользоватьОтгрузкуБезПереходаПраваСобственности;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
//Исходное		ВозможнаРеализацияБезПереходаПраваСобственности = 
//Исходное			Документы.РеализацияТоваровУслуг.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ВозможнаРеализацияБезПереходаПраваСобственности");
		//{{20200831 ГлазуновДВ (Задача № 2363)
		ВозможнаРеализацияБезПереходаПраваСобственности = 
			ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Договор, "Рин1_ВозможнаРеализацияБезПереходаПраваСобственности");
		Если Не ВозможнаРеализацияБезПереходаПраваСобственности Тогда
			ВозможнаРеализацияБезПереходаПраваСобственности = 
				ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ВозможнаРеализацияБезПереходаПраваСобственности");
		КонецЕсли;
//}}20200831 ГлазуновДВ
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если Элементы.Найти("ХозяйственнаяОперация") <> Неопределено  Тогда
	
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьУправленческуюОрганизацию") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(
			Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
		
		Если Не ВозможнаРеализацияБезПереходаПраваСобственности Тогда
			
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		Иначе
			
			Если ЭлементСписка = Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(
					Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 Тогда
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//}}20200831 ГлазуновДВ
&НаКлиенте
Процедура Рин1_ОснованиеПриИзмененииПосле(Элемент)
	Если Объект.Рин1_ПечатьОснованияКакВДиадок Тогда
		Объект.ОснованиеКакВДиадок =  ОбновитьОснованиеДляДиадокНаСервере(Объект.Рин1_ПечатьОснованияКакВДиадок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбновитьОснованиеДляДиадокНаСервере(ПечатьОснованияКакВДиадок)
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
    пСтруктураОснования = ДокументПродажи.ЗаполнитьОснование(ПечатьОснованияКакВДиадок);
	Возврат пСтруктураОснования.ОснованиеКакВДиадок;
КонецФункции

&НаКлиенте
Процедура Рин1_Рин1_ПечатьОснованияКакВДиадокПриИзмененииПосле(Элемент)
	Если Объект.Рин1_ПечатьОснованияКакВДиадок Тогда
		Рин1_ОснованиеПриИзмененииПосле(Неопределено);
	Иначе
		 Объект.ОснованиеКакВДиадок = "";
	КонецЕсли;
КонецПроцедуры

//++Шерстюк Ю.Ю. 16.04.2021  Задача № 7345, 7625 перезаполняем основные реквизиты по заказу без обновления ТЧ Товары
&НаКлиенте
Процедура Рин1_ПерезаполнитьРеквизитыПоЗаказуПосле(Команда)
	//Элементы
	пСсылкаЗаказ = Объект.ЗаказКлиента;
	Если ЗначениеЗаполнено(пСсылкаЗаказ) Тогда
		Объект.Соглашение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(пСсылкаЗаказ,"Соглашение");
		Объект.Договор = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(пСсылкаЗаказ,"Договор");
		Объект.Контрагент = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(пСсылкаЗаказ,"Контрагент");
		Объект.Партнер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(пСсылкаЗаказ,"Партнер");
		ДоговорПриИзменении(Неопределено);
		Рин1_ДоговорПриИзмененииПосле(Неопределено);
		
		// + [Rineco], [Киселев А.Н.] [14.09.2021] 
		// Задача: [№ 16907], [# Перезаполнение ИНН/КПП в СФ]
		// + [Rineco], [Киселев А.] [27.07.2021] 
		// Задача: [№ 12995], [#Заполняем ИдентификаторГосКонтрактаСчетФактуры]
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("ИНН");
		МассивРеквизитов.Добавить("КПП");
		ИдентификаторГосКонтракта = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"ИдентификаторГосКонтракта");
		РеквизитыКПерезаписи = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Объект.Контрагент,МассивРеквизитов);
		РеквизитыКПерезаписи.Вставить("ИдентификаторГосКонтракта",ИдентификаторГосКонтракта);
		ПерезаполнитьРеквизитыСчетовФактур(РеквизитыКПерезаписи);
		// - [Rineco], [Киселев А.] [27.07.2021]
		// - [Rineco], [Киселев А.Н.] [14.09.2021]
		
		
		ОснованиеИзменено = Истина;
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры


// + [Rineco], [Киселев А.] [27.07.2021] 
// Задача: [№ 12995], [#Заполняем ИдентификаторГосКонтрактаСчетФактуры]
&НаСервере
Процедура ПерезаполнитьРеквизитыСчетовФактур(РеквизитыКПерезаписи)
	ТаблицаСчетовФактур = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(Объект.Ссылка);
	Если ТаблицаСчетовФактур.Количество() > 0 Тогда
		Для Каждого СчетФактура Из ТаблицаСчетовФактур Цикл 
			СчетФактураОбъект = СчетФактура.Ссылка.ПолучитьОбъект();
			
			Для Каждого РеквизитКПерезаписи Из РеквизитыКПерезаписи Цикл 
				ОбщегоНазначенияБЗККлиентСервер.УстановитьЗначениеСвойства(СчетФактураОбъект,РеквизитКПерезаписи.Ключ,РеквизитКПерезаписи.Значение);	
			КонецЦикла;
			
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура Рин1_ДоговорПриИзмененииПосле(Элемент)
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
&После("ПартнерПриИзменении")
Процедура Рин1_ПартнерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_КонтрагентПриИзмененииПосле(Элемент)
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
КонецПроцедуры
//--Шерстюк Ю.Ю.
&НаКлиенте
Процедура Рин1_ЗаполнитьКомментарийПосле(Команда)
		//++Шерстюк Ю.Ю. Задача 8377 запись комментария без перепроведения
	Если Не ЭтотОбъект.Модифицированность Тогда 
		пПараметрыОбработки = Новый Структура;
		пПараметрыОбработки.Вставить("Ссылка",Объект.Ссылка);
		
		пФормаКомментария = ОткрытьФорму("Обработка.Рин1_ВводКомментарияБезПерепроведения.Форма.Форма",пПараметрыОбработки,Объект.Ссылка);
	Иначе
		 Сообщение = Новый СообщениеПользователю;
		 Сообщение.Текст = "Объект модифицирован, изменение комментария доступно без использования дополнительных средств...";
		 Сообщение.Сообщить();
	КонецЕсли;
	//--Шерстюк Ю.Ю.

КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОбработкаОповещенияПосле(ИмяСобытия, Параметр, Источник)
		//++Шерстюк Ю.Ю. Задача 8377 запись комментария без перепроведения
	Если ИмяСобытия = "ПриЗакрытииВводаКомметария" Тогда 
		 ЭтаФорма.Прочитать();
	 КонецЕсли;
	//--Шерстюк Ю.Ю.
КонецПроцедуры



#Область Задача14489_ПересчитатьТЧВВалюте
// + [Rineco], [Киселев А.Н.] [13.08.2021] 
// Задача: [№ 14489], [#Пересчитать табличную часть в валюте]
&НаСервере
Процедура РИНЭКО_ПересчитатьТабличнуюЧастьВВалюте(Знач СтрокаТоваров, СтрокаТЧТовары)
	
	Перем ВалютаРегУчета, СтруктураКурсовНовойВалюты, СтруктураКурсовСтаройВалюты;
	
	ВалютаРегУчета = Справочники.Валюты.ПустаяСсылка();
	ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(ВалютаРегУчета);
	
	Если СтрокаТоваров.ЗаказКлиента.Валюта <> ВалютаРегУчета Тогда
		
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТоваров.ЗаказКлиента.Валюта, ТекущаяДатаСеанса()); 
		СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегУчета, ТекущаяДатаСеанса());
		
		СтрокаТЧТовары.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		СтрокаТЧТовары.Цена,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты);
		СтрокаТЧТовары.СуммаСНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		СтрокаТЧТовары.СуммаСНДС,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты);
		
		Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(
		СтрокаТЧТовары, 
		СтрокаТоваров.ЗаказКлиента.ЦенаВключаетНДС,
		Ложь,
		Ложь,
		Истина);
		
		СтрокаТЧТовары.СуммаАвтоматическойСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		СтрокаТЧТовары.СуммаАвтоматическойСкидки,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты);
		СтрокаТЧТовары.СуммаРучнойСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		СтрокаТЧТовары.СуммаРучнойСкидки,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты);
		
		СтрокаТЧТовары.ПроцентОбщий = СтрокаТЧТовары.ПроцентРучнойСкидки + СтрокаТЧТовары.ПроцентАвтоматическойСкидки;
		СтрокаТЧТовары.СуммаПроцентОбщий = СтрокаТЧТовары.СуммаАвтоматическойСкидки + СтрокаТЧТовары.СуммаРучнойСкидки;
		СтрокаТЧТовары.СуммаВзаиморасчетов = СтрокаТоваров.СуммаВзаиморасчетов; 	
	КонецЕсли;

КонецПроцедуры


#КонецОбласти