
&Перед("Печать")
Процедура Рин1_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплатуУСП") Тогда
		СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"СчетНаОплатуУСП",
		НСтр("ru = 'Счет на оплату УСП';
		|en = 'Proforma invoice'"),
		СформироватьПечатнуюФормуСчетНаОплатуУСП(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуСчетНаОплатуУСП(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЧЕТНАОПЛАТУУСП";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументСчетаНаОплату(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&Вместо("ЗаполнитьРеквизитыШапкиСчетаНаОплату")
Процедура Рин1_ЗаполнитьРеквизитыШапкиСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары)
	
	//bercut270120
	Если ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЧЕТНАОПЛАТУУСП" Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетовНаОплату.ПФ_MXL_СчетНаОплатуУСП");	
	Иначе
//Исходное		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетовНаОплату.ПФ_MXL_СчетНаОплату");
//20200831 Глазунов убрали заимствованную форму, добавили копию новой печатной формы (Задача № 2451)		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетовНаОплату.ПФ_MXL_СчетНаОплату1");
	КонецЕсли;
	//
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, "ЗаголовокСчета", ДанныеПечати.Организация);
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	
	Если ТаблицаЭтапыОплаты.Количество() = 0 Тогда
		ДатаПлатежа = '00010101';
	ИначеЕсли ТаблицаЭтапыОплаты.Количество() = 1 Тогда
		ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаПлатежа;
	Иначе
		ДатаПлатежа = ТаблицаЭтапыОплаты[ТаблицаЭтапыОплаты.Количество()-1].ДатаПлатежа;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
		СтруктураДанныхЗаголовок = Новый Структура;
		
		//bercut270120
		//НадписьСрокДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//	НСтр("ru = 'Счет действителен до %1.';
		//		|en = 'Account is valid till %1.'"), Формат(ДатаПлатежа, "ДЛФ=D")) + " ";
		НадписьСрокДействия = "Счет действителен 3 дня";
		//
		
		СтруктураДанныхЗаголовок.Вставить("СрокДействия", НадписьСрокДействия);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхЗаголовок);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ДанныеПечати.ПлатежЗаРубеж Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияРеквизитыБанка");
		СтруктураДанныхШапки = Новый Структура;
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", ДанныеПечати.НомерБанковскогоСчета);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", ДанныеПечати.НаименованиеБанка);
			СтруктураДанныхШапки.Вставить("АдресБанкаПолучателяПредставление", ДанныеПечати.АдресБанка);
			СтруктураДанныхШапки.Вставить("СВИФТБанка", ДанныеПечати.СВИФТБанка);
			ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;
		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Не ПустаяСтрока(ДанныеПечати.НаименованиеБанкаДляРасчетов) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияРеквизитыБанкаКорреспондента");
			
			СтруктураДанныхШапки.Очистить();
			СтруктураДанныхШапки.Вставить("БанкКорреспондентПолучателяПредставление",
			ДанныеПечати.НаименованиеБанкаДляРасчетов + " " + ДанныеПечати.АдресБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("СВИФТБанкаДляРасчетов", ДанныеПечати.СВИФТБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("СчетБанкаДляРасчетовПредставление", ДанныеПечати.СчетВБанкеДляРасчетов);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияНазначениеПлатежа");
		СтруктураДанныхШапки.Очистить();
		Если Не ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа)
			И ТипЗнч(ДанныеПечати.Ссылка) <> Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ДанныеПечати.Номер, ДанныеПечати.Ссылка));
		Иначе
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", ДанныеПечати.НазначениеПлатежа);
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	Иначе
		
		Если ДанныеПечати.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			И ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияППСКодом");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияПП");
		КонецЕсли;
		
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("ИНН", СведенияОПоставщике.ИНН);
		СтруктураДанныхШапки.Вставить("КПП",СведенияОПоставщике.КПП);
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		СтруктураДанныхШапки.Вставить("ИдентификаторПлатежа", ДанныеПечати.ИдентификаторПлатежа);
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			Если ЗначениеЗаполнено(ДанныеПечати.БИКБанкаДляРасчетов) Тогда
				Банк		= ДанныеПечати.НаименованиеБанкаДляРасчетов;
				БИК         = ДанныеПечати.БИКБанкаДляРасчетов;
				КоррСчет    = ДанныеПечати.КоррСчетБанкаДляРасчетов;
				ГородБанка  = ДанныеПечати.ГородБанкаДляРасчетов;
				НомерСчета  = ДанныеПечати.КоррСчетБанка;
			Иначе
				Банк		= ДанныеПечати.НаименованиеБанка;
				БИК         = ДанныеПечати.БИКБанк;
				КоррСчет    = ДанныеПечати.КоррСчетБанка;
				ГородБанка  = ДанныеПечати.ГородБанка;
				НомерСчета  = ДанныеПечати.НомерБанковскогоСчета;
			КонецЕсли;
			
			СтруктураДанныхШапки.Вставить("БИКБанкаПолучателя", БИК);
			СтруктураДанныхШапки.Вставить("БанкПолучателя", Банк);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателя", КоррСчет);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
			СтруктураДанныхШапки.Вставить("СчетПолучателяПредставление", НомерСчета);
			СтруктураДанныхШапки.Вставить("СчетПолучателя", НомерСчета);
			ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа)
			И ТипЗнч(ДанныеПечати.Ссылка) <> Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ДанныеПечати.Номер, ДанныеПечати.Ссылка));
			
		Иначе
			
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", ДанныеПечати.НазначениеПлатежа);
			
		КонецЕсли;
		
		СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		
		Если ДанныеПечати.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			И ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			РеквизитыПлатежа = РеквизитыПлатежаQRКод(СтруктураДанныхШапки);
			РеквизитыПлатежа.СуммаЧислом = СуммаКОплатеПоСчету(ДанныеПечати, ТаблицаТовары);
			
			ВывестиQRКод(РеквизитыПлатежа, ДанныеПечати, ОбластьМакета);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	Смещать = ТипСмещенияТабличногоДокумента.ПоВертикали;
	ОбластьПервойКолонкиТоваров = Макет.Область("ПерваяКолонкаТовара");
	Если НЕ ВыводитьКоды Тогда
		ОбластьПервойКолонкиТоваров.ШиринаКолонки = ОбластьПервойКолонкиТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		Макет.УдалитьОбласть(Макет.Область("КолонкаКодов"), Смещать);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru = 'Счет на оплату';
	|en = 'Proforma invoice'"));
	СтруктураДанныхШапки = Новый Структура;
	СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	СтруктураДанныхПоставщик = Новый Структура;
	СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", 
	ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ОрганизацияПоставщик, ДанныеПечати.Дата),
	"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СтруктураДанныхПокупатель = Новый Структура;
	СтруктураДанныхПокупатель.Вставить("ПредставлениеПолучателя", 
	ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата),
	"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Грузоотправитель");
		СтруктураДанныхГрузоотправитель = Новый Структура;
		СтруктураДанныхГрузоотправитель.Вставить("ПредставлениеГрузоотправителя", ОписаниеОрганизации(ДанныеПечати, "Грузоотправитель"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхГрузоотправитель);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.Грузополучатель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
		СтруктураДанныхГрузополучатель = Новый Структура;
		СтруктураДанныхГрузополучатель.Вставить("ПредставлениеГрузополучателя", ОписаниеОрганизации(ДанныеПечати, "Грузополучатель"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхГрузополучатель);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ЗаполнитьТабличныйДокументСчетаНаОплату")
Процедура Рин1_ЗаполнитьТабличныйДокументСчетаНаОплату(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати)
	
	Перем КомплектПечатиПоСсылке;
	
	ШаблоныОшибок = Новый Структура;
	ШаблоныОшибок.Вставить("Товары", НСтр("ru = 'В документе %1 отсутствуют товары. Печать счета на оплату не требуется';
	|en = 'Goods are missing in the %1 document. It is not required to print the proforma invoice'"));
	ШаблоныОшибок.Вставить("ЗаменяющиеТовары", НСтр("ru = 'В документе %1 отсутствуют заменяющие товары. Печать счета на оплату не требуется';
	|en = 'Substitute goods are missing in the %1 document. It is not required to print the proforma invoice'"));
	ШаблоныОшибок.Вставить("Этапы", НСтр("ru = 'В документе %1 отсутствуют этапы оплаты. Печать счета на оплату не требуется';
	|en = 'Payment steps are missing in the %1 document. It is not required to print the proforma invoice'"));
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	СтруктураИмяДопКолонки = Новый Структура("ИмяКолонкиКодов", ФормированиеПечатныхФорм.ИмяДополнительнойКолонки());	
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ЭтапыОплаты = ДанныеДляПечати.РезультатПоЭтапамОплаты.Выгрузить();
	Товары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ЭтапыЗалоговойТары = ЭтапыОплаты.НайтиСтроки(Новый Структура("ЭтоЗалогЗаТару", Истина));
	ТолькоЗалогЗаТару = ЭтапыЗалоговойТары.Количество() = ЭтапыОплаты.Количество() И ЭтапыЗалоговойТары.Количество() > 0;
	
	Если Товары.Колонки.Найти("Содержание")=Неопределено Тогда
		ЕстьСодержание = Ложь;
	Иначе
		ЕстьСодержание = Истина;
	КонецЕсли;
	
	ПоказыватьНДС = Константы.ВыводитьДопКолонкиНДС.Получить();
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Отказ = Ложь;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ИспользоватьНаборы = Ложь;
		Если Товары.Колонки.Найти("ЭтоНабор") <> Неопределено Тогда
			ИспользоватьНаборы = Истина;
		КонецЕсли;
		
		ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
		ТаблицаЭтапыОплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
		
		ПроверкаЗаполненияДокумента(ДанныеПечати, ТаблицаТовары, ТаблицаЭтапыОплаты, ШаблоныОшибок, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;
		
		СуффиксОбласти = ?(ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару И ПоказыватьНДС, "СНДС", "") + ?(ЕстьСкидки, "СоСкидкой", "");
		
		Макет = Новый ТабличныйДокумент;
		ЗаполнитьРеквизитыШапкиСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары);
		
		Если ДанныеПечати.ЧастичнаяОплата ИЛИ ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			
			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата");
			ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураИмяДопКолонки);
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
			ОбластьСтрокаТаблицы.Параметры.НомерСтроки = 1;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
			ОбластьИтого = Макет.ПолучитьОбласть("ПодвалТаблицыЧастичнаяОплата");
			СтруктураДанныхИтого = Новый Структура;
			СтруктураДанныхИтого.Вставить("Всего", ДанныеПечати.СуммаДокумента);
			ОбластьИтого.Параметры.Заполнить(СтруктураДанныхИтого);
			ОбластьИтого.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Присоединить(ОбластьИтого);
			
			// Вывести ИтогоНДС
			СоответствиеСтавокНДС = Новый Соответствие;
			Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
				ОбластьИтогоНДС = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");
				Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
					Если ИспользоватьНаборы И СтрокаТовара.ЭтоНабор Тогда 
						Продолжить; // Исключаем суммы НДС по набору в целом.
					КонецЕсли;	
					СуммаНДС = СоответствиеСтавокНДС[СтрокаТовара.СтавкаНДС];
					Если СуммаНДС = Неопределено Тогда
						СуммаНДС = СтрокаТовара.СуммаНДС;
					Иначе
						СуммаНДС = СуммаНДС + СтрокаТовара.СуммаНДС;
					КонецЕсли;
					СоответствиеСтавокНДС.Вставить(СтрокаТовара.СтавкаНДС, СуммаНДС);
				КонецЦикла;
				Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
					СтруктураДанныхИтогоНДС = Новый Структура;
					СтруктураДанныхИтогоНДС.Вставить("НДС", ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС));
					Если ЗначениеЗаполнено(ТекСтавкаНДС.Значение) Тогда
						СтруктураДанныхИтогоНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение /100 * ДанныеПечати.ПроцентОплаты));
					Иначе
						СтруктураДанныхИтогоНДС.Вставить("ВсегоНДС","-");
					КонецЕсли;
					ОбластьИтогоНДС.Параметры.Заполнить(СтруктураДанныхИтогоНДС);
					ТабличныйДокумент.Вывести(ОбластьИтогоНДС);
				КонецЦикла;
				ОбластьПодвалСНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсего");
				СтруктураДанныхПодвалСНДС = Новый Структура("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(ДанныеПечати.СуммаДокумента));
				ОбластьПодвалСНДС.Параметры.Заполнить(СтруктураДанныхПодвалСНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалСНДС);
			КонецЕсли;
			
			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописьюЧастичныйСчет");
			СуммаПрописью = НСтр("ru = 'Всего на сумму %СуммаПрописью%';
			|en = 'Total to the amount of %СуммаПрописью%'");
			СуммаПрописью = СтрЗаменить(СуммаПрописью, "%СуммаПрописью%", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ДанныеПечати.СуммаДокумента, ДанныеПечати.Валюта));
			СтруктураДанныхСуммаПрописью = Новый Структура("СуммаПрописью", СуммаПрописью);
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
			
			// Таблица "Товары"
			ОбластьШапкаТаблицы          = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти);
			ОбластьСтрокаТаблицыСтандарт = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбласти);
			ОбластьПодвалТаблицы         = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбласти);
			ОбластьПодвалНДС             = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");
			
			Если ИспользоватьНаборы Тогда
				ОбластьСтрокаТаблицыНабор         = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбласти + "Набор");
				ОбластьСтрокаТаблицыКомплектующие = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбласти + "Комплектующие");
			КонецЕсли;
			
			ПустыеДанные = НаборыСервер.ПустыеДанные();
			ВыводШапки = 0;
			
			Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
				СуффиксОбластиПодвал = "СНДС" + ?(ЕстьСкидки, "СоСкидкой", "");
				ОбластьПодвалСНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсего" + СуффиксОбластиПодвал);
			КонецЕсли;
			
			Если ЕстьСкидки Тогда
				СтруктураЗаголовокСкидки = Новый Структура("Скидка, СуммаБезСкидки", 
				ЗаголовокСкидки.Скидка,
				ЗаголовокСкидки.СуммаСкидки);
				ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураЗаголовокСкидки);
			КонецЕсли; 
			ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураИмяДопКолонки);
			ОбластьСуммаПрописью = Макет.ПолучитьОбласть(?(ДанныеПечати.СчетКВозврату, "СуммаПрописьюКВозврату", "СуммаПрописью"));
			
			МассивПроверкиВывода = Новый Массив;
			
			Сумма = 0;
			СуммаНДС = 0;
			ВсегоСкидок = 0;
			ВсегоБезСкидок = 0;
			НомерСтроки = 0;
			СоответствиеСтавокНДС = Новый Соответствие;
			
			//bercut280120
			
			Если ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЧЕТНАОПЛАТУУСП" Тогда 
				
				ТЗ_УсловныеСроки = ДанныеПечати.Ссылка.Рин1_УсловныеСрокиПоставки.Выгрузить();
				
				//проверка на одинаковые тч
				Если не Товары.Количество() = ТЗ_УсловныеСроки.Количество() Тогда
					ОбщегоНазначения.СообщитьПользователю("Печать с условными не возможна. Отличаются табличные части товары и условные сроки (Количество строк). Перезаполните условные сроки и запишите документ!");
					Возврат;
				КонецЕсли;
				Если не Товары.Итог("Количество") = ТЗ_УсловныеСроки.Итог("КоличествоУпаковок") Тогда
					ОбщегоНазначения.СообщитьПользователю("Печать с условными не возможна. Отличаются табличные части товары и условные сроки (Количество номенклатуры). Перезаполните условные сроки и запишите документ!");
					Возврат;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура
				|ПОМЕСТИТЬ ВТ_Товары
				|ИЗ
				|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
				|ГДЕ
				|	ЗаказКлиентаТовары.Ссылка = &Ссылка
				|	И НЕ ЗаказКлиентаТовары.Отменено
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаказКлиентаТовары.Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗаказКлиентаРин1_УсловныеСрокиПоставки.Номенклатура КАК Номенклатура
				|ПОМЕСТИТЬ ВТ_УсловныеСроки
				|ИЗ
				|	Документ.ЗаказКлиента.Рин1_УсловныеСрокиПоставки КАК ЗаказКлиентаРин1_УсловныеСрокиПоставки
				|ГДЕ
				|	ЗаказКлиентаРин1_УсловныеСрокиПоставки.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаказКлиентаРин1_УсловныеСрокиПоставки.Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Товары.Номенклатура КАК Номенклатура,
				|	ВТ_УсловныеСроки.Номенклатура КАК Номенклатура1
				|ИЗ
				|	ВТ_Товары КАК ВТ_Товары
				|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_УсловныеСроки КАК ВТ_УсловныеСроки
				|		ПО ВТ_Товары.Номенклатура = ВТ_УсловныеСроки.Номенклатура
				|ГДЕ
				|	(ВТ_Товары.Номенклатура ЕСТЬ NULL
				|			ИЛИ ВТ_УсловныеСроки.Номенклатура ЕСТЬ NULL)";
				
				Запрос.УстановитьПараметр("Ссылка", ДанныеПечати.Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();				
				
				Если не РезультатЗапроса.Пустой() Тогда
					ОбщегоНазначения.СообщитьПользователю("Печать с условными не возможна. Отличаются табличные части `товары` и `условные сроки` (Номенклатура). Перезаполните условные сроки и запишите документ!");
					Возврат;
				КонецЕсли;
				
				ТЗ_Товары = Товары.СкопироватьКолонки();
				
				Для каждого СтрокаМ Из ТаблицаТовары Цикл
					НовСтр = ТЗ_Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,СтрокаМ);
				КонецЦикла;
				
				ТЗ_Товары.Свернуть("Номенклатура,Характеристика,Цена,Артикул,ЕдиницаИзмерения,Код,СтавкаНДС,ЭтоНабор,ЭтоКомплектующие,ЭтоВозвратнаяТара,Содержание,НаименованиеПолное,НомерСтроки","Количество,Сумма,СуммаНДС,СуммаБезСкидки,СуммаСкидки");
				
				Для Каждого СтрокаТовары Из ТЗ_Товары Цикл
					
					Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
						ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыНабор;
					ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
						ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыКомплектующие;
					Иначе
						ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыСтандарт;
					КонецЕсли;
					
					Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
						НомерСтрокиПечать = "";
					Иначе
						НомерСтроки = НомерСтроки + 1;
						НомерСтрокиПечать = НомерСтроки;
					КонецЕсли;
					
					Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
						ВыводШапки = 1;
					КонецЕсли;
					
					ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
					
					ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
					ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;
					Если ЕстьСодержание Тогда
						ДополнительныеПараметрыПолученияНаименованияДляПечати.Содержание = СтрокаТовары.Содержание;
					КонецЕсли;
					
					Товар = ПрефиксИПостфикс.Префикс
					+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовары.НаименованиеПолное,
					СтрокаТовары.Характеристика,
					,
					, // Серия
					ДополнительныеПараметрыПолученияНаименованияДляПечати)
					+ ПрефиксИПостфикс.Постфикс;
					
					СтруктураДанныхСтроки = Новый Структура;
					СтруктураДанныхСтроки.Вставить("Товар", Товар);
					СтруктураДанныхСтроки.Вставить("НомерСтроки", НомерСтрокиПечать);
					ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовары);
					Если ЗаголовокСкидки.ЕстьСкидки Тогда
						СтруктураДанныхСтроки.Вставить("СуммаСкидки",
						?(ЗаголовокСкидки.ТолькоНаценка,- СтрокаТовары.СуммаСкидки,СтрокаТовары.СуммаСкидки));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтруктураИмяДопКолонки.ИмяКолонкиКодов) Тогда
						СтруктураДанныхСтроки.Вставить("Артикул", СтрокаТовары[СтруктураИмяДопКолонки.ИмяКолонкиКодов]);
					КонецЕсли;
					
					//bercut040320
					//выполним обратный поиск тк в ТЗ_Товары и Товары нет поля КодСтроки 
					ТЗ = ДанныеПечати.Ссылка.Товары.Выгрузить(,"НомерСтроки,КодСтроки");
					
					МассивТЧ = ТЗ.НайтиСтроки(Новый Структура("НомерСтроки",СтрокаТовары.НомерСтроки));
					
					МассивСтрок = ТЗ_УсловныеСроки.НайтиСтроки(Новый Структура("КодСтроки",МассивТЧ[0].КодСтроки));
					
					Если не МассивСтрок.Количество() = 0 Тогда
						Для каждого СтрокаМассива Из МассивСтрок Цикл
							СрокПоставки = "";
							Если МассивСтрок[0].СкладДоступно > 0 Тогда
								СрокПоставки = "В наличии " + Строка(МассивСтрок[0].СкладДоступно) + " " + Строка(МассивСтрок[0].Упаковка) + Символы.ПС;
							КонецЕсли;							
							Если МассивСтрок[0].ОжидаетсяВыбрано > 0 Тогда
								СрокПоставки = СрокПоставки + МассивСтрок[0].ОжидаетсяСрок + " " + Строка(МассивСтрок[0].ОжидаетсяВыбрано) + " " + Строка(МассивСтрок[0].Упаковка) + Символы.ПС;
							КонецЕсли;	
							Если МассивСтрок[0].СкладПоставщика1Выбрано > 0 Тогда
								СрокПоставки = СрокПоставки + МассивСтрок[0].СкладПоставщика1Срок + " " + Строка(МассивСтрок[0].СкладПоставщика1Выбрано) + " " + Строка(МассивСтрок[0].Упаковка) + Символы.ПС;
							КонецЕсли;
							Если МассивСтрок[0].СкладПоставщика2Выбрано > 0 Тогда
								СрокПоставки = СрокПоставки + МассивСтрок[0].СкладПоставщика2Срок + " " + Строка(МассивСтрок[0].СкладПоставщика2Выбрано) + " " + Строка(МассивСтрок[0].Упаковка) + Символы.ПС;
							КонецЕсли;
							Если МассивСтрок[0].ЗаказДоступно > 0 Тогда
								СрокПоставки = СрокПоставки + ?(МассивСтрок[0].ЗаказСрок = "","По запросу",МассивСтрок[0].ЗаказСрок) + " " + Строка(МассивСтрок[0].ЗаказДоступно) + " " + Строка(МассивСтрок[0].Упаковка);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					СтруктураДанныхСтроки.Вставить("СрокПоставки", СрокПоставки);
					//
					
					ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураДанныхСтроки);
					
					Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
						ОбластьСтрокаТаблицы.Параметры.Заполнить(ПустыеДанные);
					КонецЕсли;
					
					МассивПроверкиВывода.Очистить();
					МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
					Если НомерСтроки = ТаблицаТовары.Количество() Тогда
						МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
						МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
						МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
					КонецЕсли;
					
					Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
						Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
							ВыводШапки = 2;
							ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
						КонецЕсли;
					Иначе
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
					
					Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
						
						Сумма = Сумма + СтрокаТовары.Сумма;
						СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
						
						Если ЕстьСкидки Тогда
							ВсегоСкидок = ВсегоСкидок + СтрокаТовары.СуммаСкидки;
							ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
						КонецЕсли;
						
						Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
							СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
							Если СуммаНДСПоСтавке = Неопределено Тогда
								СуммаНДСПоСтавке = 0;
							КонецЕсли;
							СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			иначе
				
				Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
					
					Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
						ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыНабор;
					ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
						ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыКомплектующие;
					Иначе
						ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыСтандарт;
					КонецЕсли;
					
					Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
						НомерСтрокиПечать = "";
					Иначе
						НомерСтроки = НомерСтроки + 1;
						НомерСтрокиПечать = НомерСтроки;
					КонецЕсли;
					
					Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
						ВыводШапки = 1;
					КонецЕсли;
					
					ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
					
					ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
					ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;
					Если ЕстьСодержание Тогда
						ДополнительныеПараметрыПолученияНаименованияДляПечати.Содержание = СтрокаТовары.Содержание;
					КонецЕсли;
					
					Товар = ПрефиксИПостфикс.Префикс
					+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовары.НаименованиеПолное,
					СтрокаТовары.Характеристика,
					,
					, // Серия
					ДополнительныеПараметрыПолученияНаименованияДляПечати)
					+ ПрефиксИПостфикс.Постфикс;
					
					СтруктураДанныхСтроки = Новый Структура;
					СтруктураДанныхСтроки.Вставить("Товар", Товар);
					СтруктураДанныхСтроки.Вставить("НомерСтроки", НомерСтрокиПечать);
					ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовары);
					Если ЗаголовокСкидки.ЕстьСкидки Тогда
						СтруктураДанныхСтроки.Вставить("СуммаСкидки",
						?(ЗаголовокСкидки.ТолькоНаценка,- СтрокаТовары.СуммаСкидки,СтрокаТовары.СуммаСкидки));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтруктураИмяДопКолонки.ИмяКолонкиКодов) Тогда
						СтруктураДанныхСтроки.Вставить("Артикул", СтрокаТовары[СтруктураИмяДопКолонки.ИмяКолонкиКодов]);
					КонецЕсли;
					
					ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураДанныхСтроки);
					
					Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
						ОбластьСтрокаТаблицы.Параметры.Заполнить(ПустыеДанные);
					КонецЕсли;
					
					МассивПроверкиВывода.Очистить();
					МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
					Если НомерСтроки = ТаблицаТовары.Количество() Тогда
						МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
						МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
						МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
					КонецЕсли;
					
					Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
						Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
							ВыводШапки = 2;
							ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
						КонецЕсли;
					Иначе
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
					
					Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
						
						Сумма = Сумма + СтрокаТовары.Сумма;
						СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
						
						Если ЕстьСкидки Тогда
							ВсегоСкидок = ВсегоСкидок + СтрокаТовары.СуммаСкидки;
							ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
						КонецЕсли;
						
						Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
							СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
							Если СуммаНДСПоСтавке = Неопределено Тогда
								СуммаНДСПоСтавке = 0;
							КонецЕсли;
							СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			//
			СтруктураДанныхВсегоСкидки = Новый Структура;
			
			// Подвал таблицы "Товары"
			Если ЕстьСкидки Тогда
				СтруктураДанныхВсегоСкидки.Вставить("ВсегоСкидок", ?(ЗаголовокСкидки.ТолькоНаценка,-ВсегоСкидок, ВсегоСкидок));
				СтруктураДанныхВсегоСкидки.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
				Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
					СтруктураДанныхВсегоСкидки.Вставить("ВсегоСуммаНДС", СуммаНДС);
				КонецЕсли;
			КонецЕсли;
			СтруктураДанныхВсегоСкидки.Вставить("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
			ОбластьПодвалТаблицы.Параметры.Заполнить(СтруктураДанныхВсегоСкидки);
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
			
			// Область "ПодвалТаблицыНДС"
			Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
				
				Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
					СтруктураДанныхПодвалНДС = Новый Структура;
					СтруктураДанныхПодвалНДС.Вставить("НДС", ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС));
					СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, ,"-"));
					ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
					ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
					
				КонецЦикла;
				СтруктураДанныхПодвалВсегоСНДС = Новый Структура;
				СтруктураДанныхПодвалНДС.Вставить("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС)));
				ОбластьПодвалСНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалСНДС);
				
			Иначе
				СтруктураДанныхПодвалНДС = Новый Структура;
				СтруктураДанныхПодвалНДС.Вставить("НДС", НСтр("ru = 'Без налога (НДС)';
				|en = 'Without tax (VAT)'"));
				СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", "-");
				ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
			КонецЕсли;
			
			// Вывести Сумму прописью
			СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
			ИтоговаяСтрока = НСтр("ru = 'Всего наименований %Количество%, на сумму %Сумма%';
			|en = 'Total number of names %Количество% in the amount of %Сумма%'");
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
			
			СтруктураДанныхСуммаПрописью = Новый Структура;
			Если ДанныеПечати.СчетКВозврату Тогда
				
				СуммаКВозврату = ДанныеПечати.СуммаКВозврату;
				СуммаИтого = СуммаКПрописи-СуммаКВозврату;
				Если СуммаИтого < 0 Тогда
					СуммаИтого = 0;
				КонецЕсли;
				СтруктураДанныхСуммаПрописью.Вставить("СуммаВозврата", ФормированиеПечатныхФорм.ФорматСумм(СуммаКВозврату, ДанныеПечати.Валюта));
				СтруктураДанныхСуммаПрописью.Вставить("СуммаИтогоКОплате", ФормированиеПечатныхФорм.ФорматСумм(СуммаИтого, ДанныеПечати.Валюта, "0"));
				СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаИтого, ДанныеПечати.Валюта));
			Иначе
				
				СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта));
			КонецЕсли;
			
			СтруктураДанныхСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
			ОбластьСуммаПрописью.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		КонецЕсли;
		ЗаполнитьРеквизитыПодвалаСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, СоответствиеСтавокНДС, ПараметрыПечати);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

&Вместо("ПроверкаЗаполненияДокумента")
Процедура Рин1_ПроверкаЗаполненияДокумента(ДанныеПечати, ТаблицаТовары, ТаблицаЭтапыОплаты, ШаблоныОшибок, Отказ)
	Если НЕ (ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуКлиенту")
	 И ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) 
	 И ТаблицаТовары <> Неопределено И ТаблицаТовары.Количество() = 0 Тогда
		Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблоныОшибок.ЗаменяющиеТовары, ДанныеПечати.Ссылка), ДанныеПечати.Ссылка);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблоныОшибок.Товары, ДанныеПечати.Ссылка), ДанныеПечати.Ссылка);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ТаблицаЭтапыОплаты <> Неопределено И ТаблицаЭтапыОплаты.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблоныОшибок.Этапы, ДанныеПечати.Ссылка), ДанныеПечати.Ссылка);
	//20200718 ГлазуновДВ отключаем отмену по графику оплаты	
	//Исходное	Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


