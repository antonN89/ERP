Процедура УстановитьУсловноеОформление(Элементы, УсловноеОформление) Экспорт
	
	// 1
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗначенийПараметров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗначенийПараметров.Оформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Роса);
	НовыйШрифт = Новый Шрифт(Элементы.ДеревоЗначенийПараметров.Шрифт, , , Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", НовыйШрифт);
	
	// 2
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗначенийПараметров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗначенийПараметров.Оформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	НовыйШрифт = Новый Шрифт(Элементы.ДеревоЗначенийПараметров.Шрифт, , , Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", НовыйШрифт);
	
	// 3
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗначенийПараметров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗначенийПараметров.Оформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 3;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	НовыйШрифт = Новый Шрифт(Элементы.ДеревоЗначенийПараметров.Шрифт, , , , Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", НовыйШрифт);

	
КонецПроцедуры
 
Функция ЗаполнитьДеревоЗначенийРекурсивно(Выборка, ДеревоЗначений)
	
	Оформление = 4;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяВетвь = ДеревоЗначений.Добавить();
		ТекущаяВетвь.Представление     = Выборка.ЗначениеПараметраПредставление;
		ТекущаяВетвь.ПредметРасчета    = Выборка.ПредметРасчета;
		ТекущаяВетвь.Параметр          = Выборка.Параметр;
		ТекущаяВетвь.ЗначениеПараметра = Выборка.ЗначениеПараметра;
		
		ТекущаяВетвь.Оформление = ЗаполнитьДеревоЗначенийРекурсивно(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ЗначениеПараметра"), ТекущаяВетвь.ПолучитьЭлементы());
		
		Оформление = 3;
		
	КонецЦикла; 
	
	Возврат Оформление;
	
КонецФункции
 
Процедура ОбновитьДеревоЗначений(ЗначенияПараметров, Форма) Экспорт
	
	//ПустойРодитель = Справочники.гиг_ЗначенияПараметровПредметовРасчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ВЫРАЗИТЬ(ЗначенияПараметров.ПредметРасчета КАК Справочник.гиг_ПредметыРасчета) КАК ПредметРасчета,
	//|	ВЫРАЗИТЬ(ЗначенияПараметров.ЗначениеПараметра КАК Справочник.гиг_ЗначенияПараметровПредметовРасчета) КАК ЗначениеПараметра
	//|ПОМЕСТИТЬ ВТ_ЗначенияПараметров
	//|ИЗ
	//|	&ЗначенияПараметров КАК ЗначенияПараметров
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_ЗначенияПараметров.ЗначениеПараметра.Владелец КАК Параметр,
	//|	ВТ_ЗначенияПараметров.ЗначениеПараметра КАК ЗначениеПараметра,
	//|	ВТ_ЗначенияПараметров.ПредметРасчета КАК ПредметРасчета,
	//|	ВТ_ЗначенияПараметров.ЗначениеПараметра.Представление КАК ЗначениеПараметраПредставление,
	//|	ВТ_ЗначенияПараметров.ЗначениеПараметра.Владелец.Представление КАК ПараметрПредставление,
	//|	ВТ_ЗначенияПараметров.ПредметРасчета.Представление КАК ПредметРасчетаПредставление
	//|ИЗ
	//|	ВТ_ЗначенияПараметров КАК ВТ_ЗначенияПараметров
	//|ИТОГИ ПО
	//|	ПредметРасчета,
	//|	Параметр,
	//|	ЗначениеПараметра ИЕРАРХИЯ";
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗначенияПараметров.ПредметРасчета КАК Справочник.гиг_ПредметыРасчета) КАК ПредметРасчета,
	|	ВЫРАЗИТЬ(ЗначенияПараметров.ЗначениеПараметра КАК Справочник.гиг_ЗначенияПараметровПредметовРасчета) КАК ЗначениеПараметра
	|ПОМЕСТИТЬ ВТ_ЗначенияПараметров
	|ИЗ
	|	&ЗначенияПараметров КАК ЗначенияПараметров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияПараметров.ПредметРасчета КАК ПредметРасчета,
	|	гиг_ПредметыРасчетаНаборПараметров.Параметр КАК Параметр
	|ПОМЕСТИТЬ ВТ_ПараметрыПредметовРасчета
	|ИЗ
	|	ВТ_ЗначенияПараметров КАК ВТ_ЗначенияПараметров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гиг_ПредметыРасчета.НаборПараметров КАК гиг_ПредметыРасчетаНаборПараметров
	|		ПО ВТ_ЗначенияПараметров.ПредметРасчета = гиг_ПредметыРасчетаНаборПараметров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПараметрыПредметовРасчета.ПредметРасчета КАК ПредметРасчета,
	|	ВТ_ПараметрыПредметовРасчета.ПредметРасчета.Представление КАК ПредметРасчетаПредставление,
	|	ВТ_ПараметрыПредметовРасчета.Параметр КАК Параметр,
	|	ВТ_ПараметрыПредметовРасчета.Параметр.Представление КАК ПараметрПредставление,
	|	ВТ_ЗначенияПараметров.ЗначениеПараметра КАК ЗначениеПараметра,
	|	ВТ_ЗначенияПараметров.ЗначениеПараметра.Представление КАК ЗначениеПараметраПредставление
	|ИЗ
	|	ВТ_ПараметрыПредметовРасчета КАК ВТ_ПараметрыПредметовРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗначенияПараметров КАК ВТ_ЗначенияПараметров
	|		ПО ВТ_ПараметрыПредметовРасчета.ПредметРасчета = ВТ_ЗначенияПараметров.ПредметРасчета
	|			И ВТ_ПараметрыПредметовРасчета.Параметр = ВТ_ЗначенияПараметров.ЗначениеПараметра.Владелец
	|ИТОГИ ПО
	|	ПредметРасчета,
	|	Параметр,
	|	ЗначениеПараметра ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ЗначенияПараметров", ЗначенияПараметров.Выгрузить());
	
	ЭлементыДерева = Форма.ДеревоЗначенийПараметров.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	Форма.Элементы.ДеревоЗначенийПараметров.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	ВыборкаПредметРасчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПредметРасчета.Следующий() Цикл
		
		ТекущаяВетвь = ЭлементыДерева.Добавить();
		ТекущаяВетвь.Представление  = ВыборкаПредметРасчета.ПредметРасчетаПредставление;
		ТекущаяВетвь.ПредметРасчета = ВыборкаПредметРасчета.ПредметРасчета;
		ТекущаяВетвь.Оформление     = 1;
		
		ЭлементыВетви = ТекущаяВетвь.ПолучитьЭлементы();
		
		ВыборкаПараметр = ВыборкаПредметРасчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПараметр.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаПараметр.Параметр) Тогда
				Продолжить;
			КонецЕсли;
			
			//ПредставлениеПараметраНачало = ВыборкаПараметр.ПараметрПредставление;
			//ПредставлениеПараметраКонец  = ВыборкаПараметр.ЗначениеПараметраПредставление;
			//ТекРодитель = ВыборкаПараметр.ЗначениеПараметра.Родитель;
			//Пока ТекРодитель <> ПустойРодитель Цикл
			//	ПредставлениеПараметраКонец = Строка(ТекРодитель) + " / " + ПредставлениеПараметраКонец;
			//	ТекРодитель = ТекРодитель.Родитель;
			//КонецЦикла;
			//ПредставлениеПараметраНачало = ПредставлениеПараметраНачало + " / " + ПредставлениеПараметраКонец;
			
			//ТекущаяВетвь = ЭлементыВетви.Добавить();
			//ТекущаяВетвь.Представление     = ПредставлениеПараметраНачало;
			//ТекущаяВетвь.ПредметРасчета    = ВыборкаПараметр.ПредметРасчета;
			//ТекущаяВетвь.Параметр          = ВыборкаПараметр.Параметр;
			//ТекущаяВетвь.ЗначениеПараметра = ВыборкаПараметр.ЗначениеПараметра;
			ТекущаяВетвь = ЭлементыВетви.Добавить();
			ТекущаяВетвь.Представление  = ВыборкаПараметр.ПараметрПредставление;
			ТекущаяВетвь.Параметр       = ВыборкаПараметр.Параметр;
			ТекущаяВетвь.ПредметРасчета = ВыборкаПараметр.ПредметРасчета;
			ТекущаяВетвь.Оформление     = 2;
			//
			ЗаполнитьДеревоЗначенийРекурсивно(ВыборкаПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ЗначениеПараметра"), ТекущаяВетвь.ПолучитьЭлементы());
						
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

Функция СоздатьРесурснуюСпецификацию(Номенклатура, Характеристика, ТаблицаМатериалов, ТаблицаТрудозатрат, ТаблицаЭтаповПроизводства, ДатаРасчета, ПредставлениеРасчета, ВариантРасчета = Неопределено) Экспорт
	
	НачатьТранзакцию();	
	
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	Если ВариантРасчета <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ГИГ_СоответствиеВариантовРасчетаРесурснымСпецификациям.РесурснаяСпецификация КАК РесурснаяСпецификация
		|ИЗ
		|	РегистрСведений.ГИГ_СоответствиеВариантовРасчетаРесурснымСпецификациям КАК ГИГ_СоответствиеВариантовРасчетаРесурснымСпецификациям
		|ГДЕ
		|	ГИГ_СоответствиеВариантовРасчетаРесурснымСпецификациям.ВариантРасчетаНоменклатурыПроекта = &ВариантРасчета";
		Запрос.УстановитьПараметр("ВариантРасчета", ВариантРасчета);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСпецификация = Выборка.РесурснаяСпецификация.ПолучитьОбъект();
		Иначе
			НоваяСпецификация = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
		КонецЕсли;
	Иначе
		НоваяСпецификация = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
	КонецЕсли;

	НоваяСпецификация.Наименование = "" + Номенклатура + " / " + Характеристика;
	НоваяСпецификация.Статус = Перечисления.СтатусыСпецификаций.ВРазработке;
	НоваяСпецификация.НачалоДействия = ДатаРасчета;
	НоваяСпецификация.МинимальнаяПартияВыпуска = 1;
	НоваяСпецификация.ОптимальнаяПартияВыпуска = 1;
	НоваяСпецификация.ВыпускПроизвольнымиПорциями = Истина;
	НоваяСпецификация.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
	НоваяСпецификация.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	НоваяСпецификация.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НоваяСпецификация.Описание = "Вариант расчета " + ПредставлениеРасчета;
	НоваяСпецификация.МногоэтапныйПроизводственныйПроцесс = ТаблицаЭтаповПроизводства.Количество() > 1;
	
	// выходные изделия
	НоваяСпецификация.ВыходныеИзделия.Очистить();
	НоваяСтрокаИзделия = НоваяСпецификация.ВыходныеИзделия.Добавить();
	НоваяСтрокаИзделия.Номенклатура = Номенклатура;
	НоваяСтрокаИзделия.Характеристика = Характеристика;
	НоваяСтрокаИзделия.Упаковка = Номенклатура.ЕдиницаИзмерения;
	НоваяСтрокаИзделия.КоличествоУпаковок = 1;
	НоваяСтрокаИзделия.Количество = 1;
	НоваяСтрокаИзделия.ДоляСтоимости = 1;
	
	//создадим этапы производства ресурсной спецификации
	Если Не ЗначениеЗаполнено(НоваяСпецификация.Ссылка) Тогда
		Попытка
			НоваяСпецификация.Записать();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось выполнить предварительную запись ресурсной спецификации на выпуск " + Номенклатура + " / " + Характеристика + " 
			|Причина: " + ОписаниеОшибки();
			Сообщение.Сообщить();
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.НомерСтроки КАК НомерСтроки,
	|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
	|	ЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ЭтапыПроизводства.Наименование КАК Наименование,
	|	ЭтапыПроизводства.Подразделение КАК Подразделение,
	|	ЭтапыПроизводства.ДлительностьЭтапа КАК ДлительностьЭтапа,
	|	ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа КАК ЕдиницаИзмеренияДлительностиЭтапа,
	|	ЭтапыПроизводства.МаршрутнаяКарта КАК МаршрутнаяКарта
	|ПОМЕСТИТЬ ВТ_ЭтапыПроизводства
	|ИЗ
	|	&ЭтапыПроизводства КАК ЭтапыПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка КАК Ссылка,
	|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
	|	ЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ЭтапыПроизводства.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_ЭтапыСпецификации
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Спецификация
	|	И ЭтапыПроизводства.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭтапыПроизводства.НомерСтроки КАК НомерСтроки,
	|	ВТ_ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
	|	ВТ_ЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ВТ_ЭтапыПроизводства.Подразделение КАК Подразделение,
	|	ВТ_ЭтапыПроизводства.Наименование КАК Наименование,
	|	ВТ_ЭтапыПроизводства.ДлительностьЭтапа КАК ДлительностьЭтапа,
	|	ВТ_ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа КАК ЕдиницаИзмеренияДлительностиЭтапа,
	|	ЕСТЬNULL(ВТ_ЭтапыСпецификации.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)) КАК Ссылка,
	|	ВТ_ЭтапыПроизводства.МаршрутнаяКарта КАК МаршрутнаяКарта
	|ИЗ
	|	ВТ_ЭтапыПроизводства КАК ВТ_ЭтапыПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЭтапыСпецификации КАК ВТ_ЭтапыСпецификации
	|		ПО ВТ_ЭтапыПроизводства.НомерЭтапа = ВТ_ЭтапыСпецификации.НомерЭтапа
	|			И ВТ_ЭтапыПроизводства.НомерСледующегоЭтапа = ВТ_ЭтапыСпецификации.НомерСледующегоЭтапа
	|			И ВТ_ЭтапыПроизводства.Подразделение = ВТ_ЭтапыСпецификации.Подразделение";
	Запрос.УстановитьПараметр("Спецификация", НоваяСпецификация.Ссылка);
	Запрос.УстановитьПараметр("ЭтапыПроизводства", ТаблицаЭтаповПроизводства);
	ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭтапПроизводства Из ТаблицаЭтапов Цикл
		Если Не ЗначениеЗаполнено(ЭтапПроизводства.Ссылка) Тогда
			НовыйЭтапПроизводства = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
			НовыйЭтапПроизводства.Наименование = ЭтапПроизводства.Наименование;
			НовыйЭтапПроизводства.Владелец = НоваяСпецификация.Ссылка;
			НовыйЭтапПроизводства.НомерЭтапа = ЭтапПроизводства.НомерЭтапа;
			НовыйЭтапПроизводства.НомерСледующегоЭтапа = ЭтапПроизводства.НомерСледующегоЭтапа;
			НовыйЭтапПроизводства.Подразделение = ЭтапПроизводства.Подразделение;
			//bercut111119
			НовыйЭтапПроизводства.МаршрутнаяКарта = ЭтапПроизводства.МаршрутнаяКарта;
			НовыйЭтапПроизводства.КоэффициентМаршрутнойКарты = 1;
            //
			НовыйЭтапПроизводства.ДлительностьЭтапа = ЭтапПроизводства.ДлительностьЭтапа;
			НовыйЭтапПроизводства.ЕдиницаИзмеренияДлительностиЭтапа = ЭтапПроизводства.ЕдиницаИзмеренияДлительностиЭтапа;
			НовыйЭтапПроизводства.ЕдиницаИзмеренияПредварительногоБуфера = Перечисления.ЕдиницыИзмеренияВремени.День;
			НовыйЭтапПроизводства.ЕдиницаИзмеренияЗавершающегоБуфера = Перечисления.ЕдиницыИзмеренияВремени.День;
			Попытка
				НовыйЭтапПроизводства.Записать();
				ЭтапПроизводства.Ссылка = НовыйЭтапПроизводства.Ссылка;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось записать этап производства №" + ЭтапПроизводства.НомерЭтапа + " " + ЭтапПроизводства.Наименование + " 
				|Причина: " + ОписаниеОшибки();
				Сообщение.Сообщить();
				ОтменитьТранзакцию();
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;			
	КонецЦикла;
	
	// материалы и услуги
	НоваяСпецификация.МатериалыИУслуги.Очистить();
	СтатьяКалькуляцииМатериалов = Константы.ГИГ_СтатьяКалькуляцииМатериаловПриСозданииСпецификацийИзВариантовРасчета.Получить();
	Для Каждого Материал Из ТаблицаМатериалов Цикл
		Если ТипЗнч(Материал.Номенклатура) = Тип("СправочникСсылка.ГИГ_НоменклатураПроизводителей") Тогда
			Если ЗначениеЗаполнено(Материал.Номенклатура.Номенклатура) Тогда
				НоменклатураМатериала = Материал.Номенклатура.Номенклатура;
			Иначе
				ВыбраннаяПозиция = Материал.Номенклатура;
				ВидНоменклатурыДляСоздания = Материал.Номенклатура.ВидНоменклатуры;
				Если НЕ ЗначениеЗаполнено(ВидНоменклатурыДляСоздания) Тогда 
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "У номенклатуры производителя """ + Материал.Номенклатура + """ не заполнен реквизит ""Вид номенклатуры"".
					|Автоматическое создание номенклатуры невозможно!";
					Сообщение.Сообщить();
					ОтменитьТранзакцию();
					Возврат Неопределено;
				Иначе 
					НоменклатураМатериала = ГИГ_МодульВызовСервера.СозданиеНоменклатурыНаСервере(ВыбраннаяПозиция,ВидНоменклатурыДляСоздания);
					Если Не ЗначениеЗаполнено(НоменклатураМатериала) Тогда
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст =  "При создании номенклатуры по номенклатуре производителя """ + Материал.Номенклатура + """ возникли ошибки.
						|Автоматическое добавление элемента отменено. Ресурсная спецификация не создана / не обновлена.";
						Сообщение.Сообщить();
						ОтменитьТранзакцию();
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоменклатураМатериала = Материал.Номенклатура;
		КонецЕсли;
		НоваяСтрокаМатериалы = НоваяСпецификация.МатериалыИУслуги.Добавить();
		НоваяСтрокаМатериалы.Номенклатура = НоменклатураМатериала;
		НоваяСтрокаМатериалы.Характеристика = Материал.Характеристика;
		НоваяСтрокаМатериалы.Упаковка = НоваяСтрокаМатериалы.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрокаМатериалы.КоличествоУпаковок = Материал.Количество;
		НоваяСтрокаМатериалы.Количество = Материал.Количество;
		НоваяСтрокаМатериалы.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ;
		НоваяСтрокаМатериалы.СпособАвтовыбораХарактеристики = ?(ЗначениеЗаполнено(НоваяСтрокаМатериалы.Характеристика), Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ, Перечисления.СпособыАвтовыбораХарактеристики.ПустаяСсылка());
		Если ЗначениеЗаполнено(Материал.ВариантРасчета) Тогда
			НоваяСтрокаМатериалы.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
			НоваяСтрокаМатериалы.ПроизводитсяВПроцессе = Истина;
			НоваяСтрокаМатериалы.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе;
			Если ТипЗнч(Материал.ВариантРасчета) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
				НоваяСтрокаМатериалы.ИсточникПолученияПолуфабриката = Материал.ВариантРасчета;
			Иначе
				НоваяСтрокаМатериалы.ИсточникПолученияПолуфабриката = СоздатьРесурснуюСпецификацию(Материал.ВариантРасчета.Номенклатура,
				Материал.ВариантРасчета.Характеристика, Материал.ВариантРасчета.Товары.Выгрузить(), Материал.ВариантРасчета.Трудозатраты.Выгрузить(),
				Материал.ВариантРасчета.ЭтапыПроизводства.Выгрузить(), Материал.ВариантРасчета.Дата, Материал.ВариантРасчета.Наименование);
			КонецЕсли;
		Иначе
			НоваяСтрокаМатериалы.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
			НоваяСтрокаМатериалы.СтатьяКалькуляции = СтатьяКалькуляцииМатериалов;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НомерСтроки", Материал.ЭтапПроизводства);
		МассивСтрок = ТаблицаЭтапов.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			НоваяСтрокаМатериалы.Этап = МассивСтрок[0].Ссылка;
			НоваяСтрокаМатериалы.ЭтапРедактирование = МассивСтрок[0].Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// трудозатраты
	НоваяСпецификация.Трудозатраты.Очистить();
	СтатьяКалькуляцииТрудозатрат = Константы.ГИГ_СтатьяКалькуляцииТрудозатратПриСозданииСпецификацийИзВариантовРасчета.Получить();
	Для Каждого Трудозатрата Из ТаблицаТрудозатрат Цикл
		НоваяСтрокаТрудозатраты = НоваяСпецификация.Трудозатраты.Добавить();
		НоваяСтрокаТрудозатраты.ВидРабот = Трудозатрата.ВидРабот;
		НоваяСтрокаТрудозатраты.Количество = Трудозатрата.Количество;
		НоваяСтрокаТрудозатраты.СтатьяКалькуляции = СтатьяКалькуляцииТрудозатрат;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НомерСтроки", Трудозатрата.ЭтапПроизводства);
		МассивСтрок = ТаблицаЭтапов.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			НоваяСтрокаТрудозатраты.Этап = МассивСтрок[0].Ссылка;
			НоваяСтрокаТрудозатраты.ЭтапРедактирование = МассивСтрок[0].Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НоваяСпецификация.Записать();
		Если ВариантРасчета <> Неопределено Тогда
			НаборЗаписей = РегистрыСведений.ГИГ_СоответствиеВариантовРасчетаРесурснымСпецификациям.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВариантРасчетаНоменклатурыПроекта.Установить(ВариантРасчета);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
			Иначе
				Запись = НаборЗаписей[0];
			КонецЕсли;
			Запись.ВариантРасчетаНоменклатурыПроекта = ВариантРасчета;
			Запись.РесурснаяСпецификация = НоваяСпецификация.Ссылка;
			НаборЗаписей.Записать();
		КонецЕсли;		
		
		НаборЗаписей = РегистрыСведений.ОсновныеСпецификации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
		НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
		Иначе
			Запись = НаборЗаписей[0];
		КонецЕсли;
		Запись.Номенклатура = Номенклатура;
		Запись.Характеристика = Характеристика;
		Запись.Подразделение = Подразделение;
		Запись.Спецификация = НоваяСпецификация.Ссылка;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
		Возврат НоваяСпецификация.Ссылка;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось записать ресурсную спецификацию на выпуск " + Номенклатура + " / " + Характеристика + " 
		|Причина: " + ОписаниеОшибки();
		Сообщение.Сообщить();
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//++Гольм А.А. (Гигабайт) 09.04.2019 12:43:25
Функция ПроверитьКорректностьЭтаповПроизводства(Объект, Отказ) Экспорт
	
	МассивОшибок = Новый Массив;
	
	Результат = Новый Структура;
	Результат.Вставить("НомерСтроки", Неопределено);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ЗавершающийЭтап = Ложь;
	Для Каждого СтрокаЭтапа Из Объект.ЭтапыПроизводства Цикл
		Если СтрокаЭтапа.НомерСледующегоЭтапа = 0 И ЗавершающийЭтап = Истина Тогда
			Результат.НомерСтроки = СтрокаЭтапа.НомерСтроки-1;
			Результат.СообщениеОбОшибке = "Не может быть несколько последних этапов.";
			МассивОшибок.Добавить(Результат);
		ИначеЕсли СтрокаЭтапа.НомерСледующегоЭтапа = 0 И ЗавершающийЭтап = Ложь Тогда
			//найден завершающий этап
			ЗавершающийЭтап = Истина;
		КонецЕсли;
		//проверим, что номера следующих этапов больше номеров этапов
		Если СтрокаЭтапа.НомерСледующегоЭтапа > 0 И СтрокаЭтапа.НомерСледующегоЭтапа <= СтрокаЭтапа.НомерЭтапа Тогда
			Результат.НомерСтроки = СтрокаЭтапа.НомерСтроки-1;
			Результат.СообщениеОбОшибке = "Номер следующего этапа должен быть больше номера этапа.";
			МассивОшибок.Добавить(Результат);
		КонецЕсли;
		//проверим, что номера следующих этапов ссылаются на существующие этапы
		Если СтрокаЭтапа.НомерСледующегоЭтапа > 0 Тогда
			ПараметрыОтбора= Новый Структура;
			ПараметрыОтбора.Вставить("НомерЭтапа", СтрокаЭтапа.НомерСледующегоЭтапа);
			МассивСтрок = Объект.ЭтапыПроизводства.НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				Результат.НомерСтроки = СтрокаЭтапа.НомерСтроки-1;
				Результат.СообщениеОбОшибке = "Этап """+СтрокаЭтапа.Наименование+""" ссылается на несуществующий этап.";
				МассивОшибок.Добавить(Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОшибок;
	
КонецФункции //--Гольм А.А. (Гигабайт) 09.04.2019 13:03:01