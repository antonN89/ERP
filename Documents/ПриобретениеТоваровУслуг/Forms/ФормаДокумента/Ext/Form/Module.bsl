#Область ОписаниеПеременных
&НаКлиенте
Перем ЗадаватьВопрос;
#КонецОбласти


&НаКлиенте
Процедура Рин1_ПодобратьПоЗаказамВместо(Команда)
	
	Если не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ПоказатьПредупреждение(,"Организация не выбрана, подбор не возможен!",5);
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ПоказатьПредупреждение(,"Документ необходимо записать, подбор не возможен!",5);
		Возврат;
		
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
		//Модифицированность = Истина;
	Исключение
		ПоказатьПредупреждение(,КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	МассивКодовСтрок = Новый Массив;
	АдресТоваров = "";
	
	ПередПодобратьПоЗаказамВместоСервер(АдресТоваров);
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("Партнер", Объект.Партнер);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("АдресТоварыНакладнойВоВременномХранилище", АдресТоваров);
	
	ОткрытьФорму(
	"Обработка.Рин1_ОбработкаЗаказовПоставщику.Форма.Форма",
	ПараметрыПодбора,
	ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПередПодобратьПоЗаказамВместоСервер(АдресТоваров)
		
	АдресТоваров = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОбработкаВыбораВместо(РезультатВыбора, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ЖурналДокументовЗакупки.Форма.ФормаПодбораТоваровИзЗаказа" Тогда
		
		ПолучитьТоварыИзХранилища(РезультатВыбора.АдресТоваровВХранилище);
		
		//bercut290319	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.Рин1_ОбработкаЗаказовПоставщику.Форма.Форма" Тогда
		
		ПолучитьТоварыИзХранилища_V2(РезультатВыбора);
		//
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(РезультатВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеВзаиморасчетов" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	ИначеЕсли УчетНДСУПКлиент.ЗаконченоРедактированиеСчетаФактурыПолученного(РезультатВыбора, ИсточникВыбора) Тогда
		
		ОбновитьТекстСчетаФактурыПолученные();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(РезультатВыбора.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(РезультатВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(РезультатВыбора);

	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, РезультатВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаВыбора" Тогда
		
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(Строка);
			
			Если ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
				ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.Подразделение = РезультатВыбора;
			
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиАвансовогоОтчета" Тогда
		
		Если РезультатВыбора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТоварыИзХранилища_V2(РезультатВыбора)
	
	ТоварыИзХранилища = Новый ТаблицаЗначений;
	
	ИзХранилища = ПолучитьИзВременногоХранилища(РезультатВыбора.АдресВХранилище);
	
	ИзХранилища.Свойство("Таблица",ТоварыИзХранилища); 
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
	СтруктураДействий.Удалить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Удалить("ПересчитатьСуммуСверхЗаказа");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
	Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	КэшированныеЗначения = Неопределено;
	
	СтруктураПоискаТоваровЗаказа = Новый Структура("КодСтроки,ЗаказПоставщику,Серия");
	СтруктураПоискаТоваровНакладной = Новый Структура("НомерСтроки");
	
	Объект.Товары.Очистить();
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		
		СтрокаТЧТовары = Объект.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		//++Шерстюк Ю.Ю. 2406.2021 Задача 10161 суммы будем получать при разбивке строк, чтобы итоговая сумма по строкам не изменилась
		//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		//--Шерстюк Ю.Ю.
		Объект.ЗаказПоставщику = СтрокаТЧТовары.ЗаказПоставщику;
		
	КонецЦикла;
	//++Шерстюк Ю.Ю. 2406.2021 Задача 10161 так нельзя пересчитывать
	////bercut300120 расхождения на копейки будем сторнировать с первой строки так что бы сумма документа осталась неизменной
	//Если не Объект.СуммаДокумента = Объект.Товары.Итог("СуммаСНДС") Тогда
	//	
	//	РазницаСумм = Объект.Товары.Итог("СуммаСНДС") - Объект.СуммаДокумента;
	//	Объект.Товары[0].СуммаСНДС = Объект.Товары[0].СуммаСНДС - РазницаСумм;  
	//	
	//КонецЕсли;
	////
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	ЗаполнитьПризнакСписанияНаРасходыДляУслуг();
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
	Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
		
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	ОбновитьИнформациюПоЗаказам();
	Объект.ПоступлениеПоЗаказам = ЗначениеЗаполнено(Объект.ЗаказПоставщику) ИЛИ СписокЗаказов.Количество() > 0;
	ОбновитьОтклоненияОтЗаказа();
	
	Элементы.ТоварыИндексКартинки.Видимость = Истина; 
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	УстановитьВидимостьКомандПоЗаказу();
	
	ОчиститьЭтапыГрафикаОплаты();
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЗагружатьСуммы", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыФормы.Вставить("Партнер", Объект.Партнер);
	ПараметрыФормы.Вставить("СопоставлятьПоНоменклатуреПоставщиков", Истина);
	
	ХозяйственныеОперацииИмпорта = ХозяйственныеОперацииИмпорта();
	
	Если ХозяйственныеОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗагружатьГТД", Ложь);
	Иначе
		ПараметрыФормы.Вставить("ЗагружатьГТД", Истина);
	КонецЕсли;
	
	ХозяйственныеОперацииРаздельнойЗакупки = ХозяйственныеОперацииРаздельнойЗакупки();
	ПоступлениеПоРаздельнойЗакупке = (ХозяйственныеОперацииРаздельнойЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено);
	ХозяйственнаяОперацияПриемНаКомиссию = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию"));
	
	ЗагружатьСкидки = Истина;
	Если ПоступлениеПоРаздельнойЗакупке ИЛИ ХозяйственнаяОперацияПриемНаКомиссию Тогда
		 ОтборПоТипуНоменклатуры = Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
		 ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
		 ЗагружатьСкидки = НЕ ХозяйственнаяОперацияПриемНаКомиссию;			 
	КонецЕсли;	 
		 
	ПараметрыФормы.Вставить("ИмяТЧ", "Товары");
	ПараметрыФормы.Вставить("ЗагружатьСкидки", ЗагружатьСкидки);
	
	ОткрытьФорму(
		"Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
&Вместо("ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу")
Процедура Рин1_ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу()
	
	Если Объект.Товары.Количество() = 0 ИЛИ Не Объект.ПоступлениеПоЗаказам ИЛИ НЕ ИспользоватьЗаказыПоставщикам Тогда
		Элементы.КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		Элементы.КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		НадписьРасхождениеЗаказ = "";
		
		//bercut240120
		//Если Объект.Товары.Количество()>0 Тогда
		//	Для каждого СтрокаТовары Из Объект.Товары Цикл
		//		СтрокаТовары.РасхождениеЗаказ = 0;
		//	КонецЦикла;
		//КонецЕсли;
		
		КоличествоРасхождений = 0;
		
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммуСверхЗаказа();
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы.КартинкаРасхождениеЗаказ, 
		Элементы.КартинкаРасхождениеЗаказы);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
&Вместо("ОбновитьОтклоненияОтЗаказаВСтроке")
Процедура Рин1_ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ПоступлениеПоЗаказам, ТребуетсяЗалогЗаТару)
	
	Если ТекущаяСтрока.Цена < ТекущаяСтрока.ЦенаЗаказа И ТекущаяСтрока.ЦенаЗаказа <> 0 И ТекущаяСтрока.КодСтроки <> 0 Тогда
		
		ТекущаяСтрока.ИндексКартинки = 3;
		ТекущаяСтрока.ЦенаИзменилась = Истина;
		Если ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100 - (ТекущаяСтрока.ЦенаЗаказа * 100 / ТекущаяСтрока.Цена);
		Иначе
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.Цена > ТекущаяСтрока.ЦенаЗаказа И ТекущаяСтрока.ЦенаЗаказа <> 0 И ТекущаяСтрока.КодСтроки <> 0 Тогда
		
		ТекущаяСтрока.ИндексКартинки = 1;
		ТекущаяСтрока.ЦенаИзменилась = Истина;
		Если ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100 - (ТекущаяСтрока.ЦенаЗаказа * 100 / ТекущаяСтрока.Цена);
		Иначе
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100;
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ИндексКартинки = 8;
		ТекущаяСтрока.ЦенаИзменилась = Ложь;
		ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 0;
		
	КонецЕсли;
	
	//bercut240120
	//Если ПоступлениеПоЗаказам Тогда
	//	Если ТекущаяСтрока.КодСтроки = 0 Тогда
	//		ТекущаяСтрока.РасхождениеЗаказ = 1;
	//	Иначе
	//		ТекущаяСтрока.РасхождениеЗаказ = 0;
	//	КонецЕсли;
	//КонецЕсли;
	//
	
КонецПроцедуры

&НаСервере
&Вместо("ПолучитьЗагруженныеТоварыИзХранилища")
Процедура Рин1_ПолучитьЗагруженныеТоварыИзХранилища(РезультатВыбора)
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(РезультатВыбора.АдресТоваровВХранилище);
	ИмяТЧ = РезультатВыбора.ИмяТЧ;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	
	Если ИмяТЧ = "Товары" Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект[ИмяТЧ].Добавить();
		Если ИмяТЧ = "Товары" Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров, , "КодСтроки");
			Если Объект.ПоступлениеПоЗаказам Тогда
				СтрокаТЧТовары.РасхождениеЗаказ = 1;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
			
			//bercut130520   задача 200
			СтрокаТЧТовары.ВидЦеныПоставщика = Объект.Соглашение.ВидЦеныПоставщика;
			//
			
		Иначе 
			ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТЧ = "Товары" Тогда
		МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
		ЗаполнитьСтатусыУказанияСерийСервер();
		ЗаполнитьЦеныНоменклатурыЗаказов();
		ПриИзмененииСкладаВТабличнойЧастиСервер();
		ОбновитьИнформациюПоЗаказам();
		ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
		ЗаполнитьПризнакСписанияНаРасходыДляУслуг();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	//ТоварыИзХранилища = ПолучитьИзВременногоХранилища(РезультатВыбора.АдресТоваровВХранилище);
	//ИмяТЧ = РезультатВыбора.ИмяТЧ;
	//
	//КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	//СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	//
	//Если ИмяТЧ = "Товары" Тогда
	//	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	//	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	//КонецЕсли;
	//
	//Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
	//	СтрокаТЧТовары = Объект[ИмяТЧ].Добавить();
	//	Если ИмяТЧ = "Товары" Тогда
	//		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров, , "КодСтроки");
	//		Если Объект.ПоступлениеПоЗаказам Тогда
	//			СтрокаТЧТовары.РасхождениеЗаказ = 1;
	//		КонецЕсли;
	//		
	//		//bercut060520
	//		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	//		
	//		СтруктураДействий = Новый Структура;
	//		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", СтрокаТЧТовары.Характеристика);
	//		СтруктураДействий.Вставить(
	//		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
	//		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
	//		Объект,
	//		НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	//		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , СтрокаТЧТовары.Упаковка);
	//		СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", СтрокаТЧТовары.Номенклатура);
	//		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//		
	//		Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
	//			СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	//		Иначе
	//			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	//		КонецЕсли;
	//		
	//		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	//		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//		СтруктураДействий.Вставить("ПересчитатьСумму");
	//		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	//		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	//		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//		СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	//		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	//		СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	//		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", СтрокаТЧТовары.Склад, ПараметрыУказанияСерий));
	//		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	//		СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
	//		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	//		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	//		
	//		СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
	//		ЭтаФорма.ИмяФормы, "Товары"));			
	//		//
	//		
	//		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
	//		
	//		//bercut060520
	//		Если СтрокаТЧТовары.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
	//			СтрокаТЧТовары.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
	//			СтрокаТЧТовары.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
	//			Или ЗначениеЗаполнено(СтрокаТЧТовары.Назначение) Тогда
	//			СтрокаТЧТовары.СписатьНаРасходы = Ложь;
	//			СтрокаТЧТовары.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
	//			СтрокаТЧТовары.АналитикаРасходов = Неопределено;
	//			СтрокаТЧТовары.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	//		ИначеЕсли СтрокаТЧТовары.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
	//			СтрокаТЧТовары.СписатьНаРасходы = Истина;
	//		КонецЕсли;
	//		
	//		Если НЕ СтрокаТЧТовары.ВедетсяУчетПоГТД Тогда
	//			СтрокаТЧТовары.НомерГТД = Неопределено;
	//			СтрокаТЧТовары.СтранаПроисхождения = Неопределено;
	//		КонецЕсли;
	//		//
	//		
	//	Иначе 
	//		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если ИмяТЧ = "Товары" Тогда
	//	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	//	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	//	ЗаполнитьСтатусыУказанияСерийСервер();
	//	ЗаполнитьЦеныНоменклатурыЗаказов();
	//	ПриИзмененииСкладаВТабличнойЧастиСервер();
	//	ОбновитьИнформациюПоЗаказам();
	//	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	//	ЗаполнитьПризнакСписанияНаРасходыДляУслуг();
	//КонецЕсли;
	//
	//РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	//СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура Рин1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	НомерТН = Объект.Рин1_НомерТН;
	ДатаТН = Объект.Рин1_ДатаТН;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПередЗаписьюПосле(Отказ, ПараметрыЗаписи)
	
	ЗаписатьТН();
<<<<<<< HEAD
	// + [Rineco], [Шерстюк Ю.Ю.] [22.12.2021] 
	// Задача: [№ 20949], [#Убираем т.к. при первом проведении после открытия возникает ошибка, свойство "ПредупреждениеПоказано" не найдено и проверять будем при распределении и выводить ошибки]
	//// + [Rineco], [Киселев А.Н.] [12.11.2021] 
	//// Задача: [№ 20949], [# Проверить погашенное количество]
	//Если ПараметрыДляЗаписи.Свойство("ПредупреждениеПоказано") И ПроверитьКоличествоСервер() Тогда 
	//	ОповещениеПредупреждение = Новый ОписаниеОповещения();
	//	ПоказатьПредупреждение(ОповещениеПредупреждение,"В документе присутствуют ошибки!!!");		
	//КонецЕсли;
	//// - [Rineco], [Киселев А.Н.] [12.11.2021]     	
	// - [Rineco], [Шерстюк Ю.Ю.] [22.12.2021]

=======
	
	// + [Rineco], [Киселев А.Н.] [12.11.2021] 
	// Задача: [№ 20949], [# Проверить погашенное количество]
	Если ПараметрыДляЗаписи.Свойство("ПредупреждениеПоказано") И ПроверитьКоличествоСервер() Тогда 
		ОповещениеПредупреждение = Новый ОписаниеОповещения();
		ПоказатьПредупреждение(ОповещениеПредупреждение,"В документе присутствуют ошибки!!!");		
	КонецЕсли;
	// - [Rineco], [Киселев А.Н.] [12.11.2021] 
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
КонецПроцедуры

// + [Rineco], [Киселев А.] [02.12.2021] [Log_Diff][№ 20949], [#Проверить погашенное количество] 
&НаКлиенте
Процедура ПредупреждениеЗавершение(Результат,Параметры) Экспорт
	
КонецПроцедуры



&НаСервере
Процедура ЗаписатьТН()
	
	Объект.Рин1_НомерТН = НомерТН;
	Объект.Рин1_ДатаТН = ДатаТН;	

КонецПроцедуры // ()

//++Шерстюк Ю.Ю. 29.03.2021 если из Диадок или др. обработок был заполнен заказ поставщику, то запрашиваем разрешение на привязку по кодам строк (по умолчанию приходит код строки 0)

&НаКлиенте
Процедура ПослеЗакрытияВопросаРаспределитьПоЗаказам(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
<<<<<<< HEAD
		пСостояниеРаспределено = РаспределитьПоЗаказамПоставщику(СтруктураДействий);
		Если пСостояниеРаспределено Тогда 
	        РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	        ЗадаватьВопрос = Истина;
		Иначе 
			ЗадаватьВопрос = Ложь;
		КонецЕсли;
=======
		РаспределитьПоЗаказамПоставщику(СтруктураДействий);
        РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
        ЗадаватьВопрос = Истина;
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
	Иначе
		ЗадаватьВопрос = Ложь;
	КонецЕсли;	
 
КонецПроцедуры

&НаСервере
<<<<<<< HEAD
Функция  РаспределитьПоЗаказамПоставщику(СтруктураДействий)
	тзРаспределения = СформироватьТаблицуРаспределения();
	Если тзРаспределения <> Неопределено Тогда 
		ЗаполнитьТЧТовары(тзРаспределения,СтруктураДействий);
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции
=======
Процедура РаспределитьПоЗаказамПоставщику(СтруктураДействий)
	тзРаспределения = СформироватьТаблицуРаспределения();
	ЗаполнитьТЧТовары(тзРаспределения,СтруктураДействий);	
КонецПроцедуры
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))

&НаСервере
Процедура ЗаполнитьТЧТовары(тзРаспределения,СтруктураДействий)
	 ТчТовары = Объект.Товары;
	 ТЗТовары = ТчТовары.Выгрузить();
	 пИндекс = 0;
	 Для Каждого СтрТЧ из ТЗТовары Цикл 
		 СтруктураПоиска = Новый Структура("Индекс",пИндекс);

		 МассивНовыхСтрок = тзРаспределения.НайтиСтроки(СтруктураПоиска);
		 
		 пКоличествоНовыхСтрок = МассивНовыхСтрок.Количество();
		 
		 Если пКоличествоНовыхСтрок > 0 Тогда 
			 Если пКоличествоНовыхСтрок = 1 и Не МассивНовыхСтрок[0].НоваяСтрока Тогда //если не новая строка, то пересчет суммы не требуется
				 ТекущаяСтрока = ТчТовары.Получить(пИндекс);
				 ТекущаяСтрока.КодСтроки = МассивНовыхСтрок[0].КодСтроки;
				 ТекущаяСтрока.Назначение = МассивНовыхСтрок[0].Назначение; 
				 ТекущаяСтрока.РасхождениеЗаказ = 0;
				 пИндекс = пИндекс + 1;
				 Продолжить;
			 Иначе
				 Для Каждого ЭлементМассива из МассивНовыхСтрок Цикл
					 
					 Если Не ЭлементМассива.НоваяСтрока Тогда 
						  ТекущаяСтрока = ТчТовары.Получить(пИндекс);
						  Если ТекущаяСтрока.Количество <> ЭлементМассива.Количество  Тогда 
							  ТекущаяСтрока.КодСтроки = ЭлементМассива.КодСтроки;
							  ТекущаяСтрока.Количество = ЭлементМассива.Количество;
	                          ТекущаяСтрока.КоличествоУпаковок = ЭлементМассива.Количество;
							  ТекущаяСтрока.Назначение = ЭлементМассива.Назначение;  

							  //ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий,Неопределено);
						  КонецЕсли;
					  Иначе 
						  НоваяСтрока = ТчТовары.Добавить();
						  ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТЧ);
						  НоваяСтрока.КодСтроки = ЭлементМассива.КодСтроки;
						  НоваяСтрока.Количество = ЭлементМассива.Количество;
						  НоваяСтрока.КоличествоУпаковок = ЭлементМассива.Количество;
                          НоваяСтрока.Назначение = ЭлементМассива.Назначение;
						  //ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
						  ОбработкаСуммСтрок(НоваяСтрока, ТекущаяСтрока);

					 КонецЕсли;
					 
				 КонецЦикла;
				 
				 
			 КонецЕсли;
			 
		 КонецЕсли;
		 пИндекс = пИндекс + 1;
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ОбработкаСуммСтрок(ПерваяСтрока, ВтораяСтрока)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
	"Сумма, СуммаНДС, СуммаСНДС, СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов,СуммаСверхЗаказа,СуммаСНДСБезВозвратнойТары",
	, "КоличествоУпаковок");

	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ВтораяСтрока);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ПерваяСтрока);
	ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ВтораяСтрока);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
	
КонецПроцедуры


&НаСервере
Функция СформироватьТаблицуРаспределения()
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;

	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	Таблица.КодСтроки КАК КодСтроки,
	               	|	Таблица.Номенклатура КАК Номенклатура,
	               	|	Таблица.Характеристика КАК Характеристика,
	               	|	Таблица.ЗаказПоставщику КАК ЗаказПоставщику,
	               	|	Таблица.Количество КАК Количество,
	               	|	ЛОЖЬ КАК НоваяСтрока,
	               	|	Таблица.Назначение КАК Назначение
	               	|ПОМЕСТИТЬ ТаблицаПТУ
	               	|ИЗ
	               	|	&Таблица КАК Таблица
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	               	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	               	|	ЗаказыПоставщикамОстатки.Характеристика КАК Характеристика,
	               	|	ЗаказыПоставщикамОстатки.КодСтроки КАК КодСтроки,
	               	|	ЗаказыПоставщикамОстатки.Склад КАК Склад,
	               	|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
	               	|ПОМЕСТИТЬ ЗаказыОстатки
	               	|ИЗ
	               	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	               	|			&ТекущаяДата,
	               	|			(Номенклатура, ЗаказПоставщику, Характеристика) В
	               	|				(ВЫБРАТЬ
	               	|					ТаблицаПТУ.Номенклатура КАК Номенклатура,
	               	|					ТаблицаПТУ.ЗаказПоставщику КАК ЗаказПоставщику,
	               	|					ТаблицаПТУ.Характеристика КАК Характеристика
	               	|				ИЗ
	               	|					ТаблицаПТУ КАК ТаблицаПТУ)) КАК ЗаказыПоставщикамОстатки
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ЗаказыПоставщикамОбороты.Период КАК Период,
	               	|	ЗаказыПоставщикамОбороты.Регистратор КАК Регистратор,
	               	|	ЗаказыПоставщикамОбороты.ЗаказПоставщику КАК ЗаказПоставщику,
	               	|	ЗаказыПоставщикамОбороты.Номенклатура КАК Номенклатура,
	               	|	ЗаказыПоставщикамОбороты.Характеристика КАК Характеристика,
	               	|	ЗаказыПоставщикамОбороты.КодСтроки КАК КодСтроки,
	               	|	ЗаказыПоставщикамОбороты.Склад КАК Склад,
	               	|	-ЗаказыПоставщикамОбороты.ЗаказаноОборот КАК ЗаказаноОборот
	               	|ПОМЕСТИТЬ ОборотТекущегоДокумента
	               	|ИЗ
	               	|	РегистрНакопления.ЗаказыПоставщикам.Обороты(
	               	|			&ДатаДокумента,
	               	|			&ТекущаяДата,
	               	|			Регистратор,
	               	|			(Номенклатура, ЗаказПоставщику, Характеристика) В
	               	|				(ВЫБРАТЬ
	               	|					ТаблицаПТУ.Номенклатура КАК Номенклатура,
	               	|					ТаблицаПТУ.ЗаказПоставщику КАК ЗаказПоставщику,
	               	|					ТаблицаПТУ.Характеристика КАК Характеристика
	               	|				ИЗ
	               	|					ТаблицаПТУ КАК ТаблицаПТУ)) КАК ЗаказыПоставщикамОбороты
	               	|ГДЕ
	               	|	ЗаказыПоставщикамОбороты.Регистратор = &СсылкаПТУ
	               	|	И ЗаказыПоставщикамОбороты.КодСтроки <> 0
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ЕСТЬNULL(ЗаказыОстатки.ЗаказПоставщику, ОборотТекущегоДокумента.ЗаказПоставщику) КАК ЗаказПоставщику,
	               	|	ЕСТЬNULL(ЗаказыОстатки.Номенклатура, ОборотТекущегоДокумента.Номенклатура) КАК Номенклатура,
	               	|	ЕСТЬNULL(ЗаказыОстатки.Характеристика, ОборотТекущегоДокумента.Характеристика) КАК Характеристика,
	               	|	ЕСТЬNULL(ЗаказыОстатки.КодСтроки, ОборотТекущегоДокумента.КодСтроки) КАК КодСтроки,
	               	|	ЕСТЬNULL(ЗаказыОстатки.Склад, ОборотТекущегоДокумента.Склад) КАК Склад,
	               	|	СУММА(ЕСТЬNULL(ЗаказыОстатки.ЗаказаноОстаток, 0) + ЕСТЬNULL(ОборотТекущегоДокумента.ЗаказаноОборот, 0)) КАК КоличествоОстаток
	               	|ПОМЕСТИТЬ ОстаткиИсключаяСОборотомТекДок
	               	|ИЗ
	               	|	ЗаказыОстатки КАК ЗаказыОстатки
	               	|		ПОЛНОЕ СОЕДИНЕНИЕ ОборотТекущегоДокумента КАК ОборотТекущегоДокумента
	               	|		ПО ЗаказыОстатки.Склад = ОборотТекущегоДокумента.Склад
	               	|			И ЗаказыОстатки.Номенклатура = ОборотТекущегоДокумента.Номенклатура
	               	|			И ЗаказыОстатки.Характеристика = ОборотТекущегоДокумента.Характеристика
	               	|			И ЗаказыОстатки.КодСтроки = ОборотТекущегоДокумента.КодСтроки
	               	|			И ЗаказыОстатки.ЗаказПоставщику = ОборотТекущегоДокумента.ЗаказПоставщику
	               	|
	               	|СГРУППИРОВАТЬ ПО
	               	|	ЕСТЬNULL(ЗаказыОстатки.ЗаказПоставщику, ОборотТекущегоДокумента.ЗаказПоставщику),
	               	|	ЕСТЬNULL(ЗаказыОстатки.Номенклатура, ОборотТекущегоДокумента.Номенклатура),
	               	|	ЕСТЬNULL(ЗаказыОстатки.Характеристика, ОборотТекущегоДокумента.Характеристика),
	               	|	ЕСТЬNULL(ЗаказыОстатки.КодСтроки, ОборотТекущегоДокумента.КодСтроки),
	               	|	ЕСТЬNULL(ЗаказыОстатки.Склад, ОборотТекущегоДокумента.Склад)
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ОстаткиИсключаяСОборотомТекДок.ЗаказПоставщику КАК ЗаказПоставщику,
	               	|	ОстаткиИсключаяСОборотомТекДок.Номенклатура КАК Номенклатура,
	               	|	ОстаткиИсключаяСОборотомТекДок.Характеристика КАК Характеристика,
	               	|	ОстаткиИсключаяСОборотомТекДок.КодСтроки КАК КодСтроки,
	               	|	ОстаткиИсключаяСОборотомТекДок.Склад КАК Склад,
	               	|	ОстаткиИсключаяСОборотомТекДок.КоличествоОстаток КАК КоличествоЗаказано,
	               	|	ЕСТЬNULL(ЗаказПоставщикуТовары.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.Пустаяссылка)) КАК Назначение,
	               	|	ЕСТЬNULL(ЗаказПоставщикуТовары.ДатаПоступления, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)) КАК ДатаПоступления
	               	|ИЗ
	               	|	ОстаткиИсключаяСОборотомТекДок КАК ОстаткиИсключаяСОборотомТекДок
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	               	|		ПО ОстаткиИсключаяСОборотомТекДок.ЗаказПоставщику = ЗаказПоставщикуТовары.Ссылка
	               	|			И ОстаткиИсключаяСОборотомТекДок.КодСтроки = ЗаказПоставщикуТовары.КодСтроки
	               	|
	               	|УПОРЯДОЧИТЬ ПО
	               	|	Номенклатура,
	               	|	Назначение УБЫВ,
	               	|	ДатаПоступления,
	               	|	КодСтроки";
	
	Запрос.УстановитьПараметр("ДатаДокумента",Объект.Дата);
	Запрос.УстановитьПараметр("СсылкаПТУ",Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Таблица",Объект.Товары.Выгрузить());
	Попытка
		Результат = Запрос.ВыполнитьПакет();
	Исключение
		     Сообщить("Распределение не выполнено");
		     Возврат 0;
	КонецПопытки;

    ТабДокумента = МВТ.Таблицы.Найти("ТаблицаПТУ").ПолучитьДанные().Выгрузить();
	ТабДокумента.Колонки.Добавить("Индекс");
	ТабЗаказыПоставщику = Результат[Результат.ВГраница()].Выгрузить(); 
	ТабДляРаспределения = ТабДокумента.Скопировать(); // Основная таблица, по которой будут заполняться и проводиться документы
	ТабДляРаспределения.Очистить();

	//Очистим заполненные коды строк, для нового распределения
	пИндекс = 0;
	Для Каждого СтрТаблица из ТабДокумента Цикл 
		СтрТаблица.КодСтроки = 0;
		СтрТаблица.Индекс = пИндекс;
		пИндекс = пИндекс + 1;
	КонецЦикла;
	
<<<<<<< HEAD
	// + [Rineco], [Шерстюк Ю.Ю.] [22.12.2021] 
	// Задача: [№ 20949], [#Проверяем, если по регистру обнаружены отрицательные остатки, то запишем ТЗ со списком ошибок и выведем их пользователю]
	тзОшибки = Новый ТаблицаЗначений;
	тзОшибки.Колонки.Добавить("Номенклатура");
	тзОшибки.Колонки.Добавить("ЗаказПоставщику");
	тзОшибки.Колонки.Добавить("КодСтроки");
	// - [Rineco], [Шерстюк Ю.Ю.] [22.12.2021]

	
	
	Для Каждого СтрТаблица из ТабДокумента Цикл 

=======
	Для Каждого СтрТаблица из ТабДокумента Цикл 
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,ЗаказПоставщику",СтрТаблица.Номенклатура,СтрТаблица.Характеристика,СтрТаблица.ЗаказПоставщику);
        //Ищем все непогашенные строки по заказу поставщика с отбором по номенклатуре
		СтрокиОстатки = ТабЗаказыПоставщику.НайтиСтроки(СтруктураПоиска);
		
		ОсталосьРаспределитьПоПТУ = СтрТаблица.Количество;
		РазделитьСтроку = Ложь; // Используем для разделения строки

<<<<<<< HEAD
		Для Каждого СтрОстатки из СтрокиОстатки Цикл
			// + [Rineco], [Шерстюк Ю.Ю.] [22.12.2021] 
			// Задача: [№ 20949]
			Если СтрОстатки.КоличествоЗаказано < 0 Тогда
				НоваяСтрока = тзОшибки.Добавить();
				НоваяСтрока.Номенклатура = СтрТаблица.Номенклатура;
				НоваяСтрока.ЗаказПоставщику = СтрТаблица.ЗаказПоставщику;
				НоваяСтрока.КодСтроки = СтрОстатки.КодСтроки;
				Продолжить;
			КонецЕсли;
			// - [Rineco], [Шерстюк Ю.Ю.] [22.12.2021]

=======
		Для Каждого СтрОстатки из СтрокиОстатки Цикл 
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
			Если ОсталосьРаспределитьПоПТУ = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Если СтрОстатки.КоличествоЗаказано = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ОсталосьРаспределитьПоПТУ <= СтрОстатки.КоличествоЗаказано Тогда 
				НоваяСтрока = ТабДляРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТаблица);
				НоваяСтрока.КодСтроки = СтрОстатки.КодСтроки;
				НоваяСтрока.Количество = ОсталосьРаспределитьПоПТУ;
				НоваяСтрока.НоваяСтрока = РазделитьСтроку;
				НоваяСтрока.Назначение = СтрОстатки.Назначение;
				СтрОстатки.КоличествоЗаказано = СтрОстатки.КоличествоЗаказано - НоваяСтрока.Количество;
				ОсталосьРаспределитьПоПТУ = 0;
				РазделитьСтроку = Ложь;
			Иначе 
				НоваяСтрока = ТабДляРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТаблица);
				НоваяСтрока.КодСтроки = СтрОстатки.КодСтроки;
				НоваяСтрока.Количество = СтрОстатки.КоличествоЗаказано;
				НоваяСтрока.Назначение = СтрОстатки.Назначение;				
				НоваяСтрока.НоваяСтрока = РазделитьСтроку;
				СтрОстатки.КоличествоЗаказано = СтрОстатки.КоличествоЗаказано - НоваяСтрока.Количество;
                ОсталосьРаспределитьПоПТУ = ОсталосьРаспределитьПоПТУ - НоваяСтрока.Количество;
				РазделитьСтроку = Истина;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ОсталосьРаспределитьПоПТУ > 0 Тогда //остаток сверх заказа
			НоваяСтрока = ТабДляРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТаблица);
			НоваяСтрока.Количество = ОсталосьРаспределитьПоПТУ;
			НоваяСтрока.НоваяСтрока = РазделитьСтроку;
			//РазделитьСтроку = Истина;
			ОсталосьРаспределитьПоПТУ = 0;
		КонецЕсли;
		
	КонецЦикла;
<<<<<<< HEAD
	// + [Rineco], [Шерстюк Ю.Ю.] [22.12.2021] 
	// Задача: [№ 20949], [#]
	тзОшибки.Свернуть("Номенклатура,ЗаказПоставщику,КодСтроки","");
	Если тзОшибки.Количество() > 0 Тогда
		Для Каждого Стр из тзОшибки Цикл 
			Сообщить("Отрицательные остатки арт. " + Стр.Номенклатура.Артикул + " КодСтроки " + Строка(Стр.КодСтроки) + " по заказу " + Строка(Стр.ЗаказПоставщику));
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	// - [Rineco], [Шерстюк Ю.Ю.] [22.12.2021]
=======
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
		
	Возврат ТабДляРаспределения;
КонецФункции

&НаКлиенте
Процедура Рин1_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
	
	Если Объект.ПоступлениеПоЗаказам Тогда 
		пЕстьНеРаспрепделенныеСтроки = Ложь;
		ТчТовары = Объект.Товары;
		ПустаяСсылкаЗаказПоставщику = ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка");
		
		Для Каждого СтрТЧ из ТчТовары Цикл
			Если СтрТЧ.ЗаказПоставщику <> ПустаяСсылкаЗаказПоставщику и СтрТЧ.КодСтроки = 0 Тогда 
				пЕстьНеРаспрепделенныеСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если пЕстьНеРаспрепделенныеСтроки и (ЗадаватьВопрос = Неопределено или ЗадаватьВопрос = Истина) Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРаспределитьПоЗаказам",ЭтотОбъект);
			ПоказатьВопрос(Оповещение,"Распределить товары по заказам поставщику?",РежимДиалогаВопрос.ДаНетОтмена,0,КодВозвратаДиалога.Нет,"Распределение");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	
	// + [Rineco], [Киселев А.Н.] [25.10.2021] 
	// Задача: [№ 21057], [#Механизм проверки ГТД]
	
	//20201007 ГлазуновДВ вставляем проверку и заполнение ГТД
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		СсылкаНаПустойГТД = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.НомераГТД.ПустаяСсылка"); 
		
		Если НЕ ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура,"ВестиУчетПоГТД")  Тогда
			СтрокаТЧ.НомерГТД = СсылкаНаПустойГТД;
			Продолжить;
		КонецЕсли;
			
		Если СтрокаТЧ.НомерГТД = СсылкаНаПустойГТД Тогда
			СтрокаТЧ.НомерГТД = ПустаяГТД();
			Продолжить;
		КонецЕсли;
		
		ТекущийТекстНомераДекларации = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТЧ.НомерГТД,"Код");
		НачалоКорректногоПериода = Дата(2000, 01, 01);
		КонецКорректногоПериода = ДобавитьМесяц(КонецГода(ОбщегоНазначенияКлиент.ДатаСеанса()), 9 * 12);
		
		// + [Rineco], [Киселев А.Н.] [25.10.2021] 
		// Задача: [№ 21057], [#Нигде не используется ]
		//Реквизиты = Справочники.НомераГТД.РегистрационныйНомерИСтранаВвоза(ТекущийТекстНомераДекларации);
		// - [Rineco], [Киселев А.Н.] [25.10.2021]
		
		КодОшибки = НаличиеОшибокВНомереДекларации(
		ТекущийТекстНомераДекларации, НачалоКорректногоПериода, КонецКорректногоПериода);
		
		Если КодОшибки > 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("В номере ГТД есть ошибка " + СтрокаТЧ.Номенклатура);
		Иначе
			//Если Справочники.СтраныМира.ДанныеКлассификатораСтранМираПоКоду(СтрокаТЧ.НомерГТД.СтранаПроисхождения.Код) = Неопределено Тогда
			
			// + [Rineco], [Киселев А.Н.] [25.10.2021] 
			// Задача: [№ 21057], [#СозданиеГТД убираем лишние условия]
			
			// Было:
			
			//Если СтрЧислоВхождений(СтрокаТЧ.НомерГТД.СтранаПроисхождения.Наименование, "-") > 0
			//	ИЛИ СтрЧислоВхождений(СтрокаТЧ.НомерГТД.СтранаПроисхождения.Наименование, "/") > 0
			//	ИЛИ СтрЧислоВхождений(СтрокаТЧ.НомерГТД.СтранаПроисхождения.Наименование, "РФ") > 0 Тогда
			
			// Стало:
			
			Если СтрЧислоВхождений(ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТЧ.НомерГТД,"СтранаПроисхождения.Наименование"), "РФ") > 0 Тогда
				Попытка	
					ПоменятьСтрануНаРФВНомереГТД(СтрокаТЧ)	
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			
			// - [Rineco], [Киселев А.Н.] [25.10.2021]
			
		КонецЕсли;
		
	КонецЦикла;
	//}}20201007 ГлазуновДВ
	
	// - [Rineco], [Киселев А.Н.] [25.10.2021]
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПартнерПриИзмененииПосле(Элемент)
	//++Шерстюк Ю.Ю. Задача 7625 менеджер и подразделение по договору
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
	//--Шерстюк Ю.Ю.

КонецПроцедуры

&НаКлиенте
Процедура Рин1_ДоговорПриИзмененииПосле(Элемент)
	//++Шерстюк Ю.Ю. Задача 7625 менеджер и подразделение по договору
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
	//--Шерстюк Ю.Ю.

КонецПроцедуры

&НаКлиенте
Процедура Рин1_КонтрагентПриИзмененииПосле(Элемент)
	//++Шерстюк Ю.Ю. Задача 7625 менеджер и подразделение по договору
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
	//--Шерстюк Ю.Ю.

КонецПроцедуры
//--Шерстюк Ю.Ю.
&НаКлиенте
Процедура Рин1_ЗаполнитьКомментарийПосле(Команда)
	//++Шерстюк Ю.Ю. Задача 8377 запись комментария без перепроведения
	Если Не ЭтотОбъект.Модифицированность Тогда 
		пПараметрыОбработки = Новый Структура;
		пПараметрыОбработки.Вставить("Ссылка",Объект.Ссылка);
		
		пФормаКомментария = ОткрытьФорму("Обработка.Рин1_ВводКомментарияБезПерепроведения.Форма.Форма",пПараметрыОбработки,Объект.Ссылка);
	Иначе
		 Сообщение = Новый СообщениеПользователю;
		 Сообщение.Текст = "Объект модифицирован, изменение комментария доступно без использования дополнительных средств...";
		 Сообщение.Сообщить();
	КонецЕсли;
	//--Шерстюк Ю.Ю.
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОбработкаОповещенияПосле(ИмяСобытия, Параметр, Источник)
	//++Шерстюк Ю.Ю. Задача 8377 запись комментария без перепроведения
	Если ИмяСобытия = "ПриЗакрытииВводаКомметария" Тогда 
		 ЭтаФорма.Прочитать();
	 КонецЕсли;
	//--Шерстюк Ю.Ю.

КонецПроцедуры

// + [Rineco], [Киселев А.Н.] [17.09.2021] 
// Задача: [№ 14805], [#Ошибка чтения ПТУ менеджером ОП]
&НаСервере
&Вместо("ПриЧтенииСозданииНаСервере")
Процедура Рин1_ПриЧтенииСозданииНаСервере()
	ИспользоватьРучныеСкидкиВЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	ЗапретитьПоступлениеТоваровБезНомеровГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД");
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	ИспользоватьКорректировкиПриобретений = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиПриобретений");
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	ВестиСведенияДляДекларацийАлкоВРознице = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийАлкоВРознице");
	ДатаНачалаПечатиЕдиногоАвансовогоОтчета = Константы.ДатаНачалаПечатиЕдиногоАвансовогоОтчета.Получить();
	ЕдиныйАвансовыйОтчетБезусловно = Не Константы.ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета.Получить();
	ОпределитьПечатьЕдиногоАвансовогоОтчета();
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// + [Rineco], [Киселев А.Н.] [17.09.2021] 
	// Задача: [№ 14805], [# Устанавливаем привелигированный режим на чтение реквизита]
	
	// Было:
	//СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
	// Стало:
	УстановитьПривилегированныйРежим(Истина);
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
	УстановитьПривилегированныйРежим(Ложь);
	// - [Rineco], [Киселев А.Н.] [17.09.2021]
	
	Склад = Объект.Склад;
	
	УстановитьПараметрыВыбораТоварыСклад();
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(
		ЭтаФорма, Объект.ПоступлениеПоЗаказам, Ложь, );
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	Элементы.ГруппаКартинкаИНадписьНесколькоСкладов.Видимость = СкладГруппа;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриобретениеТоваровУслуг));
	УстановитьВидимостьЭлементовСерий();
	
	УстановитьПараметрыВыбораВидаЗапасов();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ЗаполнитьЦеныНоменклатурыЗаказов();
	ОбновитьИнформациюПоЗаказам();
	ОбновитьСостояниеСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	УстановитьВидимостьКомандПоЗаказу();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	УстановитьДоступностьСоглашений();	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы.КартинкаРасхождениеЗаказ, 
		Элементы.КартинкаРасхождениеЗаказы);

	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	КонецЕсли;
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ОбновитьТекстАвансовыйОтчет();
	
	ОбновитьТекстСчетаФактурыПолученные();
	
	ДатаДокументаДоИзменения = Объект.Дата;
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Товары");
	// + [Rineco], [Киселев А.Н.] [17.09.2021] 
	// Задача: [№ 14805], [# Устанавливаем привелигированный режим на чтение реквизита]
	
	// Было:
	//ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект, Объект.ПоступлениеПоЗаказам,,СводнаяИнформацияПоДоставке);
	// Стало:
	УстановитьПривилегированныйРежим(Истина);
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект, Объект.ПоступлениеПоЗаказам,,СводнаяИнформацияПоДоставке);
	УстановитьПривилегированныйРежим(Ложь);
	// - [Rineco], [Киселев А.Н.] [17.09.2021]

	НоменклатураСервер.ЗаполнитьСтрануПроисхождения(Объект.Товары);
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	УстановитьВидимостьОпераций();
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
	
	ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	
	УчетНДСУП.УстановитьСписокВыбораСтавокНДСПоНалогообложению(ЭтотОбъект, Объект.НалогообложениеНДС);
	
	ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(Элементы.ЗакупкаПодДеятельность, Объект.ЗакупкаПодДеятельность, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	
	ОбновитьОбязательностьСкладаВТЧ();

КонецПроцедуры



#Область Задача21057
// + [Rineco], [Киселев А.Н.] [25.10.2021] 
// Задача: [№ 21057], [#Механизм проверки ГТД]
&НаСервере
Функция ПустаяГТД()
	Возврат Справочники.НомераГТД.НайтиПоКоду("");
КонецФункции

// + [Rineco], [Киселев А.Н.] [25.10.2021] 
// Задача: [№ 21057], [#Механизм проверки ГТД]
&НаСервере
Процедура ПоменятьСтрануНаРФВНомереГТД(СтрокаТЧ)
	
	ОбъектНомерГТД = СтрокаТЧ.НомерГТД.ПолучитьОбъект();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", "643");
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ОбъектНомерГТД.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию("РФ");
	Если ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
		ОбъектНомерГТД.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию("РОССИЯ");
	Иначе
		ОбъектНомерГТД.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоКоду("643");
	КонецЕсли;
	ОбъектНомерГТД.Записать();
	
КонецПроцедуры

// + [Rineco], [Киселев А.Н.] [25.10.2021] 
// Задача: [№ 21057], [#Механизм проверки ГТД]
&НаКлиенте
Функция НаличиеОшибокВНомереДекларации(НомерТаможеннойДекларации, НачалоКорректногоПериода, КонецКорректногоПериода)
	
	НомерДекларацииНаТовары = СокрЛП(НомерТаможеннойДекларации);
	
	Если НЕ ЗначениеЗаполнено(НомерДекларацииНаТовары) Тогда
		// Пользователь еще ничего не ввел.
		Возврат 0;
	КонецЕсли;
	
	МассивТД = СтрРазделить(НомерДекларацииНаТовары, "/");
	
	Если МассивТД.Количество() > 4
	 ИЛИ МассивТД.Количество() < 3 Тогда
		// Ошибочное количество элементов.
		Возврат 1;
	КонецЕсли;
	
	КодТаможенногоОргана = МассивТД[0];
	
	Если СтрДлина(КодТаможенногоОргана) <> 2
		И СтрДлина(КодТаможенногоОргана) <> 5
		И СтрДлина(КодТаможенногоОргана) <> 8 Тогда
		// Ошибочная длина кода таможенного органа.
		Возврат 2;
	КонецЕсли;
	
	ДатаПринятияДекларацииНаТовары = МассивТД[1];
	
	Если СтрДлина(ДатаПринятияДекларацииНаТовары) <> 6 Тогда
		// Ошибочная длина поля дата.
		Возврат 3;
	Иначе
		// Проверим корректность указания даты.
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДатаПринятияДекларацииНаТовары) Тогда
			// Длина поля верная, но дата указана ошибочно.
			Возврат 3;
		КонецЕсли; 
		
		СтрокаВДату = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаПринятияДекларацииНаТовары);
		Если НЕ ЗначениеЗаполнено(СтрокаВДату) Тогда
			// Длина поля верная, но дата указана ошибочно.
			Возврат 3;
		Иначе
			// Проверим год на корректность указания.
			
			Если СтрокаВДату < НачалоКорректногоПериода 
			 ИЛИ СтрокаВДату > КонецКорректногоПериода Тогда
				Возврат 4;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПорядковыйНомерДекларацииНаТовары = МассивТД[2];
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) < 7
	 ИЛИ СтрДлина(ПорядковыйНомерДекларацииНаТовары) > 8 Тогда
		// Ошибочная длина поля порядковый номер.
		Возврат 5;
	КонецЕсли;
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 7
		И НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПорядковыйНомерДекларацииНаТовары) Тогда
		// Ошибочный формат поля порядковый номер.
		Возврат 5;
	КонецЕсли;
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 8 Тогда
		ПервыеДваСимвола = ВРег(Лев(ПорядковыйНомерДекларацииНаТовары, 2));
		Если ПервыеДваСимвола = "0Б" Тогда 
			// Вместо буквы "О" указана цифра ноль.
			Возврат 6;
		ИначеЕсли ПервыеДваСимвола = "3В"
		      ИЛИ ПервыеДваСимвола = "3B" Тогда
			// Вместо буквы "З" указана цифра три.
			Возврат 7;
		ИначеЕсли ПервыеДваСимвола <> "ОБ"
		        И ПервыеДваСимвола <> "OБ"
		        И ПервыеДваСимвола <> "ЗВ"
		        И ПервыеДваСимвола <> "ЗB" Тогда 
			// Ошибочный формат поля порядковый номер.
			Возврат 5;
		КонецЕсли;
		ПоследниеШестьСимволов = ВРег(Прав(ПорядковыйНомерДекларацииНаТовары, 6));
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеШестьСимволов) Тогда
			// Ошибочный формат поля порядковый номер.
			Возврат 5;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивТД.Количество() = 4 Тогда
		ПорядковыйНомерТовара = МассивТД[3];
		Если СтрДлина(ПорядковыйНомерТовара) > 3
		 ИЛИ СтрДлина(ПорядковыйНомерТовара) < 1 Тогда
			// Ошибочная длина поля порядковый номер товара.
			Возврат 8;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции


// + [Rineco], [Киселев А.Н.] [25.10.2021] 
// Задача: [№ 21057], [#Механизм проверки ГТД]
&НаКлиенте
Процедура ВопросОшибкаГТДЗавершение(Результат,ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ДополнительныеПараметры.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



// + [Rineco], [Киселев А.Н.] [23.11.2021] 
// Задача: [№ 20949], [# Проверить погашенное количество]
&НаСервере
Функция  ПроверитьКоличествоСервер()
	
	ПараметрыЗапроса = Новый Структура;
	ТабличнаяЧастьЗП = Объект.Товары.Выгрузить(); 
	ТабличнаяЧастьЗП.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("ДокументСсылка.ПриобретениеТоваровУслуг"));
	//ТабличнаяЧастьЗП.Колонки.Добавить("СтрокаУдалена",Новый ОписаниеТипов("Булево"));
	
	Для Каждого ЭлементТаб Из ТабличнаяЧастьЗП Цикл 
		ЭлементТаб.Ссылка = Объект.Ссылка;
		//ЭлементТаб.СтрокаУдалена = Ложь;
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("ТаблицаТоваров",ТабличнаяЧастьЗП);
	
	
	ТаблицаДанных = ОбщегоНазначенияУТ.ЗапросВыполнитьВыгрузить(ТекстЗапросаПогашенныеПозиции(),ПараметрыЗапроса);
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементТаблицы Из ТаблицаДанных Цикл 
		
		Сообщить("Номенклатура " + ЭлементТаблицы.НоменклатураПриход + " в заказе с кодом строки: " + ЭлементТаблицы.КодСтрокиПриход + " превышает количество в заказе на " + (ЭлементТаблицы.ЗаказаноПриход - ЭлементТаблицы.КоличествоПриход) * -1);
		
	КонецЦикла;
	
	ПредупреждениеПоказано = Истина;
	Возврат Истина;
	
КонецФункции

// + [Rineco], [Киселев А.Н.] [23.11.2021] 
// Задача: [№ 20949], [# Проверить погашенное количество]
&НаСервере
Функция  ТекстЗапросаПогашенныеПозиции()
	
	Возврат "ВЫБРАТЬ
	        |	ТаблицаТоваров.Ссылка КАК Ссылка,
	        |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	        |	ТаблицаТоваров.Характеристика КАК Характеристика,
	        |	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
	        |	ТаблицаТоваров.КодСтроки КАК КодСтроки,
	        |	ТаблицаТоваров.Склад КАК Склад,
	        |	ТаблицаТоваров.ЗаказПоставщику КАК ЗаказПоставщику
	        |ПОМЕСТИТЬ ВТ_ТоварыЗП
	        |ИЗ
	        |	&ТаблицаТоваров КАК ТаблицаТоваров
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ТоварыЗП.Ссылка КАК ЗаказПриход,
	        |	ВТ_ТоварыЗП.КоличествоУпаковок КАК КоличествоПриход,
	        |	ЗаказыПоставщикам.Заказано КАК ЗаказаноПриход,
	        |	ЗаказыПоставщикам.КОформлению КАК КОформлениюПриход,
	        |	ЗаказыПоставщикам.КодСтроки КАК КодСтрокиПриход,
	        |	ЗаказыПоставщикам.Номенклатура КАК НоменклатураПриход,
	        |	ЗаказыПоставщикам.Характеристика КАК ХарактеристикаПриход,
	        |	ЗаказыПоставщикам.Склад КАК СкладПриход
	        |ПОМЕСТИТЬ ВТ_ЗаказПриход
	        |ИЗ
	        |	ВТ_ТоварыЗП КАК ВТ_ТоварыЗП
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	        |		ПО ВТ_ТоварыЗП.ЗаказПоставщику = ЗаказыПоставщикам.ЗаказПоставщику
	        |			И ВТ_ТоварыЗП.Номенклатура = ЗаказыПоставщикам.Номенклатура
	        |			И ВТ_ТоварыЗП.Характеристика = ЗаказыПоставщикам.Характеристика
	        |			И (ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	        |			И ВТ_ТоварыЗП.КодСтроки = ЗаказыПоставщикам.КодСтроки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ЗаказПриход.ЗаказПриход КАК ЗаказПриход,
	        |	ВТ_ЗаказПриход.КоличествоПриход КАК КоличествоПриход,
	        |	ВТ_ЗаказПриход.ЗаказаноПриход КАК ЗаказаноПриход,
	        |	ВТ_ЗаказПриход.КОформлениюПриход КАК КОформлениюПриход,
	        |	ВТ_ЗаказПриход.КодСтрокиПриход КАК КодСтрокиПриход,
	        |	ВТ_ЗаказПриход.НоменклатураПриход КАК НоменклатураПриход,
	        |	ВТ_ЗаказПриход.ХарактеристикаПриход КАК ХарактеристикаПриход,
	        |	ВТ_ЗаказПриход.СкладПриход КАК СкладПриход
	        |ИЗ
	        |	ВТ_ЗаказПриход КАК ВТ_ЗаказПриход
	        |ГДЕ
	        |	ВТ_ЗаказПриход.ЗаказаноПриход - ВТ_ЗаказПриход.КоличествоПриход < 0";
	
КонецФункции

// + [Rineco], [Киселев А.] [02.12.2021] [Log_Diff][№ 20949],[# Проверить погашенное количество]
&НаКлиенте
&Перед("Подключаемый_ОбработатьЗаписьОбъекта")
Процедура Рин1_Подключаемый_ОбработатьЗаписьОбъекта()
	ПараметрыДляЗаписи.Вставить("ПредупреждениеПоказано",Истина);
КонецПроцедуры

<<<<<<< HEAD

&НаКлиенте
Процедура Рин1_НадписьВалютыНажатиеВместо(Элемент, СтандартнаяОбработка)
	
	Перем ЕстьКорректировки, ЕстьСчетаФактуры;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"         , Объект.Валюта);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов"    , Объект.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов"     , Объект.Товары.Итог("СуммаВзаиморасчетов"));
	СтруктураПараметров.Вставить("СуммаДокумента"          , Объект.Товары.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("Курс"                    , Объект.Курс);
	СтруктураПараметров.Вставить("Кратность"               , Объект.Кратность);
	СтруктураПараметров.Вставить("ДатаДокумента"           , Объект.Дата);
	СтруктураПараметров.Вставить("ЭтоДокументЗакупки"      , Истина);
	
	// + [Rineco], [Киселев А.] [13.12.2021] 
	// Задача: [№ 21557 ], [#ПТУ для расчета курса]
	Если Не Параметры.Ключ.Пустая() Тогда
		СтруктураПараметров.Вставить("ДокументОснование"      ,Объект.Ссылка);
	КонецЕсли;
	// - [Rineco], [Киселев А.] [13.12.2021]
	
	ПроверитьНаличиеКорректировокИСчетовФактур(Объект.Ссылка, ЕстьКорректировки, ЕстьСчетаФактуры);
	
	СтруктураПараметров.Вставить("ТолькоПросмотр"          , ЕстьКорректировки ИЛИ ЭтаФорма.ТолькоПросмотр);
	
	Если Объект.ПоступлениеПоЗаказам И Не РазрешеноОтклонениеОтУсловийЗакупок() Тогда
		СтруктураПараметров.Вставить("ВалютаДокументаТолькоПросмотр", Истина);
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо") Тогда
		СтруктураПараметров.Вставить("НеПоказыватьРасчеты", Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеВзаиморасчеты", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсДокумента", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

	
КонецПроцедуры

=======
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
