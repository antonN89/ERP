
&НаКлиенте
Процедура Рин1_ПоказатьСвязанныеДокументыПосле(Команда)
	 Если Не Элементы.ТаблицаОстатковРасчетов.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаОстатковРасчетовПоказатьСвязанныеДокументы.Пометка Тогда 	
	 	ЗаполнитьДеревоРасчетов();
		Элементы.ТаблицаОстатковРасчетов.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаОстатковРасчетовПоказатьСвязанныеДокументы.Пометка = Истина;
		Элементы.ТаблицаОстатковРасчетовДерево.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаОстатковРасчетовДеревоПоказатьСвязанныеДокументы.Пометка = Истина;
		Элементы.ТаблицаОстатковРасчетов.Видимость = Ложь;
		Элементы.ТаблицаОстатковРасчетовДерево.Видимость = Истина;
		УстановитьУсловноеОформлениеДерева();
	 Иначе
		Элементы.ТаблицаОстатковРасчетов.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаОстатковРасчетовПоказатьСвязанныеДокументы.Пометка = Ложь;
		Элементы.ТаблицаОстатковРасчетовДерево.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаОстатковРасчетовДеревоПоказатьСвязанныеДокументы.Пометка = Ложь;
		
		Элементы.ТаблицаОстатковРасчетов.Видимость = Истина;
		Элементы.ТаблицаОстатковРасчетовДерево.Видимость = Ложь;
		//ОчиститьДеревоРасчетов();
	 КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРасчетов()
	пДеревоРасчетов = РеквизитФормыВЗначение("ТаблицаОстатковРасчетовДерево");
	
	пВыборкаТаблОстатков = ПолучитьСвязанныеДокументы(РеквизитФормыВЗначение("ТаблицаОстатковРасчетов"));
	пТипЗаказ = Тип("ДокументСсылка.ЗаказКлиента");
	пТипРТУ = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	пТипДоговор = Тип("СправочникСсылка.ДоговорыКонтрагентов");

	Пока пВыборкаТаблОстатков.Следующий() Цикл
		НоваяСтрока = пДеревоРасчетов.Строки.Добавить();   //вершина дерева ОбъектРасчетов
		НоваяСтрока.Заказ = пВыборкаТаблОстатков.Заказ;
		НоваяСтрока.Выбран = пВыборкаТаблОстатков.Выбран;
		НоваяСтрока.Сумма = пВыборкаТаблОстатков.Сумма;
		НоваяСтрока.КОплате = пВыборкаТаблОстатков.КОплате;
		НоваяСтрока.НашДолг = пВыборкаТаблОстатков.НашДолг;
		НоваяСтрока.ДолгПартнера = пВыборкаТаблОстатков.ДолгПартнера;
		НоваяСтрока.ВалютаВзаиморасчетов = пВыборкаТаблОстатков.ВалютаВзаиморасчетов;
		НоваяСтрока.ВалютаДокумента = пВыборкаТаблОстатков.ВалютаДокумента;
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = пВыборкаТаблОстатков.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Партнер = пВыборкаТаблОстатков.Партнер;
		НоваяСтрока.ТипРасчетов = пВыборкаТаблОстатков.ТипРасчетов;
		НоваяСтрока.Контрагент = пВыборкаТаблОстатков.Контрагент;
		НоваяСтрока.Организация = пВыборкаТаблОстатков.Организация;
		НоваяСтрока.ИдентификаторПлатежа = пВыборкаТаблОстатков.ИдентификаторПлатежа;
		НоваяСтрока.Договор = пВыборкаТаблОстатков.Договор;
		НоваяСтрока.ПлатежиПо275ФЗ = пВыборкаТаблОстатков.ПлатежиПо275ФЗ;
		НоваяСтрока.ПросроченоДней = пВыборкаТаблОстатков.ПросроченоДней;
		
		Если ТипЗнч(пВыборкаТаблОстатков.Заказ) = пТипДоговор Тогда
			пВыбЗаказы = пВыборкаТаблОстатков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			Пока пВыбЗаказы.Следующий() Цикл
				подСтрокаЗаказы = НоваяСтрока.Строки.Добавить();
			    подСтрокаЗаказы.Выбран = Ложь;
				подСтрокаЗаказы.Заказ = пВыбЗаказы.ЗаказКлиента;
				
				Если пВыбЗаказы.ЗаказКлиента = пВыбЗаказы.РасчетныйДокумент или пВыбЗаказы.РТУ = пВыбЗаказы.РасчетныйДокумент Тогда
					 подСтрокаЗаказы.ДатаПлановогоПогашения = пВыбЗаказы.ДатаПлановогоПогашения;
					 подСтрокаЗаказы.ПросроченоДней = пВыбЗаказы.ПросроченоДней;
					 подСтрокаЗаказы.ДолгОстатокПоДокументу = пВыбЗаказы.ДолгОстатокПоДокументу;

				КонецЕсли;
				
				пВыборкаРТУ = пВыбЗаказы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока пВыборкаРТУ.Следующий() Цикл
					 Если  пВыборкаРТУ.РТУ = NULL Тогда 
						Прервать;
					 КонецЕсли;
					 подСтрокаРТУ = подСтрокаЗаказы.Строки.Добавить();
					 подСтрокаРТУ.Заказ = пВыборкаРТУ.РТУ;
					 подСтрокаРТУ.Выбран = Ложь;
					 
					 Если пВыборкаРТУ.ЗаказКлиента = пВыборкаРТУ.РасчетныйДокумент или пВыборкаРТУ.РТУ = пВыборкаРТУ.РасчетныйДокумент Тогда
						 подСтрокаРТУ.ДатаПлановогоПогашения = пВыборкаРТУ.ДатаПлановогоПогашения;
						 подСтрокаРТУ.ПросроченоДней = пВыборкаРТУ.ПросроченоДней;
						 подСтрокаРТУ.ДолгОстатокПоДокументу = пВыборкаРТУ.ДолгОстатокПоДокументу;
					КонецЕсли;
					
					 пВыборкаСФ = пВыборкаРТУ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока пВыборкаСФ.Следующий() Цикл 
						  подСтрокаСФ = подСтрокаРТУ.Строки.Добавить();
						  подСтрокаСФ.Заказ = пВыборкаСФ.СФ;
						  подСтрокаСФ.Выбран = Ложь;
					 КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(пВыборкаТаблОстатков.Заказ) = пТипЗаказ Тогда
	        пВыбЗаказы = пВыборкаТаблОстатков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			Если пВыборкаТаблОстатков.ЗаказКлиента = пВыборкаТаблОстатков.РасчетныйДокумент  или пВыборкаТаблОстатков.РТУ = пВыборкаТаблОстатков.РасчетныйДокумент Тогда
						 НоваяСтрока.ДатаПлановогоПогашения = пВыборкаТаблОстатков.ДатаПлановогоПогашения;
						 НоваяСтрока.ПросроченоДней = пВыборкаТаблОстатков.ПросроченоДней;
						 НоваяСтрока.ДолгОстатокПоДокументу = пВыборкаТаблОстатков.ДолгОстатокПоДокументу;
			КонецЕсли;
			Пока пВыбЗаказы.Следующий() Цикл
				пВыборкаРТУ = пВыбЗаказы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока пВыборкаРТУ.Следующий() Цикл
					Если  пВыборкаРТУ.РТУ = NULL Тогда 
						Прервать;
					КонецЕсли;

					 подСтрокаРТУ = НоваяСтрока.Строки.Добавить();
					 подСтрокаРТУ.Заказ = пВыборкаРТУ.РТУ;
					 подСтрокаРТУ.Выбран = Ложь;
					Если пВыборкаРТУ.ЗаказКлиента = пВыборкаРТУ.РасчетныйДокумент или пВыборкаРТУ.РТУ = пВыборкаРТУ.РасчетныйДокумент Тогда
						 подСтрокаРТУ.ДатаПлановогоПогашения = пВыборкаРТУ.ДатаПлановогоПогашения;
						 подСтрокаРТУ.ПросроченоДней = пВыборкаРТУ.ПросроченоДней;
						 подСтрокаРТУ.ДолгОстатокПоДокументу = пВыборкаРТУ.ДолгОстатокПоДокументу;
					КонецЕсли;

					 пВыборкаСФ = пВыборкаРТУ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока пВыборкаСФ.Следующий() Цикл 
						  подСтрокаСФ = подСтрокаРТУ.Строки.Добавить();
						  подСтрокаСФ.Заказ = пВыборкаСФ.СФ;
						  подСтрокаСФ.Выбран = Ложь;
					 КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(пВыборкаТаблОстатков.Заказ) = пТипРТУ Тогда
			Если пВыборкаТаблОстатков.ЗаказКлиента = пВыборкаТаблОстатков.РасчетныйДокумент 
				или пВыборкаТаблОстатков.РТУ = пВыборкаТаблОстатков.РасчетныйДокумент или пВыборкаТаблОстатков.Заказ = пВыборкаТаблОстатков.РасчетныйДокумент Тогда
					НоваяСтрока.ДатаПлановогоПогашения = пВыборкаТаблОстатков.ДатаПлановогоПогашения;
					НоваяСтрока.ПросроченоДней = пВыборкаТаблОстатков.ПросроченоДней;
					НоваяСтрока.ДолгОстатокПоДокументу = пВыборкаТаблОстатков.ДолгОстатокПоДокументу;
			  КонецЕсли;
              пВыбЗаказы = пВыборкаТаблОстатков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			Пока пВыбЗаказы.Следующий() Цикл
				подСтрокаЗаказы = НоваяСтрока.Строки.Добавить();
			    подСтрокаЗаказы.Выбран = Ложь;
				подСтрокаЗаказы.Заказ = пВыбЗаказы.ЗаказКлиента;
				
				пВыборкаРТУ = пВыбЗаказы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока пВыборкаРТУ.Следующий() Цикл
					 //подСтрокаРТУ = подСтрокаЗаказы.Строки.Добавить();
					 //подСтрокаРТУ.Заказ = пВыборкаРТУ.РТУ;
					 //подСтрокаРТУ.Выбран = Ложь;
					 пВыборкаСФ = пВыборкаРТУ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока пВыборкаСФ.Следующий() Цикл 
						  Если  пВыборкаСФ.СФ = NULL Тогда 
								Прервать;
							КонецЕсли;
						  подСтрокаСФ = подСтрокаЗаказы.Строки.Добавить();
						  подСтрокаСФ.Заказ = пВыборкаСФ.СФ;
						  подСтрокаСФ.Выбран = Ложь;
					 КонецЦикла;
				КонецЦикла;
			КонецЦикла;

			
		 КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(пДеревоРасчетов, "ТаблицаОстатковРасчетовДерево");
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСвязанныеДокументы(тзРасчеты)
пЗапрос = Новый Запрос("ВЫБРАТЬ
|	ОстаткиРасчетов.Заказ КАК Заказ,
|	ОстаткиРасчетов.Выбран КАК Выбран,
|	ОстаткиРасчетов.Сумма КАК Сумма,
|	ОстаткиРасчетов.КОплате КАК КОплате,
|	ОстаткиРасчетов.НашДолг КАК НашДолг,
|	ОстаткиРасчетов.ДолгПартнера КАК ДолгПартнера,
|	ОстаткиРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
|	ОстаткиРасчетов.ВалютаДокумента КАК ВалютаДокумента,
|	ОстаткиРасчетов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
|	ОстаткиРасчетов.Партнер КАК Партнер,
|	ОстаткиРасчетов.ТипРасчетов КАК ТипРасчетов,
|	ОстаткиРасчетов.Контрагент КАК Контрагент,
|	ОстаткиРасчетов.Организация КАК Организация,
|	ОстаткиРасчетов.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
|	ОстаткиРасчетов.Договор КАК Договор,
|	ОстаткиРасчетов.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ
|ПОМЕСТИТЬ ТаблицаОстаткиРасчетов
|ИЗ
|	&ОстаткиРасчетов КАК ОстаткиРасчетов
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	РеализацияТоваровУслугВидыЗапасов.Ссылка КАК РТУ,
|	РеализацияТоваровУслугВидыЗапасов.ЗаказКлиента КАК ЗаказКлиентаВРТУ,
|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СФ
|ПОМЕСТИТЬ РТУиСФПоДоговору
|ИЗ
|	ТаблицаОстаткиРасчетов КАК ТаблицаОстаткиРасчетов
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК РеализацияТоваровУслугВидыЗапасов
|		ПО ТаблицаОстаткиРасчетов.Договор = РеализацияТоваровУслугВидыЗапасов.Ссылка.Договор
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
|		ПО (РеализацияТоваровУслугВидыЗапасов.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование)
|
|СГРУППИРОВАТЬ ПО
|	РеализацияТоваровУслугВидыЗапасов.Ссылка,
|	РеализацияТоваровУслугВидыЗапасов.ЗаказКлиента,
|	СчетФактураВыданныйДокументыОснования.Ссылка
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТаблицаОстаткиРасчетов.Заказ КАК Заказ,
|	ЗаказКлиента.Ссылка КАК ЗаказКлиентаПоДоговору
|ПОМЕСТИТЬ ЗаказыКлиетаПоРасчетам
|ИЗ
|	ТаблицаОстаткиРасчетов КАК ТаблицаОстаткиРасчетов
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
|		ПО ТаблицаОстаткиРасчетов.Договор = ЗаказКлиента.Договор
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ЗаказыКлиетаПоРасчетам.ЗаказКлиентаПоДоговору КАК ЗаказКлиента,
|	РТУиСФПоДоговору.РТУ КАК РТУ,
|	ЗаказыКлиетаПоРасчетам.ЗаказКлиентаПоДоговору.Договор КАК Договор,
|	РТУиСФПоДоговору.СФ КАК СФ
|ПОМЕСТИТЬ ЗаказРТУСФ
|ИЗ
|	ЗаказыКлиетаПоРасчетам КАК ЗаказыКлиетаПоРасчетам
|		ЛЕВОЕ СОЕДИНЕНИЕ РТУиСФПоДоговору КАК РТУиСФПоДоговору
|		ПО (РТУиСФПоДоговору.ЗаказКлиентаВРТУ = ЗаказыКлиетаПоРасчетам.ЗаказКлиентаПоДоговору)
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТаблицаОстаткиРасчетов.Заказ КАК Заказ,
|	ЗаказРТУСФ.ЗаказКлиента КАК ЗаказКлиента,
|	ЗаказРТУСФ.РТУ КАК РТУ,
|	ЗаказРТУСФ.СФ КАК СФ,
|	ТаблицаОстаткиРасчетов.Выбран КАК Выбран,
|	ТаблицаОстаткиРасчетов.Сумма КАК Сумма,
|	ТаблицаОстаткиРасчетов.КОплате КАК КОплате,
|	ТаблицаОстаткиРасчетов.НашДолг КАК НашДолг,
|	ТаблицаОстаткиРасчетов.ДолгПартнера КАК ДолгПартнера,
|	ТаблицаОстаткиРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
|	ТаблицаОстаткиРасчетов.ВалютаДокумента КАК ВалютаДокумента,
|	ТаблицаОстаткиРасчетов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
|	ТаблицаОстаткиРасчетов.Партнер КАК Партнер,
|	ТаблицаОстаткиРасчетов.ТипРасчетов КАК ТипРасчетов,
|	ТаблицаОстаткиРасчетов.Контрагент КАК Контрагент,
|	ТаблицаОстаткиРасчетов.Организация КАК Организация,
|	ТаблицаОстаткиРасчетов.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
|	ТаблицаОстаткиРасчетов.Договор КАК Договор,
|	ТаблицаОстаткиРасчетов.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ
|ПОМЕСТИТЬ ТаблицаРасчетовБезСроков
|ИЗ
|	ТаблицаОстаткиРасчетов КАК ТаблицаОстаткиРасчетов
|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказРТУСФ КАК ЗаказРТУСФ
|		ПО (ВЫБОР
|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаОстаткиРасчетов.Заказ) = ТИП(Справочник.ДоговорыКонтрагентов)
|						И ТаблицаОстаткиРасчетов.Заказ = ЗаказРТУСФ.Договор
|					ТОГДА ИСТИНА
|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаОстаткиРасчетов.Заказ) = ТИП(Документ.ЗаказКлиента)
|						И ТаблицаОстаткиРасчетов.Заказ = ЗаказРТУСФ.ЗаказКлиента
|					ТОГДА ИСТИНА
|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаОстаткиРасчетов.Заказ) = ТИП(Документ.РеализацияТоваровУслуг)
|						И ТаблицаОстаткиРасчетов.Заказ = ЗаказРТУСФ.РТУ
|					ТОГДА ИСТИНА
|				ИНАЧЕ ЛОЖЬ
|			КОНЕЦ)
|
|СГРУППИРОВАТЬ ПО
|	ТаблицаОстаткиРасчетов.Заказ,
|	ТаблицаОстаткиРасчетов.Выбран,
|	ТаблицаОстаткиРасчетов.Сумма,
|	ТаблицаОстаткиРасчетов.КОплате,
|	ТаблицаОстаткиРасчетов.НашДолг,
|	ТаблицаОстаткиРасчетов.ДолгПартнера,
|	ТаблицаОстаткиРасчетов.ВалютаВзаиморасчетов,
|	ТаблицаОстаткиРасчетов.ВалютаДокумента,
|	ТаблицаОстаткиРасчетов.СтатьяДвиженияДенежныхСредств,
|	ТаблицаОстаткиРасчетов.Партнер,
|	ТаблицаОстаткиРасчетов.ТипРасчетов,
|	ТаблицаОстаткиРасчетов.Контрагент,
|	ТаблицаОстаткиРасчетов.Организация,
|	ТаблицаОстаткиРасчетов.ИдентификаторПлатежа,
|	ТаблицаОстаткиРасчетов.Договор,
|	ТаблицаОстаткиРасчетов.ПлатежиПо275ФЗ,
|	ЗаказРТУСФ.ЗаказКлиента,
|	ЗаказРТУСФ.РТУ,
|	ЗаказРТУСФ.СФ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТаблицаРасчетовБезСроков.Заказ КАК Заказ,
|	ТаблицаРасчетовБезСроков.ЗаказКлиента КАК ЗаказКлиента,
|	ТаблицаРасчетовБезСроков.РТУ КАК РТУ,
|	ТаблицаРасчетовБезСроков.СФ КАК СФ,
|	ТаблицаРасчетовБезСроков.Выбран КАК Выбран,
|	ТаблицаРасчетовБезСроков.Сумма КАК Сумма,
|	ТаблицаРасчетовБезСроков.КОплате КАК КОплате,
|	ТаблицаРасчетовБезСроков.НашДолг КАК НашДолг,
|	ТаблицаРасчетовБезСроков.ДолгПартнера КАК ДолгПартнера,
|	ТаблицаРасчетовБезСроков.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
|	ТаблицаРасчетовБезСроков.ВалютаДокумента КАК ВалютаДокумента,
|	ТаблицаРасчетовБезСроков.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
|	ТаблицаРасчетовБезСроков.Партнер КАК Партнер,
|	ТаблицаРасчетовБезСроков.ТипРасчетов КАК ТипРасчетов,
|	ТаблицаРасчетовБезСроков.Контрагент КАК Контрагент,
|	ТаблицаРасчетовБезСроков.Организация КАК Организация,
|	ТаблицаРасчетовБезСроков.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
|	ТаблицаРасчетовБезСроков.Договор КАК Договор,
|	ТаблицаРасчетовБезСроков.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ,
|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток, 0) КАК ДолгОстатокПоДокументу,
|	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
|	ВЫБОР
|		КОГДА ЕСТЬNULL(РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения, 0) = 0
|			ТОГДА 0
|		ИНАЧЕ РАЗНОСТЬДАТ(РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения, &ТекущаяДата, ДЕНЬ)
|	КОНЕЦ КАК ПросроченоДней,
|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК РасчетныйДокумент
|ИЗ
|	ТаблицаРасчетовБезСроков КАК ТаблицаРасчетовБезСроков
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам.Контрагент = &Контрагент) КАК РасчетыСКлиентамиПоСрокамОстатки
|		ПО (ТаблицаРасчетовБезСроков.Заказ = РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов)
|			И (РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент = ТаблицаРасчетовБезСроков.Заказ
|				ИЛИ РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент = ТаблицаРасчетовБезСроков.ЗаказКлиента
|				ИЛИ РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент = ТаблицаРасчетовБезСроков.РТУ)
|ИТОГИ
|	МИНИМУМ(Выбран),
|	МИНИМУМ(Сумма),
|	МИНИМУМ(КОплате),
|	МИНИМУМ(НашДолг),
|	МИНИМУМ(ДолгПартнера),
|	МИНИМУМ(ВалютаВзаиморасчетов),
|	МИНИМУМ(ВалютаДокумента),
|	МИНИМУМ(СтатьяДвиженияДенежныхСредств),
|	МИНИМУМ(Партнер),
|	МИНИМУМ(ТипРасчетов),
|	МИНИМУМ(Контрагент),
|	МИНИМУМ(Организация),
|	МИНИМУМ(ИдентификаторПлатежа),
|	МИНИМУМ(Договор),
|	МИНИМУМ(ПлатежиПо275ФЗ),
|	МИНИМУМ(ДолгОстатокПоДокументу),
|	МАКСИМУМ(ДатаПлановогоПогашения),
|	МАКСИМУМ(ПросроченоДней),
|	МАКСИМУМ(РасчетныйДокумент)
|ПО
|	Заказ,
|	ЗаказКлиента,
|	РТУ");	
    пЗапрос.УстановитьПараметр("ОстаткиРасчетов",тзРасчеты);
	пЗапрос.УстановитьПараметр("Контрагент",ЭтотОбъект.Контрагент);
	пЗапрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());

	
	пВыборка = пЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    Возврат пВыборка;
КонецФункции


&НаКлиенте
Процедура Рин1_ТаблицаОстатковРасчетовДеревоВыбранПриИзмененииПосле(Элемент)
	Если ТекущийЭлемент.ТекущиеДанные.Выбран Тогда
		пРодитель = ТаблицаОстатковРасчетовДерево.НайтиПоИдентификатору(Элементы.ТаблицаОстатковРасчетовДерево.ТекущаяСтрока).ПолучитьРодителя();
		Если пРодитель <> Неопределено Тогда 
			пРодительВерхнегоУровня = ТаблицаОстатковРасчетовДерево.НайтиПоИдентификатору(пРодитель.ПолучитьИдентификатор()).ПолучитьРодителя();
			Если пРодительВерхнегоУровня = Неопределено Тогда 
				пРодитель.Выбран = Истина;
			Иначе
				пРодительВерхнегоУровня.Выбран = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		 пРодитель = ТаблицаОстатковРасчетовДерево.НайтиПоИдентификатору(Элементы.ТаблицаОстатковРасчетовДерево.ТекущаяСтрока).ПолучитьРодителя();
		 Если пРодитель = Неопределено Тогда
			 пРодитель = ТаблицаОстатковРасчетовДерево.НайтиПоИдентификатору(Элементы.ТаблицаОстатковРасчетовДерево.ТекущаяСтрока);
			 пДочернийУровень1 = пРодитель.ПолучитьЭлементы();
			 Если пДочернийУровень1.Количество() > 0 Тогда 
				 Для Каждого Стр из пДочернийУровень1 Цикл
					 Стр.Выбран = Ложь;
					 пДочернийУровень2 = Стр.ПолучитьЭлементы();
					 
					 Если пДочернийУровень2.Количество() > 0 Тогда 
						 Для Каждого СтрУровень2 из пДочернийУровень2 Цикл 
							 СтрУровень2.Выбран = Ложь;
						 КонецЦикла;
					 КонецЕсли;
					 
				 КонецЦикла;
			 КонецЕсли;
		 КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура Рин1_ПеренестиВДокументПеред(Команда)
	ПеренестиОбъектыРасчетовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПеренестиОбъектыРасчетовНаСервере()
	 пДерево = РеквизитФормыВЗначение("ТаблицаОстатковРасчетовДерево");
	 Если пДерево.Строки.Количество() > 0 Тогда
	        Таблица = Новый ТаблицаЗначений;
	       Для Каждого Колонка Из пДерево.Колонки Цикл
	            Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	       КонецЦикла;
		   Для Каждого СтрокаДерева Из пДерево.Строки Цикл
		        ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
		   КонецЦикла;
		 ЗначениеВРеквизитФормы(Таблица,"ТаблицаОстатковРасчетов");
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура РассчитатьСуммуПлатежейДерево()
	 пДерево = РеквизитФормыВЗначение("ТаблицаОстатковРасчетовДерево");
	СуммаПлатежей = 0;
 	Для Каждого СтрокаДерева Из пДерево.Строки Цикл		
		Если СтрокаДерева.Выбран Тогда
			СуммаПлатежей = СуммаПлатежей + СтрокаДерева.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ИсключитьВыделенныеПлатежиДеревоПосле(Команда)
	МассивСтрок = Элементы.ТаблицаОстатковРасчетовДерево.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ТаблицаОстатковРасчетовДерево.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	РассчитатьСуммуПлатежейДерево();

КонецПроцедуры


	
&НаКлиенте
Процедура Рин1_ВыбратьПлатежиДеревоПосле(Команда)
		
	МассивСтрок = Элементы.ТаблицаОстатковРасчетовДерево.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ТаблицаОстатковРасчетовДерево.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	РассчитатьСуммуПлатежейДерево();

КонецПроцедуры

&НаКлиенте
Процедура Рин1_ВыбратьВыделенныеПлатежиДеревоПосле(Команда)
	УстановитьСнятьОтметку(Истина);
	РассчитатьСуммуПлатежейДерево();
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьОтметку(пОтметка)
	пДерево = РеквизитФормыВЗначение("ТаблицаОстатковРасчетовДерево");
	Для Каждого СтрокаДерева Из пДерево.Строки Цикл	
		СтрокаДерева.Выбран = пОтметка;
	КонецЦикла;
    ЗначениеВРеквизитФормы(пДерево,"ТаблицаОстатковРасчетовДерево");
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ИсключитьПлатежиДеревоПосле(Команда)
	УстановитьСнятьОтметку(Ложь);
	РассчитатьСуммуПлатежейДерево();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДерева()

	//УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковРасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетовДерево.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.RosyBrown);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковРасчетовДеревоИдентификаторПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетовДерево.ИдентификаторПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СокрЛП(ИдентификаторПлатежа);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетовДерево.ИдентификаторПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	
КонецПроцедуры




