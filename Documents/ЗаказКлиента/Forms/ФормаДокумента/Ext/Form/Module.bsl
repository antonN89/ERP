&НаКлиенте
Перем НоменклатураДоИзменения;

// + [Rineco], [Киселев А.] [30.07.2021] 
// Задача: [№ 13619], [#Отслеживание изменения статуса]
&НаКлиенте
Перем СтатусИзменилсяКВыполнению;
&НаКлиенте
Перем ПредыдущееЗначениеСтатуса;
// - [Rineco], [Киселев А.] [30.07.2021]



// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьСтатусВСсылке()
	
	Возврат Объект.Ссылка.Статус;	
	
КонецФункции // ()

&НаКлиенте
Процедура Рин1_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
			
	Если не Объект.Ссылка.Пустая() и Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") Тогда
		
		//проверим есть ли расхождения между тем что записано в БД и сейчас (ТЧ ТОВАРЫ) 		
		СтруктураВозврата = ПередЗаписьюПроверкаНаРасхождения();
		
		СтруктураВозврата.Свойство("Отказ",Отказ);	
		
		//Откроем форму для решения разногласий и там сравним по условию всё - кто знает что еще придумают!
		Если Отказ Тогда
			Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект, ПараметрыЗаписи);
			ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаСопоставления",СтруктураВозврата,ЭтаФорма,,,,Оп,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;	
		
	КонецЕсли;
	
	// + [Rineco], [Киселев А.] [29.07.2021] 
	// Задача: [№ 13619], [#Заполняем желаемую дату отгрузки]
	РИНЭКО_ЗаполнениеЖелаемойДатыОтгрузки(ПараметрыЗаписи);

	// - [Rineco], [Киселев А.] [29.07.2021]
	
	
	//{Гига suv 15.01.2018 СхемыОбеспеченияДляЗаказов
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И Объект.Ссылка.Пустая()
		И ГИГ_ОбеспечениеСервер.ЕстьСхемыДляПеремещения(Объект) И Не ГИГ_ЗаписьРазрешена Тогда
		
		Отказ = Истина;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГИГ_ПередЗаписьюВместоЗавершение", ЭтаФорма, Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)), 
		"Внимание! В табличной части обнаружены схемы обеспечения для перемещения. 
		|При проведении документа, по этим схемам будут сделаны заказы на перемещение,
		|с обособленным обеспечением, при этом редактирование данного заказа будет доступно 
		|только пользователям со специальными правами. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Возврат;
	КонецЕсли;
	//Гига suv 15.01.2018}
	
	///<-- Гигабайт (Чернов А.С.): КратностьПартии
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ГИГ_КратностьПартииВызовСервера.НужноКонтролироватьКратностьПартии() Тогда
		
		ЕстьНеКратнаяПартия = Ложь;
		
		Для каждого СтрокаСводно Из ГИГ_ТоварыСводно Цикл
			Если СтрокаСводно.КоличествоНеКратно и не СтрокаСводно.Рин1_КонтрольКратностиПройден Тогда
				
				Если ГИГ_ПоказатьТоварыСводно Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ГИГ_КратностьПартииКлиентСервер.ПолучитьТекстОстаткиКратностьПартии(СтрокаСводно);
					Сообщение.Поле = "ГИГ_ТоварыСводно[" + Формат(ГИГ_ТоварыСводно.Индекс(СтрокаСводно), "ЧГ=0") + "].Количество";
					Сообщение.Сообщить();
					
				Иначе 
					
					Отбор = Новый Структура("Номенклатура",СтрокаСводно.Номенклатура);
					Массив = Объект.Товары.НайтиСтроки(Отбор);
					Если Массив.Количество() > 0 Тогда
						Для каждого СтрокаМассива Из Массив Цикл
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ГИГ_КратностьПартииКлиентСервер.ПолучитьТекстОстаткиКратностьПартии(СтрокаСводно);
							Сообщение.Поле = "Объект.Товары[" + Формат(Объект.Товары.Индекс(СтрокаМассива), "ЧГ=0") + "].КоличествоУпаковок";
							Сообщение.УстановитьДанные(Объект);
							Сообщение.Сообщить(); 
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;				
				
				ЕстьНеКратнаяПартия = Истина;
				
			КонецЕсли; 
		КонецЦикла; 
		
		Если ЕстьНеКратнаяПартия Тогда
			Отказ = Истина;
			ОтобратьКоличествоНеКратноНаКлиенте(Истина);
			Возврат;
		Иначе 
			
			Для каждого СтрокаСводно Из ГИГ_ТоварыСводно Цикл
				Если не СтрокаСводно.Рин1_КонтрольКратностиПройден Тогда
					УстановитьКонтроль(СтрокаСводно.Номенклатура,Истина);
				КонецЕсли; 
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	///--> Гигабайт (Чернов А.С.)
	
	//++Гольм А.А. (Гигабайт)
	Объект.СкидкиРассчитаны = Истина;
	//--Гольм А.А. (Гигабайт)
	
	//bercut160320
	Если не ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПроверитьДляВалютногоДокументаСуществованиеКурсаНаТекущуюДату();
	КонецЕсли;	
	//
	
//{{20201214 ГлазуновДВ Перенесли из Рин1_ПослеЗаписиПосле1(...)
	Если Модифицированность И Объект.Проведен И Не Отказ Тогда
		МодификацияОЕМ(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
//}}20201214 ГлазуновДВ	
КонецПроцедуры


&НаСервере
Функция ЕстьОшибкиЗаполнения()
	
	СтруктураВозврата = Новый Структура;
	Отказ = Ложь;
	
	ТЗ_Товары = Объект.Товары.Выгрузить(Новый Структура("Отменено",ложь),"Артикул,Количество,КоличествоУпаковок,Номенклатура,НомерСтроки,ПроцентАвтоматическойСкидки,"+
	           "ПроцентРучнойСкидки,СтавкаНДС,Сумма,СуммаАвтоматическойСкидки,СуммаНДС,СуммаРучнойСкидки,СуммаСНДС,Цена,ЦенаСоСкидкой,Упаковка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_Товары.НомерСтроки КАК НомерСтроки,
		|	ТЗ_Товары.Номенклатура КАК Номенклатура,
		|	ТЗ_Товары.Артикул КАК Артикул,
		|	ТЗ_Товары.Количество КАК Количество,
		|	ТЗ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТЗ_Товары.Цена КАК Цена,
		|	ТЗ_Товары.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
		|	ТЗ_Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ТЗ_Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ТЗ_Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ТЗ_Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ТЗ_Товары.Сумма КАК Сумма,
		|	ТЗ_Товары.СтавкаНДС КАК СтавкаНДС,
		|	ТЗ_Товары.СуммаНДС КАК СуммаНДС,
		|	ТЗ_Товары.СуммаСНДС КАК СуммаСНДС,
		|	ТЗ_Товары.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТЗ_Товары КАК ТЗ_Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Артикул КАК Артикул,
		|	ВТ_Товары.Количество КАК Количество,
		|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ВТ_Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.пустаяссылка)
		|			ТОГДА ВТ_Товары.Количество
		|		ИНАЧЕ ВТ_Товары.КоличествоУпаковок * УпаковкиЕдиницыИзмерения.Числитель
		|	КОНЕЦ КАК КоличествоУпаковок1,
		|	ВТ_Товары.Цена КАК Цена,
		|	ВТ_Товары.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
		|	ВТ_Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ВТ_Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ВТ_Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ВЫРАЗИТЬ(ВТ_Товары.Цена * ВТ_Товары.КоличествоУпаковок - ВТ_Товары.Сумма - ВТ_Товары.СуммаАвтоматическойСкидки КАК ЧИСЛО(15, 2)) КАК СуммаРучнойСкидки1,
		|	ВТ_Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ВТ_Товары.Сумма КАК Сумма,
		|	ВЫРАЗИТЬ(ВТ_Товары.ЦенаСоСкидкой * ВТ_Товары.КоличествоУпаковок КАК ЧИСЛО(15, 2)) КАК Сумма1,
		|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Товары.СуммаНДС КАК СуммаНДС,
		|	ВТ_Товары.СуммаСНДС КАК СуммаСНДС,
		|	ВТ_Товары.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ВТ_Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.пустаяссылка)
		|			ТОГДА Спр_Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ВТ_Товары.Упаковка
		|	КОНЕЦ КАК ЕИ,
		|	ВЫБОР
		|		КОГДА &ЦенаВключаетНДС
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_Товары.Сумма = ВТ_Товары.СуммаСНДС
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_Товары.Сумма + ВТ_Товары.СуммаНДС = ВТ_Товары.СуммаСНДС
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаСНДС_ПосчитанаНеВерно_Булево
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Спр_Номенклатура
		|		ПО ВТ_Товары.Номенклатура = Спр_Номенклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО ВТ_Товары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка";
	
	Запрос.УстановитьПараметр("ТЗ_Товары", ТЗ_Товары);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", Объект.Соглашение.ЦенаВключаетНДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить();
//{{20200902 ГлазуновДВ меняем вывод результата по ошибкам
	РезультатОшибки = РезультатЗапроса.Выгрузить();
	РезультатОшибки.Очистить();
	ОтказСтроки = Ложь;
//}}20200902 ГлазуновДВ

	ПорядокРасчетовПоНакладным = Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	Для каждого Строка Из Результат Цикл
		
		    //1.
		Если не ПорядокРасчетовПоНакладным и не Строка.Сумма = Строка.Сумма1 Тогда
			Отказ = Истина;
			ОтказСтроки = Истина;
			//2.
		ИначеЕсли не Строка.СуммаРучнойСкидки = Строка.СуммаРучнойСкидки1 Тогда
			Отказ = Истина;
			ОтказСтроки = Истина;
			//3.
		ИначеЕсли Строка.СуммаСНДС_ПосчитанаНеВерно_Булево Тогда
			Отказ = Истина;
			ОтказСтроки = Истина;
			//4.
		ИначеЕсли не Строка.Количество = Строка.КоличествоУпаковок1 Тогда
			Отказ = Истина;
			ОтказСтроки = Истина;
		КонецЕсли;
		
		Если ОтказСтроки Тогда
//Исходное			Прервать;
		//{{20200902 ГлазуновДВ меняем вывод результата по ошибкам
			НоваяСтрокаОшибки = РезультатОшибки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОшибки, Строка);
			ОтказСтроки = Ложь;
		//}}20200902 ГлазуновДВ
		КонецЕсли;
		
	КонецЦикла;
	
//Исходное	АдресВХранилище = ПоместитьВоВременноеХранилище(Результат);
//{{20200902 ГлазуновДВ меняем вывод результата по ошибкам
	АдресВХранилище = ПоместитьВоВременноеХранилище(РезультатОшибки);
//}}20200902 ГлазуновДВ
	СуммаСНДС = ТЗ_Товары.Итог("СуммаСНДС");
	
	//сказано сумму получить так
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	СуммаДокумента = ОбъектДокумент.ПолучитьСуммуЗаказанныхСтрок();
	
	СуммаКОплате = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
	
	СтруктураВозврата.Вставить("СуммаСНДС",СуммаСНДС);
	СтруктураВозврата.Вставить("СуммаДокумента",СуммаДокумента);
	СтруктураВозврата.Вставить("СуммаКОплате",СуммаКОплате);
	СтруктураВозврата.Вставить("АдресВХранилище",АдресВХранилище);
	СтруктураВозврата.Вставить("ПорядокРасчетовПоНакладным",ПорядокРасчетовПоНакладным);
	
	Если не Отказ Тогда	
		Если ПорядокРасчетовПоНакладным Тогда
			Если не СуммаСНДС = СуммаДокумента  Тогда
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если не СуммаСНДС = СуммаДокумента или не СуммаДокумента = СуммаКОплате  Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Отказ",Отказ);
	СтруктураВозврата.Вставить("Ссылка",Объект.Ссылка);
	
	Возврат СтруктураВозврата;
	
КонецФункции // ЕстьОшибкиЗаполнения()

&НаСервере
Процедура ПроверитьДляВалютногоДокументаСуществованиеКурсаНаТекущуюДату()
	
	Если не Объект.Валюта.Код = "643" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Период КАК ДатаКурса
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(
		|			,
		|			Валюта = &Валюта
		|				И Период = &ДатаКурса) КАК КурсыВалютСрезПоследних";
		
		Запрос.УстановитьПараметр("ДатаКурса", Объект.Дата);
		Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначения.СообщитьПользователю("Полученные курсовые данные по валюте " + Строка(Объект.Валюта) + ", не актуальны (не загруженны) в систему на дату документа. Расчет может быть не верным!");
		КонецЕсли;
		//
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьДляВалютногоДокументаСуществованиеКурсаНаТекущуюДату()

&НаСервере
Процедура УстановитьКонтроль(Номенклатура,Контроль)
	
	Отбор = Новый Структура("Номенклатура",Номенклатура);
	Массив = Объект.Товары.НайтиСтроки(Отбор);
	Если Массив.Количество() > 0 Тогда
		Для каждого СтрокаМассива Из Массив Цикл
			СтрокаМассива.Рин1_КонтрольКратностиПройден = Контроль;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьКонтроль()

&НаСервере
Процедура ВыполнитьПослеОкончания(РезультатЗакрытия,ДополнительныеПараметры) Экспорт 
	
	Если не РезультатЗакрытия = Неопределено Тогда
		
		ТЗ_ДополнительныеСтроки = ПолучитьИзВременногоХранилища(РезультатЗакрытия);
		
		СтруктураДействий = Новый Структура;
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		Для каждого Стр Из ТЗ_ДополнительныеСтроки Цикл
			НовСтр = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);
			НовСтр.КоличествоУпаковок = Стр.Количество;
			
			Отбор = Новый Структура("Номенклатура",Стр.Номенклатура);
			Массив = Объект.Ссылка.Товары.НайтиСтроки(Отбор);
			Для каждого Элемент Из Массив Цикл
				Если Элемент.Цена > 0 Тогда
					ЗаполнитьЗначенияСвойств(НовСтр,Элемент,,"Количество,КоличествоУпаковок,КодСтроки,ПричинаОтмены");
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НовСтр, СтруктураДействий, КэшированныеЗначения);
			НовСтр.Отменено = Истина;
		КонецЦикла;
	   
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередЗаписьюПроверкаНаРасхождения()
	
	Отказ = Ложь;
	
	Адрес_ТЗ_ТекущиеРасхождения = "";
	Адрес_ТЗ_РасхожденияДляОтображения = "";
	
	//ТекущиеДанные
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЗаказКлиентаТовары.Упаковка.Числитель > 0
	|			ТОГДА ЗаказКлиентаТовары.КоличествоУпаковок * ЗаказКлиентаТовары.Упаковка.Числитель
	|		ИНАЧЕ ЗаказКлиентаТовары.КоличествоУпаковок
	|	КОНЕЦ КАК Количество,
	|	ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ_СсылкаТовары = РезультатЗапроса.Выгрузить();
	ТЗ_СсылкаТовары.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения","Количество");
	ТЗ_СсылкаТовары.Сортировать("Номенклатура,Характеристика,ЕдиницаИзмерения,Количество");	
	
	ТЗ_ТекущиеТовары = Объект.Товары.Выгрузить(,"Номенклатура,Характеристика,Количество,Упаковка");
	ТЗ_ТекущиеТовары.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения")); //в товарах нет единицы измерения из номенклатуры
	Для каждого Стр Из ТЗ_ТекущиеТовары Цикл
		Стр.ЕдиницаИзмерения = Стр.Номенклатура.ЕдиницаИзмерения;
	КонецЦикла;
	ТЗ_ТекущиеТовары.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения","Количество");
	ТЗ_ТекущиеТовары.Сортировать("Номенклатура,Характеристика,ЕдиницаИзмерения,Количество");
	
	ТЗ_Расхождений = ТаблицыНаборовЗаписейНеОтвечаютУсловию(ТЗ_СсылкаТовары, ТЗ_ТекущиеТовары);
	//
	
	//ДанныеДляОтображения
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЗаказКлиентаТовары.Упаковка.Числитель > 0
	|			ТОГДА ЗаказКлиентаТовары.КоличествоУпаковок * ЗаказКлиентаТовары.Упаковка.Числитель
	|		ИНАЧЕ ЗаказКлиентаТовары.КоличествоУпаковок
	|	КОНЕЦ КАК Количество,
	|	ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ_СсылкаТовары = РезультатЗапроса.Выгрузить();
	ТЗ_СсылкаТовары.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения","Количество");
	ТЗ_СсылкаТовары.Сортировать("Номенклатура,Характеристика,ЕдиницаИзмерения,Количество");	
	
	ТЗ_ТекущиеТовары = Объект.Товары.Выгрузить(Новый Структура("Отменено",Ложь),"Номенклатура,Характеристика,Количество");
	ТЗ_ТекущиеТовары.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения")); //в товарах нет единицы измерения из номенклатуры
	Для каждого Стр Из ТЗ_ТекущиеТовары Цикл
		Стр.ЕдиницаИзмерения = Стр.Номенклатура.ЕдиницаИзмерения;
	КонецЦикла;
	ТЗ_ТекущиеТовары.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения","Количество");
	ТЗ_ТекущиеТовары.Сортировать("Номенклатура,Характеристика,ЕдиницаИзмерения,Количество");
	
	ТЗ_РасхожденийОтображение = ТаблицыНаборовЗаписейНеОтвечаютУсловию(ТЗ_СсылкаТовары, ТЗ_ТекущиеТовары);
	//

	СтруктураВозврата = Новый Структура;
	
	Если не ТЗ_Расхождений = Неопределено Тогда
	    СтруктураВозврата.Вставить("Отказ",Истина);
		СтруктураВозврата.Вставить("Адрес_ТЗ_ТекущиеРасхождения",ПоместитьВоВременноеХранилище(ТЗ_Расхождений));
		СтруктураВозврата.Вставить("Адрес_ТЗ_РасхожденияДляОтображения",ПоместитьВоВременноеХранилище(ТЗ_РасхожденийОтображение));
	Иначе 
		СтруктураВозврата.Вставить("Отказ",Ложь);
	КонецЕсли;
			
	Возврат(СтруктураВозврата);
	
КонецФункции

&НаСервере
Функция ТаблицыНаборовЗаписейНеОтвечаютУсловию(ТаблицаЗначений1, ТаблицаЗначений2)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СсылкаТовары.Номенклатура КАК Номенклатура,
		|	СсылкаТовары.Количество КАК Количество,
		|	СсылкаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СсылкаТовары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_СсылкаТовары
		|ИЗ
		|	&СсылкаТовары КАК СсылкаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеТовары.Номенклатура КАК Номенклатура,
		|	ТекущиеТовары.Количество КАК Количество,
		|	ТекущиеТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТекущиеТовары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ТекущиеТовары
		|ИЗ
		|	&ТекущиеТовары КАК ТекущиеТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СсылкаТовары.Номенклатура КАК Номенклатура,
		|	ВТ_СсылкаТовары.Характеристика КАК Характеристика,
		|	ВТ_СсылкаТовары.Количество КАК Количество_С,
		|	ВТ_СсылкаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения_С,
		|	ВТ_ТекущиеТовары.Количество КАК Количество_Т,
		|	ВТ_ТекущиеТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения_Т,
		|	ВЫБОР
		|		КОГДА ВТ_ТекущиеТовары.Количество - ВТ_СсылкаТовары.Количество < 0
		|			ТОГДА ВТ_ТекущиеТовары.Количество - ВТ_СсылкаТовары.Количество
		|		КОГДА ВТ_ТекущиеТовары.Количество ЕСТЬ NULL
		|			ТОГДА ВТ_СсылкаТовары.Количество * -1
		|	КОНЕЦ КАК Разность
		|ИЗ
		|	ВТ_СсылкаТовары КАК ВТ_СсылкаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеТовары КАК ВТ_ТекущиеТовары
		|		ПО ВТ_СсылкаТовары.Номенклатура = ВТ_ТекущиеТовары.Номенклатура
		|			И ВТ_СсылкаТовары.Характеристика = ВТ_ТекущиеТовары.Характеристика
		|ГДЕ
		|	(ВТ_ТекущиеТовары.Количество - ВТ_СсылкаТовары.Количество < 0
		|			ИЛИ ВТ_ТекущиеТовары.Количество ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("СсылкаТовары",ТаблицаЗначений1);
	Запрос.УстановитьПараметр("ТекущиеТовары",ТаблицаЗначений2);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ТаблицыНаборовЗаписейРавны()

&НаСервере
&Вместо("ДополнитьДоПолногоНабора")
Функция Рин1_ДополнитьДоПолногоНабора()
	
	ТабличнаяЧасть = Объект.Товары;
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	МассивСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(ТабличнаяЧасть, МассивСтрок);
	
	Результат = Новый Массив;
	Для Каждого СтрокаТЧ Из МассивСтрок Цикл
		//{Гига suv 14.02.2018 СхемыОбеспеченияДляЗаказов ЗапрещенныеСтроки определена в расширении
		Если НЕ ГИГ_ЗапрещенныеСтроки.НайтиПоЗначению(СтрокаТЧ.КодСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//Гига suv 14.02.2018}
		Результат.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДоступноКоличествоБезОграничений(Данные)
	
	Возврат (Данные.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется Или Данные.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно)
	И (Данные.ЗакупкаСПроизводства Или Не ЗначениеЗаполнено(Данные.СхемаОбеспечения));
	
КонецФункции

&НаСервере
&Вместо("ЗаполнитьОбеспечениеВУстановленномПорядке")
Функция Рин1_ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение)
	
	//bercut060320
	Если ВыбранноеЗначение.Свойство("ОбработатьВсюТЧ") Тогда
		Элементы.Товары.ВыделенныеСтроки.Очистить();
		Для каждого стр из Объект.Товары Цикл
			Элементы.Товары.ВыделенныеСтроки.Добавить(стр.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	//
//{{20200904 ГлазуновДВ убрали из обработки обособленные строки, оставляем их для ручной обработки, кроме операции "отгрузить обособленно".
	//Сортировка выделенных строк
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Элементы.Товары.ВыделенныеСтроки);
	Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Элементы.Товары.ВыделенныеСтроки.Очистить();
	Для Каждого Стр Из Список Цикл
		Элементы.Товары.ВыделенныеСтроки.Добавить(Стр.Значение);
	КонецЦикла;
	
	СтрИндекс = 0;
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 1 Тогда
		СтрОбъекта = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ВыделенныеСтроки[СтрИндекс]);
	//{{20200713 ГлазуновДВ
		Если СтрОбъекта = Неопределено Или СтрОбъекта.Отменено  Тогда
			Возврат Новый Структура("Ошибки, Оповещение", Неопределено, "Для Отмененных строк заполнять обеспечение нельзя");;
		КонецЕсли; 
	//}}20200713 ГлазуновДВ
		//Если ТекущаяСтрока.ГИГ_НазначениеУстановлено Тогда
		//	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, "Для строк с ОЕМ потребностью заполнить обеспечение нельзя");
		//КонецЕсли;
		//bercut280220 нельзя обрабатывать строки у которых зафиксирован код строки в тч есть уже реализации
		//Если СтрОбъекта.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.Отгрузить
		//	Или СтрОбъекта.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
		Если СтрОбъекта.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			Возврат Новый Структура("Ошибки, Оповещение", Неопределено, "Для строк с действием `отгрузить` заполнять обеспечение нельзя");			
		КонецЕсли;
	КонецЕсли;

	СтрИндекс = 0;
	СтрОбъектаУдалить = Ложь;
	Пока СтрИндекс < Элементы.Товары.ВыделенныеСтроки.Количество() Цикл
		СтрОбъекта = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ВыделенныеСтроки[СтрИндекс]);
		
	//{{20200713 ГлазуновДВ было отключено - вернули
		Если СтрОбъекта = Неопределено Или СтрОбъекта.Отменено  Тогда // или Строка.ГИГ_НазначениеУстановлено
			СтрОбъектаУдалить = Истина;
		КонецЕсли; 
	//}}20200713 ГлазуновДВ

		//Если СтрОбъекта.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.Отгрузить 
			//Или СтрОбъекта.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
		Если СтрОбъекта.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			СтрОбъектаУдалить = Истина;
		КонецЕсли; 
		
		Если НЕ ГИГ_ЗапрещенныеСтроки.НайтиПоЗначению(СтрОбъекта.КодСтроки) = Неопределено Тогда
			СтрОбъектаУдалить = Истина;
		КонецЕсли;
		
		Если СтрОбъектаУдалить Тогда 
			Элементы.Товары.ВыделенныеСтроки.Удалить(СтрИндекс);
			СтрИндекс = СтрИндекс - 1;
			СтрОбъектаУдалить = Ложь;
		КонецЕсли;
		СтрИндекс = СтрИндекс + 1;
	КонецЦикла;
	
//Выставим Параметр ИзменятьОбособление = Ложь, тогда при отработки строк не будет переводить в "Отгрузить", а только "отгрузить обособленно"
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Ложь, Ложь);
//}}20200904 ГлазуновДВ
	
//Исходное	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	ПутиКДанным = Новый Соответствие; //Описание особенностей формы
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки"); // дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	ПараметрыДокумента.Вставить("ГруппаСкладов", Объект.Склад);
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыКлиентов);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);

	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		Элементы.Товары.ВыделенныеСтроки,
		Объект,
		Объект.Товары,
		ПараметрыЗаполнения,
		ПараметрыДокумента);
	
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура(
		"Ошибки",
		ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
		Таблица, "Товары", НСтр("ru = 'Товары'")));
	КонецЕсли;

//Код от Гиг	
//Исходное	СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив,"Номенклатура, Характеристика, ИсходныйНомерСтроки");
	СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив,"Номенклатура, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки, ДатаОтгрузки, Характеристика, ИсходныйНомерСтроки");
	
//{{20200922 ГлазуновДВ Передаем для подбора схемы по одной Строке из "Таблица"
	// Таблица невыделенных строк табличной части.
	ТаблицаВыделенныеСтроки = ВыделенныеСтрокиВТаблицу(Объект.Товары, Элементы.Товары.ВыделенныеСтроки, Объект, ПараметрыДокумента.ПутиКДанным);
	
	Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = 0;
		//ЗаполнитьЗначенияСвойств(ОтборОформлено.Добавить(), ВыделеннаяСтрока);
	КонецЦикла;
	
	// Таблица невыделенных строк табличной части.
	ТаблицаНевыделенныеСтроки = ОбеспечениеСервер.СтрокиВТаблицу(Объект.Товары, Объект, ПараметрыДокумента.ПутиКДанным);
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("ГИГ_СхемаОбеспечения");
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("ГИГ_СрокПоставки");
	Для Каждого ВыделеннаяСтрока Из ТаблицаНевыделенныеСтроки Цикл
		Строка = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		ВыделеннаяСтрока.ГИГ_СхемаОбеспечения = Строка.ГИГ_СхемаОбеспечения;
		ВыделеннаяСтрока.ГИГ_СрокПоставки = Строка.ГИГ_СрокПоставки;
	КонецЦикла;
	
	Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = ВыделеннаяСтрока.Количество;
	КонецЦикла;
	
	ТаблицаКРаспределению = ТаблицаНевыделенныеСтроки.Скопировать(,"Идентификатор, Номенклатура, Количество, ВариантОбеспечения, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки");
	ТаблицаКРаспределению.Очистить();
	Для Каждого Строка Из ТаблицаНевыделенныеСтроки Цикл
		Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется 
			И Строка.ГИГ_СхемаОбеспечения <> Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда
						
			НоваяСтрока = ТаблицаКРаспределению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;		
	КонецЦикла;
	
	Таблица1 = Таблица.Скопировать();
	Таблица.Очистить();
	СтрИндекс = 0;
	Пока СтрИндекс < Таблица1.Количество() Цикл
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Таблица1[СтрИндекс]);
		Таблица2 = Таблица1.Скопировать(МассивСтрок);
		
		СтрокиТовары.Очистить();
		СтрТовара = СтрокиТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТовара, Объект.Товары.НайтиПоИдентификатору(Таблица1[СтрИндекс].Идентификатор));
		СтрТовара.ИсходныйНомерСтроки = Таблица1[СтрИндекс].Идентификатор;
		СтруктураПараметры = Новый Структура("Склад, СтрокиТовары, Дата", Объект.Склад, СтрокиТовары, Объект.Дата);
		
		ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица2, СтруктураПараметры, ТаблицаКРаспределению);
		
		Если Таблица.Количество() = 0 Тогда
			Таблица = Таблица2.Скопировать();
			Таблица.Очистить();
		КонецЕсли;
		Для Каждого СтрТаблица2 Из Таблица2 Цикл
			НовСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрТаблица2);
		КонецЦикла;
		СтрИндекс = СтрИндекс + 1;
	КонецЦикла;
//}}20200922 ГлазуновДВ

//	ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица, СтруктураПараметры);
//Код от Гиг

	// Перенос результатов в документ.
	ТекстОповещения = Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(
	Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерий, ЗависимыеРеквизиты());	
	
//20200618 ГлазуновДВ Отключили, при обработке этой операции нам не требуется выходить на наш метод пересчета строк!!!	
	////bercut070520
	//Если не Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
	//	Для Каждого ИдентификаторСтроки из Элементы.Товары.ВыделенныеСтроки Цикл
	//		Строка = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	//		
	//		Если Строка = Неопределено или Строка.ГИГ_НазначениеУстановлено или Строка.Отменено  Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		Если Строка.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.Отгрузить или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		Если НЕ ГИГ_ЗапрещенныеСтроки.НайтиПоЗначению(Строка.КодСтроки) = Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		СтруктураДействий = Новый Структура();
	//		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	//		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//		//
	//		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	//		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//		//
	//		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	//		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	//		
	//		ОбработатьСтрокуТЧНаСервере(ИдентификаторСтроки,СтруктураДействий);		
	//		
	//	КонецЦикла;	
	//КонецЕсли;
	////
//{{20201001 ГлазуновДВ Сворачиваем ТЧ "Объект.Товары"
	ИндексНачало = 0;
	Пока ИндексНачало < ТаблицаВыделенныеСтроки.Количество() Цикл
		СтрокаВыделенные = ТаблицаВыделенныеСтроки[ИндексНачало];
		Стр = Объект.Товары.НайтиПоИдентификатору(СтрокаВыделенные.Идентификатор);
		Если Стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
			ИЛИ Стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов	
			//++Шерстюк Ю.Ю. 18.05.2021 Задача 8127 Обособленные не нужно сворачивать
			//ИЛИ Стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
			//--Шерстюк Ю.Ю.
			ИЛИ Стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется		
			ИЛИ Стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
			ИндексТЧ = 0;
			Пока ИндексТЧ < Объект.Товары.Количество() Цикл
				СтрокаОбъектТЧ = Объект.Товары[ИндексТЧ];
				Если СтрокаОбъектТЧ.КодСтроки <> 0 Тогда
					СтрокаТЧ_ИД = СтрокаОбъектТЧ.ПолучитьИдентификатор();
					Если СтрокаТЧ_ИД <> СтрокаВыделенные.Идентификатор Тогда
					//1-ый проход по таблице "ТаблицаВыделенныеСтроки" все кроме "СтрокаПриемник_ОбъектТЧ"
						ИндексДальше = ИндексНачало + 1;
						Пока ИндексДальше < ТаблицаВыделенныеСтроки.Количество() Цикл
							Строка1 = ТаблицаВыделенныеСтроки[ИндексДальше];
							Если СтрокаТЧ_ИД = Строка1.Идентификатор Тогда
							//Проверка на соответствие отбора по строке "СтрокаПриемник_ОбъектТЧ"
								Стр1 = Объект.Товары.НайтиПоИдентификатору(СтрокаТЧ_ИД);
								Если Стр.Артикул = Стр1.Артикул И Стр.Номенклатура = Стр1.Номенклатура И Стр.Характеристика = Стр1.Характеристика
									И Стр.Упаковка = Стр1.Упаковка И Стр.Склад = Стр1.Склад И Стр.Серия = Стр1.Серия
									И Стр.НоменклатураНабора = Стр1.НоменклатураНабора И Стр.ХарактеристикаНабора = Стр1.ХарактеристикаНабора
									И Стр.ДатаОтгрузки = Стр1.ДатаОтгрузки И Стр.ДатаКлиента = Стр1.ДатаКлиента
									И Стр.ГИГ_СхемаОбеспечения = Стр1.ГИГ_СхемаОбеспечения И Стр.ГИГ_СрокПоставки = Стр1.ГИГ_СрокПоставки
									И Стр.ВидЦены = Стр1.ВидЦены И Стр.Цена = Стр1.Цена И Стр.ЦенаСоСкидкой = Стр1.ЦенаСоСкидкой
									И Стр.ВариантОбеспечения = Стр1.ВариантОбеспечения И Стр.СтавкаНДС = Стр1.СтавкаНДС Тогда
									
									Стр.СуммаАвтоматическойСкидки = Стр.СуммаАвтоматическойСкидки + Стр1.СуммаАвтоматическойСкидки;
									Стр.СуммаРучнойСкидки = Стр.СуммаРучнойСкидки + Стр1.СуммаРучнойСкидки;
									Стр.СуммаПроцентОбщий = Стр.СуммаПроцентОбщий + Стр1.СуммаПроцентОбщий;
									Стр.Сумма = Стр.Сумма + Стр1.Сумма;
									Стр.СуммаНДС = Стр.СуммаНДС + Стр1.СуммаНДС;
									Стр.СуммаСНДС = Стр.СуммаСНДС + Стр1.СуммаСНДС;
									Стр.Количество = Стр.Количество + Стр1.Количество;
									Стр.КоличествоУпаковок = Стр.КоличествоУпаковок + Стр1.КоличествоУпаковок;
									Стр.СуммаАвтоматическойСкидкиБезВозвратнойТары = Стр.СуммаАвтоматическойСкидкиБезВозвратнойТары + Стр1.СуммаАвтоматическойСкидкиБезВозвратнойТары;
									Стр.СуммаРучнойСкидкиБезВозвратнойТары = Стр.СуммаРучнойСкидкиБезВозвратнойТары + Стр1.СуммаРучнойСкидкиБезВозвратнойТары;
									Стр.СуммаБезВозвратнойТары = Стр.СуммаБезВозвратнойТары + Стр1.СуммаБезВозвратнойТары;
									Стр.СуммаНДСБезВозвратнойТары = Стр.СуммаНДСБезВозвратнойТары + Стр1.СуммаНДСБезВозвратнойТары;
									Стр.СуммаСНДСБезВозвратнойТары = Стр.СуммаСНДСБезВозвратнойТары + Стр1.СуммаСНДСБезВозвратнойТары;
									
								//Удаляем Строчку из "ТаблицаВыделенныеСтроки" и из "Объект.Товары"
									ТаблицаВыделенныеСтроки.Удалить(ИндексДальше);
									Объект.Товары.Удалить(ИндексТЧ);
									ИндексДальше = ИндексДальше - 1;
									ИндексТЧ = ИндексТЧ - 1;
									
							    КонецЕсли;
							КонецЕсли;
							ИндексДальше = ИндексДальше + 1;
						КонецЦикла;
					КонецЕсли;
				Иначе	//КодСтроки=0			
			//2-ой Проход по таблице "Объект.Товары" с новыми строками, у которых "КодСтроки = 0"
				//Проверка на соответствие отбора по строке "СтрокаПриемник_ОбъектТЧ"
					Стр1 = СтрокаОбъектТЧ;
					Если Стр.Артикул = Стр1.Артикул И Стр.Номенклатура = Стр1.Номенклатура И Стр.Характеристика = Стр1.Характеристика
						И Стр.Упаковка = Стр1.Упаковка И Стр.Склад = Стр1.Склад И Стр.Серия = Стр1.Серия
						И Стр.НоменклатураНабора = Стр1.НоменклатураНабора И Стр.ХарактеристикаНабора = Стр1.ХарактеристикаНабора
						И Стр.ДатаОтгрузки = Стр1.ДатаОтгрузки И Стр.ДатаКлиента = Стр1.ДатаКлиента
						И Стр.ГИГ_СхемаОбеспечения = Стр1.ГИГ_СхемаОбеспечения И Стр.ГИГ_СрокПоставки = Стр1.ГИГ_СрокПоставки
						И Стр.ВидЦены = Стр1.ВидЦены И Стр.Цена = Стр1.Цена И Стр.ЦенаСоСкидкой = Стр1.ЦенаСоСкидкой
						И Стр.ВариантОбеспечения = Стр1.ВариантОбеспечения И Стр.СтавкаНДС = Стр1.СтавкаНДС Тогда
						
						Стр.СуммаАвтоматическойСкидки = Стр.СуммаАвтоматическойСкидки + Стр1.СуммаАвтоматическойСкидки;
						Стр.СуммаРучнойСкидки = Стр.СуммаРучнойСкидки + Стр1.СуммаРучнойСкидки;
						Стр.СуммаПроцентОбщий = Стр.СуммаПроцентОбщий + Стр1.СуммаПроцентОбщий;
						Стр.Сумма = Стр.Сумма + Стр1.Сумма;
						Стр.СуммаНДС = Стр.СуммаНДС + Стр1.СуммаНДС;
						Стр.СуммаСНДС = Стр.СуммаСНДС + Стр1.СуммаСНДС;
						Стр.Количество = Стр.Количество + Стр1.Количество;
						Стр.КоличествоУпаковок = Стр.КоличествоУпаковок + Стр1.КоличествоУпаковок;
						Стр.СуммаАвтоматическойСкидкиБезВозвратнойТары = Стр.СуммаАвтоматическойСкидкиБезВозвратнойТары + Стр1.СуммаАвтоматическойСкидкиБезВозвратнойТары;
						Стр.СуммаРучнойСкидкиБезВозвратнойТары = Стр.СуммаРучнойСкидкиБезВозвратнойТары + Стр1.СуммаРучнойСкидкиБезВозвратнойТары;
						Стр.СуммаБезВозвратнойТары = Стр.СуммаБезВозвратнойТары + Стр1.СуммаБезВозвратнойТары;
						Стр.СуммаНДСБезВозвратнойТары = Стр.СуммаНДСБезВозвратнойТары + Стр1.СуммаНДСБезВозвратнойТары;
						Стр.СуммаСНДСБезВозвратнойТары = Стр.СуммаСНДСБезВозвратнойТары + Стр1.СуммаСНДСБезВозвратнойТары;
						
					//Удаляем Строчку из "Объект.Товары"
						Объект.Товары.Удалить(ИндексТЧ);
						ИндексТЧ = ИндексТЧ - 1;
		
				    КонецЕсли;
				КонецЕсли;
				ИндексТЧ = ИндексТЧ + 1;
			КонецЦикла;
		КонецЕсли;
		
	//ОбработкаСтроки Только РучнаяСкидка //20201001 ГлазуновДВ	
		//СтруктураДействий = Новый Структура();
		//СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
		////СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2");
		////СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
		////СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
		//СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_4");
		//ОбработатьСтрокуТЧНаСервере(СтрокаВыделенные.Идентификатор, СтруктураДействий);		
		
		ИндексНачало = ИндексНачало + 1;
	КонецЦикла;

	//ТЧТовары = Объект.Товары.Выгрузить();
	//__________________________"Производитель"__________
	//ТЧТовары.Свернуть("Артикул,Номенклатура,Характеристика,Упаковка,Склад,Серия,!!!!ВариантОбеспечения!!!!,НоменклатураНабора,ХарактеристикаНабора,ВидЦены,СрокПоставки,ДатаОтгрузки,ГИГ_СхемаОбеспечения,ГИГ_СрокПоставки,СтавкаНДС,Цена,ЦенаСоСкидкой,КлючСвязи,ДатаКлиента",
	//"СуммаАвтоматическойСкидки,СуммаРучнойСкидки,СуммаПроцентОбщий,Сумма,СуммаНДС,СуммаСНДС,Количество,КоличествоУпаковок,СуммаАвтоматическойСкидкиБезВозвратнойТары,СуммаРучнойСкидкиБезВозвратнойТары,СуммаБезВозвратнойТары,СуммаНДСБезВозвратнойТары,СуммаСНДСБезВозвратнойТары);
	//Объект.Товары.Загрузить(ТЧТовары);
//}}20201001 ГлазуновДВ
//{{20210120 ГлазуновДВ  Проставляем КодСтроки в Нулевые (Новые строки), чтобы не нужно было сохранять документ.
	Для Каждого Строка Из Объект.Товары Цикл
		Если Строка.КодСтроки = 0 Тогда
			Объект.МаксимальныйКодСтроки = Объект.МаксимальныйКодСтроки + 1;
			Строка.КодСтроки = Объект.МаксимальныйКодСтроки;
		КонецЕсли;
	КонецЦикла;
//}}20210120 ГлазуновДВ

	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);	
	
	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);
	
КонецФункции

//{{20200924 ГлазуновДВ Необходимые Функции для определения ТЗ  "ТаблицаНевыделенныеСтроки"

// Создает таблицу и копирует в нее данные, необходимые механизмам обеспечения из выделенных строк таблицы формы.
//
// Параметры:
// ТаблицаТовары - ДанныеФормыКоллекция - таблица формы для копирования.
// ВыделенныеСтроки - Массив - идентификаторы выделенных строк.
// Объект - ДанныеФормыСтруктура - необходим для заполнения данных, отсутствующих в строках таблицы.
// ПутиКДанным - Соответствие - ключ - имя по умолчанию, значение - имя реквизита в объекте или таблице,
//                                    отличное от имени по умолчанию.
//
// Возвращаемое значение:
// Таблица значений - таблица содержащая данные из выделенных строк с именами колонок по умолчанию.
//
Функция ВыделенныеСтрокиВТаблицу(ТаблицаТовары, ВыделенныеСтроки, Объект, ПутиКДанным)
	
	Хранилище = СоздатьХранилищеЗаполнитьИзОбъекта(Объект, ПутиКДанным);
	Хранилище.Вставить("Упаковка");
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеСервер.ПутиКДаннымПоУмолчанию());
	Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаТовары = ТаблицаТовары.НайтиПоИдентификатору(Идентификатор);
		ЗаполнитьЗначенияСвойств(Хранилище, СтрокаТовары);
		
		Если Хранилище.Отменено = Истина Или Хранилище.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		ОбеспечениеКлиентСервер.ЗаполнитьЗначенияСвойствСРазличиемИмен(НоваяСтрока, Хранилище, ПутиКДанным);
		
		НоваяСтрока.Идентификатор = СтрокаТовары.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция СоздатьХранилищеЗаполнитьИзОбъекта(Объект, ПутиКДанным)
	
	Пути = ОбеспечениеСервер.ПутиКДаннымПоУмолчанию();
	Хранилище = Новый Структура(Пути);
	
	Для Каждого Свойство Из ПутиКДанным Цикл
		Хранилище.Вставить(Свойство.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Хранилище, Объект);
	
//++ НЕ УТ
	// В заказе переработчику нет поля, хранящего назначение для обособленных материалов под заказ на производство (2.1).
	Данные = ПутиКДанным.Получить("Данные");
	Если Данные <> Неопределено Тогда
		Для Каждого Свойство Из Данные Цикл
			Хранилище.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЦикла;
	КонецЕсли;
//-- НЕ УТ

	Хранилище.Вставить("НазначениеШапки", Хранилище.Назначение);
	
	Возврат Хранилище;
	
КонецФункции
//}}20200924 ГлазуновДВ

&НаКлиенте
Функция ЗапретИзмененияСтроки(КодСтроки)
	
	Если НЕ КодСтроки = 0 И НЕ ГИГ_ЗапрещенныеСтроки.НайтиПоЗначению(КодСтроки) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
&Вместо("ОтменитьНепоставленныеСтрокиСервер")
Функция Рин1_ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, Знач ПроверятьОстатки)
	
	//{Гига suv 14.02.2018 СхемыОбеспеченияДляЗаказов
	ДанныеСтрок = Новый Соответствие;
	СтрРеквизитыОтмены = "Отменено, ПричинаОтмены, СтатусУказанияСерий";
	Если ГИГ_ЗапрещенныеСтроки.Количество() Тогда
		Для каждого Стр Из Объект.Товары Цикл
			Если НЕ ГИГ_ЗапрещенныеСтроки.НайтиПоЗначению(Стр.КодСтроки) = Неопределено Тогда
				ДанныеСтроки = Новый Структура(СтрРеквизитыОтмены);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки,Стр,СтрРеквизитыОтмены);
				ДанныеСтрок.Вставить(Стр.НомерСтроки,ДанныеСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Гига suv 14.02.2018}
	
	СтруктураКорректировки = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	СтруктураКорректировки.ДокументОбъект               = Объект;
	СтруктураКорректировки.ПричинаОтмены                = ПричинаОтмены;
	СтруктураКорректировки.ПроверятьОстатки             = ПроверятьОстатки;
	СтруктураКорректировки.ОтменитьНеотработанныеСтроки = Истина;
	
	СтруктураРезультата = ПродажиСервер.СкорректироватьСтрокиЗаказа(СтруктураКорректировки);
	КоличествоОтмененныхСтрок = СтруктураРезультата.КоличествоСтрок;
	//{Гига suv 14.02.2018 СхемыОбеспеченияДляЗаказов
	Если КоличествоОтмененныхСтрок > 0 Тогда
		Для каждого Стр Из Объект.Товары Цикл
			ДанныеСтроки = ДанныеСтрок[Стр.НомерСтроки];
			Если НЕ ДанныеСтроки = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Стр,ДанныеСтроки,СтрРеквизитыОтмены);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок-1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Гига suv 14.02.2018}
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	
	Если КоличествоОтмененныхСтрок > 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИтогоКоличествоДоступное(ТекущиеДанные)
	
	ИтогоКоличествоДоступно = ТекущиеДанные.КоличествоДоступно;
	
	Если ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада") Тогда
		
		ИтогоКоличествоДоступно = ТекущиеДанные.КоличествоДоступно - ТекущиеДанные.КоличествоПодобрано;
		
	ИначеЕсли ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов") Тогда
		
		ИтогоКоличествоДоступно = ТекущиеДанные.КоличествоДоступно - ТекущиеДанные.КоличествоПодобрано;
		
	Иначе
		
		////++Гольм А.А. (Гигабайт) 27.05.2019 10:32:44
		//КонтрольПоСкладу = Ложь;
		//Если ЗначениеЗаполнено(ТекущиеДанные.СкладПоставщика) И ТекущиеДанные.КоличествоДоступно > 0 Тогда
		//	ОтборСтрок = Новый Структура("Номенклатура, СкладПоставщика", ТекущиеДанные.Номенклатура, ТекущиеДанные.СкладПоставщика);
		//	НайденныеСтроки = ГИГ_ОбеспечениеИтоги.НайтиСтроки(ОтборСтрок);
		//	КоличествоПодобрано = 0;
		//	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		//		//Если ТекСтрока.СхемаОбеспечения = ТекущиеДанные.СхемаОбеспечения Тогда
		//		//	Продолжить;
		//		//КонецЕсли;
		//		КоличествоПодобрано = КоличествоПодобрано + ТекСтрока.КоличествоПодобрано;
		//	КонецЦикла;
		//	КонтрольПоСкладу = Истина;
		//КонецЕсли;
		////--Гольм А.А. (Гигабайт) 27.05.2019 10:34:28
		//
		//ОтборСтрок = Новый Структура("Номенклатура, СхемаОбеспечения", ТекущиеДанные.Номенклатура, ТекущиеДанные.СхемаОбеспечения);
		//НайденныеСтроки = ГИГ_ОбеспечениеИтоги.НайтиСтроки(ОтборСтрок);
		//Если НайденныеСтроки.Количество() > 0 Тогда
		//	//++Гольм А.А. (Гигабайт) 27.05.2019 10:34:40
		//	//ИтогоКоличествоДоступно = Макс(НайденныеСтроки[0].КоличествоДоступно - НайденныеСтроки[0].КоличествоПодобрано, 0);
		//	ИтогоКоличествоДоступно = Макс(НайденныеСтроки[0].КоличествоДоступно - ?(КонтрольПоСкладу = Истина, КоличествоПодобрано, НайденныеСтроки[0].КоличествоПодобрано), 0);
		//	//--Гольм А.А. (Гигабайт) 27.05.2019 10:34:46
		//КонецЕсли;
		
		ОтборСтрок = Новый Структура("Номенклатура, СхемаОбеспечения", ТекущиеДанные.Номенклатура, ТекущиеДанные.СхемаОбеспечения);
		НайденныеСтроки = ГИГ_ОбеспечениеИтоги.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИтогоКоличествоДоступно = Макс(НайденныеСтроки[0].КоличествоДоступно - НайденныеСтроки[0].КоличествоПодобрано, 0);
		КонецЕсли;
		//
		ИтогоКоличествоДоступно = ДоступноеКоличествоНасервере(ТекущиеДанные.Номенклатура,ТекущиеДанные.СкладПоставщика)
		//
		
	КонецЕсли;
	
	//bercut030719
	Если ТекущиеДанные.ЭтоПроизводство Тогда
		ИтогоКоличествоДоступно = ТекущиеДанные.КоличествоЗаказанное;
	КонецЕсли;
	//
	
	Возврат ИтогоКоличествоДоступно;
	
КонецФункции

Функция ДоступноеКоличествоНасервере(Номенклатура,СкладПоставщика)
	
	Отбор = Новый Структура("Номенклатура,СкладПоставщика",Номенклатура,СкладПоставщика);
	Массив = ГИГ_ОбеспечениеИтоги.НайтиСтроки(Отбор);
	Если Массив.Количество() > 1 Тогда
		ТЗ = ГИГ_ОбеспечениеИтоги.Выгрузить(Массив,);
		ТЗ.Свернуть("Номенклатура,СкладПоставщика,КоличествоДоступно","КоличествоПодобрано");
	Иначе 
		Возврат 0;
	КонецЕсли;
	
	Возврат ТЗ[0].КоличествоДоступно - ТЗ[0].КоличествоПодобрано;
	
КонецФункции

&НаСервере
Функция ПолучитьМаксимальноеЗначение(Номенклатура,ТекущееЗначениеСкидкиНаценки)
	МаксСкидка = 0;
	Данные = Объект.Соглашение;
	СтруктураОтбора = Новый Структура("ЦеноваяГруппа",Номенклатура.ЦеноваяГруппа);
	МассивСтрок = Данные.ЦеновыеГруппы.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() > 0 Тогда 
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Макс(МассивСтрок[0].ПроцентРучнойСкидки,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки);
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			ПроцентНаценкиОбщий = МассивСтрок[0].ПроцентРучнойНаценки;
			ПроцентНаценкиИнд   = ?(МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки < 0,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки,0);
			Возврат Мин(ПроцентНаценкиОбщий,ПроцентНаценкиИнд);
		КонецЕсли;
	Иначе
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Объект.Соглашение.ПроцентРучнойСкидки;
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			Возврат Объект.Соглашение.ПроцентРучнойНаценки;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПрименитьОбеспечениеНаСервере()
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
	Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	КоличествоКРаспределению = Новый ТаблицаЗначений;
	КоличествоКРаспределению.Колонки.Добавить("Цена",                        ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2));
	КоличествоКРаспределению.Колонки.Добавить("ПроцентРучнойСкидки",         ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(5, 2));
	КоличествоКРаспределению.Колонки.Добавить("ПроцентАвтоматическойСкидки", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(5, 2));
	КоличествоКРаспределению.Колонки.Добавить("Количество",                  ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	ВариантыКРаспределению = Новый ТаблицаЗначений;
	ВариантыКРаспределению.Колонки.Добавить("ВариантОбеспечения",   Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	ВариантыКРаспределению.Колонки.Добавить("ГИГ_СхемаОбеспечения", Новый ОписаниеТипов("СправочникСсылка.СхемыОбеспечения"));
	ВариантыКРаспределению.Колонки.Добавить("ДатаОтгрузки",         ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ВариантыКРаспределению.Колонки.Добавить("Количество",           ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	ВариантыКРаспределению.Колонки.Добавить("ГИГ_СрокПоставки",         Новый ОписаниеТипов("Строка"));

	КопияТовары = Объект.Товары.Выгрузить();
	
	Для каждого ТекНоменклатура Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
		
		СтрокиТовары = Новый Массив;
		
		КоличествоКРаспределению.Очистить();
		
		// 1. Сначала уменьшим строки, чтобы получить необходимое количество для увеличения
		Для каждого ТекДействия Из ТекНоменклатура.ПолучитьЭлементы() Цикл
			
			Если ТекДействия.КоличествоВЗаказе > ТекДействия.КоличествоПодобрано Тогда
				// Уменьшили количество
				
				Отбор = Новый Структура("Номенклатура, Характеристика, ВариантОбеспечения");
				ЗаполнитьЗначенияСвойств(Отбор, ТекДействия);
				Отбор.Вставить("ГИГ_СхемаОбеспечения", ТекДействия.СхемаОбеспечения);
				Отбор.Вставить("ГИГ_Назначение",       Справочники.Назначения.ПустаяСсылка());
				Отбор.Вставить("Отменено",             Ложь);
				Если ЗначениеЗаполнено(ТекДействия.ДатаОтгрузкиВЗаказе) Тогда // Для обеспечения "ИзЗаказа"
					Отбор.Вставить("ДатаОтгрузки",     ТекДействия.ДатаОтгрузкиВЗаказе);
				КонецЕсли;
				
				СтрокиТовары = Объект.Товары.НайтиСтроки(Отбор);
				
				КРаспределению = ТекДействия.КоличествоВЗаказе - ТекДействия.КоличествоПодобрано;
				Для каждого ТекСтрока Из СтрокиТовары Цикл
					
					ДоступноКРаспределению = Мин(ТекСтрока.Количество, КРаспределению);
					ТекСтрока.Количество = ТекСтрока.Количество - ДоступноКРаспределению;
					Если ТекСтрока.Количество = 0 Тогда
						Объект.Товары.Удалить(ТекСтрока);
					Иначе
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, КэшированныеЗначения);
						ГИГ_РассчитатьПроцентОбщий(ТекСтрока);
			//{{20200902 ГлазуновДВ 			
				СтруктураДействий2 = Новый Структура();
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0");
//				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0_2");
				//СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0_3");
				//
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_1");
//				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_1_0");
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_1_1");
				//
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_2");
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_2_0");
				
				ОбработатьСтрокуТЧНаСервере(ТекСтрока.ПолучитьИдентификатор(), СтруктураДействий2);
			//}}20200902 ГлазуновДВ
							
					КонецЕсли; 
					
					НоваяСтрока = КоличествоКРаспределению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.Количество = ДоступноКРаспределению;
					
					КРаспределению = КРаспределению - ДоступноКРаспределению;
					Если КРаспределению = 0 Тогда
						Прервать;
					КонецЕсли; 
					
				КонецЦикла; 
				
			ИначеЕсли ТекДействия.КоличествоПодобрано = ТекДействия.КоличествоВЗаказе И ТекДействия.КоличествоВЗаказе > 0 Тогда
				// Нужно заполнить дату отгрузки, возможно её изменили
				
				Отбор = Новый Структура("Номенклатура, Характеристика, ВариантОбеспечения");
				ЗаполнитьЗначенияСвойств(Отбор, ТекДействия);
				Отбор.Вставить("ГИГ_СхемаОбеспечения", ТекДействия.СхемаОбеспечения);
				Отбор.Вставить("ГИГ_Назначение",       Справочники.Назначения.ПустаяСсылка());
				Отбор.Вставить("Отменено",             Ложь);
				Если ЗначениеЗаполнено(ТекДействия.ДатаОтгрузкиВЗаказе) Тогда // Для обеспечения "ИзЗаказа"
					Отбор.Вставить("ДатаОтгрузки",     ТекДействия.ДатаОтгрузкиВЗаказе);
				КонецЕсли;
				
				СтрокиТовары = Объект.Товары.НайтиСтроки(Отбор);
				
				Для каждого ТекСтрока Из СтрокиТовары Цикл
					ТекСтрока.ДатаОтгрузки = ТекДействия.ДатаОтгрузки;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла; 
		
		// если нет количества к распределению значит ничего по этой номенклатуре не изменили, переходим к следующей
		Если КоличествоКРаспределению.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		// 2. будем увеличивать существующие строки из доступного количества к распределению из уменьшенного
		КоличествоКРаспределению.Свернуть("Цена, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки", "Количество");
		
		ВариантыКРаспределению.Очистить();
		
		Для каждого ТекДействия Из ТекНоменклатура.ПолучитьЭлементы() Цикл
			
			Если ТекДействия.КоличествоПодобрано <= ТекДействия.КоличествоВЗаказе Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура("Номенклатура, Характеристика, ВариантОбеспечения");
			ЗаполнитьЗначенияСвойств(Отбор, ТекДействия);
			Отбор.Вставить("ГИГ_СхемаОбеспечения", ТекДействия.СхемаОбеспечения);
			Отбор.Вставить("ГИГ_Назначение",       Справочники.Назначения.ПустаяСсылка());
			Отбор.Вставить("Отменено",             Ложь);
			Если ЗначениеЗаполнено(ТекДействия.ДатаОтгрузкиВЗаказе) Тогда // Для обеспечения "ИзЗаказа"
				Отбор.Вставить("ДатаОтгрузки",     ТекДействия.ДатаОтгрузкиВЗаказе);
			КонецЕсли; 
			
			СтрокиТовары = Объект.Товары.НайтиСтроки(Отбор);
			Если СтрокиТовары.Количество() = 0 Тогда
				// Новый вариант и схема обеспечения
				
				НоваяСтрока = ВариантыКРаспределению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДействия);
				НоваяСтрока.ГИГ_СхемаОбеспечения = ТекДействия.СхемаОбеспечения;
				НоваяСтрока.Количество           = ТекДействия.КоличествоПодобрано;
				НоваяСтрока.ГИГ_СрокПоставки = ТекДействия.СрокПоставки;
				
			ИначеЕсли ТекДействия.КоличествоПодобрано > ТекДействия.КоличествоВЗаказе Тогда
				// Увеличили количество
				
				Отбор = Новый Структура("Цена, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки");
				
				КРаспределению = ТекДействия.КоличествоПодобрано - ТекДействия.КоличествоВЗаказе;
				
				Для каждого ТекСтрока Из СтрокиТовары Цикл
					
					ЗаполнитьЗначенияСвойств(Отбор, ТекСтрока);
					СтрокиКоличества = КоличествоКРаспределению.НайтиСтроки(Отбор);
					Для каждого СтрокаКоличества Из СтрокиКоличества Цикл
						
						ДоступноКРаспределению = Мин(СтрокаКоличества.Количество, КРаспределению);
						ТекСтрока.Количество = ТекСтрока.Количество + ДоступноКРаспределению;
						
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, КэшированныеЗначения);
						ГИГ_РассчитатьПроцентОбщий(ТекСтрока);
			//{{20200902 ГлазуновДВ 			
				СтруктураДействий2 = Новый Структура();
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0");
//				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0_2");
				//СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0_3");
				//
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_1");
//				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_1_0");
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_1_1");
				//
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_2");
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_2_0");
				
				ОбработатьСтрокуТЧНаСервере(ТекСтрока.ПолучитьИдентификатор(), СтруктураДействий2);
			//}}20200902 ГлазуновДВ
						
						СтрокаКоличества.Количество = СтрокаКоличества.Количество - ДоступноКРаспределению;
						Если СтрокаКоличества.Количество = 0 Тогда
							КоличествоКРаспределению.Удалить(СтрокаКоличества);
						КонецЕсли; 
						
						КРаспределению = КРаспределению - ДоступноКРаспределению;
						Если КРаспределению = 0 Тогда
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					
				КонецЦикла; 
				
				Если КРаспределению <> 0 Тогда
					НоваяСтрока = ВариантыКРаспределению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДействия);
					НоваяСтрока.Количество = КРаспределению;
				КонецЕсли; 
				
			КонецЕсли;
		КонецЦикла;
		
		// 3. теперь оставшееся количество к распределению распределим по вариантам к распределению
		ВариантыКРаспределению.Свернуть("ВариантОбеспечения, ГИГ_СхемаОбеспечения, ДатаОтгрузки, ГИГ_СрокПоставки", "Количество");
		
		Если СтрокиТовары.Количество() = 0 Тогда
			Отбор = Новый Структура("Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(Отбор, ТекДействия);
			Отбор.Вставить("ГИГ_Назначение", Справочники.Назначения.ПустаяСсылка());
			Отбор.Вставить("Отменено",       Ложь);
			СтрокиТовары = КопияТовары.НайтиСтроки(Отбор);
		КонецЕсли; 
		
		СтрокаДляКопирования = СтрокиТовары[0];
		
		Для каждого ТекВариант Из ВариантыКРаспределению Цикл
			
			УдалитьСтрокиКоличества = Новый Массив;
			
			КРаспределению = ТекВариант.Количество;
			Для каждого СтрокаКоличества Из КоличествоКРаспределению Цикл
				
				ДоступноКРаспределению = Мин(СтрокаКоличества.Количество, КРаспределению);
				
				НоваяСтрока = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляКопирования, , "ВариантОбеспечения, ГИГ_СхемаОбеспечения, ДатаОтгрузки, Цена, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекВариант, "ВариантОбеспечения, ГИГ_СхемаОбеспечения, ДатаОтгрузки, ГИГ_СрокПоставки");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоличества, "Цена, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки");
				
				НоваяСтрока.КодСтроки  = 0;
				НоваяСтрока.Количество = ДоступноКРаспределению;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				ГИГ_РассчитатьПроцентОбщий(НоваяСтрока);
			//{{20200902 ГлазуновДВ 			
				СтруктураДействий2 = Новый Структура();
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0");
//				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0_2");
				//СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_0_3");
				//
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_1");
//				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_1_0");
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_1_1");
				//
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_2");
				СтруктураДействий2.Вставить("РассчитатьРеквизитыТЧ_2_0");
				
				ОбработатьСтрокуТЧНаСервере(НоваяСтрока.ПолучитьИдентификатор(), СтруктураДействий2);
			//}}20200902 ГлазуновДВ
				
				СтрокаКоличества.Количество = СтрокаКоличества.Количество - ДоступноКРаспределению;
				Если СтрокаКоличества.Количество = 0 Тогда
					УдалитьСтрокиКоличества.Добавить(СтрокаКоличества);
				КонецЕсли; 
				
				КРаспределению = КРаспределению - ДоступноКРаспределению;
				Если КРаспределению = 0 Тогда
					Прервать;
				КонецЕсли; 
				
			КонецЦикла; 
			
			Для каждого ТекСтрока Из УдалитьСтрокиКоличества Цикл
				КоличествоКРаспределению.Удалить(ТекСтрока);
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказКлиента));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ЭтаФорма.Модифицированность = Истина;
	
	//Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТовары;
	//ГИГ_ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
КонецФункции

&НаСервере
Функция РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЦеноваяГруппа",СсылкаНоменклатура.ЦеноваяГруппа);
	МассивСтрок = СтруктураТаблиц.Ограничения.НайтиСтроки(СтруктураОтбора);
	ЗначениеСкидки = 0;
	Если МассивСтрок.Количество() > 0 Тогда 
		//++Гольм А.А. (Гигабайт) 20.11.2018 12:50:36
		Попытка
			Если НЕ МассивСтрок[0].Деактивирован Тогда 
				ЗначениеСкидки = ?(МассивСтрок[0].МаксимальныйПроцентРучнойСкидки = 0,МассивСтрок[0].МаксимальныйПроцентРучнойНаценки,МассивСтрок[0].МаксимальныйПроцентРучнойСкидки);
			КонецЕсли;
		Исключение
		КонецПопытки;
		//--Гольм А.А. (Гигабайт) 20.11.2018 12:51:02
	КонецЕсли;
	Возврат ЗначениеСкидки;
КонецФункции

&НаСервере
Функция ТестРасчетСк()
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь); //не нужно каждый раз пересчитывать скидки по всей тч части!!1!
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СписокПрименныхСкидок = Новый СписокЗначений;
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	Если ПримененныеСкидки.ДеревоСкидок.Строки.Количество() > 0 Тогда 
		Для Каждого СтрокаСписка из ПримененныеСкидки.ДеревоСкидок.Строки[0].Строки цикл
			Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий.Количество()>0  Тогда  // есть дополнительные условия по скидке... нужна на них проверка
				Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий[0].Выполнено = Истина тогда
					СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
				КонецЕсли;
			иначе // условий нет.. все скидки - в список...
				СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокПрименныхСкидок;
КонецФункции

&НаКлиенте
Процедура ВыделитьСтрокиТоварыНаКлиенте()
	
	Элементы.Товары.ВыделенныеСтроки.Очистить();
	
	Если Элементы.ТоварыСводно.ВыделенныеСтроки.Количество() = ГИГ_ТоварыСводно.Количество() Тогда
		// выделены все строки товары сводно - так же выделим все строки товары
		Для каждого ТекСтрока Из Объект.Товары Цикл
			Элементы.Товары.ВыделенныеСтроки.Добавить(ТекСтрока.ПолучитьИдентификатор());
		КонецЦикла;
		
	Иначе
		
		Для каждого ВыделеннаяСтрока Из Элементы.ТоварыСводно.ВыделенныеСтроки Цикл
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ГИГ_ТоварыСводно.НайтиПоИдентификатору(ВыделеннаяСтрока).Номенклатура));
			Для каждого СтрокаТовары Из НайденныеСтроки Цикл
				Элементы.Товары.ВыделенныеСтроки.Добавить(СтрокаТовары.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокиТоварыСводноНаКлиенте(ВыделенныеСтроки)
	
	Элементы.ТоварыСводно.ВыделенныеСтроки.Очистить();
	
	Если ВыделенныеСтроки = Неопределено Тогда
		// были выделены все строки товары сводно
		Для каждого СтрокаСводно Из ГИГ_ТоварыСводно Цикл
			Элементы.ТоварыСводно.ВыделенныеСтроки.Добавить(СтрокаСводно.ПолучитьИдентификатор());
		КонецЦикла;
	Иначе
		// были выделены некоторые строки товары сводно - найдем их по номенклатуре и добавим в выделенные
		Для каждого ТекНоменклатура Из ВыделенныеСтроки Цикл
			НайденныеСтроки = ГИГ_ТоварыСводно.НайтиСтроки(Новый Структура("Номенклатура", ТекНоменклатура));
			Для каждого СтрокаСводно Из НайденныеСтроки Цикл
				Элементы.ТоварыСводно.ВыделенныеСтроки.Добавить(СтрокаСводно.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ОбеспечениеРазвернутьВсеПосле(Команда)
	
	Для каждого ТекущаяСтрока Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
		Элементы.ГИГ_Обеспечение.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ОбеспечениеСвернутьВсеПосле(Команда)
	
	Для каждого ТекущаяСтрока Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
		Элементы.ГИГ_Обеспечение.Свернуть(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ОбновитьОбеспечениеПосле(Команда)
	
	ОбновитьОбеспечениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ОткрытьПодборОЕМПотребностьВместо(Команда)
	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "Объект.Склад";
		Сообщение.Текст = НСтр("ru='Для подбора ОЕМ потребности необходимо выбрать склад!'");
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "Объект.Партнер";
		Сообщение.Текст = НСтр("ru='Для подбора ОЕМ потребности необходимо выбрать клиента!'");
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",       Объект.Склад);
	ПараметрыФормы.Вставить("Дата",        Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",      Объект.Валюта);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Соглашение",  Объект.Соглашение);
	ПараметрыФормы.Вставить("Партнер",     Объект.Партнер);
	ПараметрыФормы.Вставить("Товары",      Объект.Товары);

	//++Гольм А.А. (Гигабайт) 20.11.2018 12:30:20
	МаксимальнаяДатаОтгрузки = '00010101';
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		МаксимальнаяДатаОтгрузки = Макс(МаксимальнаяДатаОтгрузки, ТекСтрока.ДатаОтгрузки);
	КонецЦикла;
	ПараметрыФормы.Вставить("МаксимальнаяДатаОтгрузки", МаксимальнаяДатаОтгрузки);
	//--Гольм А.А. (Гигабайт) 20.11.2018 12:30:27

	ОткрытьФорму("Документ.ЗаказКлиента.Форма.ГИГ_ФормаПодбораОЕМПотребности", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	///--> Гигабайт (Чернов А.С.) 
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ОтображатьТолькоРасхожденияОбеспеченияПосле(Команда)
	
	Отбор = Не Элементы.ГИГ_ОбеспечениеГИГ_ОтображатьТолькоРасхожденияОбеспечения.Пометка;
	Элементы.ГИГ_ОбеспечениеГИГ_ОтображатьТолькоРасхожденияОбеспечения.Пометка = Отбор;
	
	УстановитьОтборЕстьРасхождения(Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ОтобратьКоличествоНеКратноПосле(Команда)
	
	ОтобратьКоличествоНеКратноНаКлиенте(Не Элементы.ТоварыСводноГИГ_ОтобратьКоличествоНеКратно.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ПоказатьОтобранныеСтрокиПосле(Команда)
	
	ОтобратьСтрокиТоварыСводноНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГруппаСтраницыПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаГИГ_Обеспечение Тогда
		
		Если Модифицированность Или Не Объект.Проведен Тогда
			
			ТекстВопроса = НСтр("ru = 'Для анализа обеспечения необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьОбеспечениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		Иначе
			ОбновитьОбеспечениеНаКлиенте();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЦенаНаДату Тогда
		
		Если Модифицированность Или Не Объект.Проведен Тогда
			
			ТекстВопроса = НСтр("ru = 'Для анализа цен необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьОбеспечениеЗавершение2", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		Иначе
			ОбновитьСтраницуГруппаЦенаНаДатуНаСервере();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаУсловияПоставки Тогда
		
		Если Модифицированность Или Не Объект.Проведен Тогда
			
			ТекстВопроса = НСтр("ru = 'Для заполнения условных сроков поставки необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьОбеспечениеЗавершение3", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		Иначе
			ОбновитьСтраницуГруппаЦенаНаДатуНаСервере();
		КонецЕсли
	КонецЕсли;
//{{20200826 ГлазуновДВ	
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно" Тогда
	//{{20200803-20200818 ГлазуновДВ добавили для выбора Валюты при подстановке договора
		Элементы.Валюта.Доступность = Ложь;
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Если ДоговорПорядокРасчетовПолучить() <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным") Тогда
				Элементы.Валюта.Доступность = Истина;
			КонецЕсли;
		Иначе
			Элементы.Валюта.Доступность = Истина;
		КонецЕсли;
	//}}20200803-20200818 ГлазуновДВ
	КонецЕсли;
//}}20200826 ГлазуновДВ	
	
	ГИГ_ТекущаяСтраница = ТекущаяСтраница.Имя;
	
КонецПроцедуры

&НаСервере
Функция ДоговорПорядокРасчетовПолучить()
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокРасчетов");
КонецФункции

&НаКлиенте
Процедура ОбновитьОбеспечениеЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ГИГ_ТекущаяСтраница = "", Элементы.ГруппаОсновное, Элементы.Найти(ГИГ_ТекущаяСтраница));
		ГИГ_ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
		Возврат;
	Иначе
		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		
		ОбновитьСтраницуГруппаЦенаНаДатуНаСервере();
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ГИГ_ТекущаяСтраница = "", Элементы.ГруппаОсновное, Элементы.Найти(ГИГ_ТекущаяСтраница));
		
	КонецЕсли;
	
	ГИГ_ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбеспечениеЗавершение3(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ГИГ_ТекущаяСтраница = "", Элементы.ГруппаОсновное, Элементы.Найти(ГИГ_ТекущаяСтраница));
		ГИГ_ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
		Возврат;
	Иначе
		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		
		//ОбновитьСтраницуГруппаЦенаНаДатуНаСервере();
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ГИГ_ТекущаяСтраница = "", Элементы.ГруппаОсновное, Элементы.Найти(ГИГ_ТекущаяСтраница));
		
	КонецЕсли;
	
	ГИГ_ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуГруппаЦенаНаДатуНаСервере()
	
	ЦеныНоменклатуры.Параметры.УстановитьЗначениеПараметра("Ссылка",Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ГИГ_ДобавитьНовыеЭлементыНаСервере()
	
	КвалификаторСуммы = Новый КвалификаторыЧисла(15, 2);
	КвалификаторКоличества = Новый КвалификаторыЧисла(15, 3);
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("ПроцентОбщий", Новый ОписаниеТипов("Число",,, КвалификаторСуммы), "Объект.Товары", "% общей скидки", Истина));
	нРеквизиты.Добавить(Новый РеквизитФормы("СуммаПроцентОбщий", Новый ОписаниеТипов("Число",,, КвалификаторСуммы), "Объект.Товары", "Общая скидка", Истина));
	
	ИзменитьРеквизиты(нРеквизиты);
	
	нЭлемент = Элементы.Добавить("ПроцентОбщий", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.ПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.ПодчиненныеЭлементы.ПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	нЭлемент = Элементы.Добавить("СуммаПроцентОбщий", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.СуммаПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	//<++ Гигабайт Казаков М.В. Схемы обеспечения потребностей
	нЭлемент = Элементы.Добавить("СхемаОбеспечения", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.ГИГ_СхемаОбеспечения";
	нЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;	
	нЭлемент.КнопкаВыбора = Истина;
	нЭлемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;
	нЭлемент.КнопкаВыпадающегоСписка = Ложь;
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаОтгрузки);
	
	НЭлемент.УстановитьДействие("НачалоВыбора", "ГИГ_СхемаОбеспеченияНачалоВыбора");
	НЭлемент.УстановитьДействие("ОбработкаВыбора", "ГИГ_СхемаОбеспеченияОбработкаВыбора");
	НЭлемент.УстановитьДействие("ИзменениеТекстаРедактирования", "ГИГ_СхемаОбеспеченияИзменениеТекста");
	НЭлемент.УстановитьДействие("Очистка", "ГИГ_СхемаОбеспеченияОчистка");
	
	нЭлемент = Элементы.Добавить("СрокПоставки", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	нЭлемент.ТолькоПросмотр = Истина;	
	нЭлемент.ПутьКДанным = "Объект.Товары.ГИГ_СрокПоставки"; 
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаОтгрузки);
	//++> Гигабайт Казаков М.В.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.ПодчиненныеЭлементы.СуммаПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СуммаПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	Для Каждого ТекущаяСтрока из Объект.Товары цикл
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
	КонецЦикла;
	
	Элементы.Партнер.УстановитьДействие("ОбработкаВыбора", "ГИГ_ПартнерОбработкаВыбораПосле");
	Элементы.Соглашение.УстановитьДействие("ОбработкаВыбора", "ГИГ_СоглашениеОбработкаВыбораПосле");
	Элементы.Товары.УстановитьДействие("ПриИзменении", "ГИГ_ТоварыПриИзмененииПосле");
	Элементы.Товары.УстановитьДействие("ПередНачаломИзменения", "ГИГ_ТоварыПередНачаломИзмененияВместо");
	
	//bercut020320
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Рин1_УсловныеСрокиПоставки.Имя);	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Рин1_УсловныеСрокиПоставки.ИнтерактивноеИзменение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);
	//
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ОбеспечениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ГИГ_ОбеспечениеДействиеПодобрать" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ГИГ_Обеспечение.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаОбеспечения = ГИГ_Обеспечение.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
		Если ЗначениеЗаполнено(СтрокаОбеспечения.ВариантОбеспечения) Тогда
			
			Для каждого ТекНоменклатура Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
				
				Если ТекНоменклатура.Номенклатура <> СтрокаОбеспечения.Номенклатура Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОбеспечения.КоличествоПодобрано = 0;
				УстановитьИтогоКоличествоПодобрано(СтрокаОбеспечения);
				
				СтрокаОбеспечения.КоличествоПодобрано = ТекНоменклатура.КоличествоВЗаказе;
				ПерераспределитьКоличество(СтрокаОбеспечения);
				
				Прервать;
				
			КонецЦикла; 
			
		Иначе
			
			СтрокиОбеспечения = СтрокаОбеспечения.ПолучитьЭлементы();
			
			Для каждого ТекущаяСтрока Из СтрокиОбеспечения Цикл
				ТекущаяСтрока.КоличествоПодобрано = 0;
				УстановитьИтогоКоличествоПодобрано(ТекущаяСтрока);
			КонецЦикла;
			
			Для й = -СтрокиОбеспечения.Количество() По -1 Цикл
				Индекс = Макс(-й, й) - 1;
				Если СтрокиОбеспечения[Индекс].КоличествоДоступно < 0 Тогда
					ПерераспределитьКоличество(СтрокиОбеспечения[Индекс]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; 
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ГИГ_ОбеспечениеДействиеДатаОтгрузки" Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ГИГ_Обеспечение.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаОбеспечения = ГИГ_Обеспечение.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
		Если ЗначениеЗаполнено(СтрокаОбеспечения.ВариантОбеспечения) Тогда
			
			СтрокаОбеспечения.ДатаОтгрузки = СтрокаОбеспечения.ДатаОбеспечения;
			
		Иначе
			
			Для каждого ТекущаяСтрока Из СтрокаОбеспечения.ПолучитьЭлементы() Цикл
				ТекущаяСтрока.ДатаОтгрузки = ТекущаяСтрока.ДатаОбеспечения;
			КонецЦикла;
			
		КонецЕсли;
		
		//bercut260619
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ГИГ_ОбеспечениеСхемаОбеспечения" и Элемент.ТекущиеДанные.ЭтоПроизводство Тогда 
		//открываем форму и показываем комплектующие со сроками поставки
		СтандартнаяОбработка = Ложь;
		
		//нужно потому что дважды идет вызов сюда
		ОкнаПриложения = ПолучитьОкна();
		Для каждого ОкноПриложения Из ОкнаПриложения Цикл
			// Анализ заголовка окна
			Если Найти(ОкноПриложения.Заголовок, "Расшифровка обеспечения") > 0 Тогда
				ОкноПриложения.Активизировать();
				Возврат;
			КонецЕсли;
		КонецЦикла;
		//
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",Элемент.ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Склад",Элемент.ТекущиеДанные.Склад);
		ПараметрыФормы.Вставить("СкладПоставщика",Элемент.ТекущиеДанные.СкладПоставщика);
		ПараметрыФормы.Вставить("ТребуемоеКоличество",Элемент.ТекущиеДанные.КоличествоЗаказанное);		
		
		ОткрытьФорму("Документ.ЗаказКлиента.Форма.ФормаРасшифровкиОбеспечения",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ОбеспечениеКоличествоВЗаказПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГИГ_Обеспечение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов") Тогда
		УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
	Иначе
		КоличествоПодобрано = ТекущиеДанные.КоличествоПодобрано;
		ТекущиеДанные.КоличествоПодобрано = 0;
		УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
		ТекущиеДанные.КоличествоПодобрано = КоличествоПодобрано;		
	КонецЕсли; 
	
	ПерераспределитьКоличество(ТекущиеДанные);
	//++Гольм А.А. (Гигабайт) 27.05.2019 11:29:03
	УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
	//--Гольм А.А. (Гигабайт) 27.05.2019 11:29:04
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ОбработкаВыбораПосле(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьТоварыСводноНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ПартнерОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Партнер <> ВыбранноеЗначение тогда
		Если Объект.Товары.Количество() <> 0 тогда
			Параметр = Новый Структура("СтароеЗначение,НовоеЗначение", Объект.Партнер, ВыбранноеЗначение);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ГИГ_ПередЗагрузкойДанныхИзНастроекНаСервереПосле(Настройки)
	
	///<-- Гигабайт (Чернов А.С.): ТоварыСводно
	Элементы.ТоварыСкрыватьОтмененныеСтрокиСводно.Пометка = СкрыватьОтмененныеСтроки;
	///--> Гигабайт (Чернов А.С.) 
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ПередЗаписьюВместоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина; Возврат;
	КонецЕсли;
	
	ГИГ_ЗаписьРазрешена = Истина;
	//ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Ложь);
	Записать(ПараметрыЗаписи);
	ГИГ_ЗаписьРазрешена = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ГИГ_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Проведен Тогда
		ЗаполнитьСписокЗапрещенныхСтрок()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ПрименитьОбеспечение(Команда)
	ПрименитьОбеспечениеНаСервере();
	ПровестиДокумент(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ПриОткрытииПосле(Отказ)
	
	///<-- Гигабайт (Чернов А.С.): ТоварыСводно
	ИзменитьСвернутостьГруппыНаКлиенте();
	///--> Гигабайт (Чернов А.С.)
	
	// + [Rineco], [Киселев А.] [30.07.2021] 
	// Задача: [№ 13619], [# Отслеживание статуса]
	СтатусИзменилсяКВыполнению = Ложь;
	// - [Rineco], [Киселев А.] [30.07.2021]
	
	
КонецПроцедуры

&НаСервере
Процедура ГИГ_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	//++Шерстюк Ю.Ю. Задача № 7625 Менеджер и Подразделение из договора
	Если РольДоступна("Рин1_РедактированиеРеализации") или РольДоступна("ПолныеПрава") Тогда	
		Элементы.Менеджер.ТолькоПросмотр = Ложь;
        Элементы.Подразделение.ТолькоПросмотр = Ложь;
	Иначе
        Элементы.Менеджер.ТолькоПросмотр = Истина;
		Элементы.Подразделение.ТолькоПросмотр = Истина;
	КонецЕсли;

	//--Шерстюк Ю.Ю.
	
	//bercut130120
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		ЭтаФорма.Элементы.ТабличнаяЧастьЗаполненаНа.Заголовок = "";
		//копировали
		Если не Объект.Товары.Количество() = 0 Тогда
			Для каждого Строка  Из Объект.Товары Цикл
				
				СтруктураДействий = Новый Структура();
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2");
				//СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
				//
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
				//
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
				
				ОбработатьСтрокуТЧНаСервере(Строка.ПолучитьИдентификатор(),СтруктураДействий);
							
			КонецЦикла;	
			РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		КонецЕсли;
		//
	Иначе 
		Если Объект.ДатаЗаполненияУсловныхСроков = Дата(1,1,1) Тогда
			ЭтаФорма.Элементы.ТабличнаяЧастьЗаполненаНа.Заголовок = "";
		Иначе
			ЭтаФорма.Элементы.ТабличнаяЧастьЗаполненаНа.Заголовок = "Табличная часть заполнена на " + Объект.ДатаЗаполненияУсловныхСроков;
		КонецЕсли;
	КонецЕсли;
	//	
	
	///<-- Гигабайт (Чернов А.С.): Программно добавим новые реквизиты на форму
	ГИГ_ДобавитьНовыеЭлементыНаСервере();
	///--> Гигабайт (Чернов А.С.)
	
	///<-- Гигабайт (Чернов А.С.): ТоварыСводно 
	ГИГ_ПоказатьТоварыСводно = Ложь;
	Элементы.ГИГ_СворачиваемаяГруппаТоварыСводно.Видимость = ГИГ_ПоказатьТоварыСводно;
	Элементы.ГИГ_ДекорацияОткрытьТоварыСводно.Видимость    = Не ГИГ_ПоказатьТоварыСводно;
	Элементы.ГИГ_ДекорацияЗакрытьТоварыСводно.Видимость    = ГИГ_ПоказатьТоварыСводно;
	Элементы.ГИГ_ДекорацияЗаголовокТоварыСводно.Заголовок = ?(ГИГ_ПоказатьТоварыСводно, "стандартное отображение", "консолидированное отображение");
	
	ОбновитьТоварыСводноНаСервере();
	///--> Гигабайт (Чернов А.С.) 
	
	//{Гига suv 16.01.2018 СхемыОбеспеченияДляЗаказов
	//Если НЕ Объект.Ссылка.Пустая() Тогда
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ЗаказНаПеремещение.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	//	|ГДЕ
	//	|	ЗаказНаПеремещение.ГИГ_СформированАвтоматически
	//	|	И ЗаказНаПеремещение.ДокументОснование = &Заказ";
	//
	//Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	ТолькоПросмотр = 
	//КонецЕсли;
	
	//КонецЕсли;
	//Гига suv 16.01.2018}
	
	//{Гига suv 13.02.2018 СхемыОбеспеченияДляЗаказов
	ЗаполнитьСписокЗапрещенныхСтрок();
	
	ЦеныНоменклатуры.Параметры.УстановитьЗначениеПараметра("Ссылка",Объект.Ссылка);
	
	//bercut200220 - временно
	Элементы.ТоварыНазначитьАвтоматическиеСкидки.Доступность = Ложь;
	//Элементы.ТоварыЗаполнитьОбеспечение.Доступность = Ложь;
	//
	Если не РольДоступна("Рин1_РедактированиеРеализации") Тогда
		Элементы.ТоварыСтавкаНДС.ТолькоПросмотр = Истина;
		Элементы.ТоварыСуммаНДС.ТолькоПросмотр  = Истина;
	КонецЕсли;
	
//{{20200626 ГлазуновДВ Задача 1465 Новые Реквизиты
	Для Каждого Строка Из Элементы.Рин1_ОплатаДоставки.СписокВыбора Цикл
		Если Строка.Представление = Объект.Рин1_ОплатаДоставки Тогда
			Рин1_ОплатаДоставки = Строка.Значение;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из Элементы.Рин1_ВариантДоставки.СписокВыбора Цикл
		Если Строка.Представление = Объект.Рин1_ВариантДоставки Тогда
			Рин1_ВариантДоставки = Строка.Значение;
		КонецЕсли;
	КонецЦикла;
	Рин1_ДатаДоставки = Объект.Рин1_ДатаДоставки;
//}}20200626 ГлазуновДВ Задача 1465
//{{20200803-20200818 ГлазуновДВ добавили для выбора Валюты при подстановке договора
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Если Объект.Договор.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным") Тогда
				Элементы.Валюта.Доступность = Истина;
			КонецЕсли;
		Иначе
			Элементы.Валюта.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
//}}20200803-20200818 ГлазуновДВ

// + [Rineco], [Киселев А.] [29.07.2021] 
// Задача: [№13619 ], [#ПроверкаПравНаРедактированиеДатыКлиента]

Ринэко_ПроверкаРоли();

// - [Rineco], [Киселев А.] [29.07.2021]


КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ГИГ_РассчитатьПроцентОбщий(ТекущаяСтрока) ///<-- Гигабайт (Чернов А.С.): 
	ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(СтрокаТабличнойЧасти,ПересчитываемПроцент = Ложь)
	
	// автоматическое заполнение по скидкам / наценкам  при корректировке данных табличной части
	
	Если СтрокаТабличнойЧасти <> Неопределено тогда  
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда 
			СсылкаНоменклатура = СтрокаТабличнойЧасти.Номенклатура;
			Если  ПересчитываемПроцент или СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0 Тогда
				РассчитатьСкидкиНаценкиКлиент();
			КонецЕсли;
			Если ПересчитываемПроцент или СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 0 Тогда 
				РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура);
			КонецЕсли;
			ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(СтрокаТабличнойЧасти);
		КонецЕсли;
		ГИГ_РассчитатьПроцентОбщий(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_СвернутьРазвернутьГруппу(Элемент)
	
	ГИГ_ПоказатьТоварыСводно = Не ГИГ_ПоказатьТоварыСводно;
	
	ИзменитьСвернутостьГруппыНаКлиенте();
	
	Если Элементы.ГИГ_ДекорацияОткрытьТоварыСводно.Видимость Тогда
		ТекущийЭлемент = Элементы.ГИГ_ДекорацияОткрытьТоварыСводно;
	Иначе
		ТекущийЭлемент = Элементы.ГИГ_ДекорацияЗакрытьТоварыСводно;
	КонецЕсли;
	
	ОбновитьТоварыСводноНаКлиенте();
	ОтобратьСтрокиТоварыСводноНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_СкрыватьОтмененныеСтрокиПосле(Команда)
	
	ОбновитьТоварыСводноНаКлиенте();
	ОтобратьСтрокиТоварыСводноНаКлиенте();
	
	//Элементы.ТоварыСкрыватьОтмененныеСтрокиСводно.Пометка = СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_СоглашениеОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Если Объект.Соглашение <> ВыбранноеЗначение тогда
		Если Объект.Товары.Количество() <> 0 тогда
			СтандартнаяОбработка = Ложь;
			Параметр = Новый Структура("СтароеЗначение,НовоеЗначение", Объект.Соглашение, ВыбранноеЗначение);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_СхемаОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //<++ Гигабайт Казаков М.В.
	СтандартнаяОбработка = Ложь;
	ОтборСклад= Элемент.Родитель.ТекущиеДанные.Склад;
	ОтборНоменклатура= Элемент.Родитель.ТекущиеДанные.Номенклатура;
	ОтборХарактеристикаНоменклатуры= Элемент.Родитель.ТекущиеДанные.Характеристика;	
	ОткрытьФорму("Справочник.СхемыОбеспечения.Форма.ГИГ_ВыборСхемыПоСкладу",Новый Структура("Склад,Номенклатура,Характеристика",ОтборСклад,ОтборНоменклатура,ОтборХарактеристикаНоменклатуры),Элементы["СхемаОбеспечения"]);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_СхемаОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) //<++ Гигабайт Казаков М.В.
	
	
	ДатаРасчета = ?(НЕ ЗначениеЗаполнено(Объект.Дата),ТекущаяДата(),Объект.Дата);
	
	ДанныеНоменклатуры = Новый Структура("Номенклатура,Характеристика");
	ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры,Элемент.Родитель.ТекущиеДанные);
	
	СтруктураСроки = ГИГ_МодульВызовСервера.ГИГ_ПолучитьСрокиОбеспеченияПоСхеме(ВыбранноеЗначение,ДатаРасчета,Объект.Склад,ДанныеНоменклатуры);
	
	ЗаполнитьЗначенияСвойств(Объект.Товары.НайтиПоИдентификатору(Элемент.Родитель.ТекущаяСтрока),СтруктураСроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_СхемаОбеспеченияИзменениеТекста(Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Текст.ТекстРедактирования = "" Тогда
	    Элементы.Товары.ТекущиеДанные.ГИГ_СрокПоставки = "";
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ГИГ_СхемаОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	Элементы.Товары.ТекущиеДанные.ГИГ_СрокПоставки = "";
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ТоварыПередНачаломИзмененияВместо(Элемент, Отказ)
	
	Отказ = ЗапретИзмененияСтроки(Элемент.ТекущиеДанные.КодСтроки);
	
	Если Элемент.ТекущиеДанные.Отменено и Элемент.ТекущиеДанные.ПричинаОтмены = КонстантаПричинаОтменыПриРазделенииЗаказа() Тогда
		Отказ = Истина;
		Сообщить("Менять причину отмены запрещено!");
		Возврат;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция КонстантаПричинаОтменыПриРазделенииЗаказа()

	Возврат Константы.Рин1_ПричинаОтменыПриРазделенииЗаказа.Получить();

КонецФункции // 

&НаКлиенте
Процедура ГИГ_ТоварыПриИзмененииПосле(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьТоварыСводноНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ТоварыПриОкончанииРедактированияПосле(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Или Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьТекущуюСтрокуТоварыСводноНаКлиенте(ТекущиеДанные.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ТоварыСводноВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	///<-- Гигабайт (Чернов А.С.): КратностьПартии
	Если Поле.Имя = "ТоварыСводноКоличество" Тогда
		
		СтрокаСводно = ГИГ_ТоварыСводно.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если СтрокаСводно.КратностьПартии = 0 Или СтрокаСводно.КратностьЗаказу <= СтрокаСводно.КратностьОстаткам Тогда
			Возврат;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ГИГ_КратностьПартииКлиентСервер.ПолучитьТекстОстаткиКратностьПартии(СтрокаСводно);
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Сообщить();
		
	КонецЕсли; 
	///--> Гигабайт (Чернов А.С.) 
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ТоварыСводноПриАктивизацииСтрокиПосле(Элемент)
	
	ПодключитьОбработчикОжидания("ОтобратьСтрокиТоварыСводноНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ГИГ_УстановитьУсловноеОформление()
	
	///<-- Гигабайт (Чернов А.С.): КратностьПартии
	ГИГ_КратностьПартииВызовСервера.УстановитьУсловноеОформление(ЭтаФорма, "ТоварыСводно", "ТоварыСводно");
	///--> Гигабайт (Чернов А.С.)
	
	///<-- Гигабайт (Чернов А.С.): ОбеспечениеЗаказа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГИГ_Обеспечение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГИГ_Обеспечение.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Роса);
	НовыйШрифт = Новый Шрифт(Элементы.ГИГ_Обеспечение.Шрифт, , , Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", НовыйШрифт);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГИГ_Обеспечение.Имя);
	
	Для каждого ТекЭлемент Из Элементы.ГИГ_Обеспечение.ПодчиненныеЭлементы Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ТекЭлемент.Имя);
	КонецЦикла; 
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГИГ_Обеспечение.ОтборЕстьРасхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	//Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	///--> Гигабайт (Чернов А.С.) 
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ГруппаСтраницыПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	
	ГИГ_ГруппаСтраницыПриСменеСтраницыПосле(Элемент, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
&Вместо("ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок")
Процедура Рин1_ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт) 25.03.2019 17:25:21
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт) 25.03.2019 17:25:30
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	//bercut170120
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	//
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаписатьДокументВместо(Команда)
	
	//++Гольм А.А. (Гигабайт)
	Объект.СкидкиРассчитаны = Истина;
	
	//bercut110320
//Исходное	Если Объект.Проведен и Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") и ПолучитьСтатусВСсылке() = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
//{{20200625 ГлазуновДВ Добавили блокировку запуска распределения обеспечения по роли "Рин1_ЗаполнитьОбеспечение"
Если Объект.Проведен И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") 
	И ПолучитьСтатусВСсылке() = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован")
	И Не ОтсутствуетДоступКЗаполнитьОбеспечение() Тогда
//}}20200625 ГлазуновДВ
		
	////{{20201006 ГлазуновДВ 	
	//	Если Модифицированность Тогда
	//		ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	//	КонецЕсли;
	////}}20201006 ГлазуновДВ
		ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаВопросаОповещения",,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаполненииОбеспечения",ЭтотОбъект,Новый Структура("ПараметрыЗаписи", Параметры)),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
		
	Иначе 
		
		//--Гольм А.А. (Гигабайт)
		ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
		//++Гольм А.А. (Гигабайт)
		ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
		//--Гольм А.А. (Гигабайт)
	КонецЕсли;
	
КонецПроцедуры

//Механизм запрета изменения строк ТЧ если по ним созданы автоматические заказы на перемещение
&НаСервере
Процедура ЗаполнитьСписокЗапрещенныхСтрок()
	
	Если НЕ Объект.Ссылка.Пустая() И НЕ УправлениеДоступом.ЕстьРоль("ГИГ_ИзменениеРезервовНаУдаленномСкладе") Тогда
		
		ГИГ_ЗапрещенныеСтроки.Очистить();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказНаПеремещениеТовары.Номенклатура КАК Номенклатура,
		|	ЗаказНаПеремещениеТовары.Характеристика КАК Характеристика,
		|	ЗаказНаПеремещениеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		//|	ЗаказНаПеремещениеТовары.КодСтроки КАК КодСтроки,
		|	ЗаказНаПеремещениеТовары.Серия КАК Серия,
		|	ЗаказНаПеремещениеТовары.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения
		|ИЗ
		|	Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
		|ГДЕ
		|	ЗаказНаПеремещениеТовары.Ссылка.ДокументОснование = &ДокументОснование
		|	И НЕ ЗаказНаПеремещениеТовары.Ссылка.ПометкаУдаления
		|	И ЗаказНаПеремещениеТовары.Ссылка.ГИГ_СформированАвтоматически");
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Для каждого стр из объект.Товары Цикл
			Если Стр.КодСтроки = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура("Номенклатура,Характеристика,Серия,ГИГ_СхемаОбеспечения",
			Стр.Номенклатура,Стр.Характеристика,стр.Серия,стр.ГИГ_СхемаОбеспечения);
			
			МассивСтрок = ТаблицаРезультат.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() Тогда
				ГИГ_ЗапрещенныеСтроки.Добавить(Стр.КодСтроки);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСвернутостьГруппыНаКлиенте()
	
	Элементы.ГИГ_СворачиваемаяГруппаТоварыСводно.Видимость = ГИГ_ПоказатьТоварыСводно;
	Элементы.ГИГ_ДекорацияОткрытьТоварыСводно.Видимость    = Не ГИГ_ПоказатьТоварыСводно;
	Элементы.ГИГ_ДекорацияЗакрытьТоварыСводно.Видимость    = ГИГ_ПоказатьТоварыСводно;
	
	Элементы.ГИГ_ДекорацияЗаголовокТоварыСводно.Заголовок = ?(ГИГ_ПоказатьТоварыСводно, "стандартное отображение", "консолидированное отображение");
	
КонецПроцедуры

&НаКлиенте
&Вместо("КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении")
Процедура Рин1_КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НеОтгружатьЧастями" Тогда
		НеОтгружатьЧастямиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаОтгрузки" Тогда
		ДатаОтгрузкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТребуетсяЗалогЗаТару" Тогда
		ТребуетсяЗалогЗаТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыХарактеристика" Тогда
		ТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковок" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
		ТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
		ТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
		ТоварыСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидки" Тогда
		ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаРучнойСкидки" Тогда
		ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСумма" Тогда
		ТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаНДС" Тогда
		ТоварыСуммаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСерия" Тогда
		ТоварыСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСклад" Тогда
		ТоварыСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыОтмененоПричиныОтменыНеИспользуются" Тогда
		ТоварыОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыОтменено" Тогда
		ТоварыОтмененоПриИзменении(Элемент);
		//Добавлено начало ГИГ
	ИначеЕсли Элемент.Имя = "ПроцентОбщий" Тогда
		ПроцентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
		ПроцентПриИзменении(Элемент);
		//Добавлено конецГИГ
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьАвтоматическиеСкидкиЗавершение")
Процедура Рин1_НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры)
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		//++Гольм А.А. (Гигабайт)
		//ПоказатьОповещениеПользователя(
		//	НСтр("ru = 'Скидки (наценки)'"),
		//	,
		//	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		//	БиблиотекаКартинок.Информация32);
		//--Гольм А.А. (Гигабайт)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение")
Процедура Рин1_НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		Для каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			
			ОбработатьСтрокуТЧНаСервере(Строка,СтруктураДействий);			
			
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Строка);
			
			Если не ТекущаяСтрока = Неопределено и не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
				ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,Объект.Дата,ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
			КонецЕсли;
			
		КонецЦикла;
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьРучнуюСкидкуЗавершение")
Процедура Рин1_НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		Для каждого ТекущаяСтрока Из Объект.Товары Цикл
			
			ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
						
			Если не ТекущаяСтрока = Неопределено и не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
				ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,Объект.Дата,ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
			КонецЕсли;
			
		КонецЦикла;
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбеспечениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ГИГ_ТекущаяСтраница = "", Элементы.ГруппаОсновное, Элементы.Найти(ГИГ_ТекущаяСтраница));
		ГИГ_ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
		Возврат;
	Иначе
		Объект.СкидкиРассчитаны = Истина;
		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
		ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		
		ОбновитьОбеспечениеНаКлиенте();
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ГИГ_ТекущаяСтраница = "", Элементы.ГруппаОсновное, Элементы.Найти(ГИГ_ТекущаяСтраница));
		
	КонецЕсли;
	
	ГИГ_ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбеспечениеНаКлиенте()
	
	ОбновитьОбеспечениеНаСервере();
	
	Для каждого ТекущаяСтрока Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
		Элементы.ГИГ_Обеспечение.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбеспечениеНаСервере(ОбработатьНеТребующиесяСтроки = Ложь)
	
	// Получим таблицу обеспечения типовыми механизмами
	ПереченьВариантов = Новый Массив;
	ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);
	ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.Требуется);
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", ПереченьВариантов, Истина, Ложь);
	//++Гольм А.А. (Гигабайт) 23.04.2019 10:35:27
	ПараметрыЗаполнения.Вставить("ДобавлятьСторноДвиженийДокумента", Ложь);
	//--Гольм А.А. (Гигабайт) 23.04.2019 10:35:55
	
	ПутиКДанным = Новый Соответствие; //Описание особенностей формы
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки"); // дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	ПараметрыДокумента.Вставить("ГруппаСкладов", Объект.Склад);
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыКлиентов);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	
	СтрокиВыбранные = Новый Массив;
	
	Для Каждого Строка из Объект.Товары Цикл	
		Если ОбработатьНеТребующиесяСтроки Тогда			
			Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
				Или Строка.Отменено
				Или ЗначениеЗаполнено(Строка.ГИГ_Назначение)
				Тогда
				Продолжить;
			КонецЕсли;			
		Иначе
			Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
				Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
				Или Строка.Отменено
				Или ЗначениеЗаполнено(Строка.ГИГ_Назначение)
				Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли; 		
		СтрокиВыбранные.Добавить(Строка.ПолучитьИдентификатор());	
	КонецЦикла;
	
	Таблица = ГИГ_ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
	СтрокиВыбранные,
	Объект,
	Объект.Товары,
	ПараметрыЗаполнения,
	ПараметрыДокумента);
	
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(Таблица, "Товары", НСтр("ru = 'Товары'")));
		Возврат;
	КонецЕсли;
	
	// Добавим к таблице обеспечения строки с обособленным обеспечением
	Для Каждого Строка из Объект.Товары Цикл
		
		Если Не Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	
	ГИГ_Обеспечение.ПолучитьЭлементы().Очистить();
	
	ТЗОбеспечениеИтоги = РеквизитФормыВЗначение("ГИГ_ОбеспечениеИтоги");
	ТЗОбеспечениеИтоги.Очистить();
	
	
	СкладыДляОпределенияСхем = Новый Массив;
	СкладыДляОпределенияСхем.Добавить(Объект.Склад);	
	ТаблицаСхемОбеспечения = ГИГ_МодульСервер.ГИГ_ПолучитьТаблицуДоступныхСхемОбеспечения(СкладыДляОпределенияСхем);
	
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	
	СтрокиТовары = Объект.Товары.Выгрузить(, "Номенклатура, Характеристика, ВариантОбеспечения, ГИГ_СхемаОбеспечения, ДатаОтгрузки, Количество");
	СтрокиТовары.Очистить();
	
	Для Каждого Строка из Объект.Товары Цикл
		
		Если ОбработатьНеТребующиесяСтроки Тогда
			Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
				Или Строка.Отменено
				Или ЗначениеЗаполнено(Строка.ГИГ_Назначение)
				Тогда
				Продолжить;
			КонецЕсли;
		Иначе 
			Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
				Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
				Или Строка.Отменено
				Или ЗначениеЗаполнено(Строка.ГИГ_Назначение)
				Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		НоваяСтрока = СтрокиТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		//bercut030719
		//нужно найти строки с одинаковым товаром и установить им одинаковую дату отгрузки макс иначе запрос не коректно дает количество в доступно (свертка ниже делает дубли строк)
		//касяк в том что - количество доступно умножается на количество строк в запросе от гиг
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Номенклатура",Строка.Номенклатура);
		ПараметрыОтбора.Вставить("ГИГ_СхемаОбеспечения",Строка.ГИГ_СхемаОбеспечения);
		ПараметрыОтбора.Вставить("ВариантОбеспечения",Строка.ВариантОбеспечения);
		ПараметрыОтбора.Вставить("Характеристика",Строка.Характеристика);
		НайденныеДублиСтрок = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеДублиСтрок.Количество() > 1 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЗаказКлиентаТовары.ДатаОтгрузки) КАК ДатаОтгрузки
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &Ссылка
			|	И ЗаказКлиентаТовары.Номенклатура = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
			Запрос.УстановитьПараметр("Ссылка", Объект.ссылка);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда
				Результат = РезультатЗапроса.Выгрузить();
				НоваяСтрока.ДатаОтгрузки = Результат[0].ДатаОтгрузки; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиТовары.Свернуть("Номенклатура, Характеристика, ВариантОбеспечения, ГИГ_СхемаОбеспечения, ДатаОтгрузки", "Количество");
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.ВариантОбеспечения КАК ВариантОбеспечения,
	|	Т.ГИГ_СхемаОбеспечения КАК СхемаОбеспечения,
	|	Т.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Т.Количество КАК Количество
	|ПОМЕСТИТЬ ВтЗаказКлиентаТовары
	|ИЗ
	|	&Товары КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Количество КАК Количество
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ВтЗаказКлиентаТовары КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Характеристика,
	|	Т.Номенклатура,
	|	Т.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	Т.ВариантОбеспечения КАК ВариантОбеспечения,
	|	Т.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Т.Количество КАК Количество,
	|	Т.Отгружено КАК Отгружено,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Назначение КАК Назначение
	|ПОМЕСТИТЬ ВтТаблицаОбеспечения
	|ИЗ
	|	&ТаблицаОбеспечения КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСхем.Склад КАК Склад,
	|	ТаблицаСхем.СкладИсточник КАК СкладИсточник,
	|	ВЫРАЗИТЬ(ТаблицаСхем.СхемаОбеспечения КАК Справочник.СхемыОбеспечения) КАК СхемаОбеспечения,
	|	ТаблицаСхем.СрокОбеспеченияМин КАК СрокОбеспеченияМин,
	|	ТаблицаСхем.СрокОбеспеченияМакс КАК СрокОбеспеченияМакс,
	|	ТаблицаСхем.ЭтоПроизводство КАК ЭтоПроизводство
	|ПОМЕСТИТЬ ВтДоступныеСхемы
	|ИЗ
	|	&ТаблицаСхем КАК ТаблицаСхем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтСкладыДляПеремещения
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДоступныеСхемы КАК ВтДоступныеСхемы
	|		ПО Склады.Ссылка = ВтДоступныеСхемы.СкладИсточник
	|			И (ВтДоступныеСхемы.Склад = &Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.ВНаличииОстаток КАК ВНаличии,
	|	Т.ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада,
	|	Т.ВРезервеПодЗаказОстаток КАК ВРезервеПодЗаказ
	|ПОМЕСТИТЬ ВтСвободныеОстатки
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Склад В
	|					(ВЫБРАТЬ
	|						ВтСкладыДляПеремещения.Ссылка
	|					ИЗ
	|						ВтСкладыДляПеремещения)
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ВтТовары.Номенклатура КАК Номенклатура,
	|						ВтТовары.Характеристика КАК Характеристика
	|					ИЗ
	|						ВтТовары КАК ВтТовары)) КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	СУММА(Т.Свободно) КАК Свободно,
	|	&НачалоТекущегоДня КАК ДатаДоступности,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтДоступныеДляПеремещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Склад КАК Склад,
	|		Т.ВНаличии - Т.ВРезервеСоСклада - Т.ВРезервеПодЗаказ КАК Свободно,
	|		Т.Номенклатура КАК Номенклатура,
	|		Т.Характеристика КАК Характеристика
	|	ИЗ
	|		ВтСвободныеОстатки КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Склад,
	|		Т.Количество,
	|		Т.Номенклатура,
	|		Т.Характеристика
	|	ИЗ
	|		ВтТовары КАК ВТТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
	|			ПО ВТТовары.Номенклатура = Т.Номенклатура
	|				И ВТТовары.Характеристика = Т.Характеристика
	|				И (Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
	|				И (Т.Количество < 0)) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Склад,
	|	Т.Количество + ЕСТЬNULL(ОстаткиСклада.ВНаличии - ОстаткиСклада.ВРезервеСоСклада - ОстаткиСклада.ВРезервеПодЗаказ, 0),
	|	Т.ДатаДоступности,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|ИЗ
	|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК ОстаткиСклада
	|		ПО Т.Склад = ОстаткиСклада.Склад
	|			И Т.Характеристика = ОстаткиСклада.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|		ПО Т.Номенклатура = ВтТовары.Номенклатура
	|			И Т.Характеристика = ВтТовары.Характеристика,
	|	ВтСкладыДляПеремещения КАК ВТСкладыДляПеремещения
	|ГДЕ
	|	Т.ДатаДоступности > ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Набор.Номенклатура КАК Номенклатура,
	|	Набор.ВНаличии КАК Доступно,
	|	Набор.Склад КАК Склад,
	|	Набор.СхемаОбеспечения КАК СхемаОбеспечения,
	|	Набор.СпособОбеспеченияПотребностейСрокИсполненияЗаказа КАК СрокОбеспеченияМин,
	|	Набор.СпособОбеспеченияПотребностейГарантированныйСрокОтгрузки КАК СрокОбеспеченияМакс,
	|	Набор.ГИГ_Приоритет КАК ПриоритетСхемыОбеспечения,
	|	Набор.ГИГ_ЗакупкаСПроизводства КАК ЗакупкаСПроизводства,
	|	Набор.Характеристика КАК Характеристика,
	|	Набор.ДатаДоступности КАК ДатаДоступности,
	|	Набор.ЭтоПроизводство КАК ЭтоПроизводство
	|ПОМЕСТИТЬ ВтСхемы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГИГ_НоменклатураНаСкладеПоставщика.Номенклатура КАК Номенклатура,
	|		ГИГ_НоменклатураНаСкладеПоставщика.Характеристика КАК Характеристика,
	|		ГИГ_НоменклатураНаСкладеПоставщика.Количество КАК ВНаличии,
	|		ВтДоступныеСхемы.Склад КАК Склад,
	|		ВтДоступныеСхемы.СхемаОбеспечения КАК СхемаОбеспечения,
	|		ВтДоступныеСхемы.СрокОбеспеченияМин КАК СпособОбеспеченияПотребностейСрокИсполненияЗаказа,
	|		ВтДоступныеСхемы.СрокОбеспеченияМакс КАК СпособОбеспеченияПотребностейГарантированныйСрокОтгрузки,
	|		&НачалоТекущегоДня КАК ДатаДоступности,
	|		СхемыОбеспечения.ГИГ_Приоритет КАК ГИГ_Приоритет,
	|		СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства КАК ГИГ_ЗакупкаСПроизводства,
	|		ВтДоступныеСхемы.ЭтоПроизводство КАК ЭтоПроизводство
	|	ИЗ
	|		ВтТовары КАК ВтТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГИГ_НоменклатураНаСкладеПоставщика КАК ГИГ_НоменклатураНаСкладеПоставщика
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДоступныеСхемы КАК ВтДоступныеСхемы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыОбеспечения КАК СхемыОбеспечения
	|					ПО ВтДоступныеСхемы.СхемаОбеспечения = СхемыОбеспечения.Ссылка
	|						И (НЕ СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства)
	|				ПО ГИГ_НоменклатураНаСкладеПоставщика.Склад = ВтДоступныеСхемы.СкладИсточник
	|					И (ВтДоступныеСхемы.Склад = &Склад)
	|			ПО ВтТовары.Номенклатура = ГИГ_НоменклатураНаСкладеПоставщика.Номенклатура
	|				И ВтТовары.Характеристика = ГИГ_НоменклатураНаСкладеПоставщика.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура,
	|		ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Характеристика,
	|		0,
	|		ВтДоступныеСхемы.Склад,
	|		ВтДоступныеСхемы.СхемаОбеспечения,
	|		ВтДоступныеСхемы.СрокОбеспеченияМин + ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки,
	|		ВтДоступныеСхемы.СрокОбеспеченияМакс + ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки,
	|		&НачалоТекущегоДня,
	|		СхемыОбеспечения.ГИГ_Приоритет,
	|		СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства,
	|		ВтДоступныеСхемы.ЭтоПроизводство
	|	ИЗ
	|		ВтТовары КАК ВтТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства КАК ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДоступныеСхемы КАК ВтДоступныеСхемы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыОбеспечения КАК СхемыОбеспечения
	|					ПО ВтДоступныеСхемы.СхемаОбеспечения = СхемыОбеспечения.Ссылка
	|						И (СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства)
	|				ПО ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СкладПоставщика = ВтДоступныеСхемы.СкладИсточник
	|					И (ВтДоступныеСхемы.Склад = &Склад)
	|			ПО ВтТовары.Номенклатура = ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура
	|				И ВтТовары.Характеристика = ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтДоступныеДляПеремещения.Номенклатура,
	|		ВтДоступныеДляПеремещения.Характеристика,
	|		ВтДоступныеДляПеремещения.Свободно,
	|		ВтДоступныеСхемы.Склад,
	|		ВтДоступныеСхемы.СхемаОбеспечения,
	|		ВтДоступныеСхемы.СрокОбеспеченияМин,
	|		ВтДоступныеСхемы.СрокОбеспеченияМакс,
	|		ВтДоступныеДляПеремещения.ДатаДоступности,
	|		СхемыОбеспечения.ГИГ_Приоритет,
	|		СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства,
	|		ВтДоступныеСхемы.ЭтоПроизводство
	|	ИЗ
	|		ВтДоступныеДляПеремещения КАК ВтДоступныеДляПеремещения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДоступныеСхемы КАК ВтДоступныеСхемы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыОбеспечения КАК СхемыОбеспечения
	|				ПО ВтДоступныеСхемы.СхемаОбеспечения = СхемыОбеспечения.Ссылка
	|			ПО ВтДоступныеДляПеремещения.Склад = ВтДоступныеСхемы.СкладИсточник
	|				И (ВтДоступныеСхемы.Склад = &Склад)) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Номенклатура,
	|	Набор.Склад,
	|	Набор.СхемаОбеспечения,
	|	Набор.Характеристика,
	|	Набор.ДатаДоступности,
	|	Набор.ГИГ_Приоритет,
	|	Набор.ГИГ_ЗакупкаСПроизводства,
	|	Набор.ЭтоПроизводство,
	|	Набор.ВНаличии,
	|	Набор.СпособОбеспеченияПотребностейСрокИсполненияЗаказа,
	|	Набор.СпособОбеспеченияПотребностейГарантированныйСрокОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТаблицаОбеспечения.Склад КАК Склад,
	|	ВтТаблицаОбеспечения.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВтТаблицаОбеспечения.ДатаОтгрузки КАК ДатаОтгрузки,
	|	СУММА(ВтТаблицаОбеспечения.Количество) КАК Количество,
	|	ВтТаблицаОбеспечения.Отгружено КАК Отгружено,
	|	ВтТаблицаОбеспечения.Номенклатура КАК Номенклатура,
	|	ВтТаблицаОбеспечения.Характеристика КАК Характеристика,
	|	ВтТаблицаОбеспечения.Назначение КАК Назначение
	|ПОМЕСТИТЬ ВтСтрокиКРаспределению
	|ИЗ
	|	ВтТаблицаОбеспечения КАК ВтТаблицаОбеспечения
	|ГДЕ
	|	(ВтТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|			ИЛИ ВтТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТаблицаОбеспечения.Отгружено,
	|	ВтТаблицаОбеспечения.Номенклатура,
	|	ВтТаблицаОбеспечения.Склад,
	|	ВтТаблицаОбеспечения.ВариантОбеспечения,
	|	ВтТаблицаОбеспечения.ДатаОтгрузки,
	|	ВтТаблицаОбеспечения.Характеристика,
	|	ВтТаблицаОбеспечения.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВложенныйЗапрос.СхемаОбеспечения КАК СхемаОбеспечения,
	|	ВложенныйЗапрос.СрокОбеспеченияМин КАК СрокОбеспеченияМин,
	|	ВложенныйЗапрос.СрокОбеспеченияМакс КАК СрокОбеспеченияМакс,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	МАКСИМУМ(ВложенныйЗапрос.Отгружено) КАК Отгружено,
	|	МАКСИМУМ(ВложенныйЗапрос.Доступно) КАК Доступно,
	|	ВложенныйЗапрос.ДатаОбеспечения КАК ДатаОбеспечения,
	|	МИНИМУМ(ВложенныйЗапрос.ДатаОтгрузки) КАК ДатаОтгрузки,
	|	ВложенныйЗапрос.ЗакупкаСПроизводства КАК ЗакупкаСПроизводства,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|			ТОГДА 0
	|		КОГДА ВложенныйЗапрос.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	|			ТОГДА 50
	|		КОГДА ВложенныйЗапрос.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|			ТОГДА 100
	|		КОГДА ВложенныйЗапрос.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ТОГДА 100
	|		ИНАЧЕ 9999
	|	КОНЕЦ КАК ПриоритетВариантаОбеспечения,
	|	ВложенныйЗапрос.ПриоритетСхемыОбеспечения КАК ПриоритетСхемыОбеспечения,
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.ВариантОбеспечения) КАК ВариантОбеспеченияПредставление,
	|	ВложенныйЗапрос.Назначение КАК Назначение,
	|	ВложенныйЗапрос.ЭтоПроизводство КАК ЭтоПроизводство,
	|	ВложенныйЗапрос.СкладПоставщика КАК СкладПоставщика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтСтрокиКРаспределению.Склад КАК Склад,
	|		ВтСтрокиКРаспределению.Номенклатура КАК Номенклатура,
	|		ВтСтрокиКРаспределению.Характеристика КАК Характеристика,
	|		ВтСтрокиКРаспределению.ВариантОбеспечения КАК ВариантОбеспечения,
	|		ЕСТЬNULL(ВтСхемы.СхемаОбеспечения, ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка)) КАК СхемаОбеспечения,
	|		ЕСТЬNULL(ВтСхемы.СрокОбеспеченияМин, 0) КАК СрокОбеспеченияМин,
	|		ЕСТЬNULL(ВтСхемы.СрокОбеспеченияМакс, 0) КАК СрокОбеспеченияМакс,
	|		ВЫБОР
	|			КОГДА ВтСхемы.ДатаДоступности ЕСТЬ NULL
	|				ТОГДА &НачалоТекущегоДня
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ВтСхемы.ДатаДоступности, ДЕНЬ, ВтСхемы.СрокОбеспеченияМакс)
	|		КОНЕЦ КАК ДатаОбеспечения,
	|		ВЫБОР
	|			КОГДА ВтСхемы.ДатаДоступности ЕСТЬ NULL
	|				ТОГДА &НачалоТекущегоДня
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ВтСхемы.ДатаДоступности, ДЕНЬ, ВтСхемы.СрокОбеспеченияМакс)
	|		КОНЕЦ КАК ДатаОтгрузки,
	|		0 КАК Количество,
	|		ВтСтрокиКРаспределению.Отгружено КАК Отгружено,
	|		ЕСТЬNULL(ВтСхемы.Доступно, 0) КАК Доступно,
	|		ЕСТЬNULL(ВтСхемы.ЗакупкаСПроизводства, ЛОЖЬ) КАК ЗакупкаСПроизводства,
	|		ЕСТЬNULL(ВтСхемы.ПриоритетСхемыОбеспечения, 9999) КАК ПриоритетСхемыОбеспечения,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|		ВтСхемы.ЭтоПроизводство КАК ЭтоПроизводство,
	|		ВтСхемы.СхемаОбеспечения.ГИГ_СкладПоставщика КАК СкладПоставщика
	|	ИЗ
	|		ВтСтрокиКРаспределению КАК ВтСтрокиКРаспределению
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСхемы КАК ВтСхемы
	|			ПО ВтСтрокиКРаспределению.Склад = ВтСхемы.Склад
	|				И ВтСтрокиКРаспределению.Номенклатура = ВтСхемы.Номенклатура
	|				И ВтСтрокиКРаспределению.Характеристика = ВтСхемы.Характеристика
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|			ПО ВтСтрокиКРаспределению.Номенклатура = ВтТовары.Номенклатура
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтТаблицаОбеспечения.Склад,
	|		ВтТаблицаОбеспечения.Номенклатура,
	|		ВтТаблицаОбеспечения.Характеристика,
	|		ВтТаблицаОбеспечения.ВариантОбеспечения,
	|		ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка),
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА ВтТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|				ТОГДА &НачалоТекущегоДня
	|			ИНАЧЕ ВтТаблицаОбеспечения.ДатаОтгрузки
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ВтТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|				ТОГДА &НачалоТекущегоДня
	|			ИНАЧЕ ВтТаблицаОбеспечения.ДатаОтгрузки
	|		КОНЕЦ,
	|		0,
	|		ВтТаблицаОбеспечения.Отгружено,
	|		ВтТаблицаОбеспечения.Количество,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ВтТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|				ТОГДА -100
	|			КОГДА ВтТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	|				ТОГДА -50
	|			ИНАЧЕ 9999
	|		КОНЕЦ,
	|		ВтТаблицаОбеспечения.Назначение,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ВтТаблицаОбеспечения КАК ВтТаблицаОбеспечения
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|			ПО ВтТаблицаОбеспечения.Номенклатура = ВтТовары.Номенклатура
	|	ГДЕ
	|		ВтТаблицаОбеспечения.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|		И ВтТаблицаОбеспечения.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтТаблицаОбеспечения.Склад,
	|		ВтТаблицаОбеспечения.Номенклатура,
	|		ВтТаблицаОбеспечения.Характеристика,
	|		ВтТаблицаОбеспечения.ВариантОбеспечения,
	|		ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка),
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА ВтТаблицаОбеспечения.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА &НачалоТекущегоДня
	|			ИНАЧЕ ВтТаблицаОбеспечения.ДатаОтгрузки
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ВтТаблицаОбеспечения.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА &НачалоТекущегоДня
	|			ИНАЧЕ ВтТаблицаОбеспечения.ДатаОтгрузки
	|		КОНЕЦ,
	|		0,
	|		ВтТаблицаОбеспечения.Отгружено,
	|		ВтТаблицаОбеспечения.Количество,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ВтТаблицаОбеспечения.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА -75
	|			ИНАЧЕ -25
	|		КОНЕЦ,
	|		ВтТаблицаОбеспечения.Назначение,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ВтТаблицаОбеспечения КАК ВтТаблицаОбеспечения
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|			ПО ВтТаблицаОбеспечения.Номенклатура = ВтТовары.Номенклатура
	|	ГДЕ
	|		ВтТаблицаОбеспечения.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ВтТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Склад,
	|		ВтЗаказКлиентаТовары.Номенклатура,
	|		ВтЗаказКлиентаТовары.Характеристика,
	|		ВтЗаказКлиентаТовары.ВариантОбеспечения,
	|		ВтЗаказКлиентаТовары.СхемаОбеспечения,
	|		ЕСТЬNULL(СхемыОбеспечения.СрокОбеспеченияМин, 0),
	|		ЕСТЬNULL(СхемыОбеспечения.СрокОбеспеченияМакс, 0),
	|		ВЫБОР
	|			КОГДА ВтЗаказКлиентаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|				ТОГДА ВЫБОР
	|						КОГДА СхемыОбеспечения.СрокОбеспеченияМакс ЕСТЬ NULL
	|							ТОГДА &НачалоТекущегоДня
	|						ИНАЧЕ ДОБАВИТЬКДАТЕ(&НачалоТекущегоДня, ДЕНЬ, СхемыОбеспечения.СрокОбеспеченияМакс)
	|					КОНЕЦ
	|			КОГДА ВтЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|				ТОГДА &НачалоТекущегоДня
	|			ИНАЧЕ ВтЗаказКлиентаТовары.ДатаОтгрузки
	|		КОНЕЦ,
	|		ВтЗаказКлиентаТовары.ДатаОтгрузки,
	|		ВтЗаказКлиентаТовары.Количество,
	|		0,
	|		0,
	|		ЕСТЬNULL(СхемыОбеспечения.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства, ЛОЖЬ),
	|		ВЫБОР
	|			КОГДА ВтЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|				ТОГДА -100
	|			КОГДА ВтЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	|				ТОГДА -50
	|			КОГДА ВтЗаказКлиентаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|				ТОГДА ЕСТЬNULL(СхемыОбеспечения.СхемаОбеспечения.ГИГ_Приоритет, 9999)
	|			ИНАЧЕ 9999
	|		КОНЕЦ,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|		СхемыОбеспечения.ЭтоПроизводство,
	|		СхемыОбеспечения.СхемаОбеспечения.ГИГ_СкладПоставщика
	|	ИЗ
	|		ВтЗаказКлиентаТовары КАК ВтЗаказКлиентаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВтДоступныеСхемы.СхемаОбеспечения КАК СхемаОбеспечения,
	|				ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура КАК Номенклатура,
	|				ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Характеристика КАК Характеристика,
	|				МАКСИМУМ(ВтДоступныеСхемы.СрокОбеспеченияМин + ЕСТЬNULL(ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки, 0)) КАК СрокОбеспеченияМин,
	|				МАКСИМУМ(ВтДоступныеСхемы.СрокОбеспеченияМакс + ЕСТЬNULL(ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки, 0)) КАК СрокОбеспеченияМакс,
	|				ВтДоступныеСхемы.ЭтоПроизводство КАК ЭтоПроизводство
	|			ИЗ
	|				ВтДоступныеСхемы КАК ВтДоступныеСхемы
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства КАК ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства
	|					ПО ВтДоступныеСхемы.СкладИсточник = ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СкладПоставщика
	|			ГДЕ
	|				ВтДоступныеСхемы.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВтДоступныеСхемы.СхемаОбеспечения,
	|				ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура,
	|				ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Характеристика,
	|				ВтДоступныеСхемы.ЭтоПроизводство
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВтДоступныеСхемы.СхемаОбеспечения,
	|				ВтЗаказКлиентаТовары.Номенклатура,
	|				ВтЗаказКлиентаТовары.Характеристика,
	|				МАКСИМУМ(ВтДоступныеСхемы.СрокОбеспеченияМин),
	|				МАКСИМУМ(ВтДоступныеСхемы.СрокОбеспеченияМакс),
	|				ВтДоступныеСхемы.ЭтоПроизводство
	|			ИЗ
	|				ВтДоступныеСхемы КАК ВтДоступныеСхемы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаказКлиентаТовары КАК ВтЗаказКлиентаТовары
	|					ПО ВтДоступныеСхемы.СхемаОбеспечения = ВтЗаказКлиентаТовары.СхемаОбеспечения
	|			ГДЕ
	|				НЕ ВтДоступныеСхемы.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВтДоступныеСхемы.СхемаОбеспечения,
	|				ВтЗаказКлиентаТовары.Номенклатура,
	|				ВтЗаказКлиентаТовары.Характеристика,
	|				ВтДоступныеСхемы.ЭтоПроизводство) КАК СхемыОбеспечения
	|			ПО ВтЗаказКлиентаТовары.СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения
	|				И ВтЗаказКлиентаТовары.Номенклатура = СхемыОбеспечения.Номенклатура
	|				И ВтЗаказКлиентаТовары.Характеристика = СхемыОбеспечения.Характеристика) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
	|		ПО ВложенныйЗапрос.Номенклатура = ОсновныеСпецификации.Номенклатура
	|ГДЕ
	|	(ВложенныйЗапрос.ЭтоПроизводство ЕСТЬ NULL
	|			ИЛИ НЕ ОсновныеСпецификации.Спецификация ЕСТЬ NULL
	|			ИЛИ ВложенныйЗапрос.ЭтоПроизводство = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СхемаОбеспечения,
	|	ВложенныйЗапрос.ЗакупкаСПроизводства,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.ВариантОбеспечения,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.СрокОбеспеченияМин,
	|	ВложенныйЗапрос.СрокОбеспеченияМакс,
	|	ВложенныйЗапрос.ПриоритетСхемыОбеспечения,
	|	ВложенныйЗапрос.ДатаОбеспечения,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.ЭтоПроизводство,
	|	ВложенныйЗапрос.СкладПоставщика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ПриоритетСхемыОбеспечения,
	|	ДатаОбеспечения,
	|	СхемаОбеспечения
	|ИТОГИ
	|	СУММА(Количество),
	|	МАКСИМУМ(Отгружено),
	|	МАКСИМУМ(Доступно)
	|ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("ТаблицаОбеспечения", Таблица);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Товары", СтрокиТовары);
	
	Запрос.УстановитьПараметр("ТаблицаСхем", ТаблицаСхемОбеспечения);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	//Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	//Возврат;
	
	Результат = Запрос.Выполнить();
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		СтрокаНоменклатура = ГИГ_Обеспечение.ПолучитьЭлементы().Добавить();
		СтрокаНоменклатура.Представление        = ВыборкаНоменклатура.НоменклатураПредставление;
		СтрокаНоменклатура.Номенклатура         = ВыборкаНоменклатура.Номенклатура;
		СтрокаНоменклатура.КоличествоДоступно   = ВыборкаНоменклатура.Доступно;
		СтрокаНоменклатура.КоличествоПодобрано  = ВыборкаНоменклатура.Количество;
		СтрокаНоменклатура.КоличествоВЗаказе    = ВыборкаНоменклатура.Количество;		
		
		ОбновитьОтображаемыеДанныеОбеспечения(СтрокаНоменклатура);
		
		ЭлементыНоменклатуры = СтрокаНоменклатура.ПолучитьЭлементы();
		
		ЕстьВариантТребуется = Ложь;
		ЕстьВариантОбособленно = Ложь;
		ЕстьБезОграниченийТребуется = Ложь;
		ЕстьБезОграниченийОбособленно = Ложь;
		
		ДатаОбеспеченияРезервКДате = '00010101';
		ИтогоКоличествоДоступно = 0;
		
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаДействия = ЭлементыНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДействия, Выборка);
			СтрокаДействия.Представление = Выборка.ВариантОбеспеченияПредставление;
			
			СтрокаДействия.КоличествоПодобрано  = Выборка.Количество;
			СтрокаДействия.КоличествоВЗаказе    = Выборка.Количество;
			СтрокаДействия.Склад                = Объект.Склад;  //нужно бы еще предусмотреть брать склад из строки
			
			Если Выборка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда
				
				СтрокаДействия.ДатаОтгрузкиВЗаказе = Выборка.ДатаОтгрузки;
				
				Если Выборка.Доступно > 0 Тогда
					СтрокаДействия.КоличествоПриходПлан = Выборка.Доступно;
					ДатаОбеспеченияРезервКДате = Выборка.ДатаОбеспечения;
				КонецЕсли; 
				
				СтрокаДействия.КоличествоДоступно = ИтогоКоличествоДоступно + СтрокаДействия.КоличествоПриходПлан;
				ИтогоКоличествоДоступно = Макс(СтрокаДействия.КоличествоДоступно - СтрокаДействия.КоличествоПодобрано, 0);
				
				Если СтрокаДействия.КоличествоДоступно > 0 Тогда
					СтрокаДействия.ДатаОбеспечения = ДатаОбеспеченияРезервКДате;
				КонецЕсли; 
				
			ИначеЕсли ДоступноКоличествоБезОграничений(Выборка) Тогда
				СтрокаДействия.КоличествоДоступно = -1;
			Иначе
				СтрокаДействия.КоличествоДоступно = Выборка.Доступно;
			КонецЕсли;
			
			ОбновитьОтображаемыеДанныеОбеспечения(СтрокаДействия,объект.Ссылка);
			
			Если Выборка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется Тогда
				ЕстьВариантТребуется = Истина;
				Если ДоступноКоличествоБезОграничений(Выборка) Тогда
					ЕстьБезОграниченийТребуется = Истина;
				КонецЕсли; 
			КонецЕсли; 
			
			Если Выборка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
				ЕстьВариантОбособленно = Истина;
				Если ДоступноКоличествоБезОграничений(Выборка) Тогда
					ЕстьБезОграниченийОбособленно = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если (Выборка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
				Или Выборка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется)
				И Не ДоступноКоличествоБезОграничений(Выборка) Тогда
				СтрокаИтоги = ТЗОбеспечениеИтоги.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтоги, Выборка);
				СтрокаИтоги.КоличествоДоступно   = Выборка.Доступно;
				СтрокаИтоги.КоличествоПодобрано  = Выборка.Количество;
				СтрокаИтоги.КоличествоВЗаказе    = Выборка.Количество;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ЕстьВариантТребуется И Не ЕстьБезОграниченийТребуется Тогда
			
			СтрокаДействия = ЭлементыНоменклатуры.Добавить();
			СтрокаДействия.Представление       = "К обеспечению";
			СтрокаДействия.Номенклатура        = ВыборкаНоменклатура.Номенклатура;
			СтрокаДействия.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.Требуется;
			СтрокаДействия.КоличествоПодобрано = 0;
			СтрокаДействия.КоличествоВЗаказе   = 0;
			СтрокаДействия.КоличествоДоступно  = -1;
			СтрокаДействия.ДействиеПодобрать   = 0;
			СтрокаДействия.ДатаОтгрузки        = НачалоТекущегоДня;
			СтрокаДействия.ДатаОбеспечения     = НачалоТекущегоДня;
			
			ОбновитьОтображаемыеДанныеОбеспечения(СтрокаДействия);
			
		КонецЕсли;
		
		Если ЕстьВариантОбособленно И Не ЕстьБезОграниченийОбособленно Тогда 
			
			СтрокаДействия = ЭлементыНоменклатуры.Добавить();
			СтрокаДействия.Представление       = "Обеспечивать обособленно";
			СтрокаДействия.Номенклатура        = ВыборкаНоменклатура.Номенклатура;
			СтрокаДействия.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.Обособленно;
			СтрокаДействия.КоличествоПодобрано = 0;
			СтрокаДействия.КоличествоВЗаказе   = 0;
			СтрокаДействия.КоличествоДоступно  = -1;
			СтрокаДействия.ДействиеПодобрать   = 0;
			СтрокаДействия.ДатаОтгрузки        = НачалоТекущегоДня;
			СтрокаДействия.ДатаОбеспечения     = НачалоТекущегоДня;
			
			ОбновитьОтображаемыеДанныеОбеспечения(СтрокаДействия);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ТЗОбеспечениеИтоги.Свернуть("Номенклатура, СхемаОбеспечения, КоличествоДоступно, СкладПоставщика", "КоличествоПодобрано, КоличествоВЗаказе");
	ЗначениеВРеквизитФормы(ТЗОбеспечениеИтоги, "ГИГ_ОбеспечениеИтоги");
	
	УстановитьОтборЕстьРасхождения(Элементы.ГИГ_ОбеспечениеГИГ_ОтображатьТолькоРасхожденияОбеспечения.Пометка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтображаемыеДанныеОбеспечения(ТекущаяСтрока, ЗаказКлиента = Неопределено)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВариантОбеспечения) Тогда
		
		Если ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов") Тогда
			Если ТекущаяСтрока.КоличествоПодобрано > ТекущаяСтрока.КоличествоДоступно Тогда
				ТекущаяСтрока.ИзменениеОбеспеченияКартинка = 4; // ухудшение
			ИначеЕсли ТекущаяСтрока.КоличествоПодобрано < ТекущаяСтрока.КоличествоДоступно Тогда
				ТекущаяСтрока.ИзменениеОбеспеченияКартинка = 0; // улучшение
			Иначе
				ТекущаяСтрока.ИзменениеОбеспеченияКартинка = 8; // без изменений
			КонецЕсли;
		Иначе
			Если ТекущаяСтрока.КоличествоДоступно < ТекущаяСтрока.КоличествоВЗаказе И Не ТекущаяСтрока.КоличествоДоступно < 0 Тогда
				ТекущаяСтрока.ИзменениеОбеспеченияКартинка = 4; // ухудшение
			ИначеЕсли ТекущаяСтрока.КоличествоДоступно > ТекущаяСтрока.КоличествоВЗаказе Тогда
				ТекущаяСтрока.ИзменениеОбеспеченияКартинка = 0; // улучшение
			Иначе
				ТекущаяСтрока.ИзменениеОбеспеченияКартинка = 8; // без изменений
			КонецЕсли;
		КонецЕсли; 
		
		ТекущаяСтрока.КоличествоДоступноОписание = ?(ТекущаяСтрока.КоличествоДоступно = -1, Символ(8734), Формат(ТекущаяСтрока.КоличествоДоступно, "ЧЦ=15; ЧДЦ=3"));
		
		#Если Сервер Тогда
			
			//bercut260619  посчитаем срок поставки комплектующих: берем самый плохой прогнозный срок - на собственном складе, в не обособленных поступлениях, на складе поставщиков 
			Если ТекущаяСтрока.ЭтоПроизводство Тогда
				
				//получим количество из заказа
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
				|ИЗ
				|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
				|ГДЕ
				|	ЗаказКлиентаТовары.Ссылка = &Ссылка
				|	И ЗаказКлиентаТовары.Номенклатура = &Номенклатура";
				
				Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
				Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если РезультатЗапроса.Пустой() Тогда
					КоличествоЗаказанное = 1;
				Иначе
					Результат = РезультатЗапроса.Выгрузить();
					ТекущаяСтрока.КоличествоЗаказанное = Результат[0].Количество;
				КонецЕсли;
				
				СрокПоставкиОтсутствует = Ложь;
				
				ТЗ_СрокПоставки = Новый ТаблицаЗначений;
				ТЗ_СрокПоставки.Колонки.Добавить("Номенклатура");
				ТЗ_СрокПоставки.Колонки.Добавить("СрокПоставки");
				
				//получим используемые комплектующие
				ЗапросСпецификаций = Новый Запрос;
				ЗапросСпецификаций.Текст = 
				"ВЫБРАТЬ
				|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура КАК Номенклатура,
				|	РесурсныеСпецификацииМатериалыИУслуги.Количество КАК Количество
				|ИЗ
				|	РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
				|		ПО ОсновныеСпецификации.Спецификация = РесурсныеСпецификацииМатериалыИУслуги.Ссылка
				|ГДЕ
				|	ОсновныеСпецификации.Номенклатура = &Номенклатура
				|	И РесурсныеСпецификацииМатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
				|	И НЕ РесурсныеСпецификацииМатериалыИУслуги.Номенклатура.ПометкаУдаления";
				
				ЗапросСпецификаций.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
				
				РезультатЗапросаСпецификаций = ЗапросСпецификаций.Выполнить();
				
				ВыборкаДетальныеЗаписиСпецификаций = РезультатЗапросаСпецификаций.Выбрать();
				
				Пока ВыборкаДетальныеЗаписиСпецификаций.Следующий() Цикл 
					//найдем остатки
					
					НоваяСтрокаТЗ = ТЗ_СрокПоставки.Добавить();
					НоваяСтрокаТЗ.Номенклатура = ВыборкаДетальныеЗаписиСпецификаций.Номенклатура;
					
					ЗапросОстатков = Новый Запрос;
					ЗапросОстатков.Текст = 
					"ВЫБРАТЬ
					|	""ТоварыНаСкладах"" КАК Источник,
					|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Остаток,
					|	1 КАК СрокПоставки
					|ИЗ
					|	РегистрНакопления.ТоварыНаСкладах.Остатки(
					|			,
					|			Склад = &СкладСвой
					|				И Номенклатура = &Номенклатура
					|				И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ТоварыНаСкладахОстатки
					|ГДЕ
					|	ТоварыНаСкладахОстатки.ВНаличииОстаток >= &ТребуемоеКоличество
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	""ТоварыПланируемоеПоступление"",
					|	ДвижениеТоваровОбороты.ПланируемоеПоступлениеОборот,
					|	РАЗНОСТЬДАТ(&ТекущаяДата, ДвижениеТоваровОбороты.Распоряжение.ДатаПоступления, ДЕНЬ)
					|ИЗ
					|	РегистрНакопления.ДвижениеТоваров.Обороты(
					|			,
					|			,
					|			,
					|			Склад = &СкладСвой
					|				И Номенклатура = &Номенклатура
					|				И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ДвижениеТоваровОбороты
					|ГДЕ
					|	ДвижениеТоваровОбороты.ПланируемоеПоступлениеОборот >= &ТребуемоеКоличество
					|	И ДвижениеТоваровОбороты.Распоряжение ССЫЛКА Документ.ЗаказПоставщику
					|	И РАЗНОСТЬДАТ(&ТекущаяДата, ДвижениеТоваровОбороты.Распоряжение.ДатаПоступления, ДЕНЬ) > 0
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	""ТоварыСкладПоставщиков"",
					|	ГИГ_НоменклатураНаСкладеПоставщика.Количество,
					|	ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки
					|ИЗ
					|	РегистрСведений.ГИГ_НоменклатураНаСкладеПоставщика КАК ГИГ_НоменклатураНаСкладеПоставщика
					|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства КАК ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства
					|		ПО ГИГ_НоменклатураНаСкладеПоставщика.Номенклатура = ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура
					|			И ГИГ_НоменклатураНаСкладеПоставщика.Склад = ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СкладПоставщика
					|ГДЕ
					|	ГИГ_НоменклатураНаСкладеПоставщика.Номенклатура = &Номенклатура
					|	И ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура = &Номенклатура
					|	И ГИГ_НоменклатураНаСкладеПоставщика.Количество >= &ТребуемоеКоличество
					|	И ГИГ_НоменклатураНаСкладеПоставщика.Склад = &СкладПоставщика
					|	И ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СкладПоставщика = &СкладПоставщика
					|	И ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки > 0
					|	И ГИГ_НоменклатураНаСкладеПоставщика.Количество > 0
					|
					|УПОРЯДОЧИТЬ ПО
					|	СрокПоставки";
					
					ЗапросОстатков.УстановитьПараметр("Номенклатура", ВыборкаДетальныеЗаписиСпецификаций.Номенклатура);
					ЗапросОстатков.УстановитьПараметр("СкладПоставщика", ТекущаяСтрока.СхемаОбеспечения.ГИГ_СкладПоставщика);
					ЗапросОстатков.УстановитьПараметр("СкладСвой", ТекущаяСтрока.Склад); //нужно бы еще предусмотреть брать склад из строки тч
					ЗапросОстатков.УстановитьПараметр("ТекущаяДата", ТекущаяДата());					
					ЗапросОстатков.УстановитьПараметр("ТребуемоеКоличество", ТекущаяСтрока.КоличествоЗаказанное * ВыборкаДетальныеЗаписиСпецификаций.Количество); //в спецификации на производство одного изделия может ребоваться разное количество
					
					РезультатЗапросаОстатков = ЗапросОстатков.Выполнить();
					
					Если РезультатЗапросаОстатков.Пустой() Тогда
						
						СрокПоставкиОтсутствует = Истина;
						Прервать; // прервем главный цикл т.к. если нет хотя бы одного комплектующего выпускаемого изделия то нет смысла предлагать сроки поставки
						
					Иначе
						
						ВыборкаДетальныеЗаписиОстатков = РезультатЗапросаОстатков.Выбрать();
						
						Пока ВыборкаДетальныеЗаписиОстатков.Следующий() Цикл
							НоваяСтрокаТЗ.СрокПоставки = ВыборкаДетальныеЗаписиОстатков.СрокПоставки; //
							Прервать; //прервем этот цикл т.к. получили самое лучшее условие поставки и продолжаем обрабатывать следующую комплектующую
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если СрокПоставкиОтсутствует Тогда
					ТекущаяСтрока.СрокПоставки = "";
					ТекущаяСтрока.КоличествоДоступно = 0;
					ТекущаяСтрока.КоличествоДоступноОписание = ?(ТекущаяСтрока.КоличествоДоступно = 0, Символ(8734), Формат(ТекущаяСтрока.КоличествоДоступно, "ЧЦ=15; ЧДЦ=3"));
					ТекущаяСтрока.ДатаОбеспечения = ТекущаяДата();
					ТекущаяСтрока.ИзменениеОбеспеченияКартинка = 8;
				Иначе
					ТЗ_СрокПоставки.Сортировать("СрокПоставки Убыв");
					ТекущаяСтрока.СрокПоставки =  Строка(ТЗ_СрокПоставки[0].СрокПоставки) + " дн.";
					ТекущаяСтрока.КоличествоДоступно = Формат(ТекущаяСтрока.КоличествоЗаказанное, "ЧЦ=15; ЧДЦ=3");
					ТекущаяСтрока.КоличествоДоступноОписание = Строка(Формат(ТекущаяСтрока.КоличествоЗаказанное, "ЧЦ=15; ЧДЦ=3"));
					ТекущаяСтрока.ДатаОбеспечения = ТекущаяДата() + ТЗ_СрокПоставки[0].СрокПоставки*24*60*60;
					ТекущаяСтрока.ДатаОтгрузки    = ТекущаяДата() + ТЗ_СрокПоставки[0].СрокПоставки*24*60*60;
					ТекущаяСтрока.ИзменениеОбеспеченияКартинка = 0;
				КонецЕсли;
				
			Иначе
				ТекущаяСтрока.СрокПоставки = ?(ТекущаяСтрока.СрокОбеспеченияМин = ТекущаяСтрока.СрокОбеспеченияМакс, "", "" + ТекущаяСтрока.СрокОбеспеченияМин + " - " + ТекущаяСтрока.СрокОбеспеченияМакс + " дн.");
			КонецЕсли;
			//
		#Иначе
			ТекущаяСтрока.СрокПоставки = ?(ТекущаяСтрока.СрокОбеспеченияМин = ТекущаяСтрока.СрокОбеспеченияМакс, "", "" + ТекущаяСтрока.СрокОбеспеченияМин + " - " + ТекущаяСтрока.СрокОбеспеченияМакс + " дн.");
		#КонецЕсли
		
	Иначе
		
		ТекущаяСтрока.ИзменениеОбеспеченияКартинка = 8;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТоварыСводноНаКлиенте()
	
	Если Не ГИГ_ПоказатьТоварыСводно Тогда
		Возврат;
	КонецЕсли; 
	
	Элементы.ТоварыСводно.ТекущаяСтрока = 0;
	Элементы.ТоварыСкрыватьОтмененныеСтрокиСводно.Пометка = СкрыватьОтмененныеСтроки;
	
	// Запомним текущую строку в товары сводно
	Если Элементы.ТоварыСводно.ТекущиеДанные <> Неопределено Тогда
		ВыбраннаяНоменклатура = Элементы.ТоварыСводно.ТекущиеДанные.Номенклатура;
	ИначеЕсли Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ВыбраннаяНоменклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
	Иначе
		ВыбраннаяНоменклатура = Неопределено;
	КонецЕсли;
	
	// Запомним выделенные строки в товары сводно
	Если Элементы.ТоварыСводно.ВыделенныеСтроки.Количество() = ГИГ_ТоварыСводно.Количество() И ГИГ_ТоварыСводно.Количество() > 1 Тогда
		// Выделены все строки
		ВыделенныеСтроки = Неопределено;
	Иначе
		ВыделенныеСтроки = Новый Массив;
		Для каждого ВыделеннаяСтрока Из Элементы.ТоварыСводно.ВыделенныеСтроки Цикл
			СтрокаСводно = ГИГ_ТоварыСводно.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если СтрокаСводно <> Неопределено И ЗначениеЗаполнено(СтрокаСводно.Номенклатура) Тогда
				ВыделенныеСтроки.Добавить(СтрокаСводно.Номенклатура);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	//
	ОбновитьТоварыСводноНаСервере();
	
	// Восстановим выделенные строки и текущую строку
	УстановитьТекущуюСтрокуТоварыСводноНаКлиенте(ВыбраннаяНоменклатура);
	ВыделитьСтрокиТоварыСводноНаКлиенте(ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТоварыСводноНаСервере()
	
	ТЗТовары = Объект.Товары.Выгрузить(, "Отменено, Номенклатура, Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, СуммаПроцентОбщий, Рин1_КонтрольКратностиПройден");
	ОтмененныеСтроки = ТЗТовары.НайтиСтроки(Новый Структура("Отменено", Истина));
	Для каждого ТекСтрока Из ОтмененныеСтроки Цикл
		ТекСтрока.Количество                = 0;
		ТекСтрока.Сумма                     = 0;
		ТекСтрока.СуммаНДС                  = 0;
		ТекСтрока.СуммаСНДС                 = 0;
		ТекСтрока.СуммаРучнойСкидки         = 0;
		ТекСтрока.СуммаАвтоматическойСкидки = 0;
		ТекСтрока.СуммаПроцентОбщий         = 0;
	КонецЦикла;
	
	ТЗТовары.Свернуть("Номенклатура", "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, СуммаПроцентОбщий, Рин1_КонтрольКратностиПройден");
	ТЗТовары.Колонки.Добавить("Разница");
	ТЗТовары.ЗаполнитьЗначения(1, "Разница");
	
	Для каждого СтрокаСводно Из ГИГ_ТоварыСводно Цикл
		НоваяСтрока = ТЗТовары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаСводно.Номенклатура;
		НоваяСтрока.Разница = -1;
	КонецЦикла; 
	
	ТЗТовары.Свернуть("Номенклатура", "Разница, Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, СуммаПроцентОбщий, Рин1_КонтрольКратностиПройден");
	ТЗТовары.Колонки.Добавить("Артикул");
	ТЗТовары.Колонки.Добавить("Производитель");
	ТЗТовары.Колонки.Добавить("КратностьПартии");
	
	Для каждого ТекСтрока Из ТЗТовары Цикл
		
		Если ТекСтрока.Разница = 0 Тогда // строка есть - нужно обновить итоги
			
			НайденныеСтроки = ГИГ_ТоварыСводно.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаСводно = НайденныеСтроки[0];
			Иначе
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Разница > 0 Тогда // новая строка - нужно добавить
			
			Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаСводно = ГИГ_ТоварыСводно.Добавить();
			
		ИначеЕсли ТекСтрока.Разница < 0 Тогда // нужно удалить
			
			НайденныеСтроки = ГИГ_ТоварыСводно.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ГИГ_ТоварыСводно.Удалить(НайденнаяСтрока);
			КонецЦикла; 
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаСводно, ТекСтрока);
		ЗаполнитьЗначенияСвойств(СтрокаСводно, ГИГ_КратностьПартииВызовСервера.ПолучитьДанныеКратностиПартии(Объект, ТекСтрока, ГИГ_КэшДанныеНоменклатуры));
				
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
&Вместо("ОбработкаВыбораПодборНаСервере")
Процедура Рин1_ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТЧТовары = Объект.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТовара);
				
		ОбработатьСтрокуТЧНаСервере(СтрокаТЧТовары.ПолучитьИдентификатор(),СтруктураДействий);		
		
		СтрокаТЧТовары.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		
		//
		Если не СтрокаТЧТовары.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") и ЗначениеЗаполнено(СтрокаТЧТовары.Цена) Тогда
			СтрокаТЧТовары.Рин1_ДатаИзменения = ТекущаяДата();
			ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(СтрокаТЧТовары.Номенклатура, СтрокаТЧТовары.Характеристика, СтрокаТЧТовары.ВидЦены);
			Если не ДанныеПоВалюте.Количество() = 0 Тогда
				ДанныеПоВалюте.Свойство("Курс",СтрокаТЧТовары.Рин1_Курс);
				ДанныеПоВалюте.Свойство("Валюта",СтрокаТЧТовары.Рин1_Валюта);
				ДанныеПоВалюте.Свойство("ДатаКурса",СтрокаТЧТовары.Рин1_ДатаКурса);
				ДанныеПоВалюте.Свойство("ДатаТарифа",СтрокаТЧТовары.Рин1_ДатаТарифа);
			КонецЕсли;
		КонецЕсли;	
		//
		
	КонецЦикла;
	
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.Товары);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОткрытьПодборВместо(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
	"Документ.ЗаказКлиента.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='заказ клиента'"));
	КонецЕсли;
	
	ОперацииПередачи = ОперацииПередачиТоваров();
	//++Гольм А.А. (Гигабайт)
	СкидкаПримененная = ТестРасчетСк();
	//--Гольм А.А. (Гигабайт)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",               Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",          Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС",       Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВозвращатьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	Если ОперацииПередачи.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Истина);
	ПараметрыФормы.Вставить("Склад",                                   Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",                                  Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                  ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Назначение",                              Объект.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                           Объект.Подразделение);
	//++Гольм А.А. (Гигабайт)
	ПараметрыФормы.Вставить("ПримененнаяСкидка",                       СкидкаПримененная);
	//--Гольм А.А. (Гигабайт)
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",              Истина);
	
	ПараметрыФормы.Вставить("ВариантыОбеспечения",    ВариантыОбеспечения);
	
	//++Гольм А.А. (Гигабайт)
	ОткрытьФорму("Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьКоличествоНеКратноНаКлиенте(НуженОтбор)
	
	Элементы.ТоварыСводноГИГ_ОтобратьКоличествоНеКратно.Пометка = НуженОтбор;
	
	Если НуженОтбор Тогда
		Элементы.ТоварыСводно.ОтборСтрок = Новый ФиксированнаяСтруктура("КоличествоНеКратно", НуженОтбор);
	Иначе
		Элементы.ТоварыСводно.ОтборСтрок = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьСтрокиТоварыСводноНаКлиенте()
	
	Если Не ГИГ_ПоказатьТоварыСводно Тогда
		Элементы.Товары.ОтборСтрок = Неопределено;
		Возврат;
	КонецЕсли; 
	
    Элементы.Товары.ОтборСтрок = Неопределено;

	НуженОтбор = Ложь;
	
	Если Элементы.ТоварыСводно.ВыделенныеСтроки.Количество() <> ГИГ_ТоварыСводно.Количество() Тогда 
		
		ВыделеннаяНоменклатура = Новый Массив;
		Для каждого ВыделеннаяСтрока Из Элементы.ТоварыСводно.ВыделенныеСтроки Цикл
			ВыделеннаяНоменклатура.Добавить(ГИГ_ТоварыСводно.НайтиПоИдентификатору(ВыделеннаяСтрока).Номенклатура);
		КонецЦикла; 
		
		НуженОтбор = Ложь;
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			
			СтрокаТовары.ГИГ_ОтборСтроки = 
			(ВыделеннаяНоменклатура.Найти(СтрокаТовары.Номенклатура) <> Неопределено) // отбор по номенклатуре
			И (Не СкрыватьОтмененныеСтроки Или СтрокаТовары.Отменено = Ложь);         // отбор по отмененным строкам если задан
			
			НуженОтбор = НуженОтбор Или СтрокаТовары.ГИГ_ОтборСтроки;
			
		КонецЦикла;
		
	ИначеЕсли СкрыватьОтмененныеСтроки Тогда 
		
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			
			СтрокаТовары.ГИГ_ОтборСтроки = (СтрокаТовары.Отменено = Ложь);         // отбор по отмененным строкам если задан
			
			НуженОтбор = НуженОтбор Или СтрокаТовары.ГИГ_ОтборСтроки;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если НуженОтбор Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ГИГ_ОтборСтроки", Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	ВыделитьСтрокиТоварыНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура Рин1_ПередЗагрузкойДанныхИзНастроекНаСервереПосле(Настройки)
	
	ГИГ_ПередЗагрузкойДанныхИзНастроекНаСервереПосле(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерераспределитьКоличество(ТекущиеДанные)
	
	Если ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада")
		Или ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов")
		Тогда
		ИтогоКоличествоДоступно = ТекущиеДанные.КоличествоДоступно;
	Иначе
		ИтогоКоличествоДоступно = ПолучитьИтогоКоличествоДоступное(ТекущиеДанные);
	КонецЕсли;
	
	//++добавление условия контроля по складу 21.05.2019
	Если ЗначениеЗаполнено(ТекущиеДанные.СкладПоставщика) И ТекущиеДанные.КоличествоДоступно > 0 Тогда
		Если ТекущиеДанные.КоличествоПодобрано > ТекущиеДанные.КоличествоДоступно Тогда
			ТекущиеДанные.КоличествоПодобрано = ТекущиеДанные.КоличествоДоступно;
			УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
		КонецЕсли;
		Если ТекущиеДанные.КоличествоПодобрано > ИтогоКоличествоДоступно Тогда
			КоличествоРаспределить = ТекущиеДанные.КоличествоПодобрано - ИтогоКоличествоДоступно;
		Иначе
			КоличествоРаспределить = 0;
		КонецЕсли;
		Если КоличествоРаспределить <> 0 Тогда
			КоличествоПодобрано = 0;
			РодительТекДанных = ТекущиеДанные.ПолучитьРодителя();
			Если РодительТекДанных <> Неопределено Тогда
				ДействияНоменклатуры = РодительТекДанных.ПолучитьЭлементы();
				//ОтборСтрок = Новый Структура("Номенклатура, СкладПоставщика", ТекущиеДанные.Номенклатура, ТекущиеДанные.СкладПоставщика);
				Для каждого ТекДействие Из ДействияНоменклатуры Цикл
					Если ТекДействие.Номенклатура = ТекущиеДанные.Номенклатура И ТекДействие.СкладПоставщика = ТекущиеДанные.СкладПоставщика И ТекДействие.КоличествоДоступно > 0 Тогда
						Если ТекДействие.СхемаОбеспечения <> ТекущиеДанные.СхемаОбеспечения Тогда
							КоличествоПодобрано = ТекДействие.КоличествоПодобрано;
							ТекДействие.КоличествоПодобрано	= Макс(ТекДействие.КоличествоПодобрано - КоличествоРаспределить, 0);
							КоличествоРаспределить = КоличествоРаспределить - (КоличествоПодобрано - ТекДействие.КоличествоПодобрано);
							УстановитьИтогоКоличествоПодобрано(ТекДействие);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ИтогоКоличествоДоступно >= 0 И ТекущиеДанные.КоличествоПодобрано > ИтогоКоличествоДоступно Тогда
			ТекущиеДанные.КоличествоПодобрано = ИтогоКоличествоДоступно;
			УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	//--
	
	
	//Если ИтогоКоличествоДоступно >= 0 И ТекущиеДанные.КоличествоПодобрано > ИтогоКоличествоДоступно Тогда
	//	//++Гольм А.А. (Гигабайт) 27.05.2019 13:50:56
	//	//ТекущиеДанные.КоличествоПодобрано = ИтогоКоличествоДоступно;
	//	//УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
	//	//Если ЗначениеЗаполнено(ТекущиеДанные.СкладПоставщика) И ТекущиеДанные.КоличествоДоступно > 0 Тогда
	//	//	//ничего не делаем, будет обрабатываться по отдельному алгоритму
	//	//	Если ИтогоКоличествоДоступно > 0 И ТекущиеДанные.КоличествоПодобрано > ИтогоКоличествоДоступно Тогда
	//	//		ТекущиеДанные.КоличествоПодобрано = ИтогоКоличествоДоступно;
	//	//		УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
	//	//	КонецЕсли;
	//	//	Если ИтогоКоличествоДоступно = 0 Тогда
	//	//		ТекущиеДанные.КоличествоПодобрано = Мин(ТекущиеДанные.КоличествоПодобрано, ТекущиеДанные.КоличествоДоступно);
	//	//		УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
	//	//	КонецЕсли;
	//	//Иначе
	//		ТекущиеДанные.КоличествоПодобрано = ИтогоКоличествоДоступно;
	//		УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
	//	//КонецЕсли;
	//	//--Гольм А.А. (Гигабайт) 27.05.2019 13:51:34
	//КонецЕсли;
	
	Для каждого ТекНоменклатура Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
		
		Если Не ТекущиеДанные.Номенклатура = ТекНоменклатура.Номенклатура Тогда
			Продолжить;
		КонецЕсли; 
		
		ДействияНоменклатуры = ТекНоменклатура.ПолучитьЭлементы();
		
		ИтогоКоличествоПодобрано = 0;
		ИтогоКоличествоВЗаказе   = 0;
		
		Для каждого ТекДействие Из ДействияНоменклатуры Цикл
			
			Если (ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно")
				Или ТекДействие.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"))
				И ТекущиеДанные.ВариантОбеспечения <> ТекДействие.ВариантОбеспечения Тогда
				Продолжить;
			КонецЕсли;
			
			ИтогоКоличествоПодобрано = ИтогоКоличествоПодобрано + ТекДействие.КоличествоПодобрано;
			ИтогоКоличествоВЗаказе   = ИтогоКоличествоВЗаказе + ТекДействие.КоличествоВЗаказе;
			
		КонецЦикла; 
		
		КоличествоРаспределить = ИтогоКоличествоПодобрано - ИтогоКоличествоВЗаказе;
		
		Если КоличествоРаспределить > 0 Тогда
			// нужно распределить снизу вверх
			НачИтератор = -(ДействияНоменклатуры.Количество() - 1);
			КонИтератор = 0;
			НужноУменьшить = Истина; // уменьшаем
		ИначеЕсли КоличествоРаспределить < 0 Тогда 
			// нужно распределить сверху вниз
			НачИтератор = 0;
			КонИтератор = ДействияНоменклатуры.Количество() - 1;
			НужноУменьшить = Ложь; // увеличиваем
			КоличествоРаспределить = -КоличествоРаспределить
		Иначе
			// ничего не изменилось
			Возврат;
		КонецЕсли; 
		
		Для й = НачИтератор По КонИтератор Цикл
			
			ТекДействие = ДействияНоменклатуры.Получить(Макс(-й, й));
			
			Если ТекДействие = ТекущиеДанные
				Или ((ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно")
				Или ТекДействие.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"))
				И ТекущиеДанные.ВариантОбеспечения <> ТекДействие.ВариантОбеспечения) Тогда
				// для обособленного обеспечения можно увеличивать и уменьшать только у такого же варианта обеспечения
				Продолжить;
			КонецЕсли;
			
			Если НужноУменьшить Тогда
				
				Если ТекДействие.КоличествоПодобрано >= КоличествоРаспределить Тогда
					ТекДействие.КоличествоПодобрано = ТекДействие.КоличествоПодобрано - КоличествоРаспределить;
					КоличествоРаспределить = 0;
				Иначе
					КоличествоРаспределить = КоличествоРаспределить - ТекДействие.КоличествоПодобрано;
					ТекДействие.КоличествоПодобрано = 0;
				КонецЕсли;
				
			Иначе // нужно увеличить
				
				Если ТекДействие.КоличествоДоступно < 0 Тогда
					// это бесконечное количество, можно брать сколько угодно
					ТекДействие.КоличествоПодобрано = ТекДействие.КоличествоПодобрано + КоличествоРаспределить;
					КоличествоРаспределить = 0;
				Иначе
					
					КоличествоДоступно = ПолучитьИтогоКоличествоДоступное(ТекДействие);
					//КоличествоДоступно = ТекДействие.КоличествоДоступно - ТекДействие.КоличествоПодобрано;
					Если КоличествоДоступно > 0 Тогда
						
						Если КоличествоДоступно >= КоличествоРаспределить Тогда
							ТекДействие.КоличествоПодобрано = ТекДействие.КоличествоПодобрано + КоличествоРаспределить;
							КоличествоРаспределить = 0;
						Иначе
							ТекДействие.КоличествоПодобрано = ТекДействие.КоличествоПодобрано + КоличествоДоступно;
							КоличествоРаспределить = КоличествоРаспределить - КоличествоДоступно;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
			
			УстановитьИтогоКоличествоПодобрано(ТекДействие);
			
			Если КоличествоРаспределить = 0 Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если КоличествоРаспределить <> 0 Тогда
			
			// если что-то осталось это значит что пользователь ввел количество итог которого даст отличия от количества в заказе
			// будем корректировать редактируемую строку на значения отклонения
			Если НужноУменьшить Тогда
				ТекущиеДанные.КоличествоПодобрано = ТекущиеДанные.КоличествоПодобрано - КоличествоРаспределить;
			Иначе
				ТекущиеДанные.КоличествоПодобрано = ТекущиеДанные.КоличествоПодобрано + КоличествоРаспределить;
			КонецЕсли; 
			
			УстановитьИтогоКоличествоПодобрано(ТекущиеДанные);
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекПараметр = ДополнительныеПараметры.СтароеЗначение;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
			Объект.Соглашение = ДополнительныеПараметры.НовоеЗначение;
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			СоглашениеПриИзмененииСервер();
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
		КонецЕсли;
		
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Партнер = ДополнительныеПараметры.НовоеЗначение;
			ПартнерПриИзмененииСервер();
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
				ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
		
//		РассчитатьСкидкиНаценкиРучныеДляТаблЧасти();
		
	Иначе
		
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
			Объект.Соглашение = ДополнительныеПараметры.СтароеЗначение;
		КонецЕсли;
		
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Партнер = ДополнительныеПараметры.СтароеЗначение;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПослеЗаписиПосле(ПараметрыЗаписи)
	
	ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура Рин1_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи)
	
	ГИГ_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПриОткрытииПосле(Отказ)
	
	ГИГ_ПриОткрытииПосле(Отказ);
КонецПроцедуры

&НаСервере
Процедура Рин1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	ГИГ_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПровестиДокументВместо(Команда)
	
	//++Гольм А.А. (Гигабайт)
	Объект.СкидкиРассчитаны = Истина;
	
	//bercut110320
//Исходное	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
		
//{{20200625 ГлазуновДВ Добавили блокировку запуска распределения обеспечения по роли "Рин1_ЗаполнитьОбеспечение"
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") И ОтсутствуетДоступКЗаполнитьОбеспечение() Тогда
//}}20200625 ГлазуновДВ

		//--Гольм А.А. (Гигабайт)
		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
		//++Гольм А.А. (Гигабайт)
		ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
		//--Гольм А.А. (Гигабайт)
		
	иначе
		
		Если Объект.Проведен и ПолучитьСтатусВСсылке() = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
			
		////{{20201006 ГлазуновДВ 	
		//	Если Модифицированность Тогда
		//		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
		//	КонецЕсли;
		////}}20201006 ГлазуновДВ
			ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаВопросаОповещения",,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаполненииОбеспечения",ЭтотОбъект,Новый Структура("ПараметрыЗаписи", Параметры)),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
			
		ИначеЕсли не Объект.Проведен и ПолучитьСтатусВСсылке() = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") Тогда 
			
		////{{20201006 ГлазуновДВ 	
		//	Если Модифицированность Тогда
		//		ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
		//	КонецЕсли;
		////}}20201006 ГлазуновДВ
			ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаВопросаОповещения",,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаполненииОбеспечения",ЭтотОбъект,Новый Структура("ПараметрыЗаписи", Параметры)),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
			
		Иначе 
			
			//--Гольм А.А. (Гигабайт)
			ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
			//++Гольм А.А. (Гигабайт)
			ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
			//--Гольм А.А. (Гигабайт)
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	
	// тут програмно обрабатываем изменения добавленной колонки...
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Элемент.Имя = "ПроцентОбщий" Тогда 
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_3");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
		
	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_4");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_РазбитьСтрокуВместо(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	//{Гига suv 14.02.2018 СхемыОбеспеченияДляЗаказов ЗапрещенныеСтроки определена в расширении
	Если НЕ ГИГ_ЗапрещенныеСтроки.НайтиПоЗначению(ТаблицаФормы.ТекущиеДанные.КодСтроки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//Гига suv 14.02.2018}
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
	"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки",
	ЗависимыеРеквизиты(), "КоличествоУпаковок");
	
	Если ТаблицаФормы.ТекущиеДанные <> Неопределено Тогда
		ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТаблицаФормы.ТекущиеДанные);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
	ДанныеТаблицы,
	ТаблицаФормы,
	Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеДляТаблЧасти()
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда 
		АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
		// добавлено ГИГ
		Если Объект.Товары.Количество() > 0 Тогда 
			Для Каждого ТекущаяСтрока из Объект.Товары Цикл 
				// автоматическое заполнение по скидкам / наценкам
				Если ТекущаяСтрока <> Неопределено тогда  
					Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
						СсылкаНоменклатура = ТекущаяСтрока.Номенклатура;
						РассчитатьСкидкиНаценкиКлиент();
						ТекущаяСтрока.ПроцентРучнойСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
						
						ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						
						ГИГ_РассчитатьПроцентОбщий(ТекущаяСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура)
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	ЗначениеСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	ТекЭлемент = Элементы.Товары.ТекущиеДанные;
	ТекЭлемент.ПроцентРучнойСкидки = ЗначениеСкидки;	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_СкрыватьОтмененныеСтрокиПосле(Команда)
	
	Если Не ГИГ_ПоказатьТоварыСводно Тогда
		Возврат;
	КонецЕсли; 
	
	ГИГ_СкрыватьОтмененныеСтрокиПосле(Команда);
	
	Элементы.ТоварыСкрыватьОтмененныеСтроки1.Пометка = СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыВидЦеныПриИзмененииВместо(Элемент)	
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если не ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.ПроцентРучнойСкидки         = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
		ТекущаяСтрока.СуммаРучнойСкидки           = 0;
	Иначе
		ТекущаяСтрока.СуммаРучнойСкидки           = 0;//очищаем если пользователь поставил вручную 
		ПрименныеСкидки = ПолучитьОбработатьСкидки(ТекущаяСтрока.Номенклатура);
		ПрименныеСкидки.Свойство("АвтоСкидка",ТекущаяСтрока.ПроцентАвтоматическойСкидки);
		ПрименныеСкидки.Свойство("РучнаяСкидка",ТекущаяСтрока.ПроцентРучнойСкидки);	
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	УстановитьКурсВалютуПоСтроке();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенуДляСтрокиСПроизвольнойЦенойПоВидуЦенИзСоглашения(Номенклатура,Характеристика)
	
	Если Объект.Соглашение.ВидЦен = Справочники.ВидыЦен.ПустаяСсылка() Тогда
		Возврат 0;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена * КурсыВалютСрезПоследних.Курс / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 1) КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
		|		ПО (КурсыВалютСрезПоследних.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)";
		
		Запрос.УстановитьПараметр("ВидЦены", Объект.Соглашение.ВидЦен);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат 0;
		Иначе
			Попытка  //хбз что за ошибка тут вылетает. Не показали случай
			  Возврат РезультатЗапроса.Выгрузить()[0].Цена;
			Исключение
			  Возврат 0;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьЦенуДляСтрокиСПроизвольнойЦенойПоВидуЦенИзСоглашения()

&НаКлиенте
Процедура Рин1_ТоварыВыборВместо(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++Гольм А.А. (Гигабайт) 19.03.2019 13:22:18
	Если ЗапретИзмененияСтроки(Элемент.ТекущиеДанные.КодСтроки) Тогда
		Возврат;
	КонецЕсли;
	//--Гольм А.А. (Гигабайт) 19.03.2019 13:22:26
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
	Истина, "Документ.ЗаказКлиента.Форма.ФормаДокумента.Элементы.Товары.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыВариантОбеспечения И Не ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		///<-- Гигабайт (Чернов А.С.): ОЕМПотребность - строки ОЕМ потребности не обрабатываем
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если СтрокаТЧ <> Неопределено И ЗначениеЗаполнено(СтрокаТЧ.ГИГ_Назначение) Тогда
			Возврат;
		КонецЕсли; 
		///--> Гигабайт (Чернов А.С.) 
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму(
				//++Гольм А.А. (Гигабайт)
				"Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				//"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				//--Гольм А.А. (Гигабайт)
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Иначе
			
			ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
			ПараметрыПроверки.Поля.Удалить("Подразделение");
			
			Если ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
				
				ПараметрыФормы = ПараметрыВыбораОбеспечения();
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
					ЭтаФорма, УникальныйИдентификатор);
					
				Иначе
					Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru = 'Товары'"));
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		//пока отключим
		//СтандартнаяОбработка = Ложь;
		//
		//Если НЕ Объект.СкидкиРассчитаны Тогда
		//	СтруктураПараметры = Новый Структура;
		//	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		//	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		//	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		//	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		//	
		//	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		//	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		//		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		//	РассчитатьСкидкиБезПримененияКОбъекту();
		//КонецЕсли;
		//
		//ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		//СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ПравоНаЧтениеВидаЦены Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец",        УникальныйИдентификатор);
			
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыНоменклатураПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ЭтоНоваяСтрока = ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка");//
	
	Если ЭтоНоваяСтрока Тогда	
		//устанавливаем 1
		ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Количество = 1;		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
	
	ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ЭтоНоваяСтрока Тогда
		//сфокусируемся на количестве после ввода
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
	КонецЕсли;
	
	УстановитьКурсВалютуПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПередУдалениемПеред(Элемент, Отказ)
	
	Отказ = ЗапретИзмененияСтроки(Элемент.ТекущиеДанные.КодСтроки);
	
	Если Элемент.ТекущиеДанные.Отменено и Строка(Элемент.ТекущиеДанные.ПричинаОтмены) = "Разделение заказа клиента" Тогда
		Отказ = Истина;
		Сообщить("Удалять строку, которая участвовала в разделении запрещено!");
		Возврат;
	ИначеЕсли Элемент.ТекущиеДанные.Отменено Тогда
		Отказ = Истина;
		Сообщить("Удалять отмененную строку запрещено!");
		Возврат;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПриОкончанииРедактированияВместо(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	///<-- Гигабайт (Чернов А.С.): ТоварыСводно
	// может возникнуть если не выбрать номенклатуру
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	///--> Гигабайт (Чернов А.С.) 
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ТоварыКешТекущейСтроки);
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОтгрузки) И Объект.НеОтгружатьЧастями
			И (КешСтроки = Неопределено Или КешСтроки.ДатаОтгрузки <> ТекущиеДанные.ДатаОтгрузки) Тогда
			ПриИзмененииДатыОтгрузкиВТабЧасти(); // вызов сервера.
		КонецЕсли;
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КешСтроки, СкладГруппа);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	//++Гольм А.А. (Гигабайт) 19.03.2019 14:09:12
	ГИГ_ТоварыПриОкончанииРедактированияПосле(Элемент, НоваяСтрока, ОтменаРедактирования);
	//--Гольм А.А. (Гигабайт) 19.03.2019 14:09:18
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыСтавкаНДСПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыУпаковкаПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураЗаполненияЦеныВСтрокеТЧКлиент(Объект, ВидЦеныВШапке = Ложь) 
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	Если ВидЦеныВШапке Тогда
		СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервере
Функция СтруктураЗаполненияЦеныВСтрокеТЧСервер(Объект, ВидЦеныВШапке = Ложь) 
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	Если ВидЦеныВШапке Тогда
		СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаКлиенте
Процедура Рин1_ТоварыЦенаПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);	
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	УстановитьКурсВалютуПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИтогоКоличествоПодобрано(ТекущиеДанные)
	
	Если ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада") Тогда
		
		Возврат;
		
	ИначеЕсли ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов") Тогда
		
		Для каждого ТекНоменклатура Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
			
			Если ТекНоменклатура.Номенклатура <> ТекущиеДанные.Номенклатура Тогда
				Продолжить;
			КонецЕсли; 
			
			ИтогоКоличествоДоступно = 0;
			Для каждого ТекДействие Из ТекНоменклатура.ПолучитьЭлементы() Цикл
				
				Если ТекДействие.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов") Тогда
					Продолжить;
				КонецЕсли; 
				
				ТекДействие.КоличествоДоступно = ИтогоКоличествоДоступно + ТекДействие.КоличествоПриходПлан;
				ИтогоКоличествоДоступно = Макс(ТекДействие.КоличествоДоступно - ТекДействие.КоличествоПодобрано, 0);
				
				ОбновитьОтображаемыеДанныеОбеспечения(ТекДействие);
				
			КонецЦикла; 
			
			Прервать;
			
		КонецЦикла; 
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущиеДанные.СкладПоставщика) Тогда	
			
			ОтборСтрок = Новый Структура("Номенклатура, СкладПоставщика", ТекущиеДанные.Номенклатура, ТекущиеДанные.СкладПоставщика);
			НайденныеСтроки = ГИГ_ОбеспечениеИтоги.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ИтогоКоличествоПодобрано = 0;
				Для каждого ТекНоменклатура Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
					
					Если ТекНоменклатура.Номенклатура <> ТекущиеДанные.Номенклатура Тогда
						Продолжить;
					КонецЕсли; 
					
					Для каждого ТекДействие Из ТекНоменклатура.ПолучитьЭлементы() Цикл
						Если ТекДействие.СхемаОбеспечения = ТекущиеДанные.СхемаОбеспечения Тогда
							ИтогоКоличествоПодобрано = ИтогоКоличествоПодобрано + ТекДействие.КоличествоПодобрано;
						КонецЕсли; 
					КонецЦикла; 
					
					Прервать;
					
				КонецЦикла; 
				
				Если не ИтогоКоличествоПодобрано = 0 Тогда
					НайденныеСтроки[0].КоличествоПодобрано = ИтогоКоличествоПодобрано;	
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе 
			
			ОтборСтрок = Новый Структура("Номенклатура, СхемаОбеспечения", ТекущиеДанные.Номенклатура, ТекущиеДанные.СхемаОбеспечения);
			НайденныеСтроки = ГИГ_ОбеспечениеИтоги.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ИтогоКоличествоПодобрано = 0;
				Для каждого ТекНоменклатура Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
					
					Если ТекНоменклатура.Номенклатура <> ТекущиеДанные.Номенклатура Тогда
						Продолжить;
					КонецЕсли; 
					
					Для каждого ТекДействие Из ТекНоменклатура.ПолучитьЭлементы() Цикл
						Если ТекДействие.СхемаОбеспечения = ТекущиеДанные.СхемаОбеспечения Тогда
							ИтогоКоличествоПодобрано = ИтогоКоличествоПодобрано + ТекДействие.КоличествоПодобрано
						КонецЕсли; 
					КонецЦикла; 
					
					Прервать;
					
				КонецЦикла; 
				Если не ИтогоКоличествоПодобрано = 0 Тогда
					НайденныеСтроки[0].КоличествоПодобрано = ИтогоКоличествоПодобрано;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЕстьРасхождения(Отбор)
	
	Если Отбор Тогда
		
		Если ГИГ_Обеспечение.ПолучитьЭлементы().Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		ТекущаяСтрокаИсходная = Элементы.ГИГ_Обеспечение.ТекущаяСтрока;
		ТекущаяСтрока = Неопределено;
		
		Для каждого ТекНоменклатура Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
			
			ОтборЕстьРасхождения = Ложь;
			Для каждого ТекДействие Из ТекНоменклатура.ПолучитьЭлементы() Цикл
				Если ТекДействие.КоличествоДоступно <> ТекДействие.КоличествоВЗаказе И ТекДействие.КоличествоДоступно > 0 Тогда
					ОтборЕстьРасхождения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОтборЕстьРасхождения И ТекущаяСтрока = Неопределено Тогда
				ТекущаяСтрока = ТекНоменклатура.ПолучитьИдентификатор();
				Элементы.ГИГ_Обеспечение.ТекущаяСтрока = ТекущаяСтрока;
			КонецЕсли; 
			
			ТекНоменклатура.ОтборЕстьРасхождения = ОтборЕстьРасхождения;
			Для каждого ТекДействие Из ТекНоменклатура.ПолучитьЭлементы() Цикл
				ТекДействие.ОтборЕстьРасхождения = ОтборЕстьРасхождения;
			КонецЦикла;
			
		КонецЦикла;
		
		ТекОбеспечение = ?(ТекущаяСтрокаИсходная = Неопределено, Неопределено, ГИГ_Обеспечение.НайтиПоИдентификатору(ТекущаяСтрокаИсходная));
		Если Не ТекОбеспечение = Неопределено 
			И ТекОбеспечение.ОтборЕстьРасхождения Тогда
			Элементы.ГИГ_Обеспечение.ТекущаяСтрока = ТекущаяСтрокаИсходная;
		Иначе
			Элементы.ГИГ_Обеспечение.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли;
		
	Иначе
		
		Для каждого ТекНоменклатура Из ГИГ_Обеспечение.ПолучитьЭлементы() Цикл
			
			ТекНоменклатура.ОтборЕстьРасхождения = Истина;
			Для каждого ТекДействие Из ТекНоменклатура.ПолучитьЭлементы() Цикл
				ТекДействие.ОтборЕстьРасхождения = Истина;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуТоварыСводноНаКлиенте(ВыбраннаяНоменклатура)
	
	Если ВыбраннаяНоменклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ГИГ_ТоварыСводно.НайтиСтроки(Новый Структура("Номенклатура", ВыбраннаяНоменклатура));
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Элементы.ТоварыСводно.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
&После("УстановитьУсловноеОформление")
Процедура Рин1_УстановитьУсловноеОформление()
	
	ГИГ_УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПриНачалеРедактированияВместо(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущиеДанные, НоваяСтрока, Копирование);
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	КонецЕсли;
	///<-- Гигабайт (Чернов А.С.): ОЕМПотребность
	Если Копирование И НоваяСтрока Тогда
		ТекущиеДанные.ГИГ_Назначение = Неопределено;
	КонецЕсли; 
	///--> Гигабайт (Чернов А.С.)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПроцентРучнойСкидкиПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_6");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыСуммаРучнойСкидкиПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_2");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
		
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОбработкаВыбораВместо(ВыбранноеЗначение, ИсточникВыбора)
	
		// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказКлиента.Форма.ФормаДокумента.Событие.ОбработкаВыбора");

	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда

		Детали = Рин1_ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказаСтандартное" Тогда

		ВыбранноеЗначение.Вставить("ОбработатьВсюТЧ",Истина);
		Детали = Рин1_ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
		ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда
				
		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда

		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказКлиента.Форма.РеквизитыПечати" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			Модифицированность = Истина;
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
	///<-- Гигабайт (Чернов А.С.): 
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма"
		  Или ИсточникВыбора.ИмяФормы = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Форма"   Тогда
	///--> Гигабайт (Чернов А.С.) 
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
		
	ИначеЕсли  ИсточникВыбора.ИмяФормы = "Документ.ЗаказКлиента.Форма.ГИГ_ФормаПодбораОЕМПотребности" Тогда

		  ПолучитьЗагруженныеТоварыИзХранилища2(ВыбранноеЗначение.АдресТоваровВХранилище);
		  
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
				
			ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
			МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		
	КонецЕсли;
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);

	//++Гольм А.А. (Гигабайт) 19.03.2019 12:53:55
	ГИГ_ОбработкаВыбораПосле(ВыбранноеЗначение, ИсточникВыбора);
	//--Гольм А.А. (Гигабайт) 19.03.2019 12:53:58
		
КонецПроцедуры


&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища2(АдресТоваровВХранилище)
		
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
//20201006 ГлазуновДВ !!!Можно изначально поставить транзакцию ТУТ для начала "Создания КорректировкиНазначения"!!!
	
//{{20201222 ГлазуновДВ
	СтрокиОбработаны = Объект.Товары.Выгрузить(Новый Массив, "НомерСтроки");
	СтрокиОбработаны.Очистить();
//}}20201222 ГлазуновДВ

	Для Каждого СтрокаТоваровОЕМ Из ТоварыИзХранилища Цикл
		
		//распределяем то что есть приведя к базовой единице
//Исходное		РаспределяемоеКоличество = СтрокаТоваровОЕМ.КоличествоУпаковок * ?(СтрокаТоваровОЕМ.Упаковка.Числитель = 0,1,СтрокаТоваровОЕМ.Упаковка.Числитель);

		РаспределяемоеКоличество = СтрокаТоваровОЕМ.КоличествоУпаковок * ?(СтрокаТоваровОЕМ.Упаковка.Числитель = 0, 1, СтрокаТоваровОЕМ.Упаковка.Числитель) / ?(СтрокаТоваровОЕМ.Упаковка.Знаменатель = 0, 1, СтрокаТоваровОЕМ.Упаковка.Знаменатель); 
		
		НужноДораспределить = 0;
		НужноДораспределитьШТ = 0;
		РаспределяемоеКоличествоУпаковок = 0;
		
		МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ГИГ_НазначениеУстановлено,Отменено",СтрокаТоваровОЕМ.Номенклатура,СтрокаТоваровОЕМ.Характеристика,Ложь,Ложь));
	//{{20201224 ГлазуновДВ
		Если МассивСтрок.Количество() > 1 Тогда
			СортировкаМассива(МассивСтрок);
		КонецЕсли;
	//}}20201224 ГлазуновДВ
				
		ВариантОбеспеченияСтрокиДоИзменения = Перечисления.ВариантыОбеспечения.НеТребуется;
		
		Для Каждого СтрокаТоваровТЧ Из МассивСтрок Цикл
			
			Если СтрокаТоваровТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Или
				СтрокаТоваровТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Или
				СтрокаТоваровТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				Продолжить;
			КонецЕсли;
			
//Исходное			Если СтрокаТоваровТЧ.КоличествоУпаковок < РаспределяемоеКоличество Тогда
//Исходное				РаспределяемоеКоличество = РаспределяемоеКоличество - СтрокаТоваровТЧ.КоличествоУпаковок;
		//{{20201208-20201223 ГлазуновДВ
			СтрокаТоваровТЧУпаковкаЧислитель = ?(СтрокаТоваровТЧ.Упаковка.Числитель = 0, 1, СтрокаТоваровТЧ.Упаковка.Числитель);
			СтрокаТоваровТЧУпаковкаЗнаменатель = ?(СтрокаТоваровТЧ.Упаковка.Знаменатель = 0, 1, СтрокаТоваровТЧ.Упаковка.Знаменатель);
			
			Если СтрокаТоваровТЧ.Количество < РаспределяемоеКоличество Тогда
				
			//{{20201208-20201223 ГлазуновДВ
				Если СтрокаТоваровТЧУпаковкаЧислитель > 1 Тогда
					РаспределяемоеКоличествоУпаковок = Цел(СтрокаТоваровТЧ.Количество / СтрокаТоваровТЧУпаковкаЧислитель * СтрокаТоваровТЧУпаковкаЗнаменатель) * СтрокаТоваровТЧУпаковкаЧислитель / СтрокаТоваровТЧУпаковкаЗнаменатель;
					
					НужноДораспределитьУпаковки = СтрокаТоваровТЧ.Количество - РаспределяемоеКоличествоУпаковок;
					Если НужноДораспределитьУпаковки > 0 Тогда
						
						НовСтр = Объект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТоваровТЧ);
					//{{20201222 ГлазуновДВ
						НовСтр.КодСтроки = 0;
						НовСтр.ГИГ_НазначениеУстановлено = Истина;
						НоваяСтрокаОбработана = СтрокиОбработаны.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаОбработана, НовСтр);
					//}}20201222 ГлазуновДВ
						НовСтр.ГИГ_Назначение = Справочники.Назначения.ПустаяСсылка();
					//{{20201222 ГлазуновДВ
						НовСтр.ГИГ_НазначениеУстановлено = Ложь;
					//}}20201222 ГлазуновДВ
						Количество = НужноДораспределитьУпаковки;
						НовСтр.Количество = Количество;
						НовСтр.БезВозвратнойТары = Истина;
						НовСтр.КоличествоУпаковок = Количество / ?(СтрокаТоваровТЧ.Упаковка.Числитель = 0, 1, СтрокаТоваровТЧ.Упаковка.Числитель) * ?(СтрокаТоваровТЧ.Упаковка.Знаменатель = 0, 1, СтрокаТоваровТЧ.Упаковка.Знаменатель);
						НовСтр.Упаковка = ?(СтрокаТоваровТЧ.Упаковка.Числитель = 0, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), СтрокаТоваровТЧ.Упаковка);
						НовСтр.Цена = СтрокаТоваровТЧ.Цена;
						НовСтр.ЦенаСоСкидкой = СтрокаТоваровТЧ.ЦенаСоСкидкой;
						НовСтр.ПроцентРучнойСкидки = СтрокаТоваровТЧ.ПроцентРучнойСкидки;
						НовСтр.ПроцентАвтоматическойСкидки = СтрокаТоваровТЧ.ПроцентАвтоматическойСкидки;
						НовСтр.ВидЦены = СтрокаТоваровТЧ.ВидЦены;
						НовСтр.СтавкаНДС = СтрокаТоваровТЧ.СтавкаНДС;
						НовСтр.ДатаОтгрузки = СтрокаТоваровТЧ.ДатаОтгрузки;
						НовСтр.ДатаКлиента = СтрокаТоваровТЧ.ДатаКлиента;
						ОбработатьСтрокиОЕМ(НовСтр);
		//Исходное				НовСтр.ВариантОбеспечения = ВариантОбеспеченияСтрокиДоИзменения;
					//{{20201222 ГлазуновДВ
						//Если Не НужноДораспределить = 0 Тогда
							НовСтр.ВариантОбеспечения = ВариантОбеспеченияСтрокиДоИзменения;
						//КонецЕсли;
					//}}20201222 ГлазуновДВ
						
					//{{20201217 ГлазуновДВ
					//{{Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
						СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив,"Номенклатура, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки, ДатаОтгрузки, Характеристика, ИсходныйНомерСтроки");
						СтрокиТовары.Очистить();
						НоваяСтрока = СтрокиТовары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НовСтр);
						НоваяСтрока.ИсходныйНомерСтроки = СтрокаТоваровТЧ.ИсходныйНомерСтроки - 1;
						
						МассивВыбора = Новый Массив();
						ЗначениеВыбора = ОбеспечениеКлиентСервер.СтруктураВариантаОбеспечения();
						ЗначениеВыбора.ВариантОбеспечения   = НовСтр.ВариантОбеспечения;
						ЗначениеВыбора.ДатаОтгрузки         = НовСтр.ДатаОтгрузки;
						ЗначениеВыбора.Склад                = Объект.Склад;
						ЗначениеВыбора.Серия                = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
						ЗначениеВыбора.Количество           = НовСтр.Количество;
						ЗначениеВыбора.Вставить("Отгружено", 0);
						ЗначениеВыбора.Вставить("Идентификатор", СтрокаТоваровТЧ.ИсходныйНомерСтроки - 1);
						МассивВыбора.Добавить(ЗначениеВыбора);

						Таблица = Новый ТаблицаЗначений;
						Таблица.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
						Таблица.Колонки.Добавить("Отгружено",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("ДатаОтгрузки",Новый ОписаниеТипов("Дата"));
						Таблица.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
						Таблица.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("ПриоритетТипаОбеспечения",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("СкладНаименование",Новый ОписаниеТипов("Строка"));

						Для Каждого Структура Из МассивВыбора Цикл
							НовСтрТаблица = Таблица.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрТаблица, Структура);
							НовСтрТаблица.Приоритет = 0;
							НовСтрТаблица.ПриоритетТипаОбеспечения = ?(НовСтрТаблица.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется,4,0);
							НовСтрТаблица.СкладНаименование = НовСтрТаблица.Склад.Наименование;
						КонецЦикла;
						
						СтруктураПараметры = Новый Структура("Склад, СтрокиТовары, Дата", Объект.Склад, СтрокиТовары, Объект.Дата);
						ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица, СтруктураПараметры);
						
						Если Таблица.Количество() > 0 Тогда
							НовСтр.ГИГ_СрокПоставки = Таблица[0].ГИГ_СрокПоставки;
							НовСтр.ГИГ_СхемаОбеспечения = Таблица[0].ГИГ_СхемаОбеспечения;
							НовСтр.ДатаОтгрузки = Таблица[0].ДатаОтгрузки;
							Если Не ЗначениеЗаполнено(НовСтр.ДатаКлиента) Тогда
								НовСтр.ДатаКлиента = Таблица[0].ДатаОтгрузки;
							КонецЕсли;
						КонецЕсли;	
					//}}Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
					//}}20201217 ГлазуновДВ
						
					КонецЕсли;	
					СтрокаТоваровТЧ.КоличествоУпаковок = РаспределяемоеКоличествоУпаковок / СтрокаТоваровТЧУпаковкаЧислитель * СтрокаТоваровТЧУпаковкаЗнаменатель;
					СтрокаТоваровТЧ.Количество = РаспределяемоеКоличествоУпаковок;
					
					РаспределяемоеКоличество = РаспределяемоеКоличество - РаспределяемоеКоличествоУпаковок;
				Иначе	
					РаспределяемоеКоличество = РаспределяемоеКоличество - СтрокаТоваровТЧ.Количество;
				КонецЕсли;
			Иначе
		//}}20201208 ГлазуновДВ
//Исходное				НужноДораспределить = СтрокаТоваровТЧ.КоличествоУпаковок - РаспределяемоеКоличество;
//Исходное				СтрокаТоваровТЧ.КоличествоУпаковок = РаспределяемоеКоличество;
//Исходное					СтрокаТоваровТЧ.Количество = РаспределяемоеКоличество;
//Исходное					РаспределяемоеКоличество = 0;
			//{{20201208-20201223 ГлазуновДВ
				Если СтрокаТоваровТЧУпаковкаЧислитель > 1 Тогда
					РаспределяемоеКоличествоУпаковок = Цел(РаспределяемоеКоличество / СтрокаТоваровТЧУпаковкаЧислитель * СтрокаТоваровТЧУпаковкаЗнаменатель) * СтрокаТоваровТЧУпаковкаЧислитель / СтрокаТоваровТЧУпаковкаЗнаменатель;
					
					Если РаспределяемоеКоличествоУпаковок = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НужноДораспределитьУпаковки = СтрокаТоваровТЧ.Количество - РаспределяемоеКоличествоУпаковок;
					Если НужноДораспределитьУпаковки > 0 Тогда
						
						НовСтр = Объект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТоваровТЧ);
					//{{20201222 ГлазуновДВ
						НовСтр.КодСтроки = 0;
						НовСтр.ГИГ_НазначениеУстановлено = Истина;
						НоваяСтрокаОбработана = СтрокиОбработаны.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаОбработана, НовСтр);
					//}}20201222 ГлазуновДВ
						НовСтр.ГИГ_Назначение = Справочники.Назначения.ПустаяСсылка();
					//{{20201222 ГлазуновДВ
						НовСтр.ГИГ_НазначениеУстановлено = Ложь;
					//}}20201222 ГлазуновДВ
						Количество = НужноДораспределитьУпаковки;
						НовСтр.Количество = Количество;
						НовСтр.БезВозвратнойТары = Истина;
						НовСтр.КоличествоУпаковок = Количество / ?(СтрокаТоваровТЧ.Упаковка.Числитель = 0, 1, СтрокаТоваровТЧ.Упаковка.Числитель) * ?(СтрокаТоваровТЧ.Упаковка.Знаменатель = 0, 1, СтрокаТоваровТЧ.Упаковка.Знаменатель);
						НовСтр.Упаковка = ?(СтрокаТоваровТЧ.Упаковка.Числитель = 0, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), СтрокаТоваровТЧ.Упаковка);
						НовСтр.Цена = СтрокаТоваровТЧ.Цена;
						НовСтр.ЦенаСоСкидкой = СтрокаТоваровТЧ.ЦенаСоСкидкой;
						НовСтр.ПроцентРучнойСкидки = СтрокаТоваровТЧ.ПроцентРучнойСкидки;
						НовСтр.ПроцентАвтоматическойСкидки = СтрокаТоваровТЧ.ПроцентАвтоматическойСкидки;
						НовСтр.ВидЦены = СтрокаТоваровТЧ.ВидЦены;
						НовСтр.СтавкаНДС = СтрокаТоваровТЧ.СтавкаНДС;
						НовСтр.ДатаОтгрузки = СтрокаТоваровТЧ.ДатаОтгрузки;
						НовСтр.ДатаКлиента = СтрокаТоваровТЧ.ДатаКлиента;
						ОбработатьСтрокиОЕМ(НовСтр);
		//Исходное				НовСтр.ВариантОбеспечения = ВариантОбеспеченияСтрокиДоИзменения;
					//{{20201222 ГлазуновДВ
						//Если Не НужноДораспределить = 0 Тогда
							НовСтр.ВариантОбеспечения = ВариантОбеспеченияСтрокиДоИзменения;
						//КонецЕсли;
					//}}20201222 ГлазуновДВ
						
					//{{20201217 ГлазуновДВ
					//{{Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
						СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив,"Номенклатура, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки, ДатаОтгрузки, Характеристика, ИсходныйНомерСтроки");
						СтрокиТовары.Очистить();
						НоваяСтрока = СтрокиТовары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НовСтр);
						НоваяСтрока.ИсходныйНомерСтроки = СтрокаТоваровТЧ.ИсходныйНомерСтроки - 1;
						
						МассивВыбора = Новый Массив();
						ЗначениеВыбора = ОбеспечениеКлиентСервер.СтруктураВариантаОбеспечения();
						ЗначениеВыбора.ВариантОбеспечения   = НовСтр.ВариантОбеспечения;
						ЗначениеВыбора.ДатаОтгрузки         = НовСтр.ДатаОтгрузки;
						ЗначениеВыбора.Склад                = Объект.Склад;
						ЗначениеВыбора.Серия                = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
						ЗначениеВыбора.Количество           = НовСтр.Количество;
						ЗначениеВыбора.Вставить("Отгружено", 0);
						ЗначениеВыбора.Вставить("Идентификатор", СтрокаТоваровТЧ.ИсходныйНомерСтроки - 1);
						МассивВыбора.Добавить(ЗначениеВыбора);

						Таблица = Новый ТаблицаЗначений;
						Таблица.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
						Таблица.Колонки.Добавить("Отгружено",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("ДатаОтгрузки",Новый ОписаниеТипов("Дата"));
						Таблица.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
						Таблица.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("ПриоритетТипаОбеспечения",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("СкладНаименование",Новый ОписаниеТипов("Строка"));

						Для Каждого Структура Из МассивВыбора Цикл
							НовСтрТаблица = Таблица.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрТаблица, Структура);
							НовСтрТаблица.Приоритет = 0;
							НовСтрТаблица.ПриоритетТипаОбеспечения = ?(НовСтрТаблица.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется,4,0);
							НовСтрТаблица.СкладНаименование = НовСтрТаблица.Склад.Наименование;
						КонецЦикла;
						
						СтруктураПараметры = Новый Структура("Склад, СтрокиТовары, Дата", Объект.Склад, СтрокиТовары, Объект.Дата);
						ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица, СтруктураПараметры);
						
						Если Таблица.Количество() > 0 Тогда
							НовСтр.ГИГ_СрокПоставки = Таблица[0].ГИГ_СрокПоставки;
							НовСтр.ГИГ_СхемаОбеспечения = Таблица[0].ГИГ_СхемаОбеспечения;
							НовСтр.ДатаОтгрузки = Таблица[0].ДатаОтгрузки;
							Если Не ЗначениеЗаполнено(НовСтр.ДатаКлиента) Тогда
								НовСтр.ДатаКлиента = Таблица[0].ДатаОтгрузки;
							КонецЕсли;
						КонецЕсли;	
					//}}Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
					//}}20201217 ГлазуновДВ
								
						
						
					КонецЕсли;	
					СтрокаТоваровТЧ.КоличествоУпаковок = РаспределяемоеКоличествоУпаковок / СтрокаТоваровТЧУпаковкаЧислитель * СтрокаТоваровТЧУпаковкаЗнаменатель;
					СтрокаТоваровТЧ.Количество = РаспределяемоеКоличествоУпаковок;
					
					РаспределяемоеКоличество = РаспределяемоеКоличество - РаспределяемоеКоличествоУпаковок;
				Иначе	
					НужноДораспределить = СтрокаТоваровТЧ.Количество - РаспределяемоеКоличество;
					СтрокаТоваровТЧ.КоличествоУпаковок = РаспределяемоеКоличество / СтрокаТоваровТЧУпаковкаЧислитель * СтрокаТоваровТЧУпаковкаЗнаменатель;
					СтрокаТоваровТЧ.Количество = РаспределяемоеКоличество;
					РаспределяемоеКоличество = 0;
				КонецЕсли;
			//}}20201208 ГлазуновДВ
			КонецЕсли;
			
			Если Объект.НеОтгружатьЧастями Тогда
				СтрокаТоваровТЧ.ДатаОтгрузки = Объект.ДатаОтгрузки;
			КонецЕсли;
			
			СтрокаТоваровТЧ.ГИГ_Назначение = СтрокаТоваровОЕМ.ГИГ_Назначение;
		//{{20201222 ГлазуновДВ
			СтрокаТоваровТЧ.ГИГ_НазначениеУстановлено = Истина;
			НоваяСтрокаОбработана = СтрокиОбработаны.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОбработана, СтрокаТоваровТЧ);
		//}}20201222 ГлазуновДВ
			
			ВариантОбеспеченияСтрокиДоИзменения = СтрокаТоваровТЧ.ВариантОбеспечения;
			
			ОбработатьСтрокиОЕМ(СтрокаТоваровТЧ);
			
		//{{20201217 ГлазуновДВ
		//{{Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
			СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив, "Номенклатура, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки, ДатаОтгрузки, Характеристика, ИсходныйНомерСтроки");
			СтрокиТовары.Очистить();
			НоваяСтрока = СтрокиТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваровТЧ);
			НоваяСтрока.ИсходныйНомерСтроки = СтрокаТоваровТЧ.ИсходныйНомерСтроки - 1;
			
			МассивВыбора = Новый Массив();
			ЗначениеВыбора = ОбеспечениеКлиентСервер.СтруктураВариантаОбеспечения();
			ЗначениеВыбора.ВариантОбеспечения   = СтрокаТоваровТЧ.ВариантОбеспечения;
			ЗначениеВыбора.ДатаОтгрузки         = СтрокаТоваровТЧ.ДатаОтгрузки;
			ЗначениеВыбора.Склад                = Объект.Склад;
			ЗначениеВыбора.Серия                = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			ЗначениеВыбора.Количество           = СтрокаТоваровТЧ.Количество;
			ЗначениеВыбора.Вставить("Отгружено", 0);
			ЗначениеВыбора.Вставить("Идентификатор", СтрокаТоваровТЧ.ИсходныйНомерСтроки - 1);
			МассивВыбора.Добавить(ЗначениеВыбора);

			Таблица = Новый ТаблицаЗначений;
			Таблица.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
			Таблица.Колонки.Добавить("Отгружено",Новый ОписаниеТипов("Число"));
			Таблица.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
			Таблица.Колонки.Добавить("ДатаОтгрузки",Новый ОписаниеТипов("Дата"));
			Таблица.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
			Таблица.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Число"));
			Таблица.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
			Таблица.Колонки.Добавить("ПриоритетТипаОбеспечения",Новый ОписаниеТипов("Число"));
			Таблица.Колонки.Добавить("СкладНаименование",Новый ОписаниеТипов("Строка"));

			Для Каждого Структура Из МассивВыбора Цикл
				НовСтрТаблица = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрТаблица, Структура);
				НовСтрТаблица.Приоритет = 0;
				НовСтрТаблица.ПриоритетТипаОбеспечения = ?(НовСтрТаблица.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется,4,0);
				НовСтрТаблица.СкладНаименование = НовСтрТаблица.Склад.Наименование;
			КонецЦикла;
			
			СтруктураПараметры = Новый Структура("Склад, СтрокиТовары, Дата", Объект.Склад, СтрокиТовары, Объект.Дата);
			ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица, СтруктураПараметры);
			
			Если Таблица.Количество() > 0 Тогда
				СтрокаТоваровТЧ.ГИГ_СрокПоставки = Таблица[0].ГИГ_СрокПоставки;
				СтрокаТоваровТЧ.ГИГ_СхемаОбеспечения = Таблица[0].ГИГ_СхемаОбеспечения;
				СтрокаТоваровТЧ.ДатаОтгрузки = Таблица[0].ДатаОтгрузки;
				Если Не ЗначениеЗаполнено(СтрокаТоваровТЧ.ДатаКлиента) Тогда
					СтрокаТоваровТЧ.ДатаКлиента = Таблица[0].ДатаОтгрузки;
				КонецЕсли;
			КонецЕсли;	
		//}}Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
		//}}20201217 ГлазуновДВ
			
			Если РаспределяемоеКоличество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не НужноДораспределить = 0 Или Не РаспределяемоеКоличество = 0 Тогда
			
			НовСтр = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТоваровОЕМ);
		//{{20201222 ГлазуновДВ
			НовСтр.КодСтроки = 0;
			НовСтр.ГИГ_НазначениеУстановлено = Истина;
			НоваяСтрокаОбработана = СтрокиОбработаны.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОбработана, НовСтр);
		//}}20201222 ГлазуновДВ
			Если Не НужноДораспределить = 0 Тогда
				НовСтр.ГИГ_Назначение = Справочники.Назначения.ПустаяСсылка();
			//{{20201222 ГлазуновДВ
				НовСтр.ГИГ_НазначениеУстановлено = Ложь;
			//}}20201222 ГлазуновДВ
			КонецЕсли;
			Количество = ?(НужноДораспределить = 0,РаспределяемоеКоличество,НужноДораспределить);
			НовСтр.Количество = Количество;
//Исходное			НовСтр.КоличествоУпаковок = Количество;
//Исходное			НовСтр.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			НовСтр.БезВозвратнойТары = Истина;
			
			Если МассивСтрок.Количество() = 0 Тогда
			//{{20201208-20201223 ГлазуновДВ
				НовСтр.КоличествоУпаковок = Количество / ?(СтрокаТоваровОЕМ.Упаковка.Числитель = 0, 1, СтрокаТоваровОЕМ.Упаковка.Числитель) * ?(СтрокаТоваровОЕМ.Упаковка.Знаменатель = 0, 1, СтрокаТоваровОЕМ.Упаковка.Знаменатель);
				НовСтр.Упаковка = ?(СтрокаТоваровОЕМ.Упаковка.Числитель = 0, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), СтрокаТоваровТЧ.Упаковка);
			//}}20201208-20201223 ГлазуновДВ
				НовСтр.ДатаОтгрузки = Макс(НачалоДня(ТекущаяДатаСеанса()), Объект.ЖелаемаяДатаОтгрузки);
				НовСтр.ДатаКлиента = ТекущаяДата();
				ОбработатьСтрокиОЕМ(НовСтр,Истина);//если подобрали номенклатуру которой не было в тч товары
				
			//{{20201217 ГлазуновДВ
			//{{Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
				СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив,"Номенклатура, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки, ДатаОтгрузки, Характеристика, ИсходныйНомерСтроки");
				СтрокиТовары.Очистить();
				НоваяСтрока = СтрокиТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НовСтр);
				НоваяСтрока.ИсходныйНомерСтроки = НовСтр.ИсходныйНомерСтроки - 1;
				
				МассивВыбора = Новый Массив();
				ЗначениеВыбора = ОбеспечениеКлиентСервер.СтруктураВариантаОбеспечения();
				ЗначениеВыбора.ВариантОбеспечения   = НовСтр.ВариантОбеспечения;
				ЗначениеВыбора.ДатаОтгрузки         = НовСтр.ДатаОтгрузки;
				ЗначениеВыбора.Склад                = Объект.Склад;
				ЗначениеВыбора.Серия                = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
				ЗначениеВыбора.Количество           = НовСтр.Количество;
				ЗначениеВыбора.Вставить("Отгружено", 0);
				ЗначениеВыбора.Вставить("Идентификатор", НовСтр.ИсходныйНомерСтроки - 1);
				МассивВыбора.Добавить(ЗначениеВыбора);

				Таблица = Новый ТаблицаЗначений;
				Таблица.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
				Таблица.Колонки.Добавить("Отгружено",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("ДатаОтгрузки",Новый ОписаниеТипов("Дата"));
				Таблица.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
				Таблица.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("ПриоритетТипаОбеспечения",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("СкладНаименование",Новый ОписаниеТипов("Строка"));

				Для Каждого Структура Из МассивВыбора Цикл
					НовСтрТаблица = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрТаблица, Структура);
					НовСтрТаблица.Приоритет = 0;
					НовСтрТаблица.ПриоритетТипаОбеспечения = ?(НовСтрТаблица.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется,4,0);
					НовСтрТаблица.СкладНаименование = НовСтрТаблица.Склад.Наименование;
				КонецЦикла;
				
				СтруктураПараметры = Новый Структура("Склад, СтрокиТовары, Дата", Объект.Склад, СтрокиТовары, Объект.Дата);
				ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица, СтруктураПараметры);
				
				Если Таблица.Количество() > 0 Тогда
					НовСтр.ГИГ_СрокПоставки = Таблица[0].ГИГ_СрокПоставки;
					НовСтр.ГИГ_СхемаОбеспечения = Таблица[0].ГИГ_СхемаОбеспечения;
					НовСтр.ДатаОтгрузки = Таблица[0].ДатаОтгрузки;
					Если Не ЗначениеЗаполнено(НовСтр.ДатаКлиента) Тогда
						НовСтр.ДатаКлиента = Таблица[0].ДатаОтгрузки;
					КонецЕсли;
				КонецЕсли;	
			//}}Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
			//}}20201217 ГлазуновДВ
				
			Иначе
			//{{20201208-20201223 ГлазуновДВ
				НовСтр.КоличествоУпаковок = Количество / ?(СтрокаТоваровТЧ.Упаковка.Числитель = 0, 1, СтрокаТоваровТЧ.Упаковка.Числитель) * ?(СтрокаТоваровТЧ.Упаковка.Знаменатель = 0, 1, СтрокаТоваровТЧ.Упаковка.Знаменатель);
				НовСтр.Упаковка = ?(СтрокаТоваровТЧ.Упаковка.Числитель = 0, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), СтрокаТоваровТЧ.Упаковка);
			//}}20201208-20201223 ГлазуновДВ
				НовСтр.Цена = СтрокаТоваровТЧ.Цена;
				НовСтр.ЦенаСоСкидкой = СтрокаТоваровТЧ.ЦенаСоСкидкой;
				НовСтр.ПроцентРучнойСкидки = СтрокаТоваровТЧ.ПроцентРучнойСкидки;
				НовСтр.ПроцентАвтоматическойСкидки = СтрокаТоваровТЧ.ПроцентАвтоматическойСкидки;
				НовСтр.ВидЦены = СтрокаТоваровТЧ.ВидЦены;
				НовСтр.СтавкаНДС = СтрокаТоваровТЧ.СтавкаНДС;
				НовСтр.ДатаОтгрузки = СтрокаТоваровТЧ.ДатаОтгрузки;
				НовСтр.ДатаКлиента = СтрокаТоваровТЧ.ДатаКлиента;
				ОбработатьСтрокиОЕМ(НовСтр);
//Исходное				НовСтр.ВариантОбеспечения = ВариантОбеспеченияСтрокиДоИзменения;
			//{{20201222 ГлазуновДВ
				Если Не НужноДораспределить = 0 Тогда
					НовСтр.ВариантОбеспечения = ВариантОбеспеченияСтрокиДоИзменения;
				КонецЕсли;
			//}}20201222 ГлазуновДВ
				
			//{{20201217 ГлазуновДВ
			//{{Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
				СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив,"Номенклатура, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки, ДатаОтгрузки, Характеристика, ИсходныйНомерСтроки");
				СтрокиТовары.Очистить();
				НоваяСтрока = СтрокиТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НовСтр);
				НоваяСтрока.ИсходныйНомерСтроки = СтрокаТоваровТЧ.ИсходныйНомерСтроки - 1;
				
				МассивВыбора = Новый Массив();
				ЗначениеВыбора = ОбеспечениеКлиентСервер.СтруктураВариантаОбеспечения();
				ЗначениеВыбора.ВариантОбеспечения   = НовСтр.ВариантОбеспечения;
				ЗначениеВыбора.ДатаОтгрузки         = НовСтр.ДатаОтгрузки;
				ЗначениеВыбора.Склад                = Объект.Склад;
				ЗначениеВыбора.Серия                = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
				ЗначениеВыбора.Количество           = НовСтр.Количество;
				ЗначениеВыбора.Вставить("Отгружено", 0);
				ЗначениеВыбора.Вставить("Идентификатор", СтрокаТоваровТЧ.ИсходныйНомерСтроки - 1);
				МассивВыбора.Добавить(ЗначениеВыбора);

				Таблица = Новый ТаблицаЗначений;
				Таблица.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
				Таблица.Колонки.Добавить("Отгружено",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("ДатаОтгрузки",Новый ОписаниеТипов("Дата"));
				Таблица.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
				Таблица.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("ПриоритетТипаОбеспечения",Новый ОписаниеТипов("Число"));
				Таблица.Колонки.Добавить("СкладНаименование",Новый ОписаниеТипов("Строка"));

				Для Каждого Структура Из МассивВыбора Цикл
					НовСтрТаблица = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрТаблица, Структура);
					НовСтрТаблица.Приоритет = 0;
					НовСтрТаблица.ПриоритетТипаОбеспечения = ?(НовСтрТаблица.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется,4,0);
					НовСтрТаблица.СкладНаименование = НовСтрТаблица.Склад.Наименование;
				КонецЦикла;
				
				СтруктураПараметры = Новый Структура("Склад, СтрокиТовары, Дата", Объект.Склад, СтрокиТовары, Объект.Дата);
				ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица, СтруктураПараметры);
				
				Если Таблица.Количество() > 0 Тогда
					НовСтр.ГИГ_СрокПоставки = Таблица[0].ГИГ_СрокПоставки;
					НовСтр.ГИГ_СхемаОбеспечения = Таблица[0].ГИГ_СхемаОбеспечения;
					НовСтр.ДатаОтгрузки = Таблица[0].ДатаОтгрузки;
					Если Не ЗначениеЗаполнено(НовСтр.ДатаКлиента) Тогда
						НовСтр.ДатаКлиента = Таблица[0].ДатаОтгрузки;
					КонецЕсли;
				КонецЕсли;	
			//}}Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
			//}}20201217 ГлазуновДВ
				
			КонецЕсли;
		КонецЕсли;
		
//{{20201006 ГлазуновДВ Убираем из Потребности строку Назначения с количеством, если Потребность "Однократная"
		УстановитьПривилегированныйРежим(Истина);
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбеспечениеЗаказов.Регистратор КАК Ссылка
			|ИЗ
			|	РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
			|ГДЕ
			|	ОбеспечениеЗаказов.Регистратор ССЫЛКА Документ.ЗаказНаВнутреннееПотребление
			|	И ОбеспечениеЗаказов.Номенклатура = &Номенклатура
			|	И ОбеспечениеЗаказов.Назначение = &Назначение";
		
		Запрос.УстановитьПараметр("Назначение", СтрокаТоваровОЕМ.ГИГ_Назначение);
		Запрос.УстановитьПараметр("Номенклатура", СтрокаТоваровОЕМ.Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			// Вставить обработку выборки ВыборкаДетальныеЗаписи

			ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ПроводитьДокумент = Ложь;
			Если Не ДокументОбъект.Рин1_ОЕМ_однократная Тогда
				Продолжить;
			//////////++Шерстюк Ю.Ю. 05.04.2021 Задача № 7147 если строки разбиры, то приводит к неверному заполнению когда СтрокаОЕМ.Количество < СтрокаТоваровОЕМ.КоличествоУпаковок
			////////Иначе
			////////ДокументОбъект.Товары.Свернуть("Номенклатура,Характеристика,Упаковка,Отменено,ВариантОбеспечения,Серия","КоличествоУпаковок,Количество");
			//////////--Шерстюк Ю.Ю
			КонецЕсли;
		//++Шерстюк Ю.Ю. 05.04.2021 Задача № 7147 если строки разбиры, то приводит к неверному заполнению когда СтрокаОЕМ.Количество < СтрокаТоваровОЕМ.КоличествоУпаковок
        пКоличествоОЕМ = СтрокаТоваровОЕМ.КоличествоУпаковок;
		//--Шерстюк Ю.Ю

			Для Каждого СтрокаОЕМ Из ДокументОбъект.Товары Цикл
				Если СтрокаОЕМ.Номенклатура = СтрокаТоваровОЕМ.Номенклатура И Не СтрокаОЕМ.Отменено Тогда
					//++Шерстюк Ю.Ю. 05.04.2021
					//Если СтрокаОЕМ.Количество = СтрокаТоваровОЕМ.КоличествоУпаковок Тогда
					Если СтрокаОЕМ.Количество = пКоличествоОЕМ Тогда
					пКоличествоОЕМ = 0;	
					//--Шерстюк Ю.Ю
						СтрокаОЕМ.Отменено = Истина;
					//++Шерстюк Ю.Ю. 05.04.2021
					ИначеЕсли СтрокаОЕМ.Количество > пКоличествоОЕМ Тогда 
					//Иначе
						//СтрокаОЕМ.Количество = СтрокаОЕМ.Количество - СтрокаТоваровОЕМ.КоличествоУпаковок;
						СтрокаОЕМ.Количество = СтрокаОЕМ.Количество - пКоличествоОЕМ;
					//--Шерстюк Ю.Ю.
//Исходное: не работает, т.к. СтрокаТоваровОЕМ.КоличествоУпаковок в базовых передана 						СтрокаОЕМ.КоличествоУпаковок = СтрокаОЕМ.КоличествоУпаковок - СтрокаТоваровОЕМ.КоличествоУпаковок;
					//{{20201208 ГлазуновДВ
						СтрокаОЕМ.КоличествоУпаковок = СтрокаОЕМ.Количество / ?(СтрокаОЕМ.Упаковка.Числитель = 0, 1, СтрокаОЕМ.Упаковка.Числитель) * ?(СтрокаОЕМ.Упаковка.Знаменатель = 0, 1, СтрокаОЕМ.Упаковка.Знаменатель);
					//}}20201208 ГлазуновДВ
					
							//ДелимСтроку	
							НоваяСтрокаОЕМ = ДокументОбъект.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаОЕМ, СтрокаОЕМ);
							//++Шерстюк Ю.Ю. 05.04.2021
							//НоваяСтрокаОЕМ.Количество = СтрокаТоваровОЕМ.КоличествоУпаковок;
							НоваяСтрокаОЕМ.Количество = пКоличествоОЕМ;
							//--Шерстюк Ю.Ю.
	//Исходное						НоваяСтрокаОЕМ.КоличествоУпаковок = СтрокаТоваровОЕМ.КоличествоУпаковок;
						//{{20201208 ГлазуновДВ
							НоваяСтрокаОЕМ.КоличествоУпаковок = НоваяСтрокаОЕМ.Количество / ?(СтрокаОЕМ.Упаковка.Числитель = 0, 1, СтрокаОЕМ.Упаковка.Числитель) * ?(СтрокаОЕМ.Упаковка.Знаменатель = 0, 1, СтрокаОЕМ.Упаковка.Знаменатель);
						//}}20201208 ГлазуновДВ
							НоваяСтрокаОЕМ.Отменено = Истина;
							//////++Шерстюк Ю.Ю. 05.04.2021
							пКоличествоОЕМ = 0;
							//////--Шерстюк Ю.Ю. 05.04.2021

					//++Шерстюк Ю.Ю. 05.04.2021
					Иначе 
						СтрокаОЕМ.Отменено = Истина;
						пКоличествоОЕМ = пКоличествоОЕМ - СтрокаОЕМ.Количество;
					//--Шерстюк Ю.Ю.							
					КонецЕсли;
					
					//++Шерстюк Ю.Ю. 05.04.2021
					Если пКоличествоОЕМ = 0 Тогда 
					//--Шерстюк Ю.Ю.
						ПроводитьДокумент = Истина;
						Прервать;
					//++Шерстюк Ю.Ю.
					КонецЕсли;
					//--Шерстюк Ю.Ю.
				КонецЕсли;
			КонецЦикла;
			
			Если ПроводитьДокумент Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		УстановитьПривилегированныйРежим(Ложь);
//}}20201006 ГлазуновДВ		
	КонецЦикла;
	
//{{20201222 ГлазуновДВ
	Для Каждого СтрокаОбработана Из СтрокиОбработаны Цикл
		МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки",СтрокаОбработана.НомерСтроки));
		Для Каждого СтрокаТоваровТЧ Из МассивСтрок Цикл
			Если СтрокаТоваровТЧ.ГИГ_НазначениеУстановлено Тогда
				СтрокаТоваровТЧ.ГИГ_НазначениеУстановлено = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
//}}20201222 ГлазуновДВ
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры


//{{20201224 ГлазуновДВ
&НаСервере
Функция СортировкаМассива(МассивЭлементов)
 
    Для Просмотр = 0 По МассивЭлементов.Количество()-1 Цикл
        Для Индекс = 0 По МассивЭлементов.Количество()-1 Цикл
            Если Индекс = МассивЭлементов.Количество()-1 Тогда
                Прервать;
            КонецЕсли;
			
			Если МассивЭлементов[Просмотр].Упаковка.Числитель = 0 Тогда
                СтаршийЭлемент = МассивЭлементов[Просмотр];
                МладшийЭлемент = МассивЭлементов[МассивЭлементов.Количество()-1];
                МассивЭлементов[Просмотр] = МладшийЭлемент;
                МассивЭлементов[МассивЭлементов.Количество()-1] = СтаршийЭлемент;
			КонецЕсли;
			Если МассивЭлементов[Индекс].Упаковка.Числитель = 0 Тогда
                СтаршийЭлемент = МассивЭлементов[МассивЭлементов.Количество()-1];
                МладшийЭлемент = МассивЭлементов[Индекс];
                МассивЭлементов[МассивЭлементов.Количество()-1] = МладшийЭлемент;
                МассивЭлементов[Индекс] = СтаршийЭлемент;
			КонецЕсли;
			Если МассивЭлементов[Просмотр].Упаковка.Числитель <> 0 И МассивЭлементов[Индекс].Упаковка.Числитель <> 0 Тогда
	            Если МассивЭлементов[Просмотр].Упаковка.Числитель / МассивЭлементов[Просмотр].Упаковка.Знаменатель > МассивЭлементов[Индекс].Упаковка.Числитель / МассивЭлементов[Индекс].Упаковка.Знаменатель Тогда
	                СтаршийЭлемент = МассивЭлементов[Просмотр];
	                МладшийЭлемент = МассивЭлементов[Индекс];
	                МассивЭлементов[Просмотр] = МладшийЭлемент;
	                МассивЭлементов[Индекс] = СтаршийЭлемент;
	            КонецЕсли;
            КонецЕсли;
        КонецЦикла;
	КонецЦикла;
	
    Возврат МассивЭлементов;
	
КонецФункции
//}}20201224 ГлазуновДВ

&НаСервере
Процедура ОбработатьСтрокиОЕМ(СтрокаТЧТовары,НоваяСтрока = Ложь)
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	
	Если НоваяСтрока Тогда
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
	КонецЕсли;
	
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	//++Шерстюк Ю.Ю. 19.04.2021
	//ОбработатьСтрокуТЧНаСервере(СтрокаТЧТовары.ПолучитьИдентификатор(),СтруктураДействий);
	Если Не ЗначениеЗаполнено(СтрокаТЧТовары.Цена) Тогда
		ОбработатьСтрокуТЧНаСервере(СтрокаТЧТовары.ПолучитьИдентификатор(),СтруктураДействий);
	Иначе
	
		СтруктураДействий = Новый Структура();
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_1");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		// + [Rineco], [Киселев А.Н.] [16.09.2021] 
		// Задача: [№ 8983], [#Некорректное заполнение строки OEM]
		СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");	
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, Неопределено);
		// - [Rineco], [Киселев А.Н.] [16.09.2021]
		
		
		ОбработатьСтрокуТЧНаСервере(СтрокаТЧТовары.ПолучитьИдентификатор(),СтруктураДействий);

	КонецЕсли;
	//--Шерстюк Ю.Ю. 19.04.2021
	//
	СтрокаТЧТовары.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно");
	//
	Если не СтрокаТЧТовары.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") и ЗначениеЗаполнено(СтрокаТЧТовары.Цена) Тогда
		СтрокаТЧТовары.Рин1_ДатаИзменения = ТекущаяДата();
		ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(СтрокаТЧТовары.Номенклатура, СтрокаТЧТовары.Характеристика, СтрокаТЧТовары.ВидЦены);
		Если не ДанныеПоВалюте.Количество() = 0 Тогда
			ДанныеПоВалюте.Свойство("Курс",СтрокаТЧТовары.Рин1_Курс);
			ДанныеПоВалюте.Свойство("Валюта",СтрокаТЧТовары.Рин1_Валюта);
			ДанныеПоВалюте.Свойство("ДатаКурса",СтрокаТЧТовары.Рин1_ДатаКурса);
			ДанныеПоВалюте.Свойство("ДатаТарифа",СтрокаТЧТовары.Рин1_ДатаТарифа);
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры //

&НаКлиенте
Процедура Рин1_РазбитьЗаказ(Команда)
	//++Шерстюк Ю.Ю. 13.01.21 добавим проверку на модифицированность, чтобы пользователь сам принимал решение о необходимости сохранения документа
	Если ЭтаФорма.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСоханитьЗаказ",ЭтотОбъект);	
 		ПоказатьВопрос(Оповещение,"Документ был модифицирован, сохранить изменения?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Да); 
	Иначе
	//--Шерстюк Ю.Ю.	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресТЗ_Товары",ПолучитьАдресТоваровВХранилище());
		ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаРазбитьЗаказ",ПараметрыФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ВыполнитьПослеОкончания2",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

//++Шерстюк Ю.Ю. 14.01.21
&НаКлиенте
Процедура ПослеЗакрытияВопросаСоханитьЗаказ(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Объект.Проведен Тогда
			ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
		Иначе
			 ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
		КонецЕсли;
    КонецЕсли;	
 
КонецПроцедуры
//--Шерстюк Ю.Ю. 14.01.21
&НаКлиенте
Процедура ВыполнитьПослеОкончания2(РезультатЗакрытия,ДополнительныеПараметры) Экспорт 

	ПоказатьЗначение(,РазделитьЗаказ_СоздатьНовый(РезультатЗакрытия));
	ЭтаФорма.Прочитать();
	
КонецПроцедуры //

&НаСервере
Функция РазделитьЗаказ_СоздатьНовый(РезультатЗакрытия)
	
	ДокументПриемникИзменен = Ложь;
	
	Если не РезультатЗакрытия = Неопределено Тогда
		
		НачатьТранзакцию();
		
		ТЗ_Товары = ПолучитьИзВременногоХранилища(РезультатЗакрытия);
		
		ДокументСпонсорИзменен = Ложь;

		Для каждого Строка Из ТЗ_Товары Цикл
			Если не Строка.КоличествоНовое = 0 Тогда
				Отбор = Новый Структура("НомерСтроки",Строка.НомерСтроки);
				Массив =  Объект.Товары.НайтиСтроки(Отбор);
				Если не Массив.Количество() = 0 Тогда
					ДокументСпонсорИзменен = Истина;
					Если Массив[0].Количество = Строка.КоличествоНовое Тогда //отменяем строчку полностью
						Массив[0].Отменено = Истина;
						Массив[0].ПричинаОтмены  = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию("Разделение заказа клиента");
					Иначе //меняем количество и создаем новую строку с разделенным количеством
						Массив[0].Количество = Массив[0].Количество - Строка.КоличествоНовое;
						Массив[0].КоличествоУпаковок = Массив[0].КоличествоУпаковок - Строка.КоличествоНовое;
						НовСтр = Объект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр,Массив[0],,"НомерСтроки,КодСтроки,КлючСвязи");
						НовСтр.Количество = Строка.КоличествоНовое;
						НовСтр.КоличествоУпаковок = Строка.КоличествоНовое;
						НовСтр.Отменено = Истина;
						НовСтр.ПричинаОтмены  = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию("Разделение заказа клиента");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		
		Если ДокументСпонсорИзменен Тогда
			
			Модифицированность = Истина;
			
			//пересчитаем табличную часть
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
			СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
			СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");			
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			
			Для каждого Строка Из Объект.Товары Цикл
								
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
				
				Отбор = Новый Структура("Номенклатура",Строка.Номенклатура);
				Массив = ГИГ_ТоварыСводно.НайтиСтроки(Отбор);
				Если Массив.Количество() > 0 Тогда
					Отбор2 = Новый Структура();
					Отбор2.Вставить("Номенклатура",Строка.Номенклатура);
					Отбор2.Вставить("Отменено",Ложь);
					ТЗ = Объект.Товары.Выгрузить(Объект.Товары.НайтиСтроки(Отбор2));
					Массив[0].Количество = ТЗ.Итог("Количество"); 
					Массив[0].Сумма = ТЗ.Итог("Сумма");
					Массив[0].СуммаНДС = ТЗ.Итог("СуммаНДС");
					Массив[0].СуммаРучнойСкидки = ТЗ.Итог("СуммаРучнойСкидки"); 
					Массив[0].СуммаАвтоматическойСкидки = ТЗ.Итог("СуммаАвтоматическойСкидки");
					Массив[0].СуммаПроцентОбщий = ТЗ.Итог("СуммаРучнойСкидки") + ТЗ.Итог("СуммаАвтоматическойСкидки");
					Массив[0].СуммаСНДС = ТЗ.Итог("СуммаСНДС");
				КонецЕсли;
				
			КонецЦикла;
			
			РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
						
			ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			Объект.ЭтапыГрафикаОплаты,
			ГИГ_ТоварыСводно.Итог("СуммаСНДС"),
			0);
			
			Попытка
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов") Тогда
					Если не ПривилегированныйРежим() Тогда
						УстановитьПривилегированныйРежим(Истина);
						Константы.ИспользоватьПричиныОтменыЗаказовКлиентов.Установить(Ложь);
						Записать();
						Константы.ИспользоватьПричиныОтменыЗаказовКлиентов.Установить(Истина);
						УстановитьПривилегированныйРежим(Ложь);
					Иначе 
						Записать();
					КонецЕсли;
				Иначе 
					Записать();
				КонецЕсли;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка создания заказа клиента. Обратитесь в поддержку!");
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
			//создадим новый заказ из оставшегося (выбранного) количества
			Попытка
				НовыйЗаказКлиента = Объект.Ссылка.Скопировать();//Документы.ЗаказКлиента.СоздатьДокумент();
				НовыйЗаказКлиента.Дата = ТекущаяДата();
				НовыйЗаказКлиента.ДатаОтгрузки = ТекущаяДата();
				НовыйЗаказКлиента.ЖелаемаяДатаОтгрузки = ТекущаяДата();
				//НовыйЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
				
				НовыйЗаказКлиента.ЭтапыГрафикаОплаты.Очистить();
				
				Для каждого Строка Из Объект.ЭтапыГрафикаОплаты Цикл
					НоваяСтрокаГрафикаОплаты = НовыйЗаказКлиента.ЭтапыГрафикаОплаты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаГрафикаОплаты,Строка);
				КонецЦикла;
				
				НовыйЗаказКлиента.Товары.Очистить();
				
				Для каждого Строка Из ТЗ_Товары Цикл
					Если не Строка.КоличествоНовое = 0 Тогда
						Отбор = Новый Структура("НомерСтроки",Строка.НомерСтроки);
						Массив = Объект.Товары.НайтиСтроки(Отбор);
						Если не Массив.Количество() = 0 Тогда
							НоваяСтрока = НовыйЗаказКлиента.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,Массив[0],,"НомерСтроки,КодСтроки,КлючСвязи,Отменено,ПричинаОтмены");	
							НоваяСтрока.Количество = Строка.КоличествоНовое;
							НоваяСтрока.КоличествоУпаковок = Строка.КоличествоНовое;
							//НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
				НовыйЗаказКлиента.ЭтапыГрафикаОплаты,
				НовыйЗаказКлиента.Товары.Итог("СуммаСНДС"),
				0);
				
				НовыйЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
				
				ДокументПриемникИзменен = Истина;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка создания заказа клиента. Обратитесь в поддержку!");
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	Если ДокументПриемникИзменен Тогда
		Возврат НовыйЗаказКлиента.Ссылка;
	Иначе
		Возврат "Отсутствуют данные для вывода!";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресТоваровВХранилище()
	
	ТЗ_Товары = Объект.Товары.Выгрузить();
	АдресТЗ_Товары = ПоместитьВоВременноеХранилище(ТЗ_Товары);
	Возврат АдресТЗ_Товары; 
	
КонецФункции

&НаКлиенте
Процедура Рин1_ТоварыПричинаОтменыНачалоВыбораПосле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокЗначенийПричинОтмены();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьСписокЗначенийПричинОтмены()
	
	СписокВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПричиныОтменыЗаказовКлиентов.Ссылка КАК Ссылка,
	|	ПричиныОтменыЗаказовКлиентов.Представление КАК Представление
	|ИЗ
	|	Константа.Рин1_ПричинаОтменыПриРазделенииЗаказа КАК ПричинаОтменыПриРазделенииЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПричиныОтменыЗаказовКлиентов КАК ПричиныОтменыЗаказовКлиентов
	|		ПО ПричинаОтменыПриРазделенииЗаказа.Значение <> ПричиныОтменыЗаказовКлиентов.Ссылка
	|ГДЕ
	|	НЕ ПричиныОтменыЗаказовКлиентов.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСписокЗначенийПричинОтмены()

&НаКлиенте
Процедура ГИГ_ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
	КонецЕсли;
	
	ОткрытьФорму(
	"Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
	ПараметрыФормы,
	ЭтаФорма,
	УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКурсВалютуПоСтроке(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	Попытка
		Если не ТекущиеДанные.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") и ЗначениеЗаполнено(ТекущиеДанные.Цена) Тогда
			ТекущиеДанные.Рин1_ДатаИзменения = ТекущаяДата();
			ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.ВидЦены);
			Если не ДанныеПоВалюте.Количество() = 0 Тогда
				ДанныеПоВалюте.Свойство("Курс",ТекущиеДанные.Рин1_Курс);
				ДанныеПоВалюте.Свойство("Валюта",ТекущиеДанные.Рин1_Валюта);
				ДанныеПоВалюте.Свойство("ДатаКурса",ТекущиеДанные.Рин1_ДатаКурса);
				ДанныеПоВалюте.Свойство("ДатаТарифа",ТекущиеДанные.Рин1_ДатаТарифа);
			КонецЕсли;
		КонецЕсли;
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры // ()

&НаСервере
Функция ПолучитьКурсВалютыНаСервереДляСтроки(Номенклатура, Характеристика, ВидЦены, ДатаКурса = Неопределено)
	
	ДанныеПоВалюте = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Период КАК ДатаКурса,
		|	ЦеныНоменклатурыСрезПоследних.Период КАК ДатаТарифа
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ДатаКурса,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних
		|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта";
	
	Запрос.УстановитьПараметр("ДатаКурса", ?(ДатаКурса = Неопределено,ТекущаяДата(),ДатаКурса));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	//РезультатЗапроса.Выгрузить()
	Если не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить();
		ДанныеПоВалюте.Вставить("Валюта",Результат[0].Валюта);
		ДанныеПоВалюте.Вставить("ДатаКурса",Результат[0].ДатаКурса);
		ДанныеПоВалюте.Вставить("ДатаТарифа",Результат[0].ДатаТарифа);
		Если ВалютаДокумента = Результат[0].Валюта Тогда
			ДанныеПоВалюте.Вставить("Курс",1);
		Иначе 
			КурсДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(Объект.Дата,Новый Структура("Валюта",Объект.Валюта));
			ДанныеПоВалюте.Вставить("Курс",Результат[0].Курс/КурсДокумента[0].Курс);
		КонецЕсли;
		
	КонецЕсли;
	
	//bercut 160320
	Если не ДанныеПоВалюте.Количество() = 0 и не ДанныеПоВалюте.Валюта.Код = "643" и ДатаКурса = Неопределено и не НачалоДня(ТекущаяДата()) = ДанныеПоВалюте.ДатаКурса Тогда
		ОбщегоНазначения.СообщитьПользователю("Полученные курсовые данные по валюте " + Строка(ДанныеПоВалюте.Валюта) + ", не актуальны (не загруженны) в систему на текущий момент времени. Расчет может быть не верным!");
	КонецЕсли;
	//
	
	Возврат ДанныеПоВалюте;
	
КонецФункции // ПолучитьКурсВалютыНаСервереДляСтроки

&НаКлиенте
Процедура Рин1_ТоварыПередНачаломДобавленияПосле(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		//дообработаем строку с которой копировали - если перед копированием поменяли валюту документа - дикость
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		//++Шерстюк Ю.Ю. 12.05.2021 Задача 8379
		ТекущиеДанные.ГИГ_Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
		ТекущиеДанные.ГИГ_НазначениеУстановлено = Ложь;
		//--Шерстюк Ю.Ю.
		Если не ТекущиеДанные.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") и ЗначениеЗаполнено(ТекущиеДанные.Цена) Тогда
			ТекущиеДанные.Рин1_ДатаИзменения = ТекущаяДата();
			ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.ВидЦены);
			Если не ДанныеПоВалюте.Количество() = 0 Тогда
				ДанныеПоВалюте.Свойство("Курс",ТекущиеДанные.Рин1_Курс);
				ДанныеПоВалюте.Свойство("Валюта",ТекущиеДанные.Рин1_Валюта);
				ДанныеПоВалюте.Свойство("ДатаКурса",ТекущиеДанные.Рин1_ДатаКурса);
				ДанныеПоВалюте.Свойство("ДатаТарифа",ТекущиеДанные.Рин1_ДатаТарифа);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаполнитьТарифНаДатуВместо(Команда)
	
	ВыбЗнач = ТекущаяДата();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КД);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаполнитьВходныеЦеныНаДату", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите дату " + ?(Команда.Имя = "ЗаполнитьТарифНаДату","тарифа","курса"), ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполнитьВходныеЦеныНаДату(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);

		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата",   ВыбранныйЭлемент);
		СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
		
		СтруктураЗаполненияЦены.Вставить("ВидЦены", ТекущаяСтрока.ВидЦены);
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_1_1",СтруктураЗаполненияЦены);
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		ОбработатьСтрокуТЧНаСервере(Идентификатор,СтруктураДействий);
		
		Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") и ЗначениеЗаполнено(ТекущаяСтрока.Цена) Тогда
			ТекущаяСтрока.Рин1_ДатаИзменения = ТекущаяДата();
			ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ТекущаяСтрока.ВидЦены, ВыбранныйЭлемент);
			Если не ДанныеПоВалюте.Количество() = 0 Тогда
				ДанныеПоВалюте.Свойство("Курс",ТекущаяСтрока.Рин1_Курс);
				ДанныеПоВалюте.Свойство("Валюта",ТекущаяСтрока.Рин1_Валюта);
				ДанныеПоВалюте.Свойство("ДатаКурса",ТекущаяСтрока.Рин1_ДатаКурса);
				ДанныеПоВалюте.Свойство("ДатаТарифа",ТекущаяСтрока.Рин1_ДатаТарифа);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПересчитатьКурсыНаПроизвольнуюДатуВместо(Команда)
	
	//задача 70 п3,5
	ВыбЗнач = ТекущаяДата();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КД);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПересчитатьКурсыНаВыбраннуюДату", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите дату курса", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПересчитатьКурсыНаВыбраннуюДату(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВыбранногоКурса = ВыбранныйЭлемент;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		
		//обрабатываем только валютные товары
		Если не ТекущаяСтрока.Рин1_Курс = 1 Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Рин1_ДатаТарифа) Тогда
				РасчитатьСтрокуПриИзмененииДатыКурса(ТекущаяСтрока,ДатаВыбранногоКурса);
			Иначе
				//тут по условиям переговоров по задаче, спрашиваем при вводе пользователя значение тарифа
				Массив = Новый Массив;
				Массив.Добавить(Тип("Число"));
				КЧ = Новый КвалификаторыЧисла(15,4,ДопустимыйЗнак.Неотрицательный);
				ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КЧ);
				
				П = Новый Структура("ТекущаяСтрока,ДатаВыбранногоКурса",ТекущаяСтрока,ДатаВыбранногоКурса);
				
				Оповещение = Новый ОписаниеОповещения("ПослеПересчитатьТарифКурсыНаВыбраннуюДату", ЭтотОбъект, П);
				ПоказатьВводЗначения(Оповещение,, "Введите значение тарифа", ОписаниеТипов);
				
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПересчитатьТарифКурсыНаВыбраннуюДату(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	ВведенныйТариф = ВыбранныйЭлемент;
	РасчитатьСтрокуПриИзмененииДатыКурса(СписокПараметров.ТекущаяСтрока,СписокПараметров.ДатаВыбранногоКурса,ВведенныйТариф);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСтрокуПриИзмененииДатыКурса(ТекущаяСтрока,ДатаВыбранногоКурса,ВведенныйТариф = Неопределено)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		
		Если ВведенныйТариф = Неопределено Тогда
			Тариф = ПолучитьТариф(ТекущаяСтрока.КодСтроки);
		Иначе
			Тариф = ВведенныйТариф;
		КонецЕсли;
		
		Если не Тариф = 0 Тогда
			
			ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ТекущаяСтрока.ВидЦены, ДатаВыбранногоКурса);
			
			ТекущаяСтрока.Цена = Тариф * ДанныеПоВалюте.Курс;  
			
			СтруктураДействий = Новый Структура();
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
			//
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
			//
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
			
			ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
						
			ТекущаяСтрока.Рин1_ДатаИзменения = ТекущаяДата();
			ТекущаяСтрока.Рин1_Курс = ДанныеПоВалюте.Курс;
			ТекущаяСтрока.Рин1_ДатаКурса = ДанныеПоВалюте.ДатаКурса;
            ТекущаяСтрока.Рин1_Валюта = ДанныеПоВалюте.Валюта;
			
		Иначе
			Сообщить("Отсутствует тариф на дату. Расчет строки №" + ТекущаяСтрока.НомерСтроки  + " не возможен!");
		КонецЕсли;
		
	Иначе
		
		Сообщить("Не установлен вид цены. Расчет строки №" + ТекущаяСтрока.НомерСтроки  + " не возможен!");
		
	КонецЕсли;
	
КонецПроцедуры // РасчитатьСтрокуПриИзмененииДатыКурса()

&НаСервере
Функция ПолучитьТариф(КодСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки",КодСтроки))[0];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 1) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаТарифа,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Валюта = &Валюта
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Валюта", ТекущаяСтрока.Рин1_Валюта);
	Запрос.УстановитьПараметр("ВидЦены", ТекущаяСтрока.ВидЦены);
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("ДатаТарифа", КонецДня(ТекущаяСтрока.Рин1_ДатаТарифа));
	Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].Цена * ?(ТекущаяСтрока.Упаковка.Числитель = 0,1,ТекущаяСтрока.Упаковка.Числитель);
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьЦенуДляТапифа()

&НаКлиенте
Процедура Рин1_ПересчитатьКурсыПоРучнымЗначениямВместо(Команда)
	
	//задача 70 п3,6
	Перем ВыбЗнач;
	//сначала проверим какими валютами надо пересчитывать
	СЗ_Валюты = ПолучитьИспользуемыеВалюты();
	
	Если не СЗ_Валюты.Количество() = 0 Тогда
		
		ТаблицаКурсовВалют.Очистить();
		
		Для каждого Элемент Из СЗ_Валюты Цикл			
			П = Новый Структура("Валюта",Элемент.Значение);
			Оповещение = Новый ОписаниеОповещения("ПослеЗаполнитьТаблицуКурсовВалют",ЭтотОбъект,П);
			ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаВводаКурса",П,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЦикла;
		
	Иначе
		Сообщить("Отсутствует выделенная номенклатура для пересчета по курсу!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполнитьТаблицуКурсовВалют(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуКурсовВалют(ВыбранныйЭлемент, СписокПараметров);
	
	ОкнаЗакрыты = Ложь;
	ОкнаПриложения = ПолучитьОкна();
	Для каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если Найти(ОкноПриложения.Заголовок, "Внимание") > 0 Тогда
			ОкнаЗакрыты = Ложь;
			Прервать;
		Иначе 
			ОкнаЗакрыты = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ОкнаЗакрыты Тогда
		ЗаполнитьВходныеЦеныПоРучномуКурсу();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКурсовВалют(ВыбранныйЭлемент, СписокПараметров)
		
	НовСтр = ТаблицаКурсовВалют.Добавить();
	НовСтр.Валюта = СписокПараметров.Валюта;
	НовСтр.Курс = ВыбранныйЭлемент;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИспользуемыеВалюты()
	
	СЗ_Валюты = Новый СписокЗначений;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		Если не ТекущаяСтрока.Рин1_Курс = 1 и СЗ_Валюты.НайтиПоЗначению(ТекущаяСтрока.Рин1_Валюта) = Неопределено Тогда
			СЗ_Валюты.Добавить(ТекущаяСтрока.Рин1_Валюта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СЗ_Валюты;
	
КонецФункции // ПолучитьИспользуемыеВалюты()

&НаКлиенте
Процедура ЗаполнитьВходныеЦеныПоРучномуКурсу()
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		
		Если ТекущаяСтрока.Рин1_Курс =1 Тогда
			Продолжить;		
		КонецЕсли;
		
		МассивКурсов = ТаблицаКурсовВалют.НайтиСтроки(Новый Структура("Валюта",ТекущаяСтрока.Рин1_Валюта));
		
		ВыбранныйКурс = МассивКурсов[0].Курс;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Рин1_ДатаТарифа) Тогда
			РасчитатьСтрокуПриИзмененииКурса(ТекущаяСтрока,ВыбранныйКурс);
		Иначе
			//тут по условиям переговоров по задаче, спрашиваем при вводе пользователя значение тарифа
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			КЧ = Новый КвалификаторыЧисла(15,4,ДопустимыйЗнак.Неотрицательный);
			ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КЧ);
			
			П = Новый Структура("ТекущаяСтрока,ВыбранныйКурс",ТекущаяСтрока,ВыбранныйКурс);
			
			Оповещение = Новый ОписаниеОповещения("ПослеПересчитатьТарифПоРучномуКурсу", ЭтотОбъект, П);
			ПоказатьВводЗначения(Оповещение,, "Введите значение тарифа", ОписаниеТипов);
			
		КонецЕсли;			
		
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПересчитатьТарифПоРучномуКурсу(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	ВведенныйТариф = ВыбранныйЭлемент;
	РасчитатьСтрокуПриИзмененииКурса(СписокПараметров.ТекущаяСтрока,СписокПараметров.ВыбранныйКурс,ВведенныйТариф);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСтрокуПриИзмененииКурса(ТекущаяСтрока,ВыбранныйКурс,ВведенныйТариф = Неопределено)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		
		Если ВведенныйТариф = Неопределено Тогда
			Тариф = ПолучитьТариф(ТекущаяСтрока.КодСтроки);
		Иначе
			Тариф = ВведенныйТариф;
		КонецЕсли;
		
		Если не Тариф = 0 Тогда
			
			ТекущаяСтрока.Цена = Тариф * ВыбранныйКурс;  
			
			СтруктураДействий = Новый Структура();
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
			//
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
			//
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
			
			ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
			
			ТекущаяСтрока.Рин1_ДатаИзменения = ТекущаяДата();
			ТекущаяСтрока.Рин1_Курс = ВыбранныйКурс;
			
		Иначе
			Сообщить("Отсутствует тариф на дату. Расчет строки №" + ТекущаяСтрока.НомерСтроки  + " не возможен!");
		КонецЕсли;
		
	Иначе
		
		Сообщить("Не установлен вид цены. Расчет строки №" + ТекущаяСтрока.НомерСтроки  + " не возможен!");
		
	КонецЕсли;
	
КонецПроцедуры // РасчитатьСтрокуПриИзмененииКурса()

&НаСервере
Функция ПолучитьРеквизитыВалютыНаСервере(Номенклатура, Дата, ВидЦены)
	
	Валюта = Объект.Валюта;
	КурсыВалютДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(Объект.Дата,Новый Структура("Валюта",Валюта));
	Курс = КурсыВалютДокумента[0].Курс;
	Кратность = КурсыВалютДокумента[0].Кратность;
	
	РеквизитыВалюты = Новый Структура;
	РеквизитыВалюты.Вставить("ДатаТарифа", Дата(1,1,1,0,0,0));
	РеквизитыВалюты.Вставить("СкидкаНаценкаПоставщика", 0);
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		РеквизитыВалюты.Вставить("ВалютаЦены", Валюта);
		РеквизитыВалюты.Вставить("Курс", Курс);
		РеквизитыВалюты.Вставить("ЦенаВВалюте", 0);
		РеквизитыВалюты.Вставить("Цена", 0);
		Возврат РеквизитыВалюты;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 		
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаВВалюте,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК ВалютаТарифа,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК ДатаТарифа,
	|	КурсыВалютСрезПоследних.Курс КАК Курс
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта";
	
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);//Константы.ГИГ_ОсновнойВидЦеныТарифаНоменклатурыСНДС.Получить());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	//РезультатЗапроса.Выгрузить();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ВалютаТарифа = Валюта Тогда
			РеквизитыВалюты.Вставить("ВалютаЦены", Выборка.ВалютаТарифа);
			РеквизитыВалюты.Вставить("Курс", Выборка.Курс);
			РеквизитыВалюты.Вставить("ЦенаВВалюте", Выборка.ЦенаВВалюте);
			РеквизитыВалюты.Вставить("Цена", Выборка.ЦенаВВалюте);
			РеквизитыВалюты.Вставить("ДатаТарифа", Выборка.ДатаТарифа);
		Иначе 
			РеквизитыВалюты.Вставить("ВалютаЦены", Выборка.ВалютаТарифа);
			РеквизитыВалюты.Вставить("Курс", Выборка.Курс/Курс);
			РеквизитыВалюты.Вставить("ЦенаВВалюте", Выборка.ЦенаВВалюте*?(ЗначениеЗаполнено(Выборка.Курс),1,Выборка.Курс));
			РеквизитыВалюты.Вставить("Цена",Выборка.ЦенаВВалюте*?(ЗначениеЗаполнено(Выборка.Курс),Выборка.Курс/Курс,1));
			РеквизитыВалюты.Вставить("ДатаТарифа", Выборка.ДатаТарифа);
		КонецЕсли;

	Иначе
		РеквизитыВалюты.Вставить("ВалютаЦены", Валюта);
		РеквизитыВалюты.Вставить("Курс", Курс);
		РеквизитыВалюты.Вставить("ЦенаВВалюте", 0);
	КонецЕсли;
	
	Модифицированность = Истина;

	Возврат РеквизитыВалюты;
	
КонецФункции

&НаСервере
&После("ДоговорПриИзмененииСервер")
Процедура Рин1_ДоговорПриИзмененииСервер()
	
//Исходное	Объект.ГрафикОплаты = Объект.Договор.ГрафикОплаты;
	
//{{20200604 ГлазуновДВ добавили для исправления недочета (выбор Графика оплаты только по Соглашению не подходит)
	ГрафикОплаты = Объект.ГрафикОплаты;
	//Объект.ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
	Если ИспользоватьГрафикиОплаты Тогда
		//ГрафикОплаты = Объект.Договор.ГрафикОплаты;
		Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГрафикОплаты");
		Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокРасчетов");
		Если НЕ ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
			Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
			Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение,"ПорядокРасчетов");
		КонецЕсли;
		
		НекорректнаяДатаОплаты = Объект.ЭтапыГрафикаОплаты.Количество() = 0 ИЛИ Объект.ЭтапыГрафикаОплаты.Получить(0).ДатаПлатежа < Объект.Дата;
		
		Если СуммаЗаказано + СуммаЗалогаЗаТару > 0 И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				И Объект.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			ЗаполнитьЭтапыОплатыСервер(
				ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
				ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И (ГрафикОплаты <> Объект.ГрафикОплаты ИЛИ НекорректнаяДатаОплаты));
		Иначе
			Объект.ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
	КонецЕсли;
//}}20200604 ГлазуновДВ

//	Объект.ЭтапыГрафикаОплаты.Очистить();
//	
////Исходное	Для каждого Строка Из Объект.Договор.ГрафикОплаты.Этапы Цикл
////{{20200604 ГлазуновДВ
//	Для каждого Строка Из Объект.ГрафикОплаты.Этапы Цикл
////}}20200604 ГлазуновДВ
//		НоваяСтрокаГрафикаОплаты = Объект.ЭтапыГрафикаОплаты.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрокаГрафикаОплаты,Строка);
//	КонецЦикла;
//	
//	//bercut060520
//	ТЗ_Сумма = Объект.Товары.Выгрузить(Новый Структура("Отменено",Ложь),"СуммаСНДС");
//	ИтогДляРасчетаГрафика = ТЗ_Сумма.Итог("СуммаСНДС");	
//	//
//	
//	ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
//	Объект.ЭтапыГрафикаОплаты,
//	ИтогДляРасчетаГрафика,//Объект.Товары.Итог("СуммаСНДС"),
//	0);
//	
//	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(Объект,ИтогДляРасчетаГрафика,,,);
//	//ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(Объект,Объект.Товары.Итог("СуммаСНДС"),,,);
//		
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина, СуммаЗаказаноСЗалоговойТарой);
	
//{{20200803 ГлазуновДВ
	Если Объект.Договор.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным") Тогда
		Элементы.Валюта.Доступность = Истина;
	КонецЕсли;
//}}20200803 ГлазуновДВ
	
	//bercut230120
	ЗаполнитьЗначенияСвойств(Объект,Объект.Договор,"БанковскийСчетКонтрагента,Грузополучатель,БанковскийСчетГрузополучателя,Грузоотправитель,БанковскийСчетГрузоотправителя,Руководитель,ГлавныйБухгалтер");
	Объект.БанковскийСчет = Объект.Договор.БанковскийСчетОрганизации;
	//
	
//{{20200831 ГлазуновДВ (Задача № 2363)
	УстановитьВидимостьОпераций();
	Если Объект.Договор.Рин1_ВозможнаРеализацияБезПереходаПраваСобственности Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
		ХозяйственнаяОперацияПриИзмененииСервер(Ложь);
	КонецЕсли;
//}}202008031 ГлазуновДВ

КонецПроцедуры

&НаКлиенте
Процедура Рин1_НадписьЭтапыОплатыНажатиеПеред(Элемент, СтандартнаяОбработка)
	
	Если Объект.ЖелаемаяДатаОтгрузки = Дата(1,1,1) Тогда 
		Объект.ЖелаемаяДатаОтгрузки = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаполнитьПроизвольнуюЦенуВместо(Команда)
	
	Для каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл	
		
		ТекущаяСтрока = Элементы.Товары.ДанныеСтроки(Строка);
		
		ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		
		//теперь надо получать цену для произвольного вида цен, по виду цен в соглашении, если в соглашении нет вида цен то цена = 0 задача70п2
		ТекущаяСтрока.Цена = ПолучитьЦенуДляСтрокиСПроизвольнойЦенойПоВидуЦенИзСоглашения(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика) * ПолучитьЧислительУпаковки(ТекущаяСтрока.Упаковка);
		//
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
						
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросЗаполненияТЧ(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТЧТоварами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаполнитьСрокиПоставки(Команда)
	
	Если Объект.Рин1_УсловныеСрокиПоставки.Количество() = 0 Тогда
		ЗаполнитьТЧТоварами();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросЗаполненияТЧ",ЭтотОбъект),"Табличная часть будет очищена. Продолжить?",РежимДиалогаВопрос.ДаНет,0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧТоварами()
	
	Объект.Рин1_УсловныеСрокиПоставки.Очистить();
	
	ТЗ_Товары = Объект.Товары.Выгрузить(Новый Структура("Отменено",Ложь));
	
	//
	ОбновитьОбеспечениеНаСервере(Истина);
	ТЗ_ИЗ_Дерева = ВыгрузитьДеревоЗначенийВТаблицуЗначений(ДанныеФормыВЗначение(ГИГ_Обеспечение,Тип("ДеревоЗначений")));
	//
	
	Для каждого Строка Из ТЗ_Товары Цикл	
		ОбработатьСтрокуУсловныхСроковПоставки(Строка,ТЗ_ИЗ_Дерева);		
	КонецЦикла;
	
	ЭтотОбъект.Модифицированность = Истина;
	Объект.ДатаЗаполненияУсловныхСроков = ТекущаяДата();
	ЭтаФорма.Элементы.ТабличнаяЧастьЗаполненаНа.Заголовок = "Табличная часть заполнена на " + Объект.ДатаЗаполненияУсловныхСроков; 
	
КонецПроцедуры //

&НаСервере
Процедура ОбработатьСтрокуУсловныхСроковПоставки(Строка,ТЗ_ИЗ_Дерева)
	
	ЧислительУпаковки = ?(Строка.Упаковка.Числитель=0,1,Строка.Упаковка.Числитель);
	//{{20201209 ГлазуновДВ
	ЗнаменательУпаковки = ?(Строка.Упаковка.Знаменатель=0,1,Строка.Упаковка.Знаменатель);
	//}}20201209 ГлазуновДВ
	КоличествоРаспределяемое = Строка.КоличествоУпаковок;
	
	НовСтр = Объект.Рин1_УсловныеСрокиПоставки.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр,Строка);
	Если НовСтр.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
		НовСтр.Упаковка = НовСтр.Номенклатура.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется или 
		Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется или
		Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
		
		//остатки склада
		ОстаткиПоСкладу = ПолучитьОстаткиИРезервыНаСкладе(Строка.Номенклатура,Строка.Характеристика,Строка.Склад);
		//остатки ОЕМ
		ОстаткиОЕМ = ПолучитьОстаткиОЕМ(Строка.Номенклатура,Строка.Характеристика,Строка.Склад);
//Исходное		НовСтр.СкладОЕМ = ОстаткиОЕМ;
	//{{20201209 ГлазуновДВ
		НовСтр.СкладОЕМ = ОстаткиОЕМ / ЧислительУпаковки * ЗнаменательУпаковки;
	//}}20201209 ГлазуновДВ
		//
		Если не ОстаткиПоСкладу = Неопределено или не ОстаткиОЕМ = 0 Тогда
			Если Не ОстаткиПоСкладу = Неопределено Тогда
//Исходное				НовСтр.СкладНаличие = ?(ОстаткиПоСкладу.Доступно = 0,0,ОстаткиПоСкладу.ВНаличии/ЧислительУпаковки);
				Доступно = ОстаткиПоСкладу.Доступно;
			//{{20201209 ГлазуновДВ
				НовСтр.СкладНаличие = ?(ОстаткиПоСкладу.Доступно = 0, 0, ОстаткиПоСкладу.ВНаличии  / ЧислительУпаковки * ЗнаменательУпаковки);
			//}}20201209 ГлазуновДВ
			Иначе 
				НовСтр.СкладНаличие = 0;
				Доступно = 0;
			КонецЕсли;
			//*
//Исходное			Если КоличествоРаспределяемое <= Доступно/ЧислительУпаковки + ОстаткиОЕМ  Тогда
		//{{20201209 ГлазуновДВ
			Если КоличествоРаспределяемое <= Доступно / ЧислительУпаковки * ЗнаменательУпаковки + ОстаткиОЕМ  / ЧислительУпаковки * ЗнаменательУпаковки  Тогда
		//}}20201209 ГлазуновДВ
				НовСтр.СкладДоступно = КоличествоРаспределяемое;
				КоличествоРаспределяемое = 0;
			Иначе 
//Исходное				НовСтр.СкладДоступно = Доступно/ЧислительУпаковки + ОстаткиОЕМ;
			//{{20201209 ГлазуновДВ
				НовСтр.СкладДоступно = Доступно / ЧислительУпаковки * ЗнаменательУпаковки + ОстаткиОЕМ  / ЧислительУпаковки * ЗнаменательУпаковки;
			//}}20201209 ГлазуновДВ
//Исходное				КоличествоРаспределяемое = КоличествоРаспределяемое - НовСтр.СкладДоступно/ЧислительУпаковки;
			//{{20201209 ГлазуновДВ
				КоличествоРаспределяемое = КоличествоРаспределяемое - НовСтр.СкладДоступно;
			//}}20201209 ГлазуновДВ
			КонецЕсли;
			//*
		КонецЕсли;
		
		//ожидаемые остатки
		ОстаткиОжидаемые = ПолучитьОстаткиОжидаемыеСвободные(Строка.Номенклатура,Строка.Характеристика,Строка.Склад);
		Если Не ОстаткиОжидаемые = Неопределено Тогда
			НовСтр.ОжидаетсяСрок = ОстаткиОжидаемые.Срок;
			//* 250320 сказано убрать
			//Если КоличествоРаспределяемое <= ОстаткиОжидаемые.Доступно/ЧислительУпаковки  Тогда
			//	НовСтр.ОжидаетсяВыбрано = КоличествоРаспределяемое;
			//	КоличествоРаспределяемое = 0;
			//Иначе 
			//	НовСтр.ОжидаетсяВыбрано = ОстаткиОжидаемые.Доступно/ЧислительУпаковки;
			//	КоличествоРаспределяемое = КоличествоРаспределяемое - ОстаткиОжидаемые.Доступно/ЧислительУпаковки;
			//КонецЕсли;
//Исходное			НовСтр.ОжидаетсяДоступно = ОстаткиОжидаемые.Доступно/ЧислительУпаковки;
		//{{20201209 ГлазуновДВ
			НовСтр.ОжидаетсяДоступно = ОстаткиОжидаемые.Доступно/ ЧислительУпаковки * ЗнаменательУпаковки;
		//}}20201209 ГлазуновДВ
			//*			
		КонецЕсли;
		
		//схемы обеспечения
		ТЗ_СхемыОбеспечения = Новый ТаблицаЗначений;
		ТЗ_СхемыОбеспечения.Колонки.Добавить("КоличествоДоступно",Новый ОписаниеТипов("число"));
		ТЗ_СхемыОбеспечения.Колонки.Добавить("СрокПоставки",Новый ОписаниеТипов("строка"));
		ТЗ_СхемыОбеспечения.Колонки.Добавить("Производство",Новый ОписаниеТипов("булево"));
		ТЗ_СхемыОбеспечения.Колонки.Добавить("ИсключенаИзЗаполненияОбеспечений",Новый ОписаниеТипов("булево"));
		
		ВыполнитьПервыйПоискПоСхемеНоменклатуры = Истина;
		
		Массив = ТЗ_ИЗ_Дерева.НайтиСтроки(Новый Структура("Номенклатура",Строка.Номенклатура));
		Для каждого СтрокаМассива Из Массив Цикл 
			Если не СтрокаМассива.СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда// опять оказалось не надо //и не СтрокаМассива.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений Тогда
				//нужно по тз еще и фильтровать по приоритету от 1 до 10 и еще выполнить проверку
				Если СтрокаМассива.СхемаОбеспечения.ГИГ_Приоритет >= 1 и СтрокаМассива.СхемаОбеспечения.ГИГ_Приоритет <= 10 Тогда
					СтрокаТЗ = ТЗ_СхемыОбеспечения.Добавить();
					//теперь проверим есть ли схемы одинаковые в номенклатуре и  в массиве схем и если нет то добавим вверх ТЗ_СхемыОбеспечения схему из номенклатуры
//Исходное					Если ВыполнитьПервыйПоискПоСхемеНоменклатуры и не СтрокаМассива.Номенклатура.СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда
					//20201007 ГлазуновДВ
					Если ВыполнитьПервыйПоискПоСхемеНоменклатуры И
						Не (СтрокаМассива.Номенклатура.СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка()
						ИЛИ СтрокаМассива.Номенклатура.СхемаОбеспечения = Справочники.СхемыОбеспечения.НайтиПоНаименованию("не назначена")) Тогда
					//}}20201007 ГлазуновДВ							
                        НашлиСхему = Ложь;
						Для каждого Элемент Из Массив Цикл
							Если Элемент.СхемаОбеспечения = СтрокаМассива.Номенклатура.СхемаОбеспечения Тогда
								НашлиСхему = Истина;
							 Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если НашлиСхему Тогда
							ЗаполнитьЗначенияСвойств(СтрокаТЗ,СтрокаМассива);
							СтрокаТЗ.Производство = СтрокаМассива.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства;
							СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений = СтрокаМассива.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений;
						Иначе 	
							СтрокаТЗ.КоличествоДоступно = 0;
							Мин = РегистрыСведений.СхемыОбеспечения.Получить(Новый Структура("СхемаОбеспечения,Склад",СтрокаМассива.Номенклатура.СхемаОбеспечения,Объект.Склад)).СпособОбеспеченияПотребностей.СрокИсполненияЗаказа;
							Макс = РегистрыСведений.СхемыОбеспечения.Получить(Новый Структура("СхемаОбеспечения,Склад",СтрокаМассива.Номенклатура.СхемаОбеспечения,Объект.Склад)).СпособОбеспеченияПотребностей.ГарантированныйСрокОтгрузки;
							СтрокаТЗ.СрокПоставки = Строка(Мин) + " - " +Строка(Макс) + " дн.";
							СтрокаТЗ.Производство = Ложь;
							СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений = Истина;
							//bercut130720
							СтрокаТЗ_доп = ТЗ_СхемыОбеспечения.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТЗ_доп,СтрокаМассива);
							СтрокаТЗ_доп.Производство = СтрокаМассива.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства;
							СтрокаТЗ_доп.ИсключенаИзЗаполненияОбеспечений = СтрокаМассива.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений;
							//
						КонецЕсли;
						
						ВыполнитьПервыйПоискПоСхемеНоменклатуры = Ложь;
					Иначе 
						ЗаполнитьЗначенияСвойств(СтрокаТЗ,СтрокаМассива);
						СтрокаТЗ.Производство = СтрокаМассива.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства;
						СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений = СтрокаМассива.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений;
					КонецЕсли;
				Иначе 
					Если СтрокаМассива.СхемаОбеспечения.ГИГ_Приоритет > 10 и СтрокаМассива.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства Тогда
						СтрокаТЗ = ТЗ_СхемыОбеспечения.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЗ,СтрокаМассива);
						СтрокаТЗ.Производство = СтрокаМассива.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства;
						СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений = СтрокаМассива.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений;
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Поставщик1 = Ложь;
		Поставщик2 = Ложь;
		ЗаказПроизводству = Ложь;
		Для Каждого СтрокаТЗ Из ТЗ_СхемыОбеспечения Цикл 
			
			Если Не СтрокаТЗ.Производство Тогда
				Если Не Поставщик1 Тогда
					НовСтр.СкладПоставщика1Срок = СтрокаТЗ.СрокПоставки;
					//*
//Исходное					Если  КоличествоРаспределяемое <= СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки  Тогда
				//{{20201209 ГлазуновДВ
					Если  КоличествоРаспределяемое <= СтрокаТЗ.КоличествоДоступно / ЧислительУпаковки * ЗнаменательУпаковки Тогда
				//}}20201209 ГлазуновДВ
						НовСтр.СкладПоставщика1Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,КоличествоРаспределяемое);
						КоличествоРаспределяемое = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,КоличествоРаспределяемое,0);
					Иначе
//Исходное						НовСтр.СкладПоставщика1Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки);
				//{{20201209 ГлазуновДВ
						НовСтр.СкладПоставщика1Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,СтрокаТЗ.КоличествоДоступно  / ЧислительУпаковки * ЗнаменательУпаковки);
				//}}20201209 ГлазуновДВ
						КоличествоРаспределяемое = КоличествоРаспределяемое - НовСтр.СкладПоставщика1Выбрано;
					КонецЕсли;
//Исходное					НовСтр.СкладПоставщика1Доступно = СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки;
				//{{20201209 ГлазуновДВ
					НовСтр.СкладПоставщика1Доступно = СтрокаТЗ.КоличествоДоступно  / ЧислительУпаковки * ЗнаменательУпаковки;
				//}}20201209 ГлазуновДВ
					//*
					Поставщик1 = Истина;
					Продолжить;
				КонецЕсли;
				Если Не Поставщик2 Тогда
					НовСтр.СкладПоставщика2Срок = СтрокаТЗ.СрокПоставки;
					//*
//Исходное					Если  КоличествоРаспределяемое <= СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки  Тогда
				//{{20201209 ГлазуновДВ
					Если  КоличествоРаспределяемое <= СтрокаТЗ.КоличествоДоступно  / ЧислительУпаковки * ЗнаменательУпаковки Тогда
				//}}20201209 ГлазуновДВ
						НовСтр.СкладПоставщика2Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,КоличествоРаспределяемое);
						КоличествоРаспределяемое = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,КоличествоРаспределяемое,0);
					Иначе
//Исходное						НовСтр.СкладПоставщика2Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки);
				//{{20201209 ГлазуновДВ
						НовСтр.СкладПоставщика2Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,СтрокаТЗ.КоличествоДоступно  / ЧислительУпаковки * ЗнаменательУпаковки);
				//}}20201209 ГлазуновДВ
						КоличествоРаспределяемое = КоличествоРаспределяемое - НовСтр.СкладПоставщика2Выбрано;
					КонецЕсли;
//Исходное					НовСтр.СкладПоставщика2Доступно = СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки;
				//{{20201209 ГлазуновДВ
					НовСтр.СкладПоставщика2Доступно = СтрокаТЗ.КоличествоДоступно  / ЧислительУпаковки * ЗнаменательУпаковки;
				//}}20201209 ГлазуновДВ
					//*
					Поставщик2 = Истина;
					НовСтр.ЗаказДоступно = 0;
					Продолжить;
				КонецЕсли;
			Иначе 
				Если Не ЗаказПроизводству Тогда  
					НовСтр.ЗаказДоступно = КоличествоРаспределяемое;
					НовСтр.ЗаказСрок = СтрокаТЗ.СрокПоставки;
					ЗаказПроизводству = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//если небыло схемы производства то остаток распределяем в хвост
		Если Не КоличествоРаспределяемое = 0 И Не ЗаказПроизводству Тогда
			НовСтр.ЗаказДоступно = КоличествоРаспределяемое;
		КонецЕсли;
		
	Иначе 	
		
		Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда //Резервировать к дате
			
			НовСтр.ОжидаетсяВыбрано = Строка.КоличествоУпаковок;
			НовСтр.ОжидаетсяДоступно = Строка.КоличествоУпаковок;
			НовСтр.ОжидаетсяСрок = Строка(Окр((КонецДня(Строка.ДатаОтгрузки) - ТекущаяДата())/86400)) + " дн.";
			
		ИначеЕсли  Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада или //Резервировать на складе
			Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить или  //Отгрузить
			Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда //Отгрузить обособленно
			
			НовСтр.СкладНаличие = Строка.КоличествоУпаковок;
			НовСтр.СкладДоступно = Строка.КоличествоУпаковок;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСтрокуУсловныхСроковПоставки()

&НаСервере
Функция ПолучитьОстаткиОЕМ(Номенклатура,Характеристика,Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура1,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика1,
	|	Склады.Ссылка КАК Склад1
	|ПОМЕСТИТЬ ВТ_ТЧТовары
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (Номенклатура.ХарактеристикаМногооборотнаяТара = ХарактеристикиНоменклатуры.Ссылка),
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Склады.Ссылка = &Склад
	|	И ХарактеристикиНоменклатуры.Ссылка = &Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК Ссылка,
	|	КлючиАналитикиУчетаНоменклатуры.Назначение КАК Назначение,
	|	КлючиАналитикиУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	КлючиАналитикиУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	КлючиАналитикиУчетаНоменклатуры.МестоХранения КАК МестоХранения
	|ПОМЕСТИТЬ ВтКлючиАналитики
	|ИЗ
	|	ВТ_ТЧТовары КАК ВТ_ТЧТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|		ПО ВТ_ТЧТовары.Номенклатура1 = КлючиАналитикиУчетаНоменклатуры.Номенклатура
	|			И ВТ_ТЧТовары.Характеристика1 = КлючиАналитикиУчетаНоменклатуры.Характеристика
	|			И ВТ_ТЧТовары.Склад1 = КлючиАналитикиУчетаНоменклатуры.МестоХранения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоДоступно
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
	|			,
	|			Склад = &Склад
	|				И Назначение.ГИГ_Партнер = &Партнер
	|				И Назначение.ГИГ_ОЕМПотребность
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК ОбеспечениеЗаказовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_ТЧТовары.Номенклатура1 КАК Номенклатура,
	|			ВТ_ТЧТовары.Характеристика1 КАК Характеристика,
	|			ВТ_ТЧТовары.Склад1 КАК Склад
	|		ИЗ
	|			ВТ_ТЧТовары КАК ВТ_ТЧТовары
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_ТЧТовары.Номенклатура1,
	|			ВТ_ТЧТовары.Характеристика1,
	|			ВТ_ТЧТовары.Склад1) КАК ТЧТовары
	|		ПО ОбеспечениеЗаказовОстатки.Номенклатура = ТЧТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки КАК ТоварыОрганизацийОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКлючиАналитики КАК ВтКлючиАналитики
	|			ПО ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры = ВтКлючиАналитики.Ссылка
	|		ПО ОбеспечениеЗаказовОстатки.Номенклатура = ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Номенклатура
	|			И ОбеспечениеЗаказовОстатки.Назначение = ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Назначение
	|			И ОбеспечениеЗаказовОстатки.Склад = ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.МестоХранения
	|ГДЕ
	|	ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток > 0
	|	И ОбеспечениеЗаказовОстатки.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбеспечениеЗаказовОстатки.Назначение.Представление,
	|	ОбеспечениеЗаказовОстатки.Номенклатура.Представление";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].КоличествоДоступно;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции // ПолучитьОстаткиОЕМ(Строка.Номенклатура,Строка.Характеристика,Строка.Склад)

&НаСервере
Функция ПолучитьОстаткиИРезервыНаСкладе(Номенклатура,Характеристика,Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
	|	СвободныеОстаткиОстатки.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ДоступныеОстаткиПланируемыхПоступлений.Количество ЕСТЬ NULL
	|			ТОГДА СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток
	|		ИНАЧЕ СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток + ДоступныеОстаткиПланируемыхПоступлений.Количество
	|	КОНЕЦ КАК Доступно,
	|	ВЫБОР
	|		КОГДА СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток = 0
	|			ТОГДА СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток
	|		ИНАЧЕ СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток + СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток
	|	КОНЕЦ КАК ВНаличии
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Склад = &Склад
	|				И Характеристика = &Характеристика) КАК СвободныеОстаткиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений
	|		ПО СвободныеОстаткиОстатки.Номенклатура = ДоступныеОстаткиПланируемыхПоступлений.Номенклатура
	|			И СвободныеОстаткиОстатки.Характеристика = ДоступныеОстаткиПланируемыхПоступлений.Характеристика
	|			И СвободныеОстаткиОстатки.Склад = ДоступныеОстаткиПланируемыхПоступлений.Склад
	|ГДЕ
	|	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток > 0";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
	    Результат = РезультатЗапроса.Выгрузить()[0];
		Возврат Новый Структура("Доступно,ВНаличии",Результат.Доступно,Результат.ВНаличии);
	Иначе 
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции //

&НаСервере
Функция ПолучитьОстаткиОжидаемыеСвободные(Номенклатура,Характеристика,Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура КАК Номенклатура,
	|	ДоступныеОстаткиПланируемыхПоступлений.Характеристика КАК Характеристика,
	|	ДоступныеОстаткиПланируемыхПоступлений.Склад КАК Склад,
	|	ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности КАК ДатаДоступности,
	|	ДоступныеОстаткиПланируемыхПоступлений.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений
	|ГДЕ
	|	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура = &Номенклатура
	|	И ДоступныеОстаткиПланируемыхПоступлений.Характеристика = &Характеристика
	|	И ДоступныеОстаткиПланируемыхПоступлений.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура КАК Номенклатура,
	|	ДоступныеОстаткиПланируемыхПоступлений.Характеристика КАК Характеристика,
	|	ДоступныеОстаткиПланируемыхПоступлений.Склад КАК Склад,
	|	ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности КАК ДатаПоступления,
	|	МИНИМУМ(ДоступныеОстаткиПланируемыхПоступлений.Количество - ВременнаяТаблица.Количество) КАК ОстатокИзЗаказа
	|ИЗ
	|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ДоступныеОстаткиПланируемыхПоступлений.Номенклатура = ВременнаяТаблица.Номенклатура
	|			И ДоступныеОстаткиПланируемыхПоступлений.Характеристика = ВременнаяТаблица.Характеристика
	|			И ДоступныеОстаткиПланируемыхПоступлений.Склад = ВременнаяТаблица.Склад
	|			И ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности > ВременнаяТаблица.ДатаДоступности
	|ГДЕ
	|	НЕ ДоступныеОстаткиПланируемыхПоступлений.Количество = 0
	|	И ВременнаяТаблица.Номенклатура = &Номенклатура
	|	И ВременнаяТаблица.Характеристика = &Характеристика
	|	И ВременнаяТаблица.Склад = &Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура,
	|	ДоступныеОстаткиПланируемыхПоступлений.Характеристика,
	|	ДоступныеОстаткиПланируемыхПоступлений.Склад,
	|	ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоступления";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка =  РезультатЗапроса.Выбрать();
	
	ИтогоДоступно = 0;
	ТЗ_ДатыПоступления = Новый ТаблицаЗначений;
	ТЗ_ДатыПоступления.Колонки.Добавить("ДатаПоступления",Новый ОписаниеТипов("Дата"));
	Если не Выборка.Количество() = 0 Тогда
		Пока Выборка.Следующий() Цикл
			ИтогоДоступно = ИтогоДоступно + Выборка.ОстатокИзЗаказа; 
			НовСтр = ТЗ_ДатыПоступления.Добавить();
			НовСтр.ДатаПоступления = Выборка.ДатаПоступления;
		КонецЦикла;
	Иначе 	
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТЗ_ДатыПоступления.Количество() = 1 Тогда
	  ДатаНачало = ТЗ_ДатыПоступления[0].ДатаПоступления; 
	  ДатаОкончание = ДатаНачало;   	
	Иначе
	  ДатаНачало = ТЗ_ДатыПоступления[0].ДатаПоступления; 
	  ДатаОкончание = ТЗ_ДатыПоступления[ТЗ_ДатыПоступления.Количество()-1].ДатаПоступления; 	
	КонецЕсли;	
	
	ПредставлениеСрока = ПолучитьПредставлениеОжиданияИзДат(ДатаНачало,ДатаОкончание);
	
	Возврат Новый Структура("Доступно,Срок",ИтогоДоступно,ПредставлениеСрока);
	
КонецФункции //

&НаСервереБезКонтекста
Функция ПолучитьПредставление(ВариантОбеспечения)
	
	Если ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
		Возврат "На складе";
	ИначеЕсли ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется Тогда
		Возврат "В течение";
	ИначеЕсли ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда
		Возврат "В течение";
	КонецЕсли;
	
	Возврат "По запросу";
	
КонецФункции // ПолучитьПредставление()

&НаСервере
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено)
	
	Если Таблица = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
        Для Каждого Колонка Из Дерево.Колонки Цикл
            Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
        КонецЦикла;
    КонецЕсли;
    Для Каждого СтрокаДерева Из Дерево.Строки Цикл
        ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
        ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
	КонецЦикла;
    Возврат Таблица;

КонецФункции 

&НаКлиенте
Процедура Рин1_Рин1_УсловныеСрокиПоставкиПередУдалениемВместо(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_УсловныеСрокиПоставкиПередНачаломДобавленияВместо(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыСуммаПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_5");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
		
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
&Вместо("СоглашениеПриИзмененииСервер")
Процедура Рин1_СоглашениеПриИзмененииСервер()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоСоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
		
	////bercut180120
	//Если не ДокументПродажи.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
	//	ДокументПродажи.ГрафикОплаты = ДокументПродажи.Договор.ГрафикОплаты;			
	//КонецЕсли;
	////	
//{{20200604 ГлазуновДВ добавили для исправления недочета (выбор Графика оплаты только по Соглашению не подходит)
	//Объект.ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
	Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГрафикОплаты");
	Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокРасчетов");
	Если НЕ ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
		Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
		Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение,"ПорядокРасчетов");
	КонецЕсли;
//}}20200604 ГлазуновДВ
//{{20200803-20200818 ГлазуновДВ добавили для выбора Валюты при подстановке договора
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Если Объект.Договор.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным") Тогда
				Элементы.Валюта.Доступность = Истина;
			КонецЕсли;
		Иначе
			Элементы.Валюта.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
//}}20200803-20200818 ГлазуновДВ
	
	ВалютаДокумента = Объект.Валюта;
	
//{{20200831 ГлазуновДВ (Задача № 2363)
	Если ЗначениеЗаполнено(Объект.Договор) И Объект.Договор.Рин1_ВозможнаРеализацияБезПереходаПраваСобственности Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
		//ХозяйственнаяОперацияПриИзмененииСервер(Ложь);
	КонецЕсли;
//}}202008031 ГлазуновДВ
	
	ХозяйственнаяОперацияПриИзмененииСервер(Ложь);
	СкладПриИзмененииСервер();
	
	//
	Для Каждого ТекущаяСтрока из Объект.Товары Цикл 
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
		
	КонецЦикла;
	//
	
	НекорректнаяДатаОплаты = Объект.ЭтапыГрафикаОплаты.Количество() = 0 ИЛИ Объект.ЭтапыГрафикаОплаты.Получить(0).ДатаПлатежа < Объект.Дата;
	
	Если СуммаЗаказано + СуммаЗалогаЗаТару > 0 И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И Объект.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
		ЗаполнитьЭтапыОплатыСервер(
		ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
		ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И (ГрафикОплаты <> Объект.ГрафикОплаты ИЛИ НекорректнаяДатаОплаты));
	Иначе
		Объект.ЭтапыГрафикаОплаты.Очистить();
	КонецЕсли;
	
	ПоСоглашениюИспользуютсяДоговорыКонтрагентов = ЗначениеЗаполнено(Объект.Соглашение) И ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчет, , Объект.НаправлениеДеятельности);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	УстановитьВидимостьОпераций();
	ЗаполнитьГруппуФинУчета();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	ОбновитьОграничениеЗадолженности();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(Объект.Соглашение, Объект.Статус);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина, СуммаЗаказаноСЗалоговойТарой);
	
//{{20200827 ГлазуновДВ
	//Элементы.ДоговорВсе.Видимость = Элементы.Договор.Видимость;
	//Элементы.ДоговорВсе.Доступность = Элементы.Договор.Доступность;
	//Если ПолучитьВалютуДоговора(Объект.Договор) = Объект.Валюта Тогда
	//	Элементы.ДоговорВсе.Доступность = Ложь;
	//КонецЕсли;
//}}20200827 ГлазуновДВ
	
КонецПроцедуры

&НаСервере
Функция СтруктураЗаполненияЦеныВСтрокеТЧ(ЭтотОбъект, ВидЦеныВШапке = Ложь) 
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", ЭтотОбъект.Валюта);
	
	Если ВидЦеныВШапке Тогда
		СтруктураЗаполненияЦены.Вставить("ВидЦены", ЭтотОбъект.ВидЦены);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаКлиенте
Процедура Рин1_ТоварыВыборВместо1(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказКлиента.Форма.ФормаДокумента.Элементы.Товары.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыВариантОбеспечения И Не ТолькоПросмотр Тогда

		СтандартнаяОбработка = Ложь;
		
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Иначе
			
			ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
			ПараметрыПроверки.Поля.Удалить("Подразделение");
			
			Если ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
				
				ПараметрыФормы = ПараметрыВыбораОбеспечения();
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
					ЭтаФорма, УникальныйИдентификатор);
					
				Иначе
					Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru = 'Товары';
																														|en = 'Goods'"));
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		//пока отключим
		//Если не Элемент.ТекущиеДанные.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		//	
		//	СтандартнаяОбработка = Ложь;
		//	
		//	Если НЕ Объект.СкидкиРассчитаны Тогда
		//		СтруктураПараметры = Новый Структура;
		//		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		//		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		//		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		//		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		//		
		//		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		//		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		//			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		//		РассчитатьСкидкиБезПримененияКОбъекту();
		//	КонецЕсли;
		//	
		//	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		//	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
		//	
		//КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ПравоНаЧтениеВидаЦены Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Для редактирования цены выберите вид цены ""<произвольная>""';
						|en = 'To edit the price, select the ""<arbitrary>"" price type'"),
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец",        УникальныйИдентификатор);
			
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Рин1_УдалитьУсловныеСрокиПоставкиВместо(Команда)
	Объект.Рин1_УсловныеСрокиПоставки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПриНачалеРедактированияПосле(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;	
		ТекущаяСтрока.ГИГ_СхемаОбеспечения = ПредопределенноеЗначение("Справочник.СхемыОбеспечения.ПустаяСсылка");
		ТекущаяСтрока.ГИГ_СрокПоставки = "";
		 //
		ТекущаяСтрока.ДатаКлиента = Дата(1,1,1);
		//
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыКоличествоУпаковокПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
	
	УстановитьКонтроль(Элементы.Товары.ТекущиеДанные.Номенклатура, Ложь);
	Если Не ГИГ_ПоказатьТоварыСводно Тогда
		ОбновитьТоварыСводноНаСервере();
	Иначе 
		ОбновитьТоварыСводноНаКлиенте();
	КонецЕсли;
	ОбработатьКратностьНаСервере(ТекущаяСтрока.НомерСтроки);
		
	//больше никуда не фокусируемся
//	ТекущийЭлемент = Элементы.ТоварыНомерСтроки; //20201006 ГлазуновДВ ОТКЛЮЧИЛ, фокус отсается на КоличествеУпаковок
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьКратностьНаСервере(НомерСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки",НомерСтроки))[0];
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ГИГ_КратностьПартииВызовСервера.ПолучитьДанныеКратностиПартии(Объект, ТекущаяСтрока, ГИГ_КэшДанныеНоменклатуры));	
	
КонецПроцедуры // ()


&НаСервере
Функция ПолучитьЧислительУпаковки(Упаковка)
	
	Возврат ?(Упаковка.Числитель = 0,1,Упаковка.Числитель);	
	
КонецФункции // ПолучитьЧислительУпаковки()

&НаСервере
Функция ПолучитьТиповуюСтруктуруПересчетаСтроки()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	Возврат  СтруктураДействий;
	
КонецФункции // ПолучитьТиповуюСтруктуру()

&НаСервере
&Вместо("ПолучитьЗагруженныеТоварыИзХранилища")
Процедура Рин1_ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище) //Загрузка РИНЭКО + стандартная
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров,,"КодСтроки");
		Если Объект.НеОтгружатьЧастями Тогда
			СтрокаТЧТовары.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		ОбработатьСтрокуТЧНаСервере(СтрокаТЧТовары.ПолучитьИдентификатор(),СтруктураДействий);		
		
		СтрокаТЧТовары.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		
	//{{20210126 ГлазуновДВ
		Если ЗначениеЗаполнено(СтрокаТоваров.Цена) Тогда
			СтрокаТЧТовары.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
			СтрокаТЧТовары.Цена							= СтрокаТоваров.Цена;
			СтрокаТЧТовары.ЦенаСоСкидкой				= СтрокаТоваров.Цена;
			СтрокаТЧТовары.Сумма						= СтрокаТоваров.Сумма;
			СтрокаТЧТовары.СуммаБезВозвратнойТары		= СтрокаТоваров.Сумма;
			СтрокаТЧТовары.СуммаНДС						= СтрокаТоваров.СуммаНДС;
			СтрокаТЧТовары.СуммаНДСБезВозвратнойТары	= СтрокаТоваров.СуммаНДС;
			СтрокаТЧТовары.СуммаСНДС					= СтрокаТоваров.СуммаСНДС;
			СтрокаТЧТовары.СуммаСНДСБезВозвратнойТары	= СтрокаТоваров.СуммаСНДС;
			СтрокаТЧТовары.СуммаПроцентОбщий							= 0;
			СтрокаТЧТовары.СуммаРучнойСкидки							= 0;
			СтрокаТЧТовары.СуммаАвтоматическойСкидки					= 0;
			СтрокаТЧТовары.СуммаРучнойСкидкиБезВозвратнойТары			= 0;
			СтрокаТЧТовары.СуммаАвтоматическойСкидкиБезВозвратнойТары	= 0;
			СтрокаТЧТовары.ПроцентОбщий									= 0;
			СтрокаТЧТовары.ПроцентРучнойСкидки							= 0;
			СтрокаТЧТовары.ПроцентАвтоматическойСкидки					= 0;
		КонецЕсли;
	//}}20210126 ГлазуновДВ
		
		Если не СтрокаТЧТовары.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") и ЗначениеЗаполнено(СтрокаТЧТовары.Цена) Тогда
			СтрокаТЧТовары.Рин1_ДатаИзменения = ТекущаяДата();
			ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(СтрокаТЧТовары.Номенклатура, СтрокаТЧТовары.Характеристика, СтрокаТЧТовары.ВидЦены);
			Если не ДанныеПоВалюте.Количество() = 0 Тогда
				ДанныеПоВалюте.Свойство("Курс",СтрокаТЧТовары.Рин1_Курс);
				ДанныеПоВалюте.Свойство("Валюта",СтрокаТЧТовары.Рин1_Валюта);
				ДанныеПоВалюте.Свойство("ДатаКурса",СтрокаТЧТовары.Рин1_ДатаКурса);
				ДанныеПоВалюте.Свойство("ДатаТарифа",СтрокаТЧТовары.Рин1_ДатаТарифа);
			КонецЕсли;
		КонецЕсли;	
		//
				
	КонецЦикла;
	
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.Товары);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура Рин1_ПриЧтенииНаСервереПосле(ТекущийОбъект)
	
	Если не элементы.найти("ПроцентОбщий") = Неопределено Тогда  //для перечитывания с формы
		Для Каждого ТекущаяСтрока из Объект.Товары цикл
			ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
			ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ГИГ_КратностьПартииВызовСервера.ПолучитьДанныеКратностиПартии(Объект, ТекущаяСтрока, ГИГ_КэшДанныеНоменклатуры));
		КонецЦикла;	
	Иначе 
		Для Каждого ТекущаяСтрока из Объект.Товары цикл	//для вывода значка нарушения кратности упаковки		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ГИГ_КратностьПартииВызовСервера.ПолучитьДанныеКратностиПартии(Объект, ТекущаяСтрока, ГИГ_КэшДанныеНоменклатуры));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПередНачаломИзмененияПосле(Элемент, Отказ)
	
	НоменклатураДоИзменения = Элементы.Товары.ТекущиеДанные.Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыЦенаСоСкидкойПриИзмененииПосле(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_1");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
&Вместо("РазбитьСтрокуЗавершение")
Процедура Рин1_РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПриИзмененииПосле(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные; 
	Если не ТекущаяСтрока = Неопределено и не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,Объект.Дата,ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаполнитьЦеныПоСоглашениюВместо(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru = 'Товары';
		|en = 'Goods'")) Тогда
		
		//ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		
		Попытка
			Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
				
				ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Строка);
				
				СтруктураДействий = Новый Структура();
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2");
				//СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
				//
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
				//
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
				СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
				
				ОбработатьСтрокуТЧНаСервере(Строка,СтруктураДействий);
				
				Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") и ЗначениеЗаполнено(ТекущаяСтрока.Цена) Тогда
					ТекущаяСтрока.Рин1_ДатаИзменения = ТекущаяДата();
					ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ТекущаяСтрока.ВидЦены);
					Если не ДанныеПоВалюте.Количество() = 0 Тогда
						ДанныеПоВалюте.Свойство("Курс",ТекущаяСтрока.Рин1_Курс);
						ДанныеПоВалюте.Свойство("Валюта",ТекущаяСтрока.Рин1_Валюта);
						ДанныеПоВалюте.Свойство("ДатаКурса",ТекущаяСтрока.Рин1_ДатаКурса);
						ДанныеПоВалюте.Свойство("ДатаТарифа",ТекущаяСтрока.Рин1_ДатаТарифа);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(Истина);
		Исключение
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(Ложь);
		КонецПопытки;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидЦеныПоСоглашению()
	
	Возврат Объект.Соглашение.ВидЦен;	
	
КонецФункции // ПолучитьВидЦеныПоСоглашению()

&НаКлиенте
&Вместо("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение")
Процедура Рин1_ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		Попытка
			
			СтруктураДействий = Новый Структура();
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_1");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
			//
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
			//
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
			СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
			
			Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
				
				ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Строка);
				ТекущаяСтрока.ВидЦены = ВидЦен;
				
				ТекущаяСтрока.СуммаРучнойСкидки           = 0;//очищаем если пользователь поставил вручную 
				ПрименныеСкидки = ПолучитьОбработатьСкидки(ТекущаяСтрока.Номенклатура);
				ПрименныеСкидки.Свойство("АвтоСкидка",ТекущаяСтрока.ПроцентАвтоматическойСкидки);
				ПрименныеСкидки.Свойство("РучнаяСкидка",ТекущаяСтрока.ПроцентРучнойСкидки);	
				
				ОбработатьСтрокуТЧНаСервере(Строка,СтруктураДействий);
				
			КонецЦикла;
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(Истина, ВидЦен);
		Исключение
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(Ложь, ВидЦен);
		КонецПопытки;
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОтменитьРучныеСкидкиВместо(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru = 'Товары';
		|en = 'Goods'")) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	Для каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
		КонецЕсли;
				
	КонецЦикла;
	
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьВариантОбеспечения")
Функция Рин1_ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)
	
	
	
	
	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.Товары.ТекущаяСтрока);
	КонецЦикла;
	
//Исходное	СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив,"Номенклатура, Характеристика, ИсходныйНомерСтроки");
	СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив,"Номенклатура, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки, ДатаОтгрузки, Характеристика, ИсходныйНомерСтроки");
	
	Для Каждого Индекс из ВыбранноеЗначение Цикл
		СтрТовара = СтрокиТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТовара,Объект.Товары.НайтиПоИдентификатору(Индекс.Идентификатор));
		СтрТовара.ИсходныйНомерСтроки = Индекс.Идентификатор;
	КонецЦикла;
	
	// + [Rineco], [Киселев А.Н.] [12.08.2021] 
	// Задача: [№ 13619], [#Вариант обеспечения изменился НЕ Обеспечивать ->Любой]
	Для Каждого Индекс из ВыбранноеЗначение Цикл
		
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(Индекс.Идентификатор);
		Если СтрокаТовара.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
			РИНЭКО_ИзменилсяВариантОбеспечения = Истина;
		КонецЕсли;
	КонецЦикла;
	// - [Rineco], [Киселев А.Н.] [12.08.2021]
	
	
//Исходное	СтрокиТовары.Свернуть("Номенклатура, Характеристика, ИсходныйНомерСтроки");
	СтрокиТовары.Свернуть("Номенклатура, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки, ДатаОтгрузки, Характеристика, ИсходныйНомерСтроки");
	
	СтруктураПараметры = Новый Структура("Склад,СтрокиТовары,Дата",Объект.Склад,СтрокиТовары,Объект.Дата);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("Отгружено",Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ДатаОтгрузки",Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	Таблица.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ПриоритетТипаОбеспечения",Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СкладНаименование",Новый ОписаниеТипов("Строка"));
	
	Для каждого Структура Из ВыбранноеЗначение Цикл
		НовСтр = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Структура);
		НовСтр.Приоритет = 0;
		НовСтр.ПриоритетТипаОбеспечения = ?(НовСтр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется,4,0);
		НовСтр.СкладНаименование = НовСтр.Склад.Наименование;
	КонецЦикла;
	
	//ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица, СтруктураПараметры);	
	
//{{20200922 ГлазуновДВ Передаем для подбора схемы по одной Строке из "Таблица"
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Ложь, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	ПутиКДанным = Новый Соответствие; //Описание особенностей формы
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки"); // дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	ПараметрыДокумента.Вставить("ГруппаСкладов", Объект.Склад);
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыКлиентов);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	// Таблица невыделенных строк табличной части.
	ТаблицаВыделенныеСтроки = ВыделенныеСтрокиВТаблицу(Объект.Товары, Элементы.Товары.ВыделенныеСтроки, Объект, ПараметрыДокумента.ПутиКДанным);
	
	Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = 0;
		//ЗаполнитьЗначенияСвойств(ОтборОформлено.Добавить(), ВыделеннаяСтрока);
	КонецЦикла;
	
	// Таблица невыделенных строк табличной части.
	ТаблицаНевыделенныеСтроки = ОбеспечениеСервер.СтрокиВТаблицу(Объект.Товары, Объект, ПараметрыДокумента.ПутиКДанным);
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("ГИГ_СхемаОбеспечения");
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("ГИГ_СрокПоставки");
	Для Каждого ВыделеннаяСтрока Из ТаблицаНевыделенныеСтроки Цикл
		Строка = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		ВыделеннаяСтрока.ГИГ_СхемаОбеспечения = Строка.ГИГ_СхемаОбеспечения;
		ВыделеннаяСтрока.ГИГ_СрокПоставки = Строка.ГИГ_СрокПоставки;
	КонецЦикла;
	
	Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = ВыделеннаяСтрока.Количество;
	КонецЦикла;
	
	ТаблицаКРаспределению = ТаблицаНевыделенныеСтроки.Скопировать(,"Идентификатор, Номенклатура, Количество, ВариантОбеспечения, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки");
	ТаблицаКРаспределению.Очистить();
	Для Каждого Строка Из ТаблицаНевыделенныеСтроки Цикл
		Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется 
			И Строка.ГИГ_СхемаОбеспечения <> Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда
						
			НоваяСтрока = ТаблицаКРаспределению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;		
	КонецЦикла;
	
	Таблица1 = Таблица.Скопировать();
	Таблица.Очистить();
	СтрИндекс = 0;
	Пока СтрИндекс < Таблица1.Количество() Цикл
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Таблица1[СтрИндекс]);
		Таблица2 = Таблица1.Скопировать(МассивСтрок);
		
		СтрокиТовары.Очистить();
		СтрТовара = СтрокиТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТовара, Объект.Товары.НайтиПоИдентификатору(Таблица1[СтрИндекс].Идентификатор));
		СтрТовара.ИсходныйНомерСтроки = Таблица1[СтрИндекс].Идентификатор;
		СтруктураПараметры = Новый Структура("Склад, СтрокиТовары, Дата", Объект.Склад, СтрокиТовары, Объект.Дата);
		
		ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица2, СтруктураПараметры, ТаблицаКРаспределению);
		
		Если Таблица.Количество() = 0 Тогда
			Таблица = Таблица2.Скопировать();
			Таблица.Очистить();
		КонецЕсли;
		Для Каждого СтрТаблица2 Из Таблица2 Цикл
			НовСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрТаблица2);
		КонецЦикла;
		СтрИндекс = СтрИндекс + 1;
	КонецЦикла;
//}}20200922 ГлазуновДВ
	
	ТекстОповещения = Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(
	Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерий, ЗависимыеРеквизиты());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	Возврат ТекстОповещения;
	
КонецФункции

&НаКлиенте
Процедура Рин1_Рин1_УсловныеСрокиПоставкиПриИзмененииВместо(Элемент)
	
	Если Элемент.ТекущийЭлемент.Заголовок = "Выбрано" или
		Элемент.ТекущийЭлемент.Заголовок = "Доступно" или
		Элемент.ТекущийЭлемент.Заголовок = "В наличии" или
		Элемент.ТекущийЭлемент.Заголовок = "Срок"  Тогда
		
		ТекущаяСтрока = Элементы.Рин1_УсловныеСрокиПоставки.ТекущиеДанные;
		ТекущаяСтрока.ИнтерактивноеИзменение = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаполнитьСрокиПоставкиПомеченныхВместо(Команда)
	
 	ЗаполнитьТЧВыделенными();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧВыделенными()
	
	ОбновитьОбеспечениеНаСервере();
	ТЗ_ИЗ_Дерева = ВыгрузитьДеревоЗначенийВТаблицуЗначений(ДанныеФормыВЗначение(ГИГ_Обеспечение,Тип("ДеревоЗначений")));
	
	//надо обновить данные строки- тк могли измениться
	Для Каждого ИдентификаторСтроки из Элементы.Рин1_УсловныеСрокиПоставки.ВыделенныеСтроки Цикл		
		
		Строка = Объект.Рин1_УсловныеСрокиПоставки.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Строка.СкладДоступно = 0;
		Строка.СкладНаличие = 0;
		//* к тексту ниже 250320 сказано убрать
		Строка.ОжидаетсяВыбрано = 0;
		//
		Строка.ОжидаетсяДоступно = 0;
		Строка.ОжидаетсяСрок = "";
		Строка.СкладПоставщика1Выбрано = 0;
		Строка.СкладПоставщика1Доступно = 0;
		Строка.СкладПоставщика1Срок = "";
		Строка.СкладПоставщика2Выбрано = 0;
		Строка.СкладПоставщика2Доступно = 0;
		Строка.СкладПоставщика2Срок = "";
		Строка.ЗаказДоступно = 0;
		Строка.ЗаказСрок = "";
		
		МассивСтрокТовары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки",Строка.КодСтроки));
		Если МассивСтрокТовары.Количество() = 0 Тогда		
			ОбщегоНазначения.СообщитьПользователю("Для корректного заполнения строки необходимо перезаполнить все табличную часть условных сроков!");	
			Прервать;
		КонецЕсли;
		СтрокаТовары = МассивСтрокТовары[0];
		
		Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется или 
			СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется или
			СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			
			МассивСтрокТчТовары = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура,КодСтроки",Строка.Номенклатура,Строка.КодСтроки));
			Если не МассивСтрокТчТовары.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Строка,МассивСтрокТчТовары[0]);
				Если Строка.Упаковка.Числитель = 0 Тогда
					Строка.Упаковка = Строка.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			//
			
			ЧислительУпаковки = ?(Строка.Упаковка.Числитель=0,1,Строка.Упаковка.Числитель);
			КоличествоРаспределяемое = Строка.КоличествоУпаковок;
			
			//остатки склада
			ОстаткиПоСкладу = ПолучитьОстаткиИРезервыНаСкладе(Строка.Номенклатура,Строка.Характеристика,Строка.Склад);
			Если не ОстаткиПоСкладу = Неопределено Тогда
				Строка.СкладНаличие = ?(ОстаткиПоСкладу.Доступно = 0,0,ОстаткиПоСкладу.ВНаличии/ЧислительУпаковки);
				//*
				Если КоличествоРаспределяемое <= ОстаткиПоСкладу.Доступно/ЧислительУпаковки  Тогда
					Строка.СкладДоступно = КоличествоРаспределяемое;
					КоличествоРаспределяемое = 0;
				Иначе 
					Строка.СкладДоступно = ОстаткиПоСкладу.Доступно/ЧислительУпаковки;
					КоличествоРаспределяемое = КоличествоРаспределяемое - ОстаткиПоСкладу.Доступно/ЧислительУпаковки;
				КонецЕсли;
				//*
			КонецЕсли;
			
			//ожидаемые остатки
			ОстаткиОжидаемые = ПолучитьОстаткиОжидаемыеСвободные(Строка.Номенклатура,Строка.Характеристика,Строка.Склад);
			Если не ОстаткиОжидаемые = Неопределено Тогда
				Строка.ОжидаетсяСрок = ОстаткиОжидаемые.Срок;
				//* 250320 сказано убрать
				//Если КоличествоРаспределяемое <= ОстаткиОжидаемые.Доступно/ЧислительУпаковки  Тогда
				//	Строка.ОжидаетсяВыбрано = КоличествоРаспределяемое;
				//	КоличествоРаспределяемое = 0;
				//Иначе 
				//	Строка.ОжидаетсяВыбрано = ОстаткиОжидаемые.Доступно/ЧислительУпаковки;
				//	КоличествоРаспределяемое = КоличествоРаспределяемое - ОстаткиОжидаемые.Доступно/ЧислительУпаковки;
				//КонецЕсли;
				Строка.ОжидаетсяДоступно = ОстаткиОжидаемые.Доступно/ЧислительУпаковки;
				//*			
			КонецЕсли;
			
			//схемы обеспечения
			ТЗ_СхемыОбеспечения = Новый ТаблицаЗначений;
			ТЗ_СхемыОбеспечения.Колонки.Добавить("КоличествоДоступно",Новый ОписаниеТипов("число"));
			ТЗ_СхемыОбеспечения.Колонки.Добавить("СрокПоставки",Новый ОписаниеТипов("строка"));
			ТЗ_СхемыОбеспечения.Колонки.Добавить("Производство",Новый ОписаниеТипов("булево"));
			ТЗ_СхемыОбеспечения.Колонки.Добавить("ИсключенаИзЗаполненияОбеспечений",Новый ОписаниеТипов("булево"));
			
			ВыполнитьПервыйПоискПоСхемеНоменклатуры = Истина;
			
			Массив = ТЗ_ИЗ_Дерева.НайтиСтроки(Новый Структура("Номенклатура",Строка.Номенклатура));
			Для каждого СтрокаМассива Из Массив Цикл 
				Если не СтрокаМассива.СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда //не нужна теперь //и не СтрокаМассива.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений Тогда	
					//нужно по тз еще и фильтровать по приоритету от 1 до 10 и еще выполнить проверку
					Если СтрокаМассива.СхемаОбеспечения.ГИГ_Приоритет >= 1 и СтрокаМассива.СхемаОбеспечения.ГИГ_Приоритет <= 10 Тогда
						СтрокаТЗ = ТЗ_СхемыОбеспечения.Добавить();
						//теперь проверим есть ли схема в номенклатуре в массиве схем и если нет то добавим вверх ТЗ_СхемыОбеспечения
//Исходное						Если ВыполнитьПервыйПоискПоСхемеНоменклатуры и не СтрокаМассива.Номенклатура.СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка() Тогда
						//{{20201007 ГлазуновДВ
						Если ВыполнитьПервыйПоискПоСхемеНоменклатуры И
							Не (СтрокаМассива.Номенклатура.СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка()
							ИЛИ СтрокаМассива.Номенклатура.СхемаОбеспечения = Справочники.СхемыОбеспечения.НайтиПоНаименованию("не назначена")) Тогда
						//}}20201007 ГлазуновДВ							
							НашлиСхему = Ложь;
							Для каждого Элемент Из Массив Цикл
								Если Элемент.СхемаОбеспечения = СтрокаМассива.Номенклатура.СхемаОбеспечения Тогда
									НашлиСхему = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						    Если НашлиСхему  Тогда
								ЗаполнитьЗначенияСвойств(СтрокаТЗ,СтрокаМассива);
								СтрокаТЗ.Производство = СтрокаМассива.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства;
								СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений = СтрокаМассива.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений;
							Иначе 	
								СтрокаТЗ.КоличествоДоступно = 0;
								Мин = РегистрыСведений.СхемыОбеспечения.Получить(Новый Структура("СхемаОбеспечения,Склад",СтрокаМассива.Номенклатура.СхемаОбеспечения,Объект.Склад)).СпособОбеспеченияПотребностей.СрокИсполненияЗаказа;
								Макс = РегистрыСведений.СхемыОбеспечения.Получить(Новый Структура("СхемаОбеспечения,Склад",СтрокаМассива.Номенклатура.СхемаОбеспечения,Объект.Склад)).СпособОбеспеченияПотребностей.ГарантированныйСрокОтгрузки;
								СтрокаТЗ.СрокПоставки = Строка(Мин) + "-" +Строка(Макс) + " дн.";
								СтрокаТЗ.Производство = Ложь;
								СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений = Истина;
							КонецЕсли;
							
							ВыполнитьПервыйПоискПоСхемеНоменклатуры = Ложь;
						Иначе 
							ЗаполнитьЗначенияСвойств(СтрокаТЗ,СтрокаМассива);
							СтрокаТЗ.Производство = СтрокаМассива.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства;
							СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений = СтрокаМассива.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений;
						КонецЕсли;
					Иначе 
						Если СтрокаМассива.СхемаОбеспечения.ГИГ_Приоритет > 10 и СтрокаМассива.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства Тогда
							СтрокаТЗ = ТЗ_СхемыОбеспечения.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТЗ,СтрокаМассива);
							СтрокаТЗ.Производство = СтрокаМассива.СхемаОбеспечения.ГИГ_ЗакупкаСПроизводства;
							СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений = СтрокаМассива.СхемаОбеспечения.Рин1_ИсключитьИзЗаполненияОбеспечений;
						КонецЕсли;				
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Поставщик1 = Ложь;
			Поставщик2 = Ложь;
			ЗаказПроизводству = Ложь;
			Для каждого СтрокаТЗ Из ТЗ_СхемыОбеспечения Цикл 
				
				Если не СтрокаТЗ.Производство Тогда
					Если не Поставщик1 Тогда
						Строка.СкладПоставщика1Срок = СтрокаТЗ.СрокПоставки;
						//*
						Если  КоличествоРаспределяемое <= СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки  Тогда
							Строка.СкладПоставщика1Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,КоличествоРаспределяемое);
							КоличествоРаспределяемое = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,КоличествоРаспределяемое,0);
						Иначе
							Строка.СкладПоставщика1Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки);
							КоличествоРаспределяемое = КоличествоРаспределяемое - Строка.СкладПоставщика1Выбрано;
						КонецЕсли;
						Строка.СкладПоставщика1Доступно = СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки;
						//*
						Поставщик1 = Истина;
						Продолжить;
					КонецЕсли;
					Если не Поставщик2 Тогда
						Строка.СкладПоставщика2Срок = СтрокаТЗ.СрокПоставки;
						//*
						Если  КоличествоРаспределяемое <= СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки  Тогда
							Строка.СкладПоставщика2Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,КоличествоРаспределяемое);
							КоличествоРаспределяемое = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,КоличествоРаспределяемое,0);
						Иначе 
							Строка.СкладПоставщика2Выбрано = ?(СтрокаТЗ.ИсключенаИзЗаполненияОбеспечений,0,СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки);
							КоличествоРаспределяемое = КоличествоРаспределяемое - Строка.СкладПоставщика2Выбрано;
						КонецЕсли;
						Строка.СкладПоставщика2Доступно = СтрокаТЗ.КоличествоДоступно/ЧислительУпаковки;
						//*
						Поставщик2 = Истина;
						Строка.ЗаказДоступно = 0;
						Продолжить;
					КонецЕсли;
				Иначе 
					Если не ЗаказПроизводству Тогда  
						Строка.ЗаказДоступно = КоличествоРаспределяемое;
						Строка.ЗаказСрок = СтрокаТЗ.СрокПоставки;
						ЗаказПроизводству = Истина;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//если небыло схемы производства то остаток распределяем в хвост
			Если не КоличествоРаспределяемое = 0 и не ЗаказПроизводству Тогда
				Строка.ЗаказДоступно = КоличествоРаспределяемое;
			КонецЕсли;
			
		Иначе 	
			
			Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда //Резервировать к дате
				
				Строка.ОжидаетсяВыбрано = СтрокаТовары.КоличествоУпаковок;
				Строка.ОжидаетсяДоступно = СтрокаТовары.КоличествоУпаковок;
				Строка.ОжидаетсяСрок = Строка(Окр((КонецДня(СтрокаТовары.ДатаОтгрузки) - ТекущаяДата())/86400)) + " дн.";
				
			ИначеЕсли  СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада или //Резервировать на складе
				СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить или  //Отгрузить
				СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда //Отгрузить обособленно
				
				Строка.СкладНаличие = СтрокаТовары.КоличествоУпаковок;
				Строка.СкладДоступно = СтрокаТовары.КоличествоУпаковок;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Строка.ИнтерактивноеИзменение = Ложь;
		
	КонецЦикла;
	
	ЭтотОбъект.Модифицированность = Истина;
	Объект.ДатаЗаполненияУсловныхСроков = ТекущаяДата();
	ЭтаФорма.Элементы.ТабличнаяЧастьЗаполненаНа.Заголовок = "Табличная часть заполнена на " + Объект.ДатаЗаполненияУсловныхСроков;
	
КонецПроцедуры // ЗаполнитьТЧВыделенными()

&НаКлиенте
Процедура Рин1_ВернутьсяКИсходномуВместо(Команда)
	
	Если Объект.Рин1_УсловныеСрокиПоставки.Количество() = 0 Тогда
		ЗаполнитьТЧТоварамиПоСсылке();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросЗаполненияТЧКИсходномуСостоянию",ЭтотОбъект),"Табличная часть будет приведена к исходному состоянию. Продолжить?",РежимДиалогаВопрос.ДаНет,0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросЗаполненияТЧКИсходномуСостоянию(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТЧТоварамиПоСсылке();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧТоварамиПоСсылке()
	
	ТЗ_ТоварыУсловные = Объект.Ссылка.Рин1_УсловныеСрокиПоставки.Выгрузить();
	Объект.Рин1_УсловныеСрокиПоставки.Загрузить(ТЗ_ТоварыУсловные);
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры //

&НаКлиенте
Процедура Рин1_Рин1_УсловныеСрокиПоставкиПередНачаломИзмененияВместо(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.Рин1_УсловныеСрокиПоставки.ТекущиеДанные;
	
	//КэшСтрокиУсловныхСроковПоставки.Очистить();
	//КэшСтрокиУсловныхСроковПоставки.Добавить("СкладДоступно",ТекущаяСтрока.СкладДоступно);
	//КэшСтрокиУсловныхСроковПоставки.Добавить("ОжидаетсяДоступно",ТекущаяСтрока.ОжидаетсяДоступно);
	//КэшСтрокиУсловныхСроковПоставки.Добавить("СкладПоставщика1Доступно",ТекущаяСтрока.СкладПоставщика1Доступно);
	//КэшСтрокиУсловныхСроковПоставки.Добавить("СкладПоставщика2Доступно",ТекущаяСтрока.СкладПоставщика2Доступно);
	
	Если Элемент.ТекущийЭлемент.Заголовок = "Срок" Тогда
		
		ПФ = Новый Структура;
		ПФ.Вставить("Индекс",Элементы.Рин1_УсловныеСрокиПоставки.ТекущиеДанные.НомерСтроки -1);
		ПФ.Вставить("Колонка",Элемент.ТекущийЭлемент.Имя);
		//получим из строки даты
		Мин = 0;
		Макс = 0;
		Попытка
			КолонкаСрок = СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"Рин1_УсловныеСрокиПоставки","");
			СтрокаСрок = ТекущаяСтрока[КолонкаСрок];
			СтрокаСрок = СтрЗаменить(СтрокаСрок," дн.","");
			СтрокаСрок = СокрЛП(СтрокаСрок);
			Если не СтрНайти(СтрокаСрок,"-") = 0 Тогда
				Мин = Число(Лев(СтрокаСрок,2));
				Макс = Число(Прав(СтрокаСрок,2));
			Иначе
				Макс = Число(Лев(СтрокаСрок,2));
			КонецЕсли;
		Исключение		
		КонецПопытки;
		//
		ПФ.Вставить("Мин",Мин);
		ПФ.Вставить("Макс",Макс);
		ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаВводаСрока",ПФ,ЭтаФорма,,,,Новый ОписаниеОповещения("ИзменитьСрок",ЭтотОбъект,ПФ),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		ТекущаяСтрока.ИнтерактивноеИзменение = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрок(РезультатЗакрытия,ДополнительныеПараметры) Экспорт 
	
	Если не РезультатЗакрытия = Неопределено Тогда
		
		ТекущаяСтрока = Объект.Рин1_УсловныеСрокиПоставки.Получить(ДополнительныеПараметры.Индекс);
		
		//ПредставлениеСрока = ПолучитьПредставлениеОжиданияИзДат(РезультатЗакрытия.ДатаНачало,РезультатЗакрытия.ДатаОкончание);
		Если РезультатЗакрытия.Мин = 0 и РезультатЗакрытия.Макс = 0 Тогда
			ПредставлениеСрока = "";
		ИначеЕсли РезультатЗакрытия.Мин = 0 и не РезультатЗакрытия.Макс = 0 Тогда
			ПредставлениеСрока = Строка(РезультатЗакрытия.Макс) + " дн.";
		Иначе 
			ПредставлениеСрока = Строка(РезультатЗакрытия.Мин) + "-" + Строка(РезультатЗакрытия.Макс) + " дн.";
		КонецЕсли;
		
		ТекущаяСтрока[СтрЗаменить(ДополнительныеПараметры.Колонка,"Рин1_УсловныеСрокиПоставки","")] = ПредставлениеСрока;
		
		ЭтаФорма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьСрок()

&НаСервере
Функция ПолучитьПредставлениеОжиданияИзДат(ДатаНачало,ДатаОкончание)
	
	
	ДнейДоНачала    = (ДатаНачало - НачалоДня(ТекущаяДата()))/86400;
	ДнейДоОкончания = (ДатаОкончание - НачалоДня(ТекущаяДата()))/86400;
	
	ДнейДоНачала = ?(ДнейДоНачала < 0,0,ДнейДоНачала); 
	ДнейДоОкончания = ?(ДнейДоОкончания < 0,0,ДнейДоОкончания);
	
	//Если ДнейДоОкончания = 1 Тогда
	//	Вариант = "день";
	//ИначеЕсли ДнейДоОкончания = 2 или ДнейДоОкончания = 3 или ДнейДоОкончания = 4  Тогда
	//	Вариант = "дня";
	//Иначе 
	//	Вариант = "дней";
	//КонецЕсли;
	
	Если ДнейДоНачала = 0 и ДнейДоОкончания = 0 Тогда
		ПредставлениеСрока = "";
	ИначеЕсли не ДнейДоНачала = 0 и ДнейДоОкончания = 0 Тогда
		ПредставлениеСрока = "";
	ИначеЕсли ДнейДоНачала = 0 и не ДнейДоОкончания = 0 Тогда
		ПредставлениеСрока = Строка(ДнейДоОкончания) + " " + " дн.";//Вариант;
	ИначеЕсли ДнейДоНачала = ДнейДоОкончания Тогда
		ПредставлениеСрока = Строка(ДнейДоОкончания) + " " + " дн.";
	Иначе 
		ПредставлениеСрока = Строка(ДнейДоНачала) + "-" + Строка(ДнейДоОкончания) + " " + " дн.";//Вариант;
	КонецЕсли;
	
	Возврат ПредставлениеСрока;
	
КонецФункции //

&НаКлиенте
Процедура Рин1_Рин1_УсловныеСрокиПоставкиСкладДоступноПриИзмененииВместо(Элемент)	
	
	ТекущаяСтрока = Элементы.Рин1_УсловныеСрокиПоставки.ТекущиеДанные;

	//проверим на превышение
	Если ТекущаяСтрока.КоличествоУпаковок <= ТекущаяСтрока.СкладДоступно Тогда
		ТекущаяСтрока.СкладДоступно = ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ОжидаетсяВыбрано = 0;
		ТекущаяСтрока.СкладПоставщика1Выбрано = 0;
		ТекущаяСтрока.СкладПоставщика2Выбрано = 0;
		ТекущаяСтрока.ЗаказДоступно = 0;
	Иначе
		ОстатокРаспределения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СкладДоступно;
		Если ТекущаяСтрока.ОжидаетсяВыбрано >= ОстатокРаспределения Тогда
		    ТекущаяСтрока.ОжидаетсяВыбрано = ОстатокРаспределения;
			ОстатокРаспределения = 0;
		Иначе 
			ОстатокРаспределения = ОстатокРаспределения - ТекущаяСтрока.ОжидаетсяВыбрано;
		КонецЕсли;
		
		Если ТекущаяСтрока.СкладПоставщика1Выбрано >= ОстатокРаспределения Тогда
			ТекущаяСтрока.СкладПоставщика1Выбрано = ОстатокРаспределения;
			ОстатокРаспределения = 0;
		Иначе 
			ОстатокРаспределения = ОстатокРаспределения - ТекущаяСтрока.СкладПоставщика1Выбрано;
		КонецЕсли;
		
		Если ТекущаяСтрока.СкладПоставщика2Выбрано >= ОстатокРаспределения Тогда
			ТекущаяСтрока.СкладПоставщика2Выбрано = ОстатокРаспределения;
			ОстатокРаспределения = 0;
		Иначе 
			ОстатокРаспределения = ОстатокРаспределения - ТекущаяСтрока.СкладПоставщика2Выбрано;
		КонецЕсли;

		ТекущаяСтрока.ЗаказДоступно = ОстатокРаспределения;
		
	КонецЕсли;
	//
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_УсловныеСрокиПоставкиОжидаетсяВыбраноПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Рин1_УсловныеСрокиПоставки.ТекущиеДанные;
	
	//проверим на превышение
	Если ТекущаяСтрока.КоличествоУпаковок <= ТекущаяСтрока.СкладДоступно + ТекущаяСтрока.ОжидаетсяВыбрано Тогда
		ТекущаяСтрока.ОжидаетсяВыбрано = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СкладДоступно;
		ТекущаяСтрока.СкладПоставщика1Выбрано = 0;
		ТекущаяСтрока.СкладПоставщика2Выбрано = 0;
		ТекущаяСтрока.ЗаказДоступно = 0;
	Иначе
		ОстатокРаспределения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СкладДоступно - ТекущаяСтрока.ОжидаетсяВыбрано;
		
		Если ТекущаяСтрока.СкладПоставщика1Выбрано >= ОстатокРаспределения Тогда
			ТекущаяСтрока.СкладПоставщика1Выбрано = ОстатокРаспределения;
			ОстатокРаспределения = 0;
		Иначе 
			ОстатокРаспределения = ОстатокРаспределения - ТекущаяСтрока.СкладПоставщика1Выбрано;
		КонецЕсли;
		
		Если ТекущаяСтрока.СкладПоставщика2Выбрано >= ОстатокРаспределения Тогда
			ТекущаяСтрока.СкладПоставщика2Выбрано = ОстатокРаспределения;
			ОстатокРаспределения = 0;
		Иначе 
			ОстатокРаспределения = ОстатокРаспределения - ТекущаяСтрока.СкладПоставщика2Выбрано;
		КонецЕсли;
		
		ТекущаяСтрока.ЗаказДоступно = ОстатокРаспределения;
		
	КонецЕсли;
	//
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_УсловныеСрокиПоставкиСкладПоставщика1ВыбраноПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Рин1_УсловныеСрокиПоставки.ТекущиеДанные;
	
	//проверим на превышение
	Если ТекущаяСтрока.КоличествоУпаковок <= ТекущаяСтрока.СкладДоступно + ТекущаяСтрока.ОжидаетсяВыбрано + ТекущаяСтрока.СкладПоставщика1Выбрано Тогда
		ТекущаяСтрока.СкладПоставщика1Выбрано = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СкладДоступно - ТекущаяСтрока.ОжидаетсяВыбрано;
		ТекущаяСтрока.СкладПоставщика2Выбрано = 0;
		ТекущаяСтрока.ЗаказДоступно = 0;
	Иначе
		ОстатокРаспределения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СкладДоступно - ТекущаяСтрока.ОжидаетсяВыбрано - ТекущаяСтрока.СкладПоставщика1Выбрано;
				
		Если ТекущаяСтрока.СкладПоставщика2Выбрано >= ОстатокРаспределения Тогда
			ТекущаяСтрока.СкладПоставщика2Выбрано = ОстатокРаспределения;
			ОстатокРаспределения = 0;
		Иначе 
			ОстатокРаспределения = ОстатокРаспределения - ТекущаяСтрока.СкладПоставщика2Выбрано;
		КонецЕсли;
		
		ТекущаяСтрока.ЗаказДоступно = ОстатокРаспределения;
		
	КонецЕсли;
	//
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_УсловныеСрокиПоставкиСкладПоставщика2ВыбраноПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Рин1_УсловныеСрокиПоставки.ТекущиеДанные;
	
	//проверим на превышение
	Если ТекущаяСтрока.КоличествоУпаковок <= ТекущаяСтрока.СкладДоступно + ТекущаяСтрока.ОжидаетсяВыбрано + ТекущаяСтрока.СкладПоставщика1Выбрано + ТекущаяСтрока.СкладПоставщика2Выбрано Тогда
		ТекущаяСтрока.СкладПоставщика2Выбрано = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СкладДоступно - ТекущаяСтрока.ОжидаетсяВыбрано - ТекущаяСтрока.СкладПоставщика1Выбрано;
		ТекущаяСтрока.ЗаказДоступно = 0;
	Иначе
		ОстатокРаспределения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СкладДоступно - ТекущаяСтрока.ОжидаетсяВыбрано - ТекущаяСтрока.СкладПоставщика1Выбрано - ТекущаяСтрока.СкладПоставщика2Выбрано;
		
		ТекущаяСтрока.ЗаказДоступно = ОстатокРаспределения;
		
	КонецЕсли;
	//
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ДобавитьФиксированныйИнтервалВместо(Команда)
	
	ПФ = Новый Структура;
	ПФ.Вставить("ЗаголовокФормы","Добавить фиксированный интервал выделенным строкам");
	ПФ.Вставить("ЗаголовокКнопки","Добавить");

	ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаВводаИнтерваловСроков",ПФ,ЭтаФорма,,,,Новый ОписаниеОповещения("ДобавитьФиксированныйИнтервалИлиУстановитьСрок",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_УстановитьСрокДляВыделенныхСтрокВместо(Команда)
	
	ПФ = Новый Структура;
	ПФ.Вставить("ЗаголовокФормы","Установить срок для выделенных строк");
	ПФ.Вставить("ЗаголовокКнопки","Установить");
	
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаВводаИнтерваловСроков",ПФ,ЭтаФорма,,,,Новый ОписаниеОповещения("ДобавитьФиксированныйИнтервалИлиУстановитьСрок",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИзСтрокиМинМакс(СтрокаСрок)
	
	Если СтрокаСрок = "" Тогда
		Возврат Новый Структура("Мин,Макс",0,0);
	Иначе
		Мин = 0;
		Макс = 0;
		Попытка
			СтрокаСрок = СтрЗаменить(СтрокаСрок," дн.","");
			СтрокаСрок = СокрЛП(СтрокаСрок);
			Если не СтрНайти(СтрокаСрок,"-") = 0 Тогда
				Мин = Число(Лев(СтрокаСрок,2));
				Макс = Число(Прав(СтрокаСрок,2));
			Иначе
				Макс = Число(Лев(СтрокаСрок,2));
			КонецЕсли;
		Исключение
			Возврат Новый Структура("Мин,Макс",0,0);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Новый Структура("Мин,Макс",Мин,Макс);
	
КонецФункции // ПолучитьИзСтрокиМинМакс()

&НаСервере
Процедура ДобавитьФиксированныйИнтервалИлиУстановитьСрок (РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Элементы.Рин1_УсловныеСрокиПоставки.ВыделенныеСтроки;
	Для каждого Строка Из МассивСтрок Цикл
		
		ТекущаяСтрока = Объект.Рин1_УсловныеСрокиПоставки.НайтиПоИдентификатору(Строка);
		
		//Добавить
		Если РезультатЗакрытия.Действие = "Добавить" Тогда
			
			Если не РезультатЗакрытия.ЗаказНач = 0 или не РезультатЗакрытия.ЗаказКон = 0 Тогда
				Интервал = ПолучитьИзСтрокиМинМакс(ТекущаяСтрока.ЗаказСрок);
				ТекущаяСтрока.ЗаказСрок = Строка(РезультатЗакрытия.ЗаказНач + Интервал.Мин) + " - " + Строка(РезультатЗакрытия.ЗаказКон + Интервал.Макс) + " дн.";
			КонецЕсли;
			Если не РезультатЗакрытия.ОжидаетсяНач = 0 или не РезультатЗакрытия.ОжидаетсяКон = 0 Тогда
				Интервал = ПолучитьИзСтрокиМинМакс(ТекущаяСтрока.ОжидаетсяСрок);
				ТекущаяСтрока.ОжидаетсяСрок = Строка(РезультатЗакрытия.ОжидаетсяНач + Интервал.Мин) + " - " + Строка(РезультатЗакрытия.ОжидаетсяКон + Интервал.Макс) + " дн."; 
			КонецЕсли;
			Если не РезультатЗакрытия.СкладПоставщика1Нач = 0 или не РезультатЗакрытия.СкладПоставщика1Кон = 0 Тогда
				Интервал = ПолучитьИзСтрокиМинМакс(ТекущаяСтрока.СкладПоставщика1Срок);
				ТекущаяСтрока.СкладПоставщика1Срок = Строка(РезультатЗакрытия.СкладПоставщика1Нач + Интервал.Мин) + " - " + Строка(РезультатЗакрытия.СкладПоставщика1Кон + Интервал.Макс) + " дн.";
			КонецЕсли;
			Если не РезультатЗакрытия.СкладПоставщика2Нач = 0 или не РезультатЗакрытия.СкладПоставщика2Кон = 0 Тогда
				Интервал = ПолучитьИзСтрокиМинМакс(ТекущаяСтрока.СкладПоставщика2Срок);
				ТекущаяСтрока.СкладПоставщика2Срок = Строка(РезультатЗакрытия.СкладПоставщика2Нач + Интервал.Мин) + " - " + Строка(РезультатЗакрытия.СкладПоставщика2Кон + Интервал.Макс) + " дн."; 
			КонецЕсли;
			
			//Установить	
		Иначе
			
			Если не РезультатЗакрытия.ЗаказНач = 0 или не РезультатЗакрытия.ЗаказКон = 0 Тогда
				ТекущаяСтрока.ЗаказСрок = ?(РезультатЗакрытия.ЗаказНач = 0,"",Строка(РезультатЗакрытия.ЗаказНач) + " - ") + Строка(РезультатЗакрытия.ЗаказКон) + " дн.";
			КонецЕсли;
			Если не РезультатЗакрытия.ОжидаетсяНач = 0 или не РезультатЗакрытия.ОжидаетсяКон = 0 Тогда
				ТекущаяСтрока.ОжидаетсяСрок = ?(РезультатЗакрытия.ОжидаетсяНач = 0,"",Строка(РезультатЗакрытия.ОжидаетсяНач) + " - ") + Строка(РезультатЗакрытия.ОжидаетсяКон) + " дн."; 
			КонецЕсли;
			Если не РезультатЗакрытия.СкладПоставщика1Нач = 0 или не РезультатЗакрытия.СкладПоставщика1Кон = 0 Тогда
				ТекущаяСтрока.СкладПоставщика1Срок = ?(РезультатЗакрытия.СкладПоставщика1Нач = 0,"",Строка(РезультатЗакрытия.СкладПоставщика1Нач) + " - ") + Строка(РезультатЗакрытия.СкладПоставщика1Кон) + " дн.";
			КонецЕсли;
			Если не РезультатЗакрытия.СкладПоставщика2Нач = 0 или не РезультатЗакрытия.СкладПоставщика2Кон = 0 Тогда
				ТекущаяСтрока.СкладПоставщика2Срок = ?(РезультатЗакрытия.СкладПоставщика2Нач = 0,"",Строка(РезультатЗакрытия.СкладПоставщика2Нач) + " - ") + Строка(РезультатЗакрытия.СкладПоставщика2Кон) + " дн."; 
			КонецЕсли;
			
			//может все же удалять нулевые ХБЗ если не надо то убрать
			Если РезультатЗакрытия.ЗаказНач = 0 и РезультатЗакрытия.ЗаказКон = 0 Тогда
				ТекущаяСтрока.ЗаказСрок = ""; 
			КонецЕсли;
			Если РезультатЗакрытия.ОжидаетсяНач = 0 и РезультатЗакрытия.ОжидаетсяКон = 0 Тогда
				ТекущаяСтрока.ОжидаетсяСрок = "";
			КонецЕсли;
			Если РезультатЗакрытия.СкладПоставщика1Нач = 0 и РезультатЗакрытия.СкладПоставщика1Кон = 0 Тогда
				ТекущаяСтрока.СкладПоставщика1Срок = ""; 
			КонецЕсли;
			Если РезультатЗакрытия.СкладПоставщика2Нач = 0 и РезультатЗакрытия.СкладПоставщика2Кон = 0 Тогда
				ТекущаяСтрока.СкладПоставщика2Срок = ""; 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьФиксированныйИнтервал()

&НаКлиенте
Процедура Рин1_СтандартноеОбеспечениеВместо(Команда)
	
//{{20200924 ГлазуновДВ Добавили Проверку На Новые Строки в ТЧ перед выполнением Команды
	ЕстьПустыеКодСтроки = Ложь;
	Для Каждого Строка Из Объект.Товары Цикл
		Если Строка.КодСтроки = 0 Тогда
			ЕстьПустыеКодСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьПустыеКодСтроки Тогда
		ТекстВопроса = НСтр("ru = 'Для анализа распределения обеспечения необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьОбеспечениеЗавершение4", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
		ПараметрыПроверки.Поля.Удалить("Подразделение");
		
		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа(ТипЗнч(Объект.Ссылка),
		Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказаСтандартное", ПараметрыФормы,
		ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
//}}20200924 ГлазуновДВ
КонецПроцедуры

&НаСервере
Процедура Рин1_ПередЗагрузкойДанныхИзНастроекНаСервереПосле1(Настройки)	
	Элементы.ТоварыСкрыватьОтмененныеСтроки1.Пометка = СкрыватьОтмененныеСтроки;
КонецПроцедуры

&НаКлиенте              
Процедура ПослеОтветаНаВопросОЗаполненииОбеспечения(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Новый Структура;
	ВыбранноеЗначение.Вставить("ЗаполнятьЦелымиУпаковками",Истина);
	ВыбранноеЗначение.Вставить("ОбработатьВсюТЧ",Истина);
	
	Массив = Новый Массив;
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"));
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
	ВыбранноеЗначение.Вставить("ПереченьВариантов",Массив);
	
	Детали = Рин1_ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
	Если Детали.Ошибки <> Неопределено Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
	Иначе
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	КонецЕсли;
	
	Для каждого Строка Из Объект.Товары Цикл
		Если Строка.Отменено  Тогда
			Продолжить;
		КонецЕсли;
		Строка.ДатаКлиента = ?(Строка.ДатаОтгрузки = Дата(1,1,1),ТекущаяДата(),Строка.ДатаОтгрузки);
	КонецЦикла;
	
	Если Параметры.ПараметрыЗаписи.Свойство("ПровестиИЗакрыть") Тогда
		
		ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
		
	Иначе
		
		//--Гольм А.А. (Гигабайт)
		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
		//++Гольм А.А. (Гигабайт)
		ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
		//--Гольм А.А. (Гигабайт)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПровестиИЗакрытьВместо(Команда)
	
//Исходное	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
//{{20200625 ГлазуновДВ Добавили блокировку запуска распределения обеспечения по роли "Рин1_ЗаполнитьОбеспечение"
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") И ОтсутствуетДоступКЗаполнитьОбеспечение() Тогда
//}}20200625 ГлазуновДВ
		
		ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
		
	иначе
		
		Если Объект.Проведен и ПолучитьСтатусВСсылке() = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
			
		////{{20201006 ГлазуновДВ 	
		//	Если Модифицированность Тогда
		//		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
		//	КонецЕсли;
		////}}20201006 ГлазуновДВ
			ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаВопросаОповещения",,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаполненииОбеспечения",ЭтотОбъект,Новый Структура("ПараметрыЗаписи", Параметры)),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
			
		ИначеЕсли не Объект.Проведен и ПолучитьСтатусВСсылке() = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") Тогда 
			
		////{{20201006 ГлазуновДВ 	
		//	Если Модифицированность Тогда
		//		ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
		//	КонецЕсли;
		////}}20201006 ГлазуновДВ
			ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаВопросаОповещения",,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаполненииОбеспечения",ЭтотОбъект,Новый Структура("ПараметрыЗаписи", Параметры)),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
			
		Иначе 
			
			ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПересчитатьТарифКурсНаПроизвольнуюДатуВместо(Команда)
	
	ВыбЗнач = ТекущаяДата();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КД);
	
	Оповещение = Новый ОписаниеОповещения("ПересчитатьТарифКурсНаДату", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите дату курса", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТарифКурсНаДату(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		//если цена произвольная то не обрабатывем
		Если ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда		
			Продолжить;		
		КонецЕсли;
		
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата",   ВыбранныйЭлемент);
		СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
		
		СтруктураЗаполненияЦены.Вставить("ВидЦены", ТекущаяСтрока.ВидЦены);
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_1_1",СтруктураЗаполненияЦены);
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		
		ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
						
		//
		ТекущаяСтрока.Рин1_ДатаИзменения = ТекущаяДата();
		ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ТекущаяСтрока.ВидЦены, ВыбранныйЭлемент);
		Если не ДанныеПоВалюте.Количество() = 0 Тогда
			ДанныеПоВалюте.Свойство("Курс",ТекущаяСтрока.Рин1_Курс);
			ДанныеПоВалюте.Свойство("Валюта",ТекущаяСтрока.Рин1_Валюта);
			ДанныеПоВалюте.Свойство("ДатаКурса",ТекущаяСтрока.Рин1_ДатаКурса);
			ДанныеПоВалюте.Свойство("ДатаТарифа",ТекущаяСтрока.Рин1_ДатаТарифа);
		КонецЕсли;
		//
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПересчитатьТарифКурсНаПроизвольнуюДатуВыделеннымСтрокамВместо(Команда)
	
	ВыбЗнач = ТекущаяДата();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КД);
	
	Оповещение = Новый ОписаниеОповещения("ПересчитатьТарифКурсНаДатуВыделенным", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите дату курса", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТарифКурсНаДатуВыделенным(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		
		//если цена произвольная то не обрабатывем
		Если ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда		
			Продолжить;		
		КонецЕсли;
		
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата",   ВыбранныйЭлемент);
		СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
		
		СтруктураЗаполненияЦены.Вставить("ВидЦены", ТекущаяСтрока.ВидЦены);
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_1_1",СтруктураЗаполненияЦены);
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");		
		
		ОбработатьСтрокуТЧНаСервере(Идентификатор,СтруктураДействий);
			
		//
		ТекущаяСтрока.Рин1_ДатаИзменения = ТекущаяДата();
		ДанныеПоВалюте = ПолучитьКурсВалютыНаСервереДляСтроки(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ТекущаяСтрока.ВидЦены, ВыбранныйЭлемент);
		Если не ДанныеПоВалюте.Количество() = 0 Тогда
			ДанныеПоВалюте.Свойство("Курс",ТекущаяСтрока.Рин1_Курс);
			ДанныеПоВалюте.Свойство("Валюта",ТекущаяСтрока.Рин1_Валюта);
			ДанныеПоВалюте.Свойство("ДатаКурса",ТекущаяСтрока.Рин1_ДатаКурса);
			ДанныеПоВалюте.Свойство("ДатаТарифа",ТекущаяСтрока.Рин1_ДатаТарифа);
		КонецЕсли;
		//
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_ОтобратьКоличествоНеКратноВместо(Команда)
	
	Рин1_ОтобратьКоличествоНеКратноНаКлиенте(Не Элементы.ТоварыРин1_ОтобратьКоличествоНеКратно.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОтобратьКоличествоНеКратноНаКлиенте(НуженОтбор)
	
	Элементы.ТоварыРин1_ОтобратьКоличествоНеКратно.Пометка = НуженОтбор;
	
	Если НуженОтбор Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("КоличествоНеКратно", НуженОтбор);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьУсловияПродаж")
Процедура Рин1_ЗаполнитьУсловияПродаж()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	//
	Для Каждого ТекущаяСтрока из Объект.Товары Цикл 
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_2_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
		//
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
		СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
		
		ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
		
	КонецЦикла;
	//
	
	ПоСоглашениюИспользуютсяДоговорыКонтрагентов = ЗначениеЗаполнено(Объект.Соглашение) И ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВалютаДокумента = Объект.Валюта;
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		ХозяйственнаяОперацияПриИзмененииСервер();
		
		ЗаполнитьЭтапыОплатыСервер(
			ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
			ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты);
		
	КонецЕсли;
	
	УстановитьВидимостьОпераций();
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина, СуммаЗаказаноСЗалоговойТарой);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_СкидкиПоСоглашениюДляВыделенныхСтрокВместо(Команда)
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_0");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	Для каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл	
		
		ТекущаяСтрока = Элементы.Товары.ДанныеСтроки(Строка);

		Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
						
			ПрименныеСкидки = ПолучитьОбработатьСкидки(ТекущаяСтрока.Номенклатура);
			ПрименныеСкидки.Свойство("АвтоСкидка",ТекущаяСтрока.ПроцентАвтоматическойСкидки);
			ПрименныеСкидки.Свойство("РучнаяСкидка",ТекущаяСтрока.ПроцентРучнойСкидки);	
			
			ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
			
		КонецЕсли;		
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПриОкончанииРедактированияВместо1(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ТоварыКешТекущейСтроки);
		
		Попытка
			Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОтгрузки) И Объект.НеОтгружатьЧастями
				И (КешСтроки = Неопределено Или КешСтроки.ДатаОтгрузки <> ТекущиеДанные.ДатаОтгрузки) Тогда
				ПриИзмененииДатыОтгрузкиВТабЧасти(); // вызов сервера.
			КонецЕсли;
		Исключение
		КонецПопытки;		
		
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КешСтроки, СкладГруппа);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПослеЗаписиПосле1(ПараметрыЗаписи)
	
//20201214 ГлазуновДВ Отключено Перенесено в Рин1_ПередЗаписьюПеред(...)
	//Если не ЭтотОбъект.Модифицированность и Объект.Проведен Тогда
	//	МодификацияОЕМ();
	//КонецЕсли;
	
	// + [Rineco], [Киселев А.] [30.07.2021] 
	// Задача: [№ 13619], [#Контроль желаемойДаты]
	РИНЭКО_КонтрольЖелаемойДаты(ПараметрыЗаписи);
	// - [Rineco], [Киселев А.] [30.07.2021]
	
	
КонецПроцедуры


&НаСервере
Процедура МодификацияОЕМ(Отказ = Ложь)
	
	//транзакцию использовать нельзя - не очистишь ГИГ_Назначение
	
	ТЗ_Корректировка = Объект.Товары.Выгрузить();
	ТЗ_Корректировка.Очистить();
	ЕстьОЕМНазначения = Ложь;
	Отказ = Ложь;
	
	Для Каждого ТекущаяСтрока из Объект.Товары цикл
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		//bercut040220
		Если не ТекущаяСтрока.Отменено и не ТекущаяСтрока.ГИГ_НазначениеУстановлено и не ТекущаяСтрока.ГИГ_Назначение = Справочники.Назначения.ПустаяСсылка() Тогда
			НоваяСтрока = ТЗ_Корректировка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока);
//Новый Механизм создания Документа			Назначение = ТекущаяСтрока.ГИГ_Назначение;   //берем одно назначение				
			ЕстьОЕМНазначения = Истина;
			ТекущаяСтрока.ГИГ_НазначениеУстановлено = Истина;
			НоваяСтрока.ГИГ_НазначениеУстановлено = Истина;
		КонецЕсли;
		//
		
	КонецЦикла;
	
	Если ЕстьОЕМНазначения Тогда //запишем документ
		
	//{{20201216 ГлазуновДВ
		НачатьТранзакцию();
	//}}20201216 ГлазуновДВ
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(
		"ПересчитатьКоличествоУпаковок",
		ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
		
		Попытка	
			УстановитьПривилегированныйРежим(Истина);
			//ПроизвольнаяКорректировкаНазначений в доке КорректировкаНазначенияТоваров отключена и нет возможности по многим назначениям корректировать
			ДокументКорректировкаНазначения = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
			ДокументКорректировкаНазначения.Дата = ТекущаяДата();
			ДокументКорректировкаНазначения.Организация = Объект.Организация;
//Новый Механизм создания Документа			ДокументКорректировкаНазначения.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
//Новый Механизм создания Документа			ДокументКорректировкаНазначения.Назначение = Назначение;
		//{{20201217 ГлазуновДВ Новый Механизм создания Документа
			ДокументКорректировкаНазначения.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать");
			ЗаказКлиента = Объект.Ссылка;
			НовоеНазначение = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(ЗаказКлиента);
			ДокументКорректировкаНазначения.Назначение = НовоеНазначение;
			ДокументКорректировкаНазначения.Комментарий = "Корректировка резерва сверх потребности для " + Строка(Объект.Ссылка);
		//}}20201217 ГлазуновДВ
			ДокументКорректировкаНазначения.ВидыЗапасовУказаныВручную = Ложь;
			ДокументКорректировкаНазначения.ДокументПоРаспоряжению = Истина;
//Новый Механизм создания Документа			ДокументКорректировкаНазначения.Комментарий = "Снятие резерва сверх потребности для " + Строка(Объект.Ссылка);
			
		//{{20201210 ГлазуновДВ Отбираем по серийным номерам, если есть.
//Новый Механизм создания Документа			Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "Заказ");
//Новый Механизм создания Документа			ЗаказКлиента = Объект.Ссылка;
//Новый Механизм создания Документа			НовоеНазначение = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(ЗаказКлиента);
//Новый Механизм создания Документа			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "Организация");
//Новый Механизм создания Документа			ВидОперации = ДокументКорректировкаНазначения.ВидОперации;
//Новый Механизм создания Документа			СнятиеРезерва = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
//Новый Механизм создания Документа				Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
//Новый Механизм создания Документа			ТолькоСкладОтгрузки = Не СнятиеРезерва И Документы.КорректировкаНазначенияТоваров.КонтролироватьПревышениеПотребностиПоЗаказу(Назначение);
			
//Новый Механизм создания Документа			СтруктураЗаполнения = ЗаполнитьТаблицуСнятияУстановкиРезервов(ВидОперации, Назначение, Заказ, ДокументКорректировкаНазначения, ТолькоСкладОтгрузки, Организация);
//Новый Механизм создания Документа			Таблица = СтруктураЗаполнения.ТаблицаЗаполненияКорректировки;
			
			Для Каждого Строка Из ТЗ_Корректировка Цикл
				
			//{{20201217 ГлазуновДВ Новый Механизм создания Документа
				Назначение = Строка.ГИГ_Назначение;
				Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "Заказ");
				Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "Организация");
				ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
				СнятиеРезерва = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
					Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
				ТолькоСкладОтгрузки = Не СнятиеРезерва И Документы.КорректировкаНазначенияТоваров.КонтролироватьПревышениеПотребностиПоЗаказу(Назначение);
				
				СтруктураЗаполнения = ЗаполнитьТаблицуСнятияУстановкиРезервов(ВидОперации, Назначение, Заказ, ДокументКорректировкаНазначения, ТолькоСкладОтгрузки, Организация);
				Таблица = СтруктураЗаполнения.ТаблицаЗаполненияКорректировки;
			//}}20201217 ГлазуновДВ
				
				Для Каждого СтрокаТаб Из Таблица Цикл
					Если СтрокаТаб.Номенклатура = Строка.Номенклатура Тогда
						СтрокаТаб.Отметка = Истина;
						//Если СтрокаТаб.СвободныйОстаток <= 0 Тогда
						//	СтрокаТаб.СвободныйОстаток = Строка.Количество;
						//КонецЕсли;
						//Если СтрокаТаб.Количество <= 0 Тогда
							СтрокаТаб.Количество = Строка.Количество;
						//КонецЕсли;
					Иначе
						СтрокаТаб.Отметка = Ложь;
					КонецЕсли;
				КонецЦикла;
		
				Ссылка = Документы.КорректировкаНазначенияТоваров.ПустаяСсылка();
				ТаблицаПомещенияЯчейки = Документы.КорректировкаНазначенияТоваров.ТаблицаПомещенияЯчейкиПоТоварам(Таблица, Ссылка);
					
				// В Таблица на данном этапе количество соответствует единице измерения номенклатуры.
				Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			
				СлитьТаблицыПоСкладуИПомещениям(Таблица, ТаблицаПомещенияЯчейки);
				
				СтрокиКУдалению = Новый Массив();
				
				Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
					ИндексСКонца = Таблица.Количество() - ИндексСтроки - 1;
					Если Таблица[ИндексСКонца].Количество <= 0 Тогда
						СтрокиКУдалению.Добавить(Таблица[ИндексСКонца]);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Таблица.Удалить(СтрокаКУдалению);
				КонецЦикла;
			
				Для Каждого СтрокаТаб Из Таблица Цикл
					Если СтрокаТаб.Отметка Тогда
						НовСтрока = ДокументКорректировкаНазначения.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаб);
						НовСтрока.Помещение = Справочники.СкладскиеПомещения.НайтиПоНаименованию("Ручной отбор (мезонин)");
	//Новый Механизм создания Документа					НовСтрока.ИсходноеНазначение = Назначение;   //Заказ с ОЕМ
	//Новый Механизм создания Документа					НовСтрока.НовоеНазначение = НовоеНазначение; //ЗаказКлиента
					//{{20201217 ГлазуновДВ Новый Механизм создания Документа
						НовСтрока.ИсходноеНазначение = СтрокаТаб.ИсходноеНазначение;   //Заказ с ОЕМ
						НовСтрока.НовоеНазначение = НовоеНазначение; //ЗаказКлиента
					//}}20201217 ГлазуновДВ
						НовСтрока.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		//}}20201210 ГлазуновДВ
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ДокументКорректировкаНазначения.Товары, СтруктураДействий, Неопределено);
			
			ПараметрыУказанияСерийКорректировка = Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(ДокументКорректировкаНазначения);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументКорректировкаНазначения, ПараметрыУказанияСерийКорректировка);
			
			ДокументКорректировкаНазначения.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			
		//{{20201215-20201216 ГлазуновДВ
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ЭтотОбъект.Модифицированность = Истина;
			Отказ = Истина;
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщить("Операция передачи резерва отменена, " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Для Каждого Строка Из ТЗ_Корректировка Цикл
				
				МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", Строка.КодСтроки));
				Если Строка.КодСтроки = 0 Тогда

					Для Каждого СтрокаМассива Из МассивСтрок Цикл
						
					//{{Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
						СтрокаМассива.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется");
						СтрокиТовары = Объект.Товары.Выгрузить(Новый Массив,"Номенклатура, ГИГ_СхемаОбеспечения, ГИГ_СрокПоставки, ДатаОтгрузки, Характеристика, ИсходныйНомерСтроки");
						СтрокиТовары.Очистить();
						НоваяСтрока = СтрокиТовары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
						НоваяСтрока.ИсходныйНомерСтроки = СтрокаМассива.ИсходныйНомерСтроки - 1;
						
						МассивВыбора = Новый Массив();
						ЗначениеВыбора = ОбеспечениеКлиентСервер.СтруктураВариантаОбеспечения();
						ЗначениеВыбора.ВариантОбеспечения   = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется");
						ЗначениеВыбора.ДатаОтгрузки         = СтрокаМассива.ДатаОтгрузки;
						ЗначениеВыбора.Склад                = Объект.Склад;
						ЗначениеВыбора.Серия                = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
						ЗначениеВыбора.Количество           = СтрокаМассива.Количество;
						ЗначениеВыбора.Вставить("Отгружено", 0);
						ЗначениеВыбора.Вставить("Идентификатор", СтрокаМассива.ИсходныйНомерСтроки - 1);
						МассивВыбора.Добавить(ЗначениеВыбора);
		
						Таблица = Новый ТаблицаЗначений;
						Таблица.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
						Таблица.Колонки.Добавить("Отгружено",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("ДатаОтгрузки",Новый ОписаниеТипов("Дата"));
						Таблица.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
						Таблица.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("ПриоритетТипаОбеспечения",Новый ОписаниеТипов("Число"));
						Таблица.Колонки.Добавить("СкладНаименование",Новый ОписаниеТипов("Строка"));
	
						Для Каждого Структура Из МассивВыбора Цикл
							НовСтрТаблица = Таблица.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрТаблица, Структура);
							НовСтрТаблица.Приоритет = 0;
							НовСтрТаблица.ПриоритетТипаОбеспечения = ?(НовСтрТаблица.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется,4,0);
							НовСтрТаблица.СкладНаименование = НовСтрТаблица.Склад.Наименование;
						КонецЦикла;
						
						СтруктураПараметры = Новый Структура("Склад, СтрокиТовары, Дата", Объект.Склад, СтрокиТовары, Объект.Дата);
						ГИГ_ОбеспечениеСервер.ДополнитьОбеспечение(Таблица, СтруктураПараметры);
						
						Если Таблица.Количество() > 0 Тогда
							СтрокаМассива.ГИГ_СрокПоставки = Таблица[0].ГИГ_СрокПоставки;
							СтрокаМассива.ГИГ_СхемаОбеспечения = Таблица[0].ГИГ_СхемаОбеспечения;
							СтрокаМассива.ДатаОтгрузки = Таблица[0].ДатаОтгрузки;
							Если Не ЗначениеЗаполнено(СтрокаМассива.ДатаКлиента) Тогда
								СтрокаМассива.ДатаКлиента = Таблица[0].ДатаОтгрузки;
							КонецЕсли;	
						КонецЕсли;	
					//}}Установка в строке реквизитов "ГИГ_СхемаОбеспечения" и "ГИГ_СрокПоставки"
						
						СтрокаМассива.ГИГ_НазначениеУстановлено = Ложь;
						СтрокаМассива.ГИГ_Назначение = Справочники.Назначения.ПустаяСсылка();
					КонецЦикла;
				Иначе
					Если Не МассивСтрок.Количество() = 0  Тогда
						МассивСтрок[0].ГИГ_НазначениеУстановлено = Ложь;
						МассивСтрок[0].ГИГ_Назначение = Справочники.Назначения.ПустаяСсылка();
					КонецЕсли;
					МассивСтрокСсылка = Объект.Ссылка.Товары.НайтиСтроки(Новый Структура("КодСтроки", Строка.КодСтроки));
					Если Не МассивСтрокСсылка.Количество() = 0  Тогда
						МассивСтрок[0].ВариантОбеспечения = МассивСтрокСсылка[0].ВариантОбеспечения;
						МассивСтрок[0].ГИГ_СрокПоставки = МассивСтрокСсылка[0].ГИГ_СрокПоставки;
						МассивСтрок[0].ГИГ_СхемаОбеспечения = МассивСтрокСсылка[0].ГИГ_СхемаОбеспечения;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		//}}20201215-20201216 ГлазуновДВ
			//ЭтотОбъект.Записать();
			//ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		//++Шерстюк Ю.Ю. 28.06.2021 при изменении режима совместимости с 8.3.12 на 8.3.14 не записывается документ с ошибкой доступа на уровне записей, данные были изменены другим пользователем
		//Если Не Отказ Тогда
		//	//ЭтотОбъект.Записать();
		////{{20201216 ГлазуновДВ
		//	Попытка
		//		ЭтотОбъект.Записать();
		//	Исключение
		//		Если ТранзакцияАктивна() Тогда
		//			ОтменитьТранзакцию();
		//		КонецЕсли;
		//		КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		//	КонецПопытки;
		////}}20201216 ГлазуновДВ
		//КонецЕсли;
        //--Шерстюк Ю.Ю.
	//{{20201216 ГлазуновДВ
		Если ТранзакцияАктивна() Тогда
			Сообщить("Операция передачи резерва выполнена, создан документ: " + ДокументКорректировкаНазначения);
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	//}}20201216 ГлазуновДВ
	КонецЕсли;
		
КонецПроцедуры

//{{20201210 ГлазуновДВ Отбираем по серийным номерам, если есть.
Процедура СлитьТаблицыПоСкладуИПомещениям(ТаблицаПоСкладамВЦелом, ТаблицаПомещенияЯчейки)
	
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Серия") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	КонецЕсли;
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Помещение") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Помещение", Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	КонецЕсли;
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Ячейка") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Назначение, Номенклатура, Характеристика, Склад");
	
	СтрокиКУдалению = Новый Массив();
	
	Для ИндексСтроки = 0 По ТаблицаПоСкладамВЦелом.Количество() - 1 Цикл
		
		Строка = ТаблицаПоСкладамВЦелом[ИндексСтроки];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтруктураПоиска.Назначение = Строка.ИсходноеНазначение;
		
		НайденныеСтроки = ТаблицаПомещенияЯчейки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			КоличествоОстаток = Строка.Количество;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока = ТаблицаПоСкладамВЦелом.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "Помещение, Ячейка, Серия, Упаковка, Количество");
				
				Если НайденнаяСтрока.Обеспечено > КоличествоОстаток Тогда
					НоваяСтрока.Количество = КоличествоОстаток;
					КоличествоОстаток = 0;
				Иначе
					НоваяСтрока.Количество = НайденнаяСтрока.Обеспечено;
					КоличествоОстаток = КоличествоОстаток - НайденнаяСтрока.Обеспечено;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокиКУдалению.Добавить(Строка); // Текущая строка заменена на строки из таблицы по помещениям
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПоСкладамВЦелом.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу товаров по заказу для которых производится обособленное обеспечение.
//
// Параметры:
//  ВидОперации							 - ПеречислениеСсылка.ВидыОперацийКорректировкиНазначения - Вид операции заказа
//  Назначение							 - Назначение, по которому необходимо получить данные обособленного обеспечения
//  Заказ								 - ДокументСсылка - Заказ, по товарам которого необходимо ограничить полученный список потребности назначения
//  ТекущаяКорректировка				 - ДокументСсылка.КорректировкаНазначенияТоваров - текущий документ корректировки, задается для того что бы
// 													исключить его движения из расчетов
//  ТолькоПоСкладуОтгрузки				 - Булево - При виде операции резервирование, будут ли помещены
//													в результирующую таблицу остатки по складам не указанным в заказе
//  Организация							 - СправочникСсылка.Организации -
//  СнятьИзлишекРезервов                 - Булево - Признак необходимости снятия только излишка для операций снятия
//                                                  резерва, если передано Ложь -- выполняется снятие всей потребности.
//
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значения с колонками:
//		* Заказ						 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение,
//			ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ переданный как входящий параметр функции
//		* ЗаказИсточник				 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение,
//			ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ который зарезервировал тот же товар который нужен заказу
//				переданному как входящий параметр функции
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* НовоеНазначение			 - СправочникСсылка.Назначения - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* ЕдиницаИзмерения			 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* СкладОтгрузки				 - СправочникСсылка.Склады - склад указанный в заказе, склад потребности
//		* Потребность				 - Число - количество необеспеченного товара по заказу
//		* Обеспечено				 - Число - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* ПотребностьОсновногоСклада - Булево - признак того что текущий склад соответствует складу отгрузки
//		* Количество				 - Число - всегда 0
//		* Отметка					 - Булево - всегда Ложь
//		* СортировкаСклада			 - Число - данные для сортировки складов
//		* ЭтоОстатокЗаказа			 - Булево - признак того что в колонке СвободныйОстаток не остаток склада, а резерв заказа.
//
Функция ЗаполнитьТаблицуСнятияУстановкиРезервов(ВидОперации, Назначение, Заказ, ТекущаяКорректировка, ТолькоПоСкладуОтгрузки, Организация, СнятьИзлишекРезервов = Истина) Экспорт
	
	СнятиеРезерва = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	КорректировкаРезерваИныхЗаказов = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать);
	
	ТребуемыеТовары = МатериалыИзТабличнойЧастиДокумента(Заказ);
	
	Отборы = Новый Структура();
	Отборы.Вставить("Назначение",      Назначение);
	Отборы.Вставить("Организация",     Организация);
	Отборы.Вставить("ТребуемыеТовары", ТребуемыеТовары);
	
	СтруктураВозврата = ТаблицаЗаполненияКорректировки(ВидОперации, ТолькоПоСкладуОтгрузки, Отборы, ТекущаяКорректировка);
	Таблица = СтруктураВозврата.ТаблицаЗаполненияКорректировки;
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Булево"));
	
	Если СнятиеРезерва Тогда
		
		СнятьРезервы(Таблица, СнятьИзлишекРезервов);
		
	Иначе
		
		УстановитьРезервы(Таблица);
		
	КонецЕсли;
	
	Таблица.Колонки.Добавить("СкладЗаказИсточник", Новый ОписаниеТипов("Строка"));
	Для Каждого Строка Из Таблица Цикл
		
		Строка.СкладЗаказИсточник = ?(Строка.ИсточникПредставление = "", "", Строка.ИсточникПредставление + ", ") + Строка.СкладПредставление;
		
		Если Не СнятиеРезерва Тогда
			Строка.ИсходноеНазначение = Строка.НазначениеИсточник; // Пустое значение (со склада) или назначение конкретного заказа
		Иначе
			Строка.ИсходноеНазначение = Строка.Назначение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Восстановление сортировки после изменения таблицы, по строковому представлению
	Таблица.Сортировать("ИсходноеНазначение, Номенклатура, Характеристика, СортировкаСклада УБЫВ, НазначениеИсточник, Потребность УБЫВ, ВНаличии УБЫВ");
	
	СтруктураВозврата.Вставить("ТаблицаЗаполненияКорректировки", Таблица);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МатериалыИзТабличнойЧастиДокумента(Заказ)
	
	ТребуемыеТовары = Новый ТаблицаЗначений();
	ТребуемыеТовары.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТребуемыеТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	//++ НЕ УТ
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЗаказПереработчику.Материалы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Заказ";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТребуемыхТоваров = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТребуемыхТоваров, ТребуемыеТовары);
	КонецЕсли;
	//-- НЕ УТ
	//++ НЕ УТКА
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЗаказДавальца.Материалы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Заказ";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТребуемыхТоваров = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТребуемыхТоваров, ТребуемыеТовары);
	
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Заказ
		|	И НЕ Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТребуемыхТоваров = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТребуемыхТоваров, ТребуемыеТовары);
	
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат ТребуемыеТовары;
	
КонецФункции

Функция ТаблицаЗаполненияКорректировки(ВидОперации, ТолькоСкладОтгрузки, Отборы, ТекущаяКорректировка)
	
	//ЭтоНовыйДокумент = Не ЗначениеЗаполнено(ТекущаяКорректировка);
	//ЕстьОтборПоОрганизации = ЗначениеЗаполнено(Отборы.Организация);
	//ЕстьОтборПоНоменклатуре = ЗначениеЗаполнено(Отборы.ТребуемыеТовары);
	ЭтоНовыйДокумент = Истина;
	ЕстьОтборПоОрганизации = Истина;
	ЕстьОтборПоНоменклатуре = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяКорректировка", ТекущаяКорректировка);
	Для Каждого Свойство Из Отборы Цикл
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ЭтоНовыйДокумент Тогда
		ТекстЗапроса = ВременнаяТаблицаОбеспечениеЗаказовОстатки(ВидОперации, ЕстьОтборПоОрганизации, ЕстьОтборПоНоменклатуре);
	//Иначе
	//	ТекстЗапроса = ВременнаяТаблицаОбеспечениеЗаказовОстаткиСУчетомКорректировки(ВидОперации, ЕстьОтборПоОрганизации, ЕстьОтборПоНоменклатуре);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Если ЭтоНовыйДокумент Тогда
		БлокТекста = ВременнаяТаблицаСвободныеОстатки() + ТекстРазделителяЗапросов()
			+ ВременнаяТаблицаОбеспечениеЗаказовОстаткиНазначений(ВидОперации, ЕстьОтборПоОрганизации) + ТекстРазделителяЗапросов();
	//Иначе
	//	БлокТекста = ВременнаяТаблицаСвободныеОстаткиСУчетомКорректировки() + ТекстРазделителяЗапросов()
	//		+ ВременнаяТаблицаОбеспечениеЗаказовОстаткиНазначенийСУчетомКорректировки(ВидОперации, ЕстьОтборПоОрганизации) + ТекстРазделителяЗапросов();
	КонецЕсли;
	
	ТекстЗапроса = БлокТекста
		+ РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспеченияВсехСкладов(Перечисления.ТипыОбеспечения.Перемещение);

	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = ВременнаяТаблицаСкладыОтгрузки() + ТекстРазделителяЗапросов()
		+ ВременнаяТаблицаСводнаяРезервыОстатки() + ТекстРазделителяЗапросов()
		+ ТаблицаИсточниковОбеспеченияПеремещением();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = ТекстЗапроса;
	ТаблицаИсточниковОбеспеченияПеремещением = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РассчитатьИерархиюСкладов(ТаблицаИсточниковОбеспеченияПеремещением);
	Запрос.УстановитьПараметр("ТаблицаИерархииСкладов", ТаблицаИсточниковОбеспеченияПеремещением);
	
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса + ВременнаяТаблицаСортировкаСкладов() + ТекстРазделителяЗапросов();
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Таблица.НазначениеИсточник  КАК НазначениеИсточник,
	|	Таблица.Назначение          КАК Назначение,
	|	Таблица.Номенклатура        КАК Номенклатура,
	|	Таблица.Характеристика      КАК Характеристика,
	|	Таблица.Склад               КАК Склад,
	|	Таблица.СкладПредставление     КАК СкладПредставление,
	|	Таблица.ИсточникПредставление  КАК ИсточникПредставление,
	|	
	|	Таблица.Доступно            КАК СвободныйОстаток,
	|	Таблица.ВНаличии            КАК ВНаличии,
	|	Таблица.Обеспечено
	|		- Таблица.ВНаличии      КАК ОбеспеченоОжидается,
	|	Таблица.Потребность         КАК Потребность,
	|	
	|	ВЫБОР КОГДА ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL ТОГДА
	|				ЛОЖЬ
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ                   КАК ПотребностьОсновногоСклада,
	|	
	|	ЕСТЬNULL(ТаблицаСортировкиСкладов.ПриоритетСклада, 0) КАК СортировкаСклада,
	|
	|	Таблица.Назначение.Заказ              КАК Заказ,
	|	Таблица.ЗаказИсточник                 КАК ЗаказИсточник,
	|	&ВыражениеНовоеНазначение             КАК НовоеНазначение,
	|	&ВыражениеИсходноеНазначение          КАК ИсходноеНазначение
	|
	|ИЗ
	|	ВтСводнаяРезервыОстатки КАК Таблица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСортировкаСкладов КАК ТаблицаСортировкиСкладов
	|		ПО ТаблицаСортировкиСкладов.Склад          = Таблица.Склад
	|		 И ТаблицаСортировкиСкладов.Назначение     = Таблица.Назначение
	|		 И ТаблицаСортировкиСкладов.Номенклатура   = Таблица.Номенклатура
	|		 И ТаблицаСортировкиСкладов.Характеристика = Таблица.Характеристика
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСкладыОтгрузки КАК ТаблицаСкладовОтгрузки
	|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
	|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
	|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
	|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
	|ГДЕ
	|	&УсловиеОтбораСкладовОтгрузки
	|	И &УсловиеОтбораПоНаличию
	|УПОРЯДОЧИТЬ ПО
	|	Назначение, Номенклатура, Характеристика,
	|	СортировкаСклада УБЫВ,
	|	НазначениеИсточник,
	|	Потребность УБЫВ, ВНаличии УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Назначение          КАК Назначение,
	|	Таблица.Номенклатура        КАК Номенклатура,
	|	Таблица.Характеристика      КАК Характеристика,
	|	Таблица.Склад               КАК Склад,
	|	
	|	МАКСИМУМ(Таблица.ВНаличии)    КАК НаСкладе,
	|	МАКСИМУМ(Таблица.Обеспечено)  КАК Обеспечено,
	|	МАКСИМУМ(Таблица.Потребность) КАК Потребность,
	|	
	|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL ТОГДА
	|				ЛОЖЬ
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ)                   КАК ПотребностьОсновногоСклада,
	|	
	|	МАКСИМУМ(Таблица.Назначение.Заказ) КАК Заказ
	|
	|ИЗ
	|	ВтСводнаяРезервыОстатки КАК Таблица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСкладыОтгрузки КАК ТаблицаСкладовОтгрузки
	|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
	|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
	|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
	|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
	|ГДЕ
	|	&УсловиеОтбораСкладовОтгрузки
	|	И &УсловиеОтбораПоНаличию
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Назначение, Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад
	|УПОРЯДОЧИТЬ ПО
	|	Назначение, Номенклатура, Характеристика,
	|	Потребность УБЫВ,
	|	НаСкладе УБЫВ";
	
	Если ТолькоСкладОтгрузки Тогда
		
		УсловиеОтбораСкладовОтгрузки = "НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL";
		
	Иначе
		
		УсловиеОтбораСкладовОтгрузки = "ИСТИНА";
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
		
		УсловиеОтбораПоНаличию = "Таблица.ВНаличии > 0";
		
		ВыражениеИсходноеНазначение = "Таблица.Назначение";
		ВыражениеНовоеНазначение    = "НЕОПРЕДЕЛЕНО";
		
	Иначе
		
		УсловиеОтбораПоНаличию = "ИСТИНА";
		
		ВыражениеИсходноеНазначение = "Таблица.НазначениеИсточник";
		ВыражениеНовоеНазначение    = "Таблица.Назначение";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСкладовОтгрузки", УсловиеОтбораСкладовОтгрузки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоНаличию",       УсловиеОтбораПоНаличию);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИсходноеНазначение",  ВыражениеИсходноеНазначение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеНовоеНазначение",     ВыражениеНовоеНазначение);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВсегоТаблиц = Результат.Количество();
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТаблицаЗаполненияКорректировки", Результат[ВсегоТаблиц - 2].Выгрузить());
	СтруктураВозврата.Вставить("ТаблицаИтогов", Результат[ВсегоТаблиц - 1].Выгрузить());
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Расчитывает поле количество в переданной таблице значений для снятия текущего обособленного резерва.
//
// Параметры:
//  Таблица							- ТаблицаЗначений - таблица значения с колонками:
//		* Заказ						 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение,
//			ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ переданный как входящий параметр функции
//		* ЗаказИсточник				 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение,
//			ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ который зарезервировал тот же товар который нужен заказу
//				переданному как входящий параметр функции
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* НовоеНазначение			 - СправочникСсылка.Назначения - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* ЕдиницаИзмерения			 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* СкладОтгрузки				 - СправочникСсылка.Склады - склад указанный в заказе, склад потребности
//		* Потребность				 - Число - количество необеспеченного товара по заказу
//		* Обеспечено				 - Число - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* ПотребностьОсновногоСклада - Булево - признак того что текущий склад соответствует складу отгрузки
//		* Количество				 - Число - количество
//		* Отметка					 - Булево - признак использования количества в алгоритмах
//		* СортировкаСклада			 - Число - данные для сортировки складов
//		* ЭтоОстатокЗаказа			 - Булево - признак того что в колонке СвободныйОстаток не остаток склада, а резерв заказа
//	СнятьИзлишекРезервов		 - Булево - признак того что алгоритм должен выставить в колонке количество излишек обеспечения.
//											при значении Ложь колонка Количество будет заполнена данным колонки Обеспечено.
//
Процедура СнятьРезервы(Таблица, СнятьИзлишекРезервов = Истина)
	
	СтруктураКлючевыхПолей = Новый Структура("ИсходноеНазначение, Номенклатура, Характеристика, Склад");
	Потребность = 0;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если СнятьИзлишекРезервов Тогда
			
			// Снять излишние резервы
			// Таблица отсортирована по приоритетности складов. На первых складах необходимо оставить максимальное количество товара.
			Если Не (СтруктураКлючевыхПолей.ИсходноеНазначение = Строка.ИсходноеНазначение
				И СтруктураКлючевыхПолей.Номенклатура = Строка.Номенклатура
				И СтруктураКлючевыхПолей.Характеристика = Строка.Характеристика
				И СтруктураКлючевыхПолей.Склад = Строка.Склад)
				И Строка.ПотребностьОсновногоСклада = Истина Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураКлючевыхПолей, Строка);
				Потребность = Строка.Потребность;
			КонецЕсли;
			
			Если Потребность > 0 Тогда
				Строка.Количество = Строка.ВНаличии - Потребность;
				Потребность = Потребность - Строка.ВНаличии;
			Иначе
				Строка.Количество = Строка.ВНаличии;
			КонецЕсли;
			
			Если Строка.Количество > 0 Тогда
				Строка.Отметка = Истина;
			Иначе
				Строка.Отметка = Ложь;
			КонецЕсли;
		Иначе
			
			// Снять все резервы
			Строка.Количество = Строка.ВНаличии;
			Если Строка.Количество > 0 Тогда
				Строка.Отметка = Истина;
			Иначе
				Строка.Отметка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// Расчитывает поле количество в переданной таблице значений для установки обособленного резерва.
//
// Параметры:
//  Таблица							- ТаблицаЗначений - таблица значения с колонками:
//		* Заказ						 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение,
//			ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ переданный как входящий параметр функции
//		* ЗаказИсточник				 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение,
//			ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ который зарезервировал тот же товар который нужен заказу
//				переданному как входящий параметр функции
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* НовоеНазначение			 - СправочникСсылка.Назначения - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* ЕдиницаИзмерения			 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* СкладОтгрузки				 - СправочникСсылка.Склады - склад указанный в заказе, склад потребности
//		* Потребность				 - Число - количество необеспеченного товара по заказу
//		* Обеспечено				 - Число - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* ПотребностьОсновногоСклада - Булево - признак того что текущий склад соответствует складу отгрузки
//		* Количество				 - Число - количество
//		* Отметка					 - Булево - признак использования количества в алгоритмах
//		* СортировкаСклада			 - Число - данные для сортировки складов
//		* ЭтоОстатокЗаказа			 - Булево - признак того что в колонке СвободныйОстаток не остаток склада, а резерв заказа.
//
Процедура УстановитьРезервы(Таблица)
	
	СтруктураКлючевыхПолей = Новый Структура("ИсходноеНазначение, Номенклатура, Характеристика, Склад");
	Потребность = 0;
	
	Для Каждого Строка Из Таблица Цикл
		
		// Таблица отсортирована по приоритетности складов. На первых складах необходимо зарезервировать максимальное
		// количество товара.
		
		Если Не (СтруктураКлючевыхПолей.Номенклатура = Строка.Номенклатура
			И СтруктураКлючевыхПолей.Характеристика = Строка.Характеристика
			И СтруктураКлючевыхПолей.ИсходноеНазначение = Строка.ИсходноеНазначение 
			И СтруктураКлючевыхПолей.Склад = Строка.Склад)
			И Строка.ПотребностьОсновногоСклада Тогда
			ЗаполнитьЗначенияСвойств(СтруктураКлючевыхПолей, Строка);
			Потребность = Строка.Потребность - Строка.ВНаличии - Строка.ОбеспеченоОжидается;
		КонецЕсли;
		
		Если Строка.ПотребностьОсновногоСклада Тогда
			Если Не ЗначениеЗаполнено(Строка.ИсходноеНазначение) Тогда
				Если Потребность > 0 Тогда
					Если Строка.СвободныйОстаток > Потребность Тогда
						Строка.Количество = Потребность;
						Потребность = 0;
					Иначе
						Строка.Количество = Строка.СвободныйОстаток;
						Потребность = Потребность - Строка.СвободныйОстаток;
					КонецЕсли;
					Строка.Отметка = Строка.СвободныйОстаток > 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВременнаяТаблицаОбеспечениеЗаказовОстатки(ВидОперации, ЕстьОтборПоОрганизации, ЕстьОтборПоНоменклатуре)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОстатков.Назначение             КАК Назначение,
		|	ТаблицаОстатков.Номенклатура           КАК Номенклатура,
		|	ТаблицаОстатков.Характеристика         КАК Характеристика,
		|	ТаблицаОстатков.Склад                  КАК Склад,
		|	ТаблицаОстатков.НаличиеПодЗаказОстаток КАК НаличиеПодЗаказ,
		|	ТаблицаОстатков.КЗаказуОстаток         КАК КЗаказу,
		|	ТаблицаОстатков.ПотребностьОстаток     КАК Потребность
		|ПОМЕСТИТЬ ВТОбеспечениеЗаказовОстатки
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, &ПараметрыВиртуальнойТаблицы) КАК ТаблицаОстатков
		|ГДЕ
		|	&УсловиеТаблицаОстатков";
		
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям И ЕстьОтборПоОрганизации Тогда
		
		УсловиеТаблицаОстатков      = "ТаблицаОстатков.Назначение.Заказ.Организация = &Организация И ТаблицаОстатков.НаличиеПодЗаказОстаток > 0";
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ " И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			  |		  И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		ПараметрыВиртуальнойТаблицы = "ИСТИНА";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям И Не ЕстьОтборПоОрганизации Тогда
		
		УсловиеТаблицаОстатков      = "ТаблицаОстатков.НаличиеПодЗаказОстаток > 0";
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ " И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			  |		  И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		ПараметрыВиртуальнойТаблицы = "ИСТИНА";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв Тогда
		
		УсловиеТаблицаОстатков      = "ТаблицаОстатков.НаличиеПодЗаказОстаток > 0";
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ " И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			  |		  И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		ПараметрыВиртуальнойТаблицы = "Назначение = &Назначение";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
		
		УсловиеТаблицаОстатков      = "ИСТИНА";
		ПараметрыВиртуальнойТаблицы = "Назначение = &Назначение";
		
	КонецЕсли;
	
	Если ЕстьОтборПоНоменклатуре Тогда
		
		ТекстЗапросаВТТребуемыеТовары = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТТребуемыеТовары
		|ИЗ
		|	&ТребуемыеТовары КАК Товары
		|
		|;
		|";
		
		ТекстЗапроса = ТекстЗапросаВТТребуемыеТовары + ТекстЗапроса;
		
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ " И (ТаблицаОстатков.Номенклатура, ТаблицаОстатков.Характеристика) В (ВЫБРАТЬ Товары.Номенклатура, Товары.Характеристика ИЗ ВТТребуемыеТовары КАК Товары)";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицаОстатков",      УсловиеТаблицаОстатков);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрыВиртуальнойТаблицы", ПараметрыВиртуальнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ВременнаяТаблицаСвободныеОстатки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	ВтОбеспечениеЗаказовОстатки КАК ТаблицаОтбора
		|;
		|/////////////////////////////////
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.Номенклатура      КАК Номенклатура,
		|	Набор.Характеристика    КАК Характеристика,
		|	Набор.Склад             КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтСвободныеОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		СвободныеОстатки.Номенклатура   КАК Номенклатура,
		|		СвободныеОстатки.Характеристика КАК Характеристика,
		|		СвободныеОстатки.Склад          КАК Склад,
		|		СвободныеОстатки.ВНаличииОстаток - СвободныеОстатки.ВРезервеСоСкладаОстаток - СвободныеОстатки.ВРезервеПодЗаказОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.СвободныеОстатки.Остатки(,
		|			(Номенклатура, Характеристика) В(
		|				ВЫБРАТЬ
		|					ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика КАК Характеристика
		|				ИЗ
		|					ВтТовары КАК ТаблицаОтбора)) КАК СвободныеОстатки
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|			ТаблицаОтбора.Характеристика КАК Характеристика,
		|			РезервыИзЗаказов.Склад       КАК Склад,
		|			РезервыИзЗаказов.Количество  КАК Количество
		|		ИЗ
		|			ВтТовары КАК ТаблицаОтбора
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК РезервыИзЗаказов
		|				ПО РезервыИзЗаказов.Номенклатура = ТаблицаОтбора.Номенклатура
		|				 И РезервыИзЗаказов.Характеристика = ТаблицаОтбора.Характеристика
		|				 И РезервыИзЗаказов.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
		|				 И РезервыИзЗаказов.Количество < 0) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ТекстРазделителяЗапросов()
	
	Возврат 
	"
	|	
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции
Функция ВременнаяТаблицаОбеспечениеЗаказовОстаткиНазначений(ВидОперации, ЕстьОтборПоОрганизации)
	
	// Обращение к ссылке заказа через точку позволяет отработать механизмам RLS.
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОстатков.Назначение              КАК Назначение,
		|	ТаблицаОстатков.Номенклатура            КАК Номенклатура,
		|	ТаблицаОстатков.Характеристика          КАК Характеристика,
		|	ТаблицаОстатков.Склад                   КАК Склад,
		|	ТаблицаОстатков.НаличиеПодЗаказОстаток  КАК НаличиеПодЗаказ,
//++ НЕ УТКА
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаОстатков.Назначение.Заказ КАК Документ.ЗаказДавальца).Партнер,
		|		ЕСТЬNULL(ТаблицаОстатков.Назначение.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)))             КАК Партнер,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаОстатков.Назначение.Заказ КАК Документ.ЗаказДавальца).Договор,
		|		ЕСТЬNULL(ТаблицаОстатков.Назначение.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))) КАК Договор,
//-- НЕ УТКА
		|	ЕСТЬNULL(ТаблицаОстатков.Назначение.Заказ.Ссылка, НЕОПРЕДЕЛЕНО) КАК Заказ
		|
		|ПОМЕСТИТЬ ВтОбеспечениеЗаказовОстаткиНазначений
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|		Назначение <> &Назначение
		|		И (Номенклатура, Характеристика) В(
		|			ВЫБРАТЬ
		|				ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|				ТаблицаОтбора.Характеристика КАК Характеристика
		|			ИЗ
		|				ВтТовары КАК ТаблицаОтбора)) КАК ТаблицаОстатков
		|ГДЕ
		|	ТаблицаОстатков.НаличиеПодЗаказОстаток > 0
		|	И &ЭтоОперацияРезервироватьИКорректировать
		|	И &УсловиеТаблицыОстатков
		// Назначение под заказ или под партнера.
		|	И (НЕ ТаблицаОстатков.Назначение.Заказ ЕСТЬ NULL
		|		ИЛИ ТаблицаОстатков.Назначение.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
//++ НЕ УТКА
		// При использовании давальческих назначений необходимо
		// проверить что оба назначения относятся к одной версии производства.
		|	И (
		//	Заказ задан, но не является Заказом давальца.
		|		(НЕ ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца)
		// Производство 2.1.
		|		ИЛИ (ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|			И ТаблицаОстатков.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21))
		// Производство 2.2.
		|		ИЛИ (ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).ТипНазначения В (ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|																				ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
		|			И ТаблицаОстатков.Назначение.ТипНазначения В (ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|															ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22)))
		|	)
//-- НЕ УТКА
		|";
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
		ЭтоОперацияРезервироватьИКорректировать = "ИСТИНА";
	Иначе
		ЭтоОперацияРезервироватьИКорректировать = "ЛОЖЬ";
	КонецЕсли;
	
	Если ЕстьОтборПоОрганизации Тогда
		УсловиеТаблицыОстатков = "(ТаблицаОстатков.Назначение.Заказ.Организация = &Организация
									|ИЛИ ТаблицаОстатков.Назначение.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
	Иначе
		УсловиеТаблицыОстатков = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоОперацияРезервироватьИКорректировать", ЭтоОперацияРезервироватьИКорректировать);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицыОстатков", УсловиеТаблицыОстатков);
	
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ВременнаяТаблицаСкладыОтгрузки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение     КАК Назначение
		|ПОМЕСТИТЬ ВтСкладыОтгрузки
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, 
		|			(Назначение, Склад, Номенклатура, Характеристика)
		|			В (ВЫБРАТЬ 
		|					Т.Назначение, 
		|					Т.Склад, 
		|					Т.Номенклатура, 
		|					Т.Характеристика 
		|				ИЗ ВтОбеспечениеЗаказовОстатки КАК Т)
		|			И НЕ Склад ЕСТЬ NULL) КАК Таблица
		|ГДЕ
		|	
		|	Таблица.ПотребностьОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение";
		
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ВременнаяТаблицаСводнаяРезервыОстатки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//++ НЕ УТКА
		|	ЕСТЬNULL(Таблица.Назначение.Заказ, НЕОПРЕДЕЛЕНО)                                                  КАК Заказ,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(Таблица.Назначение.Заказ КАК Документ.ЗаказДавальца).Партнер,
		|		ЕСТЬNULL(Таблица.Назначение.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)))             КАК Партнер,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(Таблица.Назначение.Заказ КАК Документ.ЗаказДавальца).Договор,
		|		ЕСТЬNULL(Таблица.Назначение.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))) КАК Договор,
//-- НЕ УТКА
		|	Таблица.Назначение КАК Назначение
		|ПОМЕСТИТЬ ВтНазначения
		|ИЗ
		|	ВтОбеспечениеЗаказовОстатки КАК Таблица
		|;
		|/////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Набор.Назначение         КАК Назначение,
		|	Набор.НазначениеИсточник КАК НазначениеИсточник,
		|	Набор.Номенклатура       КАК Номенклатура,
		|	Набор.Характеристика     КАК Характеристика,
		|	ПРЕДСТАВЛЕНИЕ(Набор.Склад) КАК СкладПредставление,
		|	Набор.ИсточникПредставление КАК ИсточникПредставление,
		|	Набор.Склад              КАК Склад,
		|	СУММА(Набор.ВНаличии)    КАК ВНаличии,
		|	СУММА(Набор.Обеспечено)  КАК Обеспечено,
		|	СУММА(Набор.Доступно)    КАК Доступно,
		|	СУММА(Набор.Потребность) КАК Потребность,
		|
		|	МАКСИМУМ(Набор.ЗаказИсточник) КАК ЗаказИсточник
		|
		|ПОМЕСТИТЬ ВтСводнаяРезервыОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК НазначениеИсточник,
		|		НЕОПРЕДЕЛЕНО                  КАК ЗаказИсточник,
		|		""""                          КАК ИсточникПредставление,
		|		Таблица.Назначение            КАК Назначение,
		|		Таблица.Номенклатура          КАК Номенклатура,
		|		Таблица.Характеристика        КАК Характеристика,
		|		Таблица.Склад                 КАК Склад,
		|		Таблица.НаличиеПодЗаказ       КАК ВНаличии,
		|		Таблица.Потребность
		|			- Таблица.КЗаказу         КАК Обеспечено,
		|		Таблица.Потребность           КАК Потребность,
		|		0                             КАК Доступно
		|	ИЗ
		|		ВтОбеспечениеЗаказовОстатки КАК Таблица
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК НазначениеИсточник,
		|		НЕОПРЕДЕЛЕНО                  КАК ЗаказИсточник,
		|		""""                          КАК ИсточникПредставление,
		|		ТаблицаНазначений.Назначение  КАК Назначение,
		|		Таблица.Номенклатура          КАК Номенклатура,
		|		Таблица.Характеристика        КАК Характеристика,
		|		Таблица.Склад                 КАК Склад,
		|		0                             КАК ВНаличии,
		|		0                             КАК Обеспечено,
		|		0                             КАК Потребность,
		|		Таблица.Количество            КАК Доступно
		|	ИЗ
		|		ВтНазначения КАК ТаблицаНазначений
		|		
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК Таблица
		|			ПО ИСТИНА
		|	ГДЕ
		|		НЕ Таблица.Номенклатура ЕСТЬ NULL
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		ТаблицаНазначенийИсточников.Назначение      КАК НазначениеИсточник,
		|		ТаблицаНазначенийИсточников.Заказ           КАК ЗаказИсточник,
		|		
		|		ВЫБОР КОГДА ТаблицаНазначенийИсточников.Заказ <> НЕОПРЕДЕЛЕНО ТОГДА
		|						ПРЕДСТАВЛЕНИЕ(ТаблицаНазначенийИсточников.Заказ)
		|					ИНАЧЕ
		|						ПРЕДСТАВЛЕНИЕ(ТаблицаНазначенийИсточников.Назначение)
		|			КОНЕЦ                                        КАК ИсточникПредставление,
		|		
		|		ТаблицаНовыхНазначений.Назначение           КАК Назначение,
		|		ТаблицаНазначенийИсточников.Номенклатура    КАК Номенклатура,
		|		ТаблицаНазначенийИсточников.Характеристика  КАК Характеристика,
		|		ТаблицаНазначенийИсточников.Склад           КАК Склад,
		|		0                                           КАК ВНаличии,
		|		0                                           КАК Обеспечено,
		|		0                                           КАК Потребность,
		|		ТаблицаНазначенийИсточников.НаличиеПодЗаказ КАК Доступно
		|	ИЗ
		|		ВтНазначения КАК ТаблицаНовыхНазначений
		|		
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказовОстаткиНазначений КАК ТаблицаНазначенийИсточников
		|			ПО ИСТИНА
		|			
//++ НЕ УТКА
		|	ГДЕ
		// При резервировании из других заказов, если назначения - давальческие,
		// необходимо проверить что у них совпадают ключевые поля шапки.
		|		ТаблицаНазначенийИсточников.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ИЛИ ТаблицаНазначенийИсточников.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)
		|			ИЛИ (ТаблицаНовыхНазначений.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				И ТаблицаНовыхНазначений.Назначение.ТипНазначения В (ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|																	ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
		|				И ТаблицаНазначенийИсточников.Партнер = ТаблицаНовыхНазначений.Партнер
		|				И ТаблицаНазначенийИсточников.Договор = ТаблицаНовыхНазначений.Договор)
		
//-- НЕ УТКА
		|	
		|	) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Назначение,
		|	Набор.НазначениеИсточник,
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад,
		|	Набор.ИсточникПредставление";
		
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ТаблицаИсточниковОбеспеченияПеремещением()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	
		|	Таблица.Склад          КАК СкладПолучатель,
		|	Таблица.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей КАК СкладОтправитель,
		|
		|	1 КАК Уровень
		|ИЗ
		|	ВтСпособыОбеспечения КАК Таблица
		|ГДЕ
		|	Таблица.Склад <> Таблица.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика,
		|	СкладОтправитель, СкладПолучатель";
		
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ВременнаяТаблицаСортировкаСкладов()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	
		|	Таблица.СкладПолучатель  КАК Склад,
		|	Таблица.СкладОтправитель КАК КорневойИсточник,
		|	Таблица.Уровень          КАК Уровень
		|ПОМЕСТИТЬ ВтИерархияСкладов
		|ИЗ
		|	&ТаблицаИерархииСкладов КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Назначение     КАК Назначение,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	МАКСИМУМ(ЕСТЬNULL(ИерархияСкладов.Уровень, 0)
		|		+ ВЫБОР КОГДА ИерархияСкладов.КорневойИсточник = ИерархияСкладовСкладДокумента.КорневойИсточник
		|			И ИерархияСкладов.Уровень <= ИерархияСкладовСкладДокумента.Уровень ТОГДА
		|					1000
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ) КАК ПриоритетСклада
		|ПОМЕСТИТЬ ВтСортировкаСкладов
		|ИЗ
		|	ВтСводнаяРезервыОстатки КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказовОстатки КАК ТаблицаДокумента
		|		ПО ТаблицаДокумента.Назначение     = Таблица.Назначение
		|		 И ТаблицаДокумента.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаДокумента.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИерархияСкладов КАК ИерархияСкладовСкладДокумента
		|		ПО ИерархияСкладовСкладДокумента.Номенклатура   = Таблица.Номенклатура
		|		 И ИерархияСкладовСкладДокумента.Характеристика = Таблица.Характеристика
		|		 И ИерархияСкладовСкладДокумента.Склад          = ТаблицаДокумента.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИерархияСкладов КАК ИерархияСкладов
		|		ПО ИерархияСкладов.Номенклатура   = Таблица.Номенклатура
		|		 И ИерархияСкладов.Характеристика = Таблица.Характеристика
		|		 И ИерархияСкладов.Склад          = Таблица.Склад
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Назначение, Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение, Номенклатура, Характеристика, Склад";
		
	Возврат ТекстЗапроса;
	
КонецФункции
Процедура РассчитатьИерархиюСкладов(ТаблицаИсходная)
	
	ГруппировкиПоТоварам = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ТаблицаИсходная, "Номенклатура, Характеристика", "");
	Для Каждого ГруппировкаСтрока Из ГруппировкиПоТоварам Цикл
		
		Таблица = ГруппировкаСтрока.Таблица;
		Таблица.Индексы.Добавить("СкладПолучатель");
		
		ОбработкаЗавершена = Ложь;
		Пока Не ОбработкаЗавершена Цикл
			
			ОбработкаЗавершена = Истина;
			Для Каждого СтрокаТаблицы Из ГруппировкаСтрока.Таблица Цикл
				
				НайденнаяСтрока = Таблица.Найти(СтрокаТаблицы.СкладОтправитель, "СкладПолучатель");
				Если НайденнаяСтрока <> Неопределено Тогда
					
					ОбработкаЗавершена = Ложь;
					СтрокаТаблицы.Уровень = СтрокаТаблицы.Уровень + НайденнаяСтрока.Уровень;
					СтрокаТаблицы.СкладОтправитель = НайденнаяСтрока.СкладОтправитель;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаИсходная.Очистить();
	Для Каждого ГруппировкаСтрока Из ГруппировкиПоТоварам Цикл
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаИсходная, ГруппировкаСтрока.Таблица);
	КонецЦикла;
	
КонецПроцедуры
//}}20201210 ГлазуновДВ		

&НаСервере
&После("ПартнерПриИзмененииСервер")
Процедура Рин1_ПартнерПриИзмененииСервер()
	
//{{20200625 ГлазуновДВ Задача 1465 Добавили, чтобы при смене Клиента устанавливалось значение доставки "Самовывоз"
	Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("СпособДоставки");
	//ИмяРеквизитаАдресаДоставки = "АдресДоставки";
	//АдресЗначенияПолей = Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"];
	//Объект.АдресДоставки = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресЗначенияПолей);
//}}20200625 ГлазуновДВ Задача 1465

//{{20200803-20200818 ГлазуновДВ добавили для выбора Валюты при подстановке договора
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Если Объект.Договор.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным") Тогда
				Элементы.Валюта.Доступность = Истина;
			КонецЕсли;
		Иначе
			Элементы.Валюта.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
//}}20200803-20200818 ГлазуновДВ

//{{20200831 ГлазуновДВ (Задача № 2363)
	Если ЗначениеЗаполнено(Объект.Договор) И Объект.Договор.Рин1_ВозможнаРеализацияБезПереходаПраваСобственности Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
		ХозяйственнаяОперацияПриИзмененииСервер(Ложь);
	КонецЕсли;
//}}202008031 ГлазуновДВ
	
//{{20201214 ГлазуновДВ добавили для заполнения "ГрафикаОплаты" Задача 3873
	// Вставить содержимое метода.
	ГрафикОплаты = Объект.ГрафикОплаты;
	Если ИспользоватьГрафикиОплаты Тогда
		Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГрафикОплаты");
		Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокРасчетов");
		Если НЕ ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
			Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
			Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение,"ПорядокРасчетов");
		КонецЕсли;
		
		НекорректнаяДатаОплаты = Объект.ЭтапыГрафикаОплаты.Количество() = 0 ИЛИ Объект.ЭтапыГрафикаОплаты.Получить(0).ДатаПлатежа < Объект.Дата;
		
		Если СуммаЗаказано + СуммаЗалогаЗаТару > 0 И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				И Объект.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			ЗаполнитьЭтапыОплатыСервер(
				ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
				ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И (ГрафикОплаты <> Объект.ГрафикОплаты ИЛИ НекорректнаяДатаОплаты));
		Иначе
			Объект.ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
	КонецЕсли;
//}}20201214 ГлазуновДВ
	 //++Шерстюк Ю.Ю. Задача 7625 Менеджер и Подразделение из договора
	 Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		 Объект.Менеджер = Объект.Договор.Менеджер;
		 Объект.Подразделение = Объект.Договор.Подразделение;
	 КонецЕсли;
	 //--Шерстюк Ю.Ю.
КонецПроцедуры

&НаКлиенте
Процедура Рин1_НазначитьРучнуюСкидкуВместо(Команда)

	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru = 'Товары';
		|en = 'Goods'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
	"НазначитьРучнуюСкидкуЗавершение", 
	ЭтотОбъект, 
	Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
	АдресВоВременномХранилище,
	Объект.Валюта,
	Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_НазначитьРучнуюСкидкуВыделенныхСтрокВместо(Команда)

	//Сообщить("Раздел в разработке!");
	//Возврат;
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru = 'Товары';
		|en = 'Goods'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	Оповещение = Новый ОписаниеОповещения(
	"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
	ЭтотОбъект, 
	Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
	АдресВоВременномХранилище,
	Объект.Валюта,
	Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыУпаковкаНачалоВыбораПосле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КоэффициентУпаковкиДоИзмененияСтроки = ПолучитьЧислительУпаковки(Элементы.Товары.ТекущиеДанные.Упаковка); 
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_НазначитьАвтоматическиеСкидкиВместо(Команда)
	
	
	
	
КонецПроцедуры

#Область ОбработкаСтрокиТЧ

/////////////////////////////////////////////////////////
&НаСервере
Процедура ОбработатьСтрокуТЧНаСервере(ИндСтр,СтруктураДействийОбработкиТЧ)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИндСтр);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	//
	ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок * ПолучитьЧислительУпаковки(ТекущаяСтрока.Упаковка);
	
	//0 цена по соглашению+условия продаж
	РассчитатьРеквизитыТЧ_0_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ);
	//1 цена со скидкой+скидки+пересчеты
	РассчитатьРеквизитыТЧ_1_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ);	
	//2 ндс+зависимые реквизиты
	РассчитатьРеквизитыТЧ_2_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ);
	//
	
КонецПроцедуры

/////////////////////////////////////////////////////////

&НаСервере
Процедура РассчитатьРеквизитыТЧ_0_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ)
	
	Попытка
		//обновляем полностью строку - скидки, цены и тд.
		Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0") Тогда
			
			СтруктураДействий = Новый Структура;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_1") Тогда //изменение: упаковки, вид цены 
				
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				
				Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
					
					СтруктураЗаполненияЦены = Неопределено;
					Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_1_1") Тогда
						СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_1_1",СтруктураЗаполненияЦены);
					Иначе 
						СтруктураЗаполненияЦены = СтруктураЗаполненияЦеныВСтрокеТЧСервер(Объект);
					КонецЕсли;
					
					СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
				ИначеЕсли ТекущаяСтрока.Количество > 0 Тогда
					СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
				ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
					СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
				КонецЕсли;
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_2") Тогда //изменение: номенклатуры
				
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
				Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
					СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
					ПрименныеСкидки = ПолучитьОбработатьСкидки(ТекущаяСтрока.Номенклатура);
					ПрименныеСкидки.Свойство("АвтоСкидка",ТекущаяСтрока.ПроцентАвтоматическойСкидки);
					ПрименныеСкидки.Свойство("РучнаяСкидка",ТекущаяСтрока.ПроцентРучнойСкидки);	
				Иначе
					СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦеныВСтрокеТЧСервер(Объект));
				КонецЕсли;
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, ПоДатеОтгрузки", Объект.НалогообложениеНДС, Объект.Дата, Истина));
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
				СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
				СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
				СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
				СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
				СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
				СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
				СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
				
				Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_2_1") Тогда //изменяем обеспечение
					ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
					СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
				КонецЕсли;
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_3") Тогда  //все
				
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
				СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));	
				
			КонецЕсли;
			//**
			Если не СтруктураДействий.Количество() = 0 Тогда
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
			Иначе
				Сообщить("РассчитатьРеквизитыТЧ_0 пустая структура действий!");
			КонецЕсли;
			
		КонецЕсли;
	Исключение
	//описание	
	КонецПопытки;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура РассчитатьРеквизитыТЧ_1_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ)
	
	Если ТекущаяСтрока.Цена = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Попытка
		Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1") Тогда
			//*
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_0") Тогда //общие изменения
				
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой * ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_1") Тогда //изменение цены со скидкой
				
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой * ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_2") Тогда //изменение суммы ручной скидки
				
				ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СуммаРучнойСкидки -  ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;

				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_3") Тогда //изменение % общей скидки
				
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок*ТекущаяСтрока.ПроцентОбщий/100;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки;  
				ТекущаяСтрока.Сумма =  ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СуммаРучнойСкидки - ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;				
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_4") Тогда //изменение суммы общей скидки
				
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки;  
				ТекущаяСтрока.Сумма =  ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СуммаРучнойСкидки - ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;	
								
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_5") Тогда //изменение суммы
				
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма/ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_6") Тогда  //изменение % ручной скидки
							
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок*(ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки)/100;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки;  
				ТекущаяСтрока.Сумма =  ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СуммаРучнойСкидки - ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
				
			КонецЕсли;

		КонецЕсли;
		
	Исключение
	//описание	
	КонецПопытки;
	
КонецПроцедуры //

&НаСервере
Процедура РассчитатьРеквизитыТЧ_2_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ)
	
	Попытка
		Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_2") Тогда
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_2_0") Тогда
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
				
			КонецЕсли;
			
		КонецЕсли;
	Исключение
	//описание	
	КонецПопытки;
	
КонецПроцедуры //

&НаСервере
Функция ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Знач Объект)
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",       ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
	СтруктураЗаполненияЦены.Вставить("Ссылка",     Объект.Ссылка);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервере
Функция ПолучитьОбработатьСкидки(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиЦеновыеГруппы.ЗначениеСкидкиНаценки КАК АвтоСкидка,
	|	СкидкиНаценкиЦеновыеГруппы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_АвтоСкидка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СкидкиНаценкиУсловияПредоставления.Ссылка КАК Скидка
	|	ИЗ
	|		РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|				ПО УсловияПредоставленияСкидокНаценок.Ссылка = СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления
	|			ПО ПартнерыСегмента.Сегмент = УсловияПредоставленияСкидокНаценок.СегментПартнеров
	|	ГДЕ
	|		ПартнерыСегмента.Партнер = &Партнер) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ЦеновыеГруппы КАК СкидкиНаценкиЦеновыеГруппы
	|		ПО ВложенныйЗапрос.Скидка = СкидкиНаценкиЦеновыеГруппы.Ссылка
	|ГДЕ
	|	СкидкиНаценкиЦеновыеГруппы.ЦеноваяГруппа = &ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ПроцентИндивидуальнойСкидкиНаценки КАК РучнаяСкидка,
	|	СоглашенияСКлиентамиЦеновыеГруппы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_РучнаяСкидка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|ГДЕ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа = &ЦеноваяГруппа
	|	И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен = &ВидЦен
	|	И СоглашенияСКлиентамиЦеновыеГруппы.Ссылка = &Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_АвтоСкидка.АвтоСкидка, 0) КАК АвтоСкидка,
	|	ЕСТЬNULL(ВТ_РучнаяСкидка.РучнаяСкидка, 0) КАК РучнаяСкидка
	|ИЗ
	|	ВТ_АвтоСкидка КАК ВТ_АвтоСкидка
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_РучнаяСкидка КАК ВТ_РучнаяСкидка
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_АвтоСкидка.НомерСтроки УБЫВ,
	|	ВТ_РучнаяСкидка.НомерСтроки УБЫВ";
		
	Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	Запрос.УстановитьПараметр("Соглашение", Объект.Соглашение);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", Номенклатура.ЦеноваяГруппа);
	Запрос.УстановитьПараметр("ВидЦен", Объект.Соглашение.ВидЦен);

	РезультатЗапроса = Запрос.Выполнить();
	
	ПрименныеСкидки = Новый Структура;
	
	Если не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить()[0];
		ПрименныеСкидки.Вставить("АвтоСкидка",Результат.АвтоСкидка);
		ПрименныеСкидки.Вставить("РучнаяСкидка",Результат.РучнаяСкидка);	
	КонецЕсли;
	
	Возврат ПрименныеСкидки;

КонецФункции // ПолучитьОбработатьСкидки()

#КонецОбласти

&НаКлиенте
&Вместо("Подключаемый_ОбработатьЗаписьОбъекта")
Процедура Рин1_Подключаемый_ОбработатьЗаписьОбъекта()
	
	//bercut060520 проверим по условиям задачи 182
	
	СтруктураКонтроля = ЕстьОшибкиЗаполнения();
	
	Если СтруктураКонтроля.Отказ Тогда
		ОткрытьФорму("Документ.ЗаказКлиента.Форма.Рин1_ФормаПроверкиЗаполнения",СтруктураКонтроля,ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеЗакрытияФормыПроверкиЗаполнения",ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		//просто показываем
	Иначе	
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);	
		//++Шерстюк Ю.Ю. 21.01.21
		 Рин1_ПриЧтенииНаСервереПосле(Неопределено);
		//--Шерстюк Ю.Ю.
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыПроверкиЗаполнения(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	// Если РезультатЗакрытия = КодВозвратаДиалога.Нет Тогда
	//    Возврат;
	//Иначе 
	//	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	//КонецЕсли;
//{{20200622 ГлазуновДВ Переделали выход из формы
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	Иначе 
	   Возврат;
	КонецЕсли;
//}}20200622 ГлазуновДВ   
		
КонецПроцедуры // ПослеЗакрытияФормыПроверкиЗаполнения()


&НаСервере
&Вместо("ОтразитьИзмененияЭтаповОплаты")
Процедура Рин1_ОтразитьИзмененияЭтаповОплаты(ПараметрыОплаты)
	
	Объект.ЭтапыГрафикаОплаты.Очистить();
	Если Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
		Объект.Согласован = Ложь;
	КонецЕсли;
	Объект.Касса                = ПараметрыОплаты.Касса;
	Объект.БанковскийСчет       = ПараметрыОплаты.БанковскийСчет;
	Объект.ГрафикОплаты         = ПараметрыОплаты.ГрафикОплаты;
	Объект.ЖелаемаяДатаОтгрузки = ПараметрыОплаты.ЖелаемаяДатаОтгрузки;
	Объект.ПорядокОплаты        = ПараметрыОплаты.ПорядокОплаты;
	
	Если Объект.ПорядокРасчетов <> ПараметрыОплаты.ПорядокРасчетов Тогда
		Объект.ПорядокРасчетов = ПараметрыОплаты.ПорядокРасчетов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
		ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
	КонецЕсли;
	
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры


&НаКлиенте
&После("Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер")
Процедура Рин1_Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
		Объект.Согласован = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
&Вместо("СтатусПриИзменении")
Процедура Рин1_СтатусПриИзменении(Элемент)
	
	// + [Rineco], [Киселев А.] [29.07.2021] 
	// Задача: [№13619 ], [#ПроверкаПравНаРедактированиеДатыКлиента] 
	Ринэко_СтатусПриИзменении();
	// - [Rineco], [Киселев А.] [29.07.2021]
	
	//bercut ранее создавалось по задаче
	Если ОтсутствуетДоступКИзменению().ДоступаНет Тогда
		Сообщить("Отсутствует право на изменение статуса. Обратитесь к пользователю с полными правами!");
		Объект.Статус = ПредопределенноеЗначение(ОтсутствуетДоступКИзменению().СсылкаСтатус);
		Возврат;
	КонецЕсли;
	
	Если Объект.Согласован
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
//{{20200619 ГлазуновДВ Добавили блокировку запуска распределения обеспечения по роли "Рин1_ЗаполнитьОбеспечение"
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") И ОтсутствуетДоступКЗаполнитьОбеспечение() Тогда
		Возврат;
	КонецЕсли;
//}}20200619 ГлазуновДВ


	
	СтатусПриИзмененииСервер();
	
КонецПроцедуры


//{{20200619 ГлазуновДВ Добавили блокировку запуска распределения обеспечения по роли "Рин1_ЗаполнитьОбеспечение"
&НаСервере
Функция ОтсутствуетДоступКЗаполнитьОбеспечение()
	
	Если Не РольДоступна("Рин1_ЗаполнитьОбеспечение") Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ОтсутствуетДоступКЗапускуОбеспечения()

&НаСервере
Функция ОтсутствуетДоступКИзменению()
	
	СтруктураВозврата = Новый Структура;
	Если (Объект.Ссылка.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Или Объект.Ссылка.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт) И Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
		Если Не РольДоступна("ПолныеПрава") И Не РольДоступна("Рин1_РедактированиеРеализации") Тогда
			СтруктураВозврата.Вставить("ДоступаНет",Истина);
			СтруктураВозврата.Вставить("СсылкаСтатус",?(Объект.Ссылка.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению,"Перечисление.СтатусыЗаказовКлиентов.КОбеспечению","Перечисление.СтатусыЗаказовКлиентов.Закрыт"));
			Возврат СтруктураВозврата;
		Иначе
			Для Каждого Строка Из Объект.Товары Цикл
				Строка.ДатаКлиента = Дата(1,1,1);
			КонецЦикла;
			СтруктураВозврата.Вставить("ДоступаНет",Ложь);
			Возврат СтруктураВозврата;
		КонецЕсли;
	Иначе 
		СтруктураВозврата.Вставить("ДоступаНет",Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции // ОтсутствуетДоступКИзменению()

//}}20200619 ГлазуновДВ

&НаСервере
&Вместо("ЗаполнитьУстановитьРеквизитыДоставкиСервер")
Процедура Рин1_ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы)
	// Вставить содержимое метода.
//	ПродолжитьВызов(ИмяЭлементаФормы);
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
//{{20200819 ГлазуновДВ
	Объект.ДополнительнаяИнформацияПоДоставке = "";
//}}20200819 ГлазуновДВ

КонецПроцедуры

//{{20200626 ГлазуновДВ Задача 1465 Новые Реквизиты
&НаСервере
&После("ДополнитьИнформациюПоДоставкеКонтактамиСервер")
Процедура Рин1_ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	// Вставить содержимое метода.
//Вставляем в текст Наши два поля по Доставке (Рин1_ОплатаДоставки, Рин1_ВариантДоставки)
	Если СтрНайти(Объект.ДополнительнаяИнформацияПоДоставке, Рин1_ОплатаДоставки) = 0 Тогда
		Если ЗначениеЗаполнено(Объект.ДополнительнаяИнформацияПоДоставке) Тогда
			Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + Символы.ПС;
		КонецЕсли;
		Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + Рин1_ОплатаДоставки;
		Если СтрНайти(Объект.ДополнительнаяИнформацияПоДоставке, Рин1_ВариантДоставки) = 0 Тогда
			Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + Символы.ПС;
			Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + Рин1_ВариантДоставки;
		КонецЕсли;
	КонецЕсли;
//{{20201101 ГлазуновДВ
	Если СтрНайти(Объект.ДополнительнаяИнформацияПоДоставке, "Доставка:") = 0 И ЗначениеЗаполнено(Рин1_ДатаДоставки) Тогда
		Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + Символы.ПС;
		Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + "Доставка: " + Формат(Рин1_ДатаДоставки,"ДФ=dd.MM.yyyy");
	КонецЕсли;
	Если ЗначениеЗаполнено(Рин1_ДатаДоставки) Тогда
		Объект.ОсобыеУсловияПеревозки = Истина;
		Объект.ОсобыеУсловияПеревозкиОписание = "Доставка: " + Формат(Рин1_ДатаДоставки,"ДФ=dd.MM.yyyy");
	КонецЕсли;
//}}20201101 ГлазуновДВ
КонецПроцедуры


&НаСервере
Процедура Рин1_ОплатаДоставкиНаСервере(Представление, ВыбранноеЗначение)
	// Вставить содержимое обработчика.
	Объект.Рин1_ОплатаДоставки = Представление;
	Рин1_ОплатаДоставки = ВыбранноеЗначение;
	Если СтрНайти(Объект.ДополнительнаяИнформацияПоДоставке, Рин1_ОплатаДоставки) = 0 Тогда
		Объект.ДополнительнаяИнформацияПоДоставке = "";
		ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура Рин1_ВариантДоставкиНаСервере(Представление, ВыбранноеЗначение)
	// Вставить содержимое обработчика.
	Объект.Рин1_ВариантДоставки = Представление;
	Рин1_ВариантДоставки = ВыбранноеЗначение;
	Если СтрНайти(Объект.ДополнительнаяИнформацияПоДоставке, Рин1_ВариантДоставки) = 0 Тогда
		Объект.ДополнительнаяИнформацияПоДоставке = "";
		ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_ОплатаДоставкиОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Значение = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Рин1_ОплатаДоставкиНаСервере(Значение.Представление, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_ВариантДоставкиОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Значение = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Рин1_ВариантДоставкиНаСервере(Значение.Представление, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_ОплатаДоставки1ОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Значение = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Рин1_ОплатаДоставкиНаСервере(Значение.Представление, ВыбранноеЗначение);	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_ВариантДоставки1ОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Значение = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Рин1_ВариантДоставкиНаСервере(Значение.Представление, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_ОплатаДоставки2ОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Значение = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Рин1_ОплатаДоставкиНаСервере(Значение.Представление, ВыбранноеЗначение);	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_ВариантДоставки2ОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Значение = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Рин1_ВариантДоставкиНаСервере(Значение.Представление, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
&Вместо("АдресДоставкиОбработкаВыбора")
Процедура Рин1_АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое метода.
	СтандартнаяОбработка = Ложь;
	
	ВыбранноеЗначение.ДополнительнаяИнформацияПоДоставке = "";
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Рин1_ДатаДоставкиПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	Объект.ДополнительнаяИнформацияПоДоставке = "";
	Если Объект.Рин1_ДатаДоставки >= НачалоДня(ТекущаяДата()) Тогда
		Рин1_ДатаДоставки = Объект.Рин1_ДатаДоставки;
	Иначе
		Объект.Рин1_ДатаДоставки = Рин1_ДатаДоставки;
		Рин1_ДатаДоставки = Объект.Рин1_ДатаДоставки;
	КонецЕсли;
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_ДатаДоставкиПриИзмененииПосле(Элемент)
	Рин1_ДатаДоставкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Рин1_Рин1_ДатаДоставки1ПриИзмененииПосле(Элемент)
	Рин1_ДатаДоставкиПриИзмененииНаСервере();
КонецПроцедуры
&НаКлиенте

Процедура Рин1_Рин1_ДатаДоставки2ПриИзмененииПосле(Элемент)
	Рин1_ДатаДоставкиПриИзмененииНаСервере();
КонецПроцедуры
//}}20200626 ГлазуновДВ Задача 1465

//{{20200803 ГлазуновДВ
&НаКлиенте
Процедура Рин1_ВалютаНачалоВыбораПосле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтарыйДоговор = Объект.Договор;
КонецПроцедуры

&НаКлиенте
&После("ВалютаПриИзменении")
Процедура Рин1_ВалютаПриИзменении(Элемент)
	// Вставить содержимое метода.
//20200803 ГлазуновДВ Сохранили старый договор после изменения валюты
	Объект.Договор = СтарыйДоговор;
КонецПроцедуры
//}}20200803 ГлазуновДВ

&НаСервере
&После("КонтрагентПриИзмененииСервер")
Процедура Рин1_КонтрагентПриИзмененииСервер()
	// Вставить содержимое метода.
//{{20200803-20200818 ГлазуновДВ добавили для выбора Валюты при подстановке договора
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Если Объект.Договор.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным") Тогда
				Элементы.Валюта.Доступность = Истина;
			КонецЕсли;
		Иначе
			Элементы.Валюта.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
//}}20200803-20200818 ГлазуновДВ

//{{20200831 ГлазуновДВ (Задача № 2363)
	Если ЗначениеЗаполнено(Объект.Договор) И Объект.Договор.Рин1_ВозможнаРеализацияБезПереходаПраваСобственности Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
		ХозяйственнаяОперацияПриИзмененииСервер(Ложь);
	КонецЕсли;
//}}202008031 ГлазуновДВ
	
//{{20201214 ГлазуновДВ добавили для заполнения "ГрафикаОплаты" Задача 3873
	// Вставить содержимое метода.
	ГрафикОплаты = Объект.ГрафикОплаты;
	Если ИспользоватьГрафикиОплаты Тогда
		Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГрафикОплаты");
		Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокРасчетов");
		Если НЕ ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
			Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
			Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение,"ПорядокРасчетов");
		КонецЕсли;
		
		НекорректнаяДатаОплаты = Объект.ЭтапыГрафикаОплаты.Количество() = 0 ИЛИ Объект.ЭтапыГрафикаОплаты.Получить(0).ДатаПлатежа < Объект.Дата;
		
		Если СуммаЗаказано + СуммаЗалогаЗаТару > 0 И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				И Объект.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			ЗаполнитьЭтапыОплатыСервер(
				ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
				ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И (ГрафикОплаты <> Объект.ГрафикОплаты ИЛИ НекорректнаяДатаОплаты));
		Иначе
			Объект.ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
	КонецЕсли;
//}}20201214 ГлазуновДВ
КонецПроцедуры

//{{20200827 ГлазуновДВ Добавили кнопку выбора договора без отбора по ВАЛЮТЕ.
&НаКлиенте
Процедура Рин1_ДоговорВсеНачалоВыбораВместо(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("ЗакрыватьПриЗакрытииВладельца", Истина));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Партнер", Объект.Партнер));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Соглашение", Объект.Соглашение));
	МассивПараметров.Добавить(Новый ПараметрВыбора("ТекущаяСтрока", Объект.Договор));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	//МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.Валюта));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Объект.ХозяйственнаяОперация));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")));

	МассивПорядокрасчетов = Новый Массив();
	МассивПорядокрасчетов.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
	МассивПорядокрасчетов.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Порядокрасчетов",  Новый ФиксированныйМассив(МассивПорядокрасчетов)));

	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ДоговорВсеОбработкаВыбораВместо(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Объект.Договор = ВыбранноеЗначение;
	ДоговорПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ВалютаОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Элементы.ДоговорВсе.Доступность = Истина;
	//ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВалютаВзаиморасчетов").ВалютаВзаиморасчетов = ВыбранноеЗначение
	Если ПолучитьВалютуДоговора(Объект.Договор) = ВыбранноеЗначение Или Не ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов").ИспользуютсяДоговорыКонтрагентов Тогда
		Элементы.ДоговорВсе.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВалютуДоговора(ДоговорВалюты)
	Если ДоговорВалюты = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() ТОгда
		Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	ДоговорВалютыОбъект = ДоговорВалюты.ПолучитьОбъект();
	Возврат ДоговорВалютыОбъект.ВалютаВзаиморасчетов;
КонецФункции

&НаКлиенте
Процедура Рин1_ДоговорНачалоВыбораПеред(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Документ", Объект.Ссылка));
	МассивПараметров.Добавить(Новый ПараметрВыбора("ТекущаяВалюта", ПолучитьРеквизитВалюта()));
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
КонецПроцедуры

&НаСервере
Функция	ПолучитьРеквизитВалюта()
	 ВалютаДокОбъект = РеквизитФормыВЗначение("Объект").Валюта;
	 Возврат ВалютаДокОбъект;
КонецФункции
//}}20200827 ГлазуновДВ

//{{20200831 ГлазуновДВ (Задача № 2363)
&НаСервере
&Вместо("УстановитьВидимостьОпераций")
Процедура Рин1_УстановитьВидимостьОпераций()
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = ИспользоватьОтгрузкуБезПереходаПраваСобственности;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = Ложь;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		//Исходное ВозможнаРеализацияБезПереходаПраваСобственности = 
		//Исходное	ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ВозможнаРеализацияБезПереходаПраваСобственности");
		//{{20200831 ГлазуновДВ (Задача № 2363)
		ВозможнаРеализацияБезПереходаПраваСобственности = 
			ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Договор, "Рин1_ВозможнаРеализацияБезПереходаПраваСобственности");
		Если Не ВозможнаРеализацияБезПереходаПраваСобственности Тогда
			ВозможнаРеализацияБезПереходаПраваСобственности = 
				ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ВозможнаРеализацияБезПереходаПраваСобственности");
		КонецЕсли;
		//}}20200831 ГлазуновДВ

		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если Элементы.Найти("ХозяйственнаяОперация") <> Неопределено  Тогда
	
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ИспользоватьПередачуТоваровНаХранение Тогда
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(
				Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
			
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЕсли;
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(
			Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);

		Если Не ВозможнаРеализацияБезПереходаПраваСобственности Тогда
			
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;	
								
		Иначе	
			
			Если ЭлементСписка = Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(
					Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
			КонецЕсли;
			
		КонецЕсли;	
			
		Если Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 
			И НЕ ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
			Объект.ХозяйственнаяОперация = Элементы.ХозяйственнаяОперация.СписокВыбора[0].Значение;
			ХозяйственнаяОперацияПриИзмененииСервер(Ложь);
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ХозяйственнаяОперация", "ТолькоПросмотр", 
															Не Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() > 1);
		
	КонецЕсли;

КонецПроцедуры
//}}20200831 ГлазуновДВ

//{{20200924 ГлазуновДВ Добавили Проверку На Новые Строки в ТЧ перед выполнением Команды
&НаКлиенте
&Вместо("ЗаполнитьОбеспечение")
Процедура Рин1_ЗаполнитьОбеспечение(Команда)
	// Вставить содержимое метода.
	
	ЕстьПустыеКодСтроки = Ложь;
	Для Каждого Строка Из Объект.Товары Цикл
		Если Строка.КодСтроки = 0 Тогда
			ЕстьПустыеКодСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьПустыеКодСтроки Тогда
		ТекстВопроса = НСтр("ru = 'Для анализа распределения обеспечения необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьОбеспечениеЗавершение4", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
		ПараметрыПроверки.Поля.Удалить("Подразделение");

		Если ОбеспечениеКлиент.ПроверитьЗаполнение(
			Объект, Объект.Товары, Элементы.Товары.ВыделенныеСтроки, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда

			ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа(ТипЗнч(Объект.Ссылка),
				Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
			ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
				ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьОбеспечениеЗавершение4(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДокументПровели = Истина;
		Попытка
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Исключение
			ДокументПровели = Ложь;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры
//}}20200924 ГлазуновДВ

//{{20201030 ГлазуновДВ
&НаКлиенте
&Вместо("ТоварыОтмененоПриИзменении")
Процедура Рин1_ТоварыОтмененоПриИзменении(Элемент)
	// Вставить содержимое метода.
	//ПродолжитьВызов(Элемент);
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
//Исходное	Если Не ТекущаяСтрока.Отменено Тогда
//{{20201030 ГлазуновДВ
	Если  ТекущаяСтрока.Отменено Тогда
		Если ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно")
			Или  ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно") Тогда
			Сообщить("Обособленные резервы нельзя отменить! Перед отменой необходимо изменить вариант обеспечения данной строки");
			ТекущаяСтрока.Отменено = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
//}}20201030 ГлазуновДВ
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры
//}}20201030 ГлазуновДВ

//++Шерстюк Ю.Ю. 16.04.2021 Задача 7625 менеджер, подразделение по договору
&НаКлиенте
Процедура Рин1_ДоговорПриИзмененииПосле(Элемент)
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
КонецПроцедуры
//--Шерстюк Ю.Ю.

&НаКлиенте
&После("Подключаемый_ВыполнитьКоманду")
Процедура Рин1_Подключаемый_ВыполнитьКоманду(Команда)
	//++Шерстюк Ю.Ю. 06.05.2021 Задача 8175 если форму модифицировали, а потом создали на основании новый документ, в котором попытаются изменить заказа клиента
	//нужно Разблокировать документ, т.к. док.блокируется для текущего пользователя, в случае изменения на форме и разблокируется только тогда, когда
	//форма будет закрыта, а при перечитать, блокировка снимается
	ЭтотОбъект.Прочитать();
	ЭтаФорма.РазблокироватьДанныеФормыДляРедактирования();
	//ПриЧтенииНаСервере(ТекущийОбъект);
	//--Шерстюк Ю.Ю.
КонецПроцедуры



 



&НаСервере
&Вместо("ПодготовитьДанныеДляОбеспеченияЗаказа")
Функция Рин1_ПодготовитьДанныеДляОбеспеченияЗаказа()
	РеквизитыЗаказа = Новый Структура("ЖелаемаяДатаОтгрузки, Ссылка, НеОтгружатьЧастями, Статус, Дата, Партнер, Менеджер");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);

	// Описание особенностей формы - дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(Объект.Товары, Объект, ПутиКДанным);
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ИмяМенеджераРегистра",
		Объект.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован, "ЗаказыКлиентов");

	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;

	// + [Rineco], [Киселев А.Н.] [09.08.2021] 
	// Задача: [№ 13539], [#Подменяем дату отгрузки]	
	Если Объект.Рин1_ОбеспечиватьКакМожноРаньше Тогда	
		ПараметрыФормы.РеквизитыЗаказа.ЖелаемаяДатаОтгрузки = ПараметрыФормы.РеквизитыЗаказа.Дата;
	КонецЕсли;
	// - [Rineco], [Киселев А.Н.] [09.08.2021]
	
	
	Возврат ПараметрыФормы;

КонецФункции


#Область Задача_13619
&НаСервере
Процедура Ринэко_ПроверкаРоли()
	
	Если Рин1_ОбщийМодуль2.РольДоступнаСервер("ИзменениеДатыКлиента_Ринэко") И Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТоварыДатаКлиента","ТолькоПросмотр",Ложь);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТоварыДатаКлиента","ТолькоПросмотр",Истина);
	КонецЕсли;

	Если Параметры.Ключ.Пустая() Тогда
		Объект.Рин1_ОбеспечиватьКакМожноРаньше = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Ринэко_СтатусПриИзменении()
	
	Если ПредыдущееЗначениеСтатуса = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда 
		СтатусИзменилсяКВыполнению = Истина;
		РИНЭКО_СтатусИзменилсяКВыполнению = Истина;
	КонецЕсли;
	
	Если Рин1_ОбщийМодуль2.РольДоступнаСервер("ИзменениеДатыКлиента_Ринэко") И Объект.Статус = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТоварыДатаКлиента","ТолькоПросмотр",Ложь);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТоварыДатаКлиента","ТолькоПросмотр",Истина);
	КонецЕсли;

КонецПроцедуры


// + [Rineco], [Киселев А.] [30.07.2021] 
// Задача: [№ 13619], [#Отслеживание изменения статуса]

&НаКлиенте
&После("СтатусНачалоВыбора")
Процедура Рин1_СтатусНачалоВыбораПосле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РИНЭКО_ПредыдущееЗначениеСтатуса(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РИНЭКО_ПредыдущееЗначениеСтатуса(Знач Элемент)
	
	Если Элемент.ВыделенныйТекст = "На согласовании" Тогда
		ПредыдущееЗначениеСтатуса = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусыЗаказовКлиентов.НеСогласован");
	ИначеЕсли Элемент.ВыделенныйТекст = "К выполнению" Тогда
		ПредыдущееЗначениеСтатуса = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению");	
	ИначеЕсли Элемент.ВыделенныйТекст = "Закрыт" Тогда
		ПредыдущееЗначениеСтатуса = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусыЗаказовКлиентов.Закрыт");
	КонецЕсли;

КонецПроцедуры


// - [Rineco], [Киселев А.] [30.07.2021]

&НаКлиенте
Процедура РИНЭКО_КонтрольЖелаемойДаты(Знач ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЕстьБольшаяДата") ИЛИ ПараметрыЗаписи.Свойство("ДатаДольшеДвухЛет") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПредупреждения",ЭтаФорма);
		
		Если ПараметрыЗаписи.Свойство("ДатаДольшеДвухЛет") И ЗначениеЗаполнено(ПараметрыЗаписи.ДатаДольшеДвухЛет) Тогда
			Сообщить(ПараметрыЗаписи.ДатаДольшеДвухЛет);
		КонецЕсли;
		
		Если ПараметрыЗаписи.Свойство("ЕстьБольшаяДата") И ЗначениеЗаполнено(ПараметрыЗаписи.ЕстьБольшаяДата) Тогда
			Сообщить(ПараметрыЗаписи.ЕстьБольшаяДата);
		КонецЕсли;
		
		ПоказатьПредупреждение(Оповещение,"Присутствуют ошибки запонения см. Сообщения");
	
	КонецЕсли;
	СтатусИзменилсяКВыполнению = Ложь;
	РИНЭКО_СтатусИзменилсяКВыполнению = Ложь;
	РИНЭКО_ИзменилсяВариантОбеспечения = Ложь;
КонецПроцедуры

// + [Rineco], [Киселев А.] [29.07.2021] 
// Задача: [№ 13619], [#ИщемМаксимальную дату клиент]

&НаСервере
Функция ПолучитьМаксимальнуюДатуКлиента()
	
	ТаблицаДляМаксимальнойДаты  = Объект.Товары.Выгрузить();
	ПромежуточнаяТаблица = ТаблицаДляМаксимальнойДаты.СкопироватьКолонки();
	
	Для Каждого ЭлементТаблицы Из ТаблицаДляМаксимальнойДаты Цикл 
		Если ЭлементТаблицы.ДатаКлиента <> Дата("09.09.3999 00:00:00") Тогда
			НоваяСтрока = ПромежуточнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если ПромежуточнаяТаблица.Количество() = 0 Тогда
		Возврат Дата(1,1,1);	
	КонецЕсли;
	Альфа = Новый СравнениеЗначений;
	ПромежуточнаяТаблица.Сортировать("ДатаКлиента Убыв", Альфа);
	Возврат ПромежуточнаяТаблица[0].ДатаКлиента;	
	
КонецФункции

// - [Rineco], [Киселев А.] [29.07.2021]

// + [Rineco], [Киселев А.] [29.07.2021] 
// Задача: [№ 13619], [#Пересчитываем графики оплаты]
&НаСервере
Процедура ПересчитатьГрафикОплаты()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	//Объект.ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
	Если ИспользоватьГрафикиОплаты Тогда
		//ГрафикОплаты = Объект.Договор.ГрафикОплаты;
		Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГрафикОплаты");
		Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокРасчетов");
		Если НЕ ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
			Объект.ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
			Объект.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение,"ПорядокРасчетов");
		КонецЕсли;
		
		НекорректнаяДатаОплаты = Объект.ЭтапыГрафикаОплаты.Количество() = 0 ИЛИ Объект.ЭтапыГрафикаОплаты.Получить(0).ДатаПлатежа < Объект.Дата ИЛИ Объект.ЭтапыГрафикаОплаты.Получить(0).ДатаПлатежа < Объект.ЖелаемаяДатаОтгрузки;
		
		Если СуммаЗаказано + СуммаЗалогаЗаТару > 0 И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И Объект.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			ЗаполнитьЭтапыОплатыСервер(
			ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
			ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И (ГрафикОплаты <> Объект.ГрафикОплаты ИЛИ НекорректнаяДатаОплаты));
		Иначе
			Объект.ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры
// - [Rineco], [Киселев А.] [29.07.2021]

&НаКлиенте
Процедура РИНЭКО_ЗаполнениеЖелаемойДатыОтгрузки(ПараметрыЗаписи)
	
	Перем ДатаБольшеДвухЛет, ДатаДляСравнения, МаксимальнаяДатаКлиента, Массив, МассивСтрок, ПервыйЭлемент, ТекстСообщения, ЭлементМассива, ЭлементТаблицы;
	
	Если СтатусИзменилсяКВыполнению Тогда
		
		МассивСтрок = Новый Массив;
		ДатаБольшеДвухЛет = Ложь;
		ДатаДляСравнения = ДобавитьМесяц(ТекущаяДата(),24);
		Для Каждого ЭлементТаблицы Из Объект.Товары Цикл 
			Если ЭлементТаблицы.ДатаКлиента = Дата("09.09.3999 00:00:00") Тогда
				МассивСтрок.Добавить(ЭлементТаблицы.НомерСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
		
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			ТекстСообщения = "Требуется указать Дату клиента в строках № "; 
			ПервыйЭлемент = Истина;
			Для Каждого ЭлементМассива Из МассивСтрок Цикл
				Если ПервыйЭлемент Тогда
					ТекстСообщения = ТекстСообщения + ЭлементМассива;	
				Иначе 
					ТекстСообщения = ТекстСообщения + " ," + ЭлементМассива;
				КонецЕсли;
				
				ПервыйЭлемент = Ложь;
			КонецЦикла;			
			ПараметрыЗаписи.Вставить("ЕстьБольшаяДата",ТекстСообщения);		
		КонецЕсли;
		
		МаксимальнаяДатаКлиента = ПолучитьМаксимальнуюДатуКлиента();
		Если ЗначениеЗаполнено(МаксимальнаяДатаКлиента) Тогда
			Объект.ЖелаемаяДатаОтгрузки = МаксимальнаяДатаКлиента;			
		КонецЕсли;
		
		Если Объект.ЖелаемаяДатаОтгрузки >= ДатаДляСравнения Тогда
			ДатаБольшеДвухЛет = Истина;
		КонецЕсли;
		
		Если ДатаБольшеДвухЛет Тогда
			ПараметрыЗаписи.Вставить("ДатаДольшеДвухЛет","Желаемая дата отгрузки не может быть больше 2 лет с текущей даты");
		КонецЕсли;
		
			ПересчитатьГрафикОплаты();			
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПослеПредупреждения(Результат) Экспорт 
КонецПроцедуры



// - [Rineco], [Киселев А.Н.] [12.08.2021]


#КонецОбласти


#Область Задача1385

// + [Rineco], [Киселев А.Н.] [17.09.2021] 
// Задача: [№ 1385], [#Пересчитать реквизит ЦенаСоСкидкой после редактирования набора]
&НаСервере
&Вместо("ПриОкончанииРедактированияНабора")
Процедура Рин1_ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;	
	
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	// Склад будет вставлен позже
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("ПараметрыУказанияСерий", ПараметрыУказанияСерий));
	// + [Rineco], [Киселев А.Н.] [17.09.2021] 
	// Задача: [№ 1385], [#Структура действий для пересчета набора]
	СтруктураДействийСИзмененнымиСтроками.Вставить("РИНЭКО_ПересчитатьЦенуСоСкидкой");
	// - [Rineco], [Киселев А.Н.] [17.09.2021]
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
		
	// + [Rineco], [Киселев А.Н.] [17.09.2021] 
	// Задача: [№ 1385], [#Структура действий для пересчета набора]
	СтруктураДействийСДобавленнымиСтроками.Вставить("РИНЭКО_ПересчитатьЦенуСоСкидкой");
	// - [Rineco], [Киселев А.Н.] [17.09.2021]

	
		
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтаФорма, "Товары", ПараметрыДанных);
		
	
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.Товары);
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

&НаСервере
&Вместо("ЗаполнитьДоговорПоУмолчанию")
Процедура Рин1_ЗаполнитьДоговорПоУмолчанию()
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
		И ИспользоватьНаправленияДеятельности	Тогда
	
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта, 
															Объект.НаправлениеДеятельности);
	Иначе
															
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта);
	КонецЕсли;													
															
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ЗаполнитьГруппуФинУчета();
		ОбновитьФорму = Ложь;
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
		Если ОбновитьФорму Тогда
			УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		КонецЕсли;
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
		ЗаполнитьПорядокОплатыПоУмолчанию();
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
	// + [Rineco], [Киселев А.Н.] [09.09.2021] 
	// Задача: [№ 17177], [#Менеджер по договору по умолчанию]
	Если ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Договор.Менеджер) Тогда
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Договор,"Менеджер");
	КонецЕсли;
	// - [Rineco], [Киселев А.Н.] [09.09.2021]

КонецПроцедуры
