Процедура ВыполнитьЗапрос() Экспорт 
	//пЕдИзмДлиныМетр =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("006");
	//пЕдИзмВесаКг = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("166");
	//пЕдИзмОбъемаМетр = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("113");
	//
	//пЕдИзмДлиныДм =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("005");
	//пЕдИзмОбъемаДм = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("112");

	//пЕдИзмДлиныСм =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("004");
	//пЕдИзмОбъемаСм = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("111");

	//	
	СтруктураПараметровПодключения = ПолучитьПараметрыПодключенияPOST();
	ТипТокена_Токен = СтруктураПараметровПодключения.tokenType + " " + СтруктураПараметровПодключения.token; 
	
	пФлагВсеПрочитано = Ложь;
	Страница = 1;
		Пока Не пФлагВсеПрочитано Цикл
			Если ЗначениеЗаполнено(Номенклатура) Тогда 
				Ресурс = "api/v1/products/features/?manufacturerCode=" + Номенклатура.Артикул;
				пФлагВсеПрочитано = Истина;
			Иначе
				Ресурс = "api/v1/products/features/?page=" + Страница + "&perPage=1000";
			КонецЕсли;

			РезультатЗапросаДанных = ВыполнитьЗапросGet(ТипТокена_Токен,Ресурс);
			
			Если РезультатЗапросаДанных.КодСостояния = 200 Тогда
				ПутьКФайлу = РезультатЗапросаДанных.ИмяФайлаОтвета;
				//прочитаем json
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
				пОтвет = ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Закрыть();
				тзВГХ = пОтвет.items;
				Если тзВГХ.Количество() = 0 Тогда
					пФлагВсеПрочитано = Истина;
				КонецЕсли;
				Для Каждого Стр из тзВГХ Цикл
					НоваяСтрока = Результат.Добавить();
					НоваяСтрока.Артикул = Стр.productManufacturerCode;
					НоваяСтрока.КлассAPI = Стр.featureSet.category.sourceId;
					НоваяСтрока.СвойствоAPI = Стр.featureSet.feature.sourceId;
					Попытка
						Если ТипЗнч(Стр.value) = Тип("Структура") Тогда 
							Если Стр.featureSet.feature.type.name = "R" Тогда //Диапазон
								НоваяСтрока.Значение_R_API = Стр.value.min;
								НоваяСтрока.ЗначениеR1_API = Стр.value.max;
								НоваяСтрока.Value_RZ = Строка(Стр.value.min) + "-" + Строка(Стр.value.max) ;
							Иначе	
								НоваяСтрока.ЗначениеAPI = Стр.value.sourceId;
							КонецЕсли;
						Иначе	
							НоваяСтрока.ЗначениеAPI = Стр.value;
						КонецЕсли;
					Исключение
						 Сообщить("По " + НоваяСтрока.Артикул + " не задано значение свойства " + НоваяСтрока.СвойствоAPI + " класса " + НоваяСтрока.КлассAPI);
					КонецПопытки;
					
				КонецЦикла;
				Страница = Страница + 1; 
				пРезультат = СопоставитьНоменклатуру(ЭтотОбъект.Результат.Выгрузить());
				ЭтотОбъект.Результат.Загрузить(пРезультат);
				ЗаписатьETIM();
			Иначе 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
КонецПроцедуры
	
Функция  СопоставитьНоменклатуру(Таблица) Экспорт 
	
	пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	Таблица.КлассAPI КАК КлассAPI,
|	Таблица.СвойствоAPI КАК СвойствоAPI,
|	Таблица.Артикул КАК Артикул,
|	Таблица.ЗначениеAPI КАК ЗначениеAPI,
|	Таблица.ЗначениеR1_API КАК ЗначениеR1_API,
|	Таблица.Значение_R_API КАК Значение_R_API,
|	Таблица.Value_RZ КАК Value_RZ
|ПОМЕСТИТЬ ТаблицаAPI
|ИЗ
|	&Таблица КАК Таблица
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	Номенклатура.Ссылка КАК Номенклатура
|ПОМЕСТИТЬ СправочникНоменклатура
|ИЗ
|	Справочник.Номенклатура КАК Номенклатура
|ГДЕ
|	Номенклатура.Производитель = &Производитель
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	СопоставленнаяНоменклатура.Номенклатура КАК Номенклатура,
|	Рин1_ГруппыКлассыETIM.Ссылка КАК КлассСсылка,
|	ТаблицаAPI.Артикул КАК Артикул,
|	Рин1_ГруппыКлассыETIM.ПредставлениеГруппыКласса КАК КлассПредставление,
|	ТаблицаAPI.КлассAPI КАК КлассAPI,
|	ТаблицаAPI.СвойствоAPI КАК СвойствоAPI,
|	Рин1_ГруппыКлассыETIM.Родитель.ПредставлениеГруппыКласса КАК ГруппаПредставление,
|	ТаблицаAPI.ЗначениеAPI КАК ЗначениеAPI,
|	ТаблицаAPI.ЗначениеR1_API КАК ЗначениеR1_API,
|	ТаблицаAPI.Значение_R_API КАК Значение_R_API,
|	ТаблицаAPI.Value_RZ КАК Value_RZ
|ПОМЕСТИТЬ НоменклатураКлассETIM
|ИЗ
|	ТаблицаAPI КАК ТаблицаAPI
|		ЛЕВОЕ СОЕДИНЕНИЕ СправочникНоменклатура КАК СопоставленнаяНоменклатура
|		ПО (ПОДСТРОКА(ТаблицаAPI.Артикул, 1, 100) = ПОДСТРОКА(СопоставленнаяНоменклатура.Номенклатура.Артикул, 1, 100))
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Рин1_ГруппыКлассыETIM КАК Рин1_ГруппыКлассыETIM
|		ПО (ПОДСТРОКА(ТаблицаAPI.КлассAPI, 1, 100) = ПОДСТРОКА(Рин1_ГруппыКлассыETIM.Наименование, 1, 100))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	НоменклатураКлассETIM.Номенклатура КАК Номенклатура,
|	НоменклатураКлассETIM.КлассПредставление КАК КлассПредставление,
|	НоменклатураКлассETIM.КлассAPI КАК КлассAPI,
|	НоменклатураКлассETIM.СвойствоAPI КАК СвойствоAPI,
|	Рин1_СвойстваКлассаETIM.Ссылка КАК Свойство,
|	Рин1_СвойстваКлассаETIM.ПредставлениеСвойства КАК СвойствоПредставление,
|	НоменклатураКлассETIM.ГруппаПредставление КАК ГруппаПредставление,
|	ВЫБОР
|		КОГДА Рин1_СвойстваКлассаETIM.ТИП = ЗНАЧЕНИЕ(Перечисление.Рин1_ТипСвойства.A)
|			ТОГДА НоменклатураКлассETIM.ЗначениеAPI
|		ИНАЧЕ """"
|	КОНЕЦ КАК Value_A,
|	ВЫБОР
|		КОГДА Рин1_СвойстваКлассаETIM.ТИП = ЗНАЧЕНИЕ(Перечисление.Рин1_ТипСвойства.N)
|			ТОГДА НоменклатураКлассETIM.ЗначениеAPI
|		ИНАЧЕ """"
|	КОНЕЦ КАК Value_N,
|	ВЫБОР
|		КОГДА Рин1_СвойстваКлассаETIM.ТИП = ЗНАЧЕНИЕ(Перечисление.Рин1_ТипСвойства.L)
|			ТОГДА НоменклатураКлассETIM.ЗначениеAPI
|		ИНАЧЕ """"
|	КОНЕЦ КАК Value_L,
|	ВЫБОР
|		КОГДА Рин1_СвойстваКлассаETIM.ТИП = ЗНАЧЕНИЕ(Перечисление.Рин1_ТипСвойства.R)
|			ТОГДА НоменклатураКлассETIM.Значение_R_API
|		ИНАЧЕ 0
|	КОНЕЦ КАК Value_R,
|	ВЫБОР
|		КОГДА Рин1_СвойстваКлассаETIM.ТИП = ЗНАЧЕНИЕ(Перечисление.Рин1_ТипСвойства.R)
|			ТОГДА НоменклатураКлассETIM.ЗначениеR1_API
|		ИНАЧЕ 0
|	КОНЕЦ КАК Value_R1,
|	НоменклатураКлассETIM.Value_RZ КАК Value_RZ
|ПОМЕСТИТЬ СвойстваETIM
|ИЗ
|	НоменклатураКлассETIM КАК НоменклатураКлассETIM
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Рин1_СвойстваКлассаETIM КАК Рин1_СвойстваКлассаETIM
|		ПО (Рин1_СвойстваКлассаETIM.Владелец = НоменклатураКлассETIM.КлассСсылка)
|			И (ПОДСТРОКА(НоменклатураКлассETIM.СвойствоAPI, 1, 100) = ПОДСТРОКА(Рин1_СвойстваКлассаETIM.Наименование, 1, 100))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	СвойстваETIM.Номенклатура КАК Номенклатура,
|	СвойстваETIM.КлассПредставление КАК КлассПредставление,
|	СвойстваETIM.КлассAPI КАК КлассAPI,
|	СвойстваETIM.СвойствоAPI КАК СвойствоAPI,
|	СвойстваETIM.Свойство КАК Свойство,
|	СвойстваETIM.СвойствоПредставление КАК СвойствоПредставление,
|	СвойстваETIM.ГруппаПредставление КАК ГруппаПредставление,
|	Рин1_СвойстваКлассаETIMValue.ПредставлениеЗначения КАК Value_A,
|	СвойстваETIM.Value_N КАК Value_N,
|	СвойстваETIM.Value_L КАК Value_L,
|	СвойстваETIM.Value_R КАК Value_R,
|	СвойстваETIM.Value_R1 КАК Value_R1,
|	СвойстваETIM.Value_RZ КАК Value_RZ
|ИЗ
|	СвойстваETIM КАК СвойстваETIM
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Рин1_СвойстваКлассаETIM.Value КАК Рин1_СвойстваКлассаETIMValue
|		ПО (СвойстваETIM.Свойство = Рин1_СвойстваКлассаETIMValue.Ссылка
|				И СвойстваETIM.Value_A = Рин1_СвойстваКлассаETIMValue.Value_A)
|ГДЕ
|	(СвойстваETIM.Value_A <> """"
|			ИЛИ СвойстваETIM.Value_N <> """"
|			ИЛИ СвойстваETIM.Value_L <> """"
|			ИЛИ СвойстваETIM.Value_RZ <> """")
|	И ЕСТЬNULL(СвойстваETIM.Номенклатура, 0) <> 0");
	
	пЗапрос.УстановитьПараметр("Таблица",Таблица);
	пЗапрос.УстановитьПараметр("Производитель",ЭтотОбъект.Производитель);

	Возврат пЗапрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПолучитьДШВ(пСтрокаГабаритов)
	пСтруктураДШВ = Новый Структура;
	
	пПервыйРазделитель = СтрНайти(пСтрокаГабаритов,"*",,1);
	пВторойРазделитель = СтрНайти(пСтрокаГабаритов,"*",,пПервыйРазделитель+1);
	пДлинаСтроки = СтрДлина(пСтрокаГабаритов);
	пСтрокаГабаритов = СтрЗаменить(пСтрокаГабаритов,".",",");
	Если пПервыйРазделитель = 0 Тогда 
		пСтруктураДШВ.Вставить("Длина",0);
		пСтруктураДШВ.Вставить("Ширина",0);
		пСтруктураДШВ.Вставить("Высота",0);
	ИначеЕсли пВторойРазделитель = 0 Тогда 
		пВторойРазделитель = пДлинаСтроки + 1;
		пСтруктураДШВ.Вставить("Длина",Число(Лев(пСтрокаГабаритов, пПервыйРазделитель-1)));
		пСтруктураДШВ.Вставить("Ширина",Число(Сред(пСтрокаГабаритов, пПервыйРазделитель+1,пВторойРазделитель-пПервыйРазделитель-1)));
        пСтруктураДШВ.Вставить("Высота",0);
	Иначе 
		пСтруктураДШВ.Вставить("Длина",Число(Лев(пСтрокаГабаритов, пПервыйРазделитель-1)));
		пСтруктураДШВ.Вставить("Ширина",Число(Сред(пСтрокаГабаритов, пПервыйРазделитель+1,пВторойРазделитель-пПервыйРазделитель-1)));
		пСтруктураДШВ.Вставить("Высота",Число(Прав(пСтрокаГабаритов, пДлинаСтроки-пВторойРазделитель)));
	КонецЕсли;

	Возврат пСтруктураДШВ;
КонецФункции


Процедура ЗаписатьETIM()  Экспорт
	пТаблица = ЭтотОбъект.Результат;
	
	Для Каждого Стр из пТаблица Цикл
		Если Не ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Стр.Номенклатура.КлассETIM) Тогда 
			пОбъектНоменклатура = Стр.Номенклатура.ПолучитьОбъект();
			пОбъектНоменклатура.КлассETIM = Стр.Свойство.Владелец;
			пОбъектНоменклатура.Записать();
		КонецЕсли;
			Запись = РегистрыСведений.Рин1_ЗначенияСвойствНоменклатуры.СоздатьМенеджерЗаписи();
			Запись.Номенклатура = Стр.Номенклатура;
			Запись.Свойство = Стр.Свойство;
			Запись.Прочитать();  
			ЗаполнитьЗначенияСвойств(Запись,Стр);
            Запись.Записать();
			
		//КонецЕсли;
	КонецЦикла;
	ЭтотОбъект.Результат.Очистить();
КонецПроцедуры
	
	
Функция ВыполнитьЗапросGet(ТипТокена_Токен, Ресурс) 
	
	
//api дает взять максимум 1000 записей
	РезультатЗапросаДанных = Новый Структура;
	
	Сервер = "abb-api.ru";
	//Ресурс = "api/v1/products/?page=" + НомерСтраницы + "&perPage=1000";
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,,ssl1);
	//HTTP =  Новый HTTPСоединение(Сервер);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".xml");
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
		
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json"); 
	ЗаголовокHTTP.Вставить("Authorization", ТипТокена_Токен);
	
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс,ЗаголовокHTTP);
	
	РезультатЗапроса = HTTP.Получить(HTTPЗапрос,ИмяФайлаОтвета);
	//
	ТекстовыйФайл.Прочитать(ИмяФайлаОтвета, КодировкаТекста.UTF8);
	
	ТекстОтвета = ТекстовыйФайл.ПолучитьТекст();
    //ОбщегоНазначения.СообщитьПользователю(ТекстОтвета);
	РезультатЗапросаДанных.Вставить("КодСостояния",РезультатЗапроса.КодСостояния);
	РезультатЗапросаДанных.Вставить("ИмяФайлаОтвета",ИмяФайлаОтвета);
	
	Возврат РезультатЗапросаДанных;

	
КонецФункции	
Функция ПолучитьПараметрыПодключенияPOST() 
	
	Сервер = "abb-api.ru";
	Ресурс = "api/v1/users/authenticate";
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,,ssl1);

//	HTTP =  Новый HTTPСоединение(Сервер);
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла(".xml");
	ФайлРезультата = ПолучитьИмяВременногоФайла(".xml");
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	
	//создадим запись json
	Структура = Новый Структура;
	Структура.Вставить("email","i.cherevach@rineco.ru");
	Структура.Вставить("password","FRsMPJ02xl6l71Ps2Egs3hhlSvQ3SNt03x3NP0qm");
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса,,,Новый ПараметрыЗаписиJSON(,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON,Структура);
	ЗаписьJSON.Закрыть();	
	//
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json"); 
		
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс,ЗаголовокHTTP);
	HTTPЗапрос.УстановитьИмяФайлаТела(ФайлЗапроса);
	
	HTTP.ОтправитьДляОбработки(HTTPЗапрос,ФайлРезультата);
	
	//прочитаем json
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ФайлРезультата);
	ПараметрыПодключения = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
		
	//пример = токен дается на 10 часов
	//{"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImkuY2hlcmV2YWNoQHJpbmVjby
	//5ydSIsImlhdCI6MTU5NDcwODQyMiwiZXhwIjoxNTk0NzQ0NDIyfQ.FgXK8Ds1j_I1AoFWRl9rEsxPWDM7GRMG2z34tZJ2jR0","tokenType":"Bearer"}
				
	// Обнулим запрос, чтобы освободить чтение ИмяФайлаЗапроса!
	HTTPЗапрос = Неопределено;
	
	Попытка
		УдалитьФайлы(ФайлЗапроса);
		УдалитьФайлы(ФайлРезультата);
	Исключение
		ЗаписьЖурналаРегистрации("ФоновыеЗадания.РегламентноеЗаданиеAPI_ABB_stockall", УровеньЖурналаРегистрации.Информация, , , ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
		
	Возврат ПараметрыПодключения;
		
КонецФункции	


Функция УдалитьЛишниеСимволы(пСтрока)
	
	КоличествоСимволов = СтрДлина(пСтрока);
	пПозиция = 1;
	
	Пока пПозиция <= КоличествоСимволов Цикл
		пКодСимвола = КодСимвола(пСтрока,пПозиция);
		пПозиция = пПозиция + 1;
		Если (пКодСимвола >= 48 и пКодСимвола <= 57) или пКодСимвола = 46 или пКодСимвола = 44 Тогда 
			Продолжить;
		Иначе
			пСтрока = СтрЗаменить(пСтрока,Символ(пКодСимвола),"");
		КонецЕсли;
	КонецЦикла;
	
	Возврат пСтрока;
КонецФункции

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - Текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - Наименование реквизита формы.
//  ПутьКДанным                - Строка - Путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//  ИдентификаторНазначения    - УникальныйИдентификатор - Позволяет точно указать,
//                               к какой форме должно быть "привязано" сообщение.
//  ЭтоОбъект                  - Булево - Устанавливает на основе переданного объекта свойства ПутьКДанным и КлючДанных.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",		
	Отказ = Ложь,
	Знач ИдентификаторНазначения = "",
	Знач ЭтоОбъект = Ложь)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст		  = ТекстСообщенияПользователю;
	Сообщение.Поле		  = Поле;
	Сообщение.ПутьКДанным = ПутьКДанным;	
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторНазначения) = Тип("УникальныйИдентификатор") Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

