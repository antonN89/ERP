&НаКлиенте
Перем ЗакрытиеРазрешено;

&НаСервере
Процедура СформироватьНаСервере(ПризнакФормирования)
	
	Если ПризнакФормирования = "Формирование" Тогда
		
		ТаблицаДанныхРезультата.Очистить();	
		ТаблицаИзменныхДанныхДляЗаписи.Очистить();
		
		СхемаКомпоновкиДанныхДляТаблицы = Отчеты.ГИГ_АрмМатрицаЦенообразования.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		Запрос = Новый Запрос;
		Запрос.Текст = СхемаКомпоновкиДанныхДляТаблицы.НаборыДанных.НаборДанных1.Запрос;
		Запрос.УстановитьПараметр("ДатаОкончания",ТекущаяДата());
		Запрос.УстановитьПараметр("ПометкаУдаления",Истина);
		Запрос.УстановитьПараметр("ЭтоГруппа",Ложь);
		
		ДанныеРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ТаблицаДанныхРезультата.Загрузить(ДанныеРезультата);
	иначе
		ДанныеРезультата = ТаблицаДанныхРезультата.Выгрузить();
	КонецЕсли;
	
	
	Результат.Очистить();
	
	НДанныеРасшифровки = Неопределено;
	
	СхемаКомпоновкиДанных = Отчеты.ГИГ_АрмМатрицаЦенообразования.ПолучитьМакет("РабочаяСКД");
	
	НаборыДанных = Новый Структура;
	НаборыДанных.Вставить("ТаблицаДанныхРезультатЗапроса",ДанныеРезультата);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//bercut291019 если в отборе равно то ошибка - Неоднозначное выражение для расчета ресурса "Значение показателя"
	Для каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ЦеноваяГруппа")).Поле Тогда
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Отчет.КомпоновщикНастроек.Настройки, НДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,НаборыДанных,НДанныеРасшифровки);
	
 	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(НДанныеРасшифровки,ЭтаФорма.УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВсеЗначенияРасшифровки(Данные)
	ЗначенияРШФ = Новый Структура;
	Попытка
		ЗначенияПолейРШФ = Данные.ПолучитьПоля();
		Для Каждого ТекущееПоле из ЗначенияПолейРШФ Цикл 
			ЗначенияРШФ.Вставить(ТекущееПоле.Поле,ТекущееПоле.Значение);
		КонецЦикла; 
	Исключение
		// движения не по полям документа...
	КонецПопытки;
	Возврат ЗначенияРШФ; 
КонецФункции

&НаСервере
Функция ПолучитьВсеЗначенияРасшифровкиЯчейки(Расшифровка)
	
	ЗначенияРасшифровки = Новый Структура("ЦеноваяГруппа,ИерархияЦеновойГруппы,Производитель,Порог_Скидка,ЗначениеПоказателя");
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ПоляРасшифровки = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля();
	Для Каждого ПолеРасш из ПоляРасшифровки цикл
		ЗначенияРасшифровки.Вставить(""+ПолеРасш.Поле,ПолеРасш.Значение);		
	КонецЦикла;
	
	Возврат ЗначенияРасшифровки; 
	
КонецФункции

&НаСервере
Функция ПолучитьЗначенияГруппировокОтчета(Знач ДанныеРасшифровки, Расшифровка, ПолеРасшифровки, ЗначенияГруппировок, СКД)
	
	ОбработккаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	РезультатРасшифровки = ОбработккаРасшифровки.Расшифровать(Расшифровка, Новый ПолеКомпоновкиДанных(ПолеРасшифровки));
	
	Для Каждого ТекущаяСтрокаОтбора из РезультатРасшифровки.Отбор.Элементы цикл
		Для Каждого ТекГруппировка из ЗначенияГруппировок цикл
			Если ТекущаяСтрокаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекГруппировка.Ключ) и ТекущаяСтрокаОтбора.Использование = Истина Тогда 
				ЗначенияГруппировок[ТекГруппировка.Ключ] = ТекущаяСтрокаОтбора.ПравоеЗначение;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
Возврат ЗначенияГруппировок;	
КонецФункции
	
&НаКлиенте
Процедура Сформировать(Команда)
	// уберем состояние отчета
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
	Если ТаблицаИзменныхДанныхДляЗаписи.Количество() <> 0 Тогда 
		СтрокаВопроса = "Внимание! "+Символы.ПС+  
						"При заполнении таблицы все внесенные изменения будут утеряны"+Символы.ПС+
						"Продолжить?";
		ТекстВопроса = Новый ФорматированнаяСтрока(СтрокаВопроса, Новый Шрифт(,10,Истина), Новый Цвет(255, 0, 0));
		
		СтруктураРеквизитов = новый Структура; 
		Оповещение = Новый ОписаниеОповещения("РучноеФормированиеДанныхЗавершение", ЭтотОбъект, СтруктураРеквизитов); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПризнакФормирования = "Формирование";
		СформироватьНаСервере(ПризнакФормирования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РучноеФормированиеДанныхЗавершение(Ответ, СтруктураРеквизитов) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПризнакФормирования = "Формирование";
	СформироватьНаСервере(ПризнакФормирования);
	
	// уберем состояние отчета
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уберем состояние отчета
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
	Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь;
	
КонецПроцедуры   

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакФормирования = "Формирование";
	СформироватьНаСервере(ПризнакФормирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	ПризнакФормирования = "Обновление";
	СформироватьНаСервере(ПризнакФормирования);
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ТекущееЗначениеЭлемента = Элемент.ТекущаяОбласть.Текст;
	Если ВозвратПризнакаЧисла(ТекущееЗначениеЭлемента) Тогда 
		Расшифровка = Элемент.ТекущаяОбласть.Расшифровка;
		Если НЕ Расшифровка = Неопределено Тогда 
			ЗначенияРасшифровки = ПолучитьВсеЗначенияРасшифровкиЯчейки(Расшифровка);
			Если  ЗначенияРасшифровки.Свойство("ЗначениеПоказателя") тогда
				
				Если ЗначениеЗаполнено(ЗначенияРасшифровки.Производитель) и ЗначениеЗаполнено(ЗначенияРасшифровки.Порог_Скидка) тогда 
					ТекстВопроса =  "При изменении значения по производителю значение будет установленно всем подчиненным элементам."+Символы.ПС+
									"Продолжить?";
					СтруктураРеквизитов = Новый Структура("ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка,ОбластьДокумента",ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка,Элемент.ТекущаяОбласть);
					Оповещение = Новый ОписаниеОповещения("ИзмененияПоПроизводителюЗавершение", ЭтотОбъект, СтруктураРеквизитов); 
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначенияРасшифровки.ИерархияЦеновойГруппы) и ЗначениеЗаполнено(ЗначенияРасшифровки.Порог_Скидка) Тогда 
					ТекстВопроса =  "При изменении значения по иерархии ценовой группы значение будет установленно всем подчиненным элементам."+Символы.ПС+
									"Продолжить?";
					СтруктураРеквизитов = Новый Структура("ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка,ОбластьДокумента",ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка,Элемент.ТекущаяОбласть);
					Оповещение = Новый ОписаниеОповещения("ИзмененияПоИерархииЦеновойЗавершение", ЭтотОбъект, СтруктураРеквизитов); 
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначенияРасшифровки.ЦеноваяГруппа) и ЗначениеЗаполнено(ЗначенияРасшифровки.Порог_Скидка) Тогда 	
					ОбработатьГруппировкиЯчейкиИЗаписатьИзмененныеДанные(ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка);
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтароезначениеИзРасшифровки(СтруктураРеквизитов)
	СтруктураРеквизитов.ОбластьДокумента.Текст = СтруктураРеквизитов.ЗначенияРасшифровки.ЗначениеПоказателя; 
КонецПроцедуры	

&НаКлиенте
Процедура ИзмененияПоПроизводителюЗавершение(Ответ, СтруктураРеквизитов) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		УстановитьСтароезначениеИзРасшифровки(СтруктураРеквизитов);
		Возврат;
	КонецЕсли;
	
	ОбработатьГруппировкиЯчейкиИЗаписатьИзмененныеДанные(СтруктураРеквизитов.ЗначенияРасшифровки,СтруктураРеквизитов.ТекущееЗначениеЭлемента,СтруктураРеквизитов.Расшифровка);
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияПоИерархииЦеновойЗавершение(Ответ, СтруктураРеквизитов) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		УстановитьСтароезначениеИзРасшифровки(СтруктураРеквизитов);
		Возврат;
	КонецЕсли;
	
	ОбработатьГруппировкиЯчейкиИЗаписатьИзмененныеДанные(СтруктураРеквизитов.ЗначенияРасшифровки,СтруктураРеквизитов.ТекущееЗначениеЭлемента,СтруктураРеквизитов.Расшифровка);
КонецПроцедуры

&НаСервере
Функция РасчитатьМаксимумПоПорогам(СтруктураРасшифровки,ЗначениеЭлемента,ЦеноваяГруппа)
	МаксимумПоЗначению = 0; МинимальноеЗначение = 0;
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Порог");
	ТЗ.Колонки.Добавить("Значение");
	СтруктураОтбораПоДаннымОграничений = Новый Структура("ЦеноваяГруппа,ЭтоПорог",
														ЦеноваяГруппа,Истина);
	МассивЗначений = ТаблицаДанныхРезультата.НайтиСтроки(СтруктураОтбораПоДаннымОграничений);
	Если МассивЗначений.Количество() <> 0 Тогда 
		Для Каждого СтрокаМассиваЗначений из МассивЗначений цикл
			// установим текущее значение для корректного расчета максимума
			Если СтрокаМассиваЗначений.Порог_Скидка = СтруктураРасшифровки.Порог_Скидка тогда
				СтрокаМассиваЗначений.ЗначениеПоказателя = ЗначениеЭлемента;
			КонецЕсли;	
			Если СтрокаМассиваЗначений.Порог_Скидка = Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа тогда
				ПределОснование = СтрокаМассиваЗначений.ЗначениеПоказателя;
			Иначе
				Если СтрокаМассиваЗначений.ЗначениеПоказателя <> 0 и СтрокаМассиваЗначений.Порог_Скидка.ИспользоватьОграничение Тогда 
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.Порог = СтрокаМассиваЗначений.Порог_Скидка;
				СтрокаТЗ.Значение = СтрокаМассиваЗначений.ЗначениеПоказателя; 
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Если ТЗ.Количество() <> 0 Тогда  		
		ТЗ.Сортировать("Значение Убыв");
		МинимальноеЗначение = ТЗ[0].Значение;
	КонецЕсли;
	// обрабатываем ошибки...
	МаксимумПоЗначению =  ПределОснование - МинимальноеЗначение;

	Возврат  МаксимумПоЗначению;
КонецФункции	

&НаСервере
Функция РасчитатьМаксимумПоЦеновой(СтруктураРасшифровки,ЗначениеЭлемента,ЦеноваяГруппа)
	МаксимумПоЗначению = 0; МинимальноеЗначение = 0;
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Порог");
	ТЗ.Колонки.Добавить("Значение");
	СтруктураОтбораПоДаннымОграничений = Новый Структура("ЦеноваяГруппа,ЭтоПорог",
														ЦеноваяГруппа,Истина);
	МассивЗначений = ТаблицаДанныхРезультата.НайтиСтроки(СтруктураОтбораПоДаннымОграничений);
	Если МассивЗначений.Количество() <> 0 Тогда 
		Для Каждого СтрокаМассиваЗначений из МассивЗначений цикл
			Если СтрокаМассиваЗначений.Порог_Скидка = Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа тогда
				ПределОснование = СтрокаМассиваЗначений.ЗначениеПоказателя;
			Иначе
				Если СтрокаМассиваЗначений.ЗначениеПоказателя <> 0 и СтрокаМассиваЗначений.Порог_Скидка.ИспользоватьОграничение Тогда  // тут вопрос 0 значением.. считать ли его...
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.Порог = СтрокаМассиваЗначений.Порог_Скидка;
				СтрокаТЗ.Значение = СтрокаМассиваЗначений.ЗначениеПоказателя; 
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Если ТЗ.Количество() <> 0 Тогда  		
		ТЗ.Сортировать("Значение Убыв");
		МинимальноеЗначение = ТЗ[0].Значение;
	КонецЕсли;
    МаксимумПоЗначению =  ПределОснование - МинимальноеЗначение;

	Возврат  МаксимумПоЗначению;
КонецФункции	

&НаСервере
Функция ПолучитьИерахиюПоИерархииЦГ(ИерархияЦГ)
	МассивЗначенийИерархии = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГИГ_ИерархияЦеновыхГрупп.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГИГ_ИерархияЦеновыхГрупп КАК ГИГ_ИерархияЦеновыхГрупп
	|ГДЕ
	|	ГИГ_ИерархияЦеновыхГрупп.Ссылка В ИЕРАРХИИ(&Ссылка)";
	//++Гольм А.А. (Гигабайт) 13.11.2018 17:44:42
	// рефакторинг кода и исправление ошибок
	//|ИТОГИ ПО
	//|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	//--Гольм А.А. (Гигабайт) 13.11.2018 17:44:54
	Запрос.УстановитьПараметр("Ссылка",ИерархияЦГ);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	//РезультатЗапроса.Свернуть("Ссылка");
	Для Каждого СтрокаРезультат из РезультатЗапроса цикл  
		МассивЗначенийИерархии.Добавить(СтрокаРезультат.Ссылка);
	КонецЦикла;	
	Возврат МассивЗначенийИерархии;
КонецФункции	

&НаСервере
Функция ВозвратПризнакаЧисла(ЗначениеЭлемента)
	ПроверкаЧисла = Истина;
	Если ЗначениеЭлемента = "" тогда
		ЧисловоеЗначение = 0;
	иначе
		Попытка 			
			ЧисловоеЗначение = Число(ЗначениеЭлемента);
		Исключение
			ПроверкаЧисла = Ложь;
			Если ВыводитьСообщения Тогда 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Введите числовое значение!";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	Возврат ПроверкаЧисла;
КонецФункции

&НаСервере
Процедура ОбработатьГруппировкиЯчейкиИЗаписатьИзмененныеДанные(СтруктураРасшифровки,ЗначениеЭлемента,Расшифровка)
	ПризнакФормирования = "Обновление";
	ДоступноИзменение = Истина;  ПроверкаЧисла = Истина;
	ЧисловоеЗначение = 0;
	
	КопияТаб = ТаблицаДанныхРезультата;
	
	//1. Если в структуре есть производитель и ограничениеСкидка, то изменяются все элементы по производителю!
	Если ЗначениеЗаполнено(СтруктураРасшифровки.Производитель) и ЗначениеЗаполнено(СтруктураРасшифровки.Порог_Скидка) Тогда 
		Если ВозвратПризнакаЧисла(ЗначениеЭлемента) Тогда  
			ЧисловоеЗначение = ?(ЗначениеЭлемента = "",0,Число(ЗначениеЭлемента));
		КонецЕсли;
		Если ЧисловоеЗначение =  СтруктураРасшифровки.ЗначениеПоказателя Тогда Возврат КонецЕсли;
		СтруктураКорректировки = Новый Структура("Производитель,Порог_Скидка",СтруктураРасшифровки.Производитель,СтруктураРасшифровки.Порог_Скидка);
		МассивДанных = КопияТаб.НайтиСтроки(СтруктураКорректировки);
		Если МассивДанных.Количество() > 0 Тогда 
			//bercut291019 добавляю код по заказу Черевача
			СписокИсключаемойНоменклатуры = Неопределено;
			Для каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ЦеноваяГруппа")).Поле Тогда
					Если ЭлементОтбора.Использование Тогда
						СписокИсключаемойНоменклатуры = ЭлементОтбора.ПравоеЗначение;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если не СписокИсключаемойНоменклатуры = Неопределено Тогда //удалим лишние строки
				КолвоЭлементовКоллекции = МассивДанных.Количество(); 
				Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
					ЭлементКоллекции = МассивДанных[КолвоЭлементовКоллекции - ОбратныйИндекс];
					Если ТипЗнч(СписокИсключаемойНоменклатуры) = Тип("СписокЗначений") Тогда
						Если СписокИсключаемойНоменклатуры.НайтиПоЗначению(ЭлементКоллекции.ЦеноваяГруппа) = Неопределено Тогда 
							МассивДанных.Удалить(МассивДанных.Найти(ЭлементКоллекции)); 
						КонецЕсли;
					Иначе //спр цен группы
						Если не СписокИсключаемойНоменклатуры = ЭлементКоллекции.ЦеноваяГруппа Тогда 
							МассивДанных.Удалить(МассивДанных.Найти(ЭлементКоллекции)); 
						КонецЕсли;
					КонецЕсли; 	
				КонецЦикла;
			КонецЕсли; 
			//
			Для Каждого СтрокаМассива из МассивДанных цикл
				// тут проверка на возможное максимальное значение по строке с ценовой группой.... но только по строкам скидок!!!
				Если ПроверкаЧисла Тогда 		
					Если ТипЗнч(СтруктураРасшифровки.Порог_Скидка) = Тип("СправочникСсылка.ГИГ_ПорогиОграничений") тогда
						
						СтрокаМассива.ЗначениеПоказателя = ЧисловоеЗначение;
						СтрокаМассива.ПризнакИзменения = Истина;
						ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЧисловоеЗначение,СтруктураРасшифровки.Порог_Скидка);
						
						//необходимо проверить и очистить при необходимости скидки, которые превышают допустимый размер скидки
						
						СтруктураДанныхПоСтрокеПоСкидке =  Новый Структура("ЦеноваяГруппа,ЭтоПорог",СтрокаМассива.ЦеноваяГруппа,Ложь);
						МассивСтрокПоСкидкеВСтроке = КопияТаб.НайтиСтроки(СтруктураДанныхПоСтрокеПоСкидке);
						МаксимальноеЗначениеВозможнойСкидки = РасчитатьМаксимумПоПорогам(СтруктураРасшифровки,ЧисловоеЗначение,СтрокаМассива.ЦеноваяГруппа);
						
						Если МассивСтрокПоСкидкеВСтроке.Количество() <> 0 Тогда 
							Для Каждого СтрокаМассиваПоДаннымСкидки из  МассивСтрокПоСкидкеВСтроке цикл
								Если СтрокаМассиваПоДаннымСкидки.ЗначениеПоказателя > МаксимальноеЗначениеВозможнойСкидки Тогда 
									СтрокаМассиваПоДаннымСкидки.ЗначениеПоказателя = 0;
									СтрокаМассиваПоДаннымСкидки.ПризнакИзменения = Истина;
									ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассиваПоДаннымСкидки,0,СтруктураРасшифровки.Порог_Скидка);
								КонецЕсли;	
							КонецЦикла;
						КонецЕсли;
					Иначе	
						МаксимальноеЗначениеВозможнойСкидки = РасчитатьМаксимумПоЦеновой(СтруктураРасшифровки,ЗначениеЭлемента,СтрокаМассива.ЦеноваяГруппа);
						Если ЧисловоеЗначение > МаксимальноеЗначениеВозможнойСкидки Тогда 
							ДоступноИзменение = Ложь;
							Если ВыводитьСообщения Тогда 
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст =   "По ценовой группе "+СтрокаМассива.ЦеноваяГруппа+" превышено максимально допустимое значение скидки!"+Символы.ПС+
													"Значение скидки не должно превышать: "+МаксимальноеЗначениеВозможнойСкидки+"%"+Символы.ПС+ 	
													"Ввод значения отменен.";
								Сообщение.Сообщить();
							КонецЕсли;
							ДоступноИзменение = Ложь;
						иначе
							ДоступноИзменение = Истина;
						КонецЕсли;	
						
						Если ДоступноИзменение Тогда 		
							СтрокаМассива.ЗначениеПоказателя = ЧисловоеЗначение;
							СтрокаМассива.ПризнакИзменения = Истина;
							ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЧисловоеЗначение,СтруктураРасшифровки.Порог_Скидка);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//2. Если в структуре есть Иерархия ценовойГруппы и ограничениеСкидка, то изменяются все элементы подчиненные элементу иерархии!
	Если ЗначениеЗаполнено(СтруктураРасшифровки.ИерархияЦеновойГруппы) и ЗначениеЗаполнено(СтруктураРасшифровки.Порог_Скидка) Тогда 
		Если ВозвратПризнакаЧисла(ЗначениеЭлемента) Тогда  
			ЧисловоеЗначение = ?(ЗначениеЭлемента = "",0,Число(ЗначениеЭлемента));
		КонецЕсли;
		Если ЧисловоеЗначение =  СтруктураРасшифровки.ЗначениеПоказателя Тогда Возврат КонецЕсли;

		// по иерархии ценовой учитываем ценовые группы по всем уровням.
		СписокВложенныхИерархий = ПолучитьИерахиюПоИерархииЦГ(СтруктураРасшифровки.ИерархияЦеновойГруппы);
		Для Каждого СтрокаСпискаИерархий из СписокВложенныхИерархий цикл 
			СтруктураКорректировки = Новый Структура("ИерархияЦеновойГруппы,Порог_Скидка",СтрокаСпискаИерархий.Ссылка,СтруктураРасшифровки.Порог_Скидка);
			МассивДанных = КопияТаб.НайтиСтроки(СтруктураКорректировки);
			Если МассивДанных.Количество() > 0 Тогда 
				Для Каждого СтрокаМассива из МассивДанных цикл
					// тут проверка на возможное максимальное значение по строке с ценовой группой.... но только по строкам скидок!!!
					Если ПроверкаЧисла Тогда 		
						Если ТипЗнч(СтруктураРасшифровки.Порог_Скидка) = Тип("СправочникСсылка.ГИГ_ПорогиОграничений") тогда
							СтрокаМассива.ЗначениеПоказателя = ЧисловоеЗначение;
							СтрокаМассива.ПризнакИзменения = Истина;
							ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЧисловоеЗначение,СтруктураРасшифровки.Порог_Скидка);
							
							// необходимо проверить и очистить при необходимости скидки, которые превышают допустимый размер скидки
							
							СтруктураДанныхПоСтрокеПоСкидке =  Новый Структура("ЦеноваяГруппа,ЭтоПорог",СтрокаМассива.ЦеноваяГруппа,Ложь);
							МассивСтрокПоСкидкеВСтроке = КопияТаб.НайтиСтроки(СтруктураДанныхПоСтрокеПоСкидке);
							МаксимальноеЗначениеВозможнойСкидки = РасчитатьМаксимумПоПорогам(СтруктураРасшифровки,ЧисловоеЗначение,СтрокаМассива.ЦеноваяГруппа);
							
							Если МассивСтрокПоСкидкеВСтроке.Количество() <> 0 Тогда 
								Для Каждого СтрокаМассиваПоДаннымСкидки из  МассивСтрокПоСкидкеВСтроке цикл
									Если СтрокаМассиваПоДаннымСкидки.ЗначениеПоказателя > МаксимальноеЗначениеВозможнойСкидки Тогда 
										СтрокаМассиваПоДаннымСкидки.ЗначениеПоказателя = 0;
										СтрокаМассиваПоДаннымСкидки.ПризнакИзменения = Истина;
										ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассиваПоДаннымСкидки,0,СтруктураРасшифровки.Порог_Скидка);
									КонецЕсли;	
								КонецЦикла;
							КонецЕсли;
						Иначе	
							МаксимальноеЗначениеВозможнойСкидки = РасчитатьМаксимумПоЦеновой(СтруктураРасшифровки,ЗначениеЭлемента,СтрокаМассива.ЦеноваяГруппа);
							Если ЧисловоеЗначение > МаксимальноеЗначениеВозможнойСкидки Тогда 
								ДоступноИзменение = Ложь;
								Если ВыводитьСообщения Тогда 
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст =   "По ценовой группе "+СтрокаМассива.ЦеноваяГруппа+" превышено максимально допустимое значение скидки!"+Символы.ПС+
														"Значение скидки не должно превышать: "+МаксимальноеЗначениеВозможнойСкидки+"%"+Символы.ПС+ 	
														"Ввод значения отменен.";
									Сообщение.Сообщить();
								КонецЕсли;
								ДоступноИзменение = Ложь;
							иначе
								ДоступноИзменение = Истина;
							КонецЕсли;	
							
							Если ДоступноИзменение Тогда 		
								СтрокаМассива.ЗначениеПоказателя = ЧисловоеЗначение;
								СтрокаМассива.ПризнакИзменения = Истина;
								ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЧисловоеЗначение,СтруктураРасшифровки.Порог_Скидка);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//3. Если в структуре есть ЦеноваяГруппа и ограничениеСкидка, то изменяется элемент ценовой группы!
	Если ЗначениеЗаполнено(СтруктураРасшифровки.ЦеноваяГруппа) и ЗначениеЗаполнено(СтруктураРасшифровки.Порог_Скидка) Тогда 
		Если ВозвратПризнакаЧисла(ЗначениеЭлемента) Тогда  
			ЧисловоеЗначение = ?(ЗначениеЭлемента = "",0,Число(ЗначениеЭлемента));
		КонецЕсли;
		Если ЧисловоеЗначение =  СтруктураРасшифровки.ЗначениеПоказателя Тогда Возврат КонецЕсли;
		СтруктураКорректировки = Новый Структура("ЦеноваяГруппа,Порог_Скидка",СтруктураРасшифровки.ЦеноваяГруппа,СтруктураРасшифровки.Порог_Скидка);
		МассивДанных = КопияТаб.НайтиСтроки(СтруктураКорректировки);
		Если МассивДанных.Количество() > 0 Тогда 
			Для Каждого СтрокаМассива из МассивДанных цикл
					// тут проверка на возможное максимальное значение по строке с ценовой группой.... но только по строкам скидок!!!
					Если ПроверкаЧисла Тогда 		
						Если ТипЗнч(СтруктураРасшифровки.Порог_Скидка) = Тип("СправочникСсылка.ГИГ_ПорогиОграничений") тогда
							// проверка на данные скидок при изменении данных поргов
							СтрокаМассива.ЗначениеПоказателя = ЧисловоеЗначение;
							СтрокаМассива.ПризнакИзменения = Истина;
							ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЧисловоеЗначение,СтруктураРасшифровки.Порог_Скидка);
							
							// необходимо проверить и очистить при необходимости скидки, которые превышают допустимый размер скидки
							
							СтруктураДанныхПоСтрокеПоСкидке =  Новый Структура("ЦеноваяГруппа,ЭтоПорог",СтруктураРасшифровки.ЦеноваяГруппа,Ложь);
							МассивСтрокПоСкидкеВСтроке = КопияТаб.НайтиСтроки(СтруктураДанныхПоСтрокеПоСкидке);
							МаксимальноеЗначениеВозможнойСкидки = РасчитатьМаксимумПоПорогам(СтруктураРасшифровки,ЧисловоеЗначение,СтрокаМассива.ЦеноваяГруппа);
							
							Если МассивСтрокПоСкидкеВСтроке.Количество() <> 0 Тогда 
								Для Каждого СтрокаМассиваПоДаннымСкидки из  МассивСтрокПоСкидкеВСтроке цикл
									Если СтрокаМассиваПоДаннымСкидки.ЗначениеПоказателя > МаксимальноеЗначениеВозможнойСкидки Тогда 
										СтрокаМассиваПоДаннымСкидки.ЗначениеПоказателя = 0;
										СтрокаМассиваПоДаннымСкидки.ПризнакИзменения = Истина;
										ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассиваПоДаннымСкидки,0,СтруктураРасшифровки.Порог_Скидка);
									КонецЕсли;	
								КонецЦикла;
							КонецЕсли;
						Иначе	
							МаксимальноеЗначениеВозможнойСкидки = РасчитатьМаксимумПоЦеновой(СтруктураРасшифровки,ЗначениеЭлемента,СтрокаМассива.ЦеноваяГруппа);
							Если ЧисловоеЗначение > МаксимальноеЗначениеВозможнойСкидки Тогда 
								ДоступноИзменение = Ложь;
								Если ВыводитьСообщения Тогда 
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст =   "По ценовой группе "+СтрокаМассива.ЦеноваяГруппа+" превышено максимально допустимое значение скидки!"+Символы.ПС+
														"Значение скидки не должно превышать: "+МаксимальноеЗначениеВозможнойСкидки+"%"+Символы.ПС+ 	
														"Ввод значения отменен.";
									Сообщение.Сообщить();
								КонецЕсли;
								ДоступноИзменение = Ложь;
							иначе
								ДоступноИзменение = Истина;
							КонецЕсли;	
							
							Если ДоступноИзменение Тогда 		
								СтрокаМассива.ЗначениеПоказателя = ЧисловоеЗначение;
								СтрокаМассива.ПризнакИзменения = Истина;
								ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЧисловоеЗначение,СтруктураРасшифровки.Порог_Скидка);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// обновить форму отчета...
	СформироватьНаСервере(ПризнакФормирования);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЗначениеЭлемента,ПричинаИзменения)
	// запись изменных данных в таб имз объектов....
	// проверка на то, есть ли уже такая запись... 
	СтруктураТабличкиИзмененых = Новый Структура("Порог_Скидка,ЦеноваяГруппа",
								 СтрокаМассива.Порог_Скидка, СтрокаМассива.ЦеноваяГруппа);
	
	Если ТаблицаИзменныхДанныхДляЗаписи.Количество() <> 0 тогда
		МассивОбъектовТаблицыИзменения = ТаблицаИзменныхДанныхДляЗаписи.НайтиСтроки(СтруктураТабличкиИзмененых);
		Если МассивОбъектовТаблицыИзменения.Количество() > 0 тогда
			Для Каждого СтрокаМассиваОбъектовТаблицыИзменения из МассивОбъектовТаблицыИзменения цикл
				СтрокаМассиваОбъектовТаблицыИзменения.ЗначениеПоказателя = ЗначениеЭлемента;
				СтрокаМассиваОбъектовТаблицыИзменения.ОснованиеИзменения = ПричинаИзменения;
			КонецЦикла;	
		Иначе	
			СтрокаТаб = ТаблицаИзменныхДанныхДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаб,СтрокаМассива);
			СтрокаТаб.ЗначениеПоказателя = ЗначениеЭлемента;
			СтрокаТаб.ОснованиеИзменения = ПричинаИзменения;
		КонецЕсли;
	Иначе
		СтрокаТаб = ТаблицаИзменныхДанныхДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб,СтрокаМассива);
		СтрокаТаб.ЗначениеПоказателя = ЗначениеЭлемента;
		СтрокаТаб.ОснованиеИзменения = ПричинаИзменения;
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьРезультатНаСервере()
	// формируем запрос по справочнику скидки...
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СкидкиНаценкиЦеновыеГруппы.Ссылка КАК Скидка_Наценка,
	               |	СкидкиНаценкиЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа
	               |ИЗ
	               |	Справочник.СкидкиНаценки.ЦеновыеГруппы КАК СкидкиНаценкиЦеновыеГруппы";
	
	РезультатЗапросаСкидки = Запрос.Выполнить().Выгрузить();
	
	// запись измененных данных...	
	Для Каждого СтрокаТаблицыДанных из ТаблицаИзменныхДанныхДляЗаписи цикл
		
		ТекстСообщения = "Запись данных при выполнении обработки АРМ Матрица ценообразования";
		
		Если ТипЗнч(СтрокаТаблицыДанных.Порог_Скидка) = Тип("СправочникСсылка.ГИГ_ПорогиОграничений") Тогда 
			МетаданныеОбъекта = Метаданные.РегистрыСведений.ГИГ_ЗначенияПороговОграничений;
			
			// запись по регистру сведений "ГИГ_ЗначенияПороговОграничений" на текущую дату!
			МенеджерЗаписи = РегистрыСведений.ГИГ_ЗначенияПороговОграничений.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.ЦеноваяГруппа    = СтрокаТаблицыДанных.ЦеноваяГруппа; 
			МенеджерЗаписи.ПорогОграничения = СтрокаТаблицыДанных.Порог_Скидка; 
			МенеджерЗаписи.Значение = СтрокаТаблицыДанных.ЗначениеПоказателя;
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.Записать(); 	
			
			// запись по регистру сведений "ГИГ_ЗначенияПороговОграничений" на текущую дату!
			МенеджерЗаписи = РегистрыСведений.ГИГ_ИсторияИзмененийЗначениейПороговИСкидок.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.Порог_Скидка  = СтрокаТаблицыДанных.Порог_Скидка; 
			МенеджерЗаписи.ЦеноваяГруппа = СтрокаТаблицыДанных.ЦеноваяГруппа; 
			МенеджерЗаписи.Значение = СтрокаТаблицыДанных.ЗначениеПоказателя;
			МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.Записать(); 
			
			// запись в журнал регистрации
			ЗаписьЖурналаРегистрации("Данные.Изменение",
									УровеньЖурналаРегистрации.Информация,
									МетаданныеОбъекта,
									СтрокаТаблицыДанных.Порог_Скидка,
									ТекстСообщения);
			
		ИначеЕсли  ТипЗнч(СтрокаТаблицыДанных.Порог_Скидка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда 
			МетаданныеОбъекта = Метаданные.Справочники.СкидкиНаценки;
			
			ЭлементСкидки = СтрокаТаблицыДанных.Порог_Скидка.ПолучитьОбъект();
			СтруктураЦГ = Новый Структура("ЦеноваяГруппа",СтрокаТаблицыДанных.ЦеноваяГруппа);
			МассивЦГ = ЭлементСкидки.ЦеновыеГруппы.НайтиСтроки(СтруктураЦГ);
			Если МассивЦГ.количество() <> 0 Тогда 
				СтрокаЦГ = МассивЦГ[0];
				СтрокаЦГ.ЗначениеСкидкиНаценки = СтрокаТаблицыДанных.ЗначениеПоказателя;
			иначе
				СтрокаЦГ = ЭлементСкидки.ЦеновыеГруппы.Добавить();
				СтрокаЦГ.ЦеноваяГруппа = СтрокаТаблицыДанных.ЦеноваяГруппа;
				СтрокаЦГ.ЗначениеСкидкиНаценки = СтрокаТаблицыДанных.ЗначениеПоказателя;
			КонецЕсли; 
			ЭлементСкидки.Записать();
			
			// запись по регистру сведений "ГИГ_ЗначенияПороговОграничений" на текущую дату!
			МенеджерЗаписи = РегистрыСведений.ГИГ_ИсторияИзмененийЗначениейПороговИСкидок.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.Порог_Скидка = СтрокаТаблицыДанных.Порог_Скидка; 
			МенеджерЗаписи.ЦеноваяГруппа = СтрокаТаблицыДанных.ЦеноваяГруппа; 
			МенеджерЗаписи.Значение = СтрокаТаблицыДанных.ЗначениеПоказателя;
			МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.Записать(); 	
			
			// запись в журнал регистрации
			ЗаписьЖурналаРегистрации("Данные.Изменение",
									УровеньЖурналаРегистрации.Информация,
									МетаданныеОбъекта,
									ЭлементСкидки.Ссылка,
									ТекстСообщения);
			
		КонецЕсли;	
	КонецЦикла;
	
	ОбработатьДеактивациюСкидокИндСоглашенийПриИзмененииДанных();
	
	
	ПризнакФормирования = "Формирование";
	СформироватьНаСервере(ПризнакФормирования);
КонецПроцедуры

&НаСервере
Процедура ОбработатьДеактивациюСкидокИндСоглашенийПриИзмененииДанных()
	
	// 1. При редактировании скидки от тарифа поставщика, по одной или нескольким ценовым группам –
	//    необходимо деактивировать скидки (наценки) 
	//    во всех индивидуальных соглашениях партнеров всех сегментов (категорий клиентов).	
	
	СтруктураОтбора = Новый Структура("Порог_Скидка,ОснованиеИзменения",Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа,Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа);
	МассивОтбора = ТаблицаИзменныхДанныхДляЗаписи.НайтиСтроки(СтруктураОтбора);
	Если МассивОтбора.Количество() <> 0 Тогда
		МассивЦГ = Новый Массив;
		Для Каждого СтрокаМассива из МассивОтбора цикл
			МассивЦГ.Добавить(СтрокаМассива.ЦеноваяГруппа);
		КонецЦикла;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	ПартнерыСегмента.Сегмент КАК Сегмент,
						|	ПартнерыСегмента.Партнер КАК Партнер
						|ПОМЕСТИТЬ ВТ_Партнеры
						|ИЗ
						|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	СкидкиНаценкиУсловияПредоставления.Ссылка КАК Скидка,
						|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментПартнеров КАК СегментПартнеров,
						|	ВТ_Партнеры.Партнер КАК Партнер
						|ПОМЕСТИТЬ ВТ_Клиенты
						|ИЗ
						|	ВТ_Партнеры КАК ВТ_Партнеры
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
						|		ПО ВТ_Партнеры.Сегмент = СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментПартнеров
						|ГДЕ
						|	СкидкиНаценкиУсловияПредоставления.Ссылка <> &ПустоеЗначениеСсылки
						|
						|СГРУППИРОВАТЬ ПО
						|	СкидкиНаценкиУсловияПредоставления.Ссылка,
						|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментПартнеров,
						|	ВТ_Партнеры.Партнер
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	СоглашенияСКлиентамиЦеновыеГруппы.Ссылка КАК Ссылка,
						|	СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
						|	ВТ_Клиенты.Партнер КАК Партнер,
						|	СоглашенияСКлиентамиЦеновыеГруппы.Ссылка.Партнер КАК Партнер1,
						|	ВТ_Клиенты.СегментПартнеров КАК СегментПартнеров
						|ИЗ
						|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Клиенты КАК ВТ_Клиенты
						|		ПО СоглашенияСКлиентамиЦеновыеГруппы.Ссылка.Партнер = ВТ_Клиенты.Партнер
						|ГДЕ
						|	СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа в (&ЦеноваяГруппа)";
		
		Запрос.УстановитьПараметр("ПустоеЗначениеСсылки",Справочники.СкидкиНаценки.ПустаяСсылка());
		Запрос.УстановитьПараметр("ЦеноваяГруппа",МассивЦГ);
		РезультатЗапросаПоЦГ = Запрос.Выполнить().Выбрать();
		Пока РезультатЗапросаПоЦГ.Следующий() цикл
			ТекущееСоглашение = РезультатЗапросаПоЦГ.Ссылка.получитьобъект();
			СтруктураотбораЦГ = Новый Структура("ЦеноваяГруппа",РезультатЗапросаПоЦГ.ЦеноваяГруппа);
			МассивЗначений = ТекущееСоглашение.ЦеновыеГруппы.найтистроки(СтруктураотбораЦГ);
			Для Каждого СтрокаМассива из МассивЗначений Цикл 
				СтрокаМассива.Деактивирован = Истина;
				
				// проверяем на изменение значения:
				ЗначениеИзменения = СтрокаМассива.ПроцентИндивидуальнойСкидкиНаценки;
				СтруктураИзменения = Новый Структура("ЦеноваяГруппа,Порог_Скидка",СтрокаМассива.ЦеноваяГруппа,ТекущееСоглашение);
				МассивОтбораИзменений = ТаблицаИзменныхДанныхДляЗаписи.НайтиСтроки(СтруктураИзменения);
				Если МассивОтбораИзменений.Количество() <> 0 Тогда 
					ЗначениеИзменения = МассивОтбораИзменений[0].ЗначениеПоказателя;
				КонецЕсли;
								
				// формируем запись в регистр истории изменения ЦГ по соглашениям
				Запись = РегистрыСведений.ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашений.СоздатьМенеджерЗаписи();
				Запись.Активность 		= Истина;
				Запись.Деактивирован 	= СтрокаМассива.Деактивирован;
				Запись.Период 			= ТекущаяДата();
				Запись.Пользователь		= Пользователи.ТекущийПользователь();
				Запись.Соглашение 		= ТекущееСоглашение.Ссылка;
				Запись.ЦеноваяГруппа    = СтрокаМассива.ЦеноваяГруппа; 
				Если ЗначениеИзменения <> СтрокаМассива.ПроцентИндивидуальнойСкидкиНаценки Тогда 
					Запись.ЗначениеСкидки_Наценки = ЗначениеИзменения;
				КонецЕсли;
				Запись.Причина = Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа.Ссылка;
				Запись.Записать(); 
				
				Если ВыводитьСообщения Тогда 
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Признак <Деактивирован> установлен для ценовой группы: "+СтрокаМассива.ЦеноваяГруппа.Наименование+" в соглашении с клиентом: "+ТекущееСоглашение.Наименование;
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЦикла;
			ТекущееСоглашение.Записать();
		КонецЦикла;	
	КонецЕсли;
	
	// 2. При редактировании скидки для сегмента партнеров (по одной или нескольким ценовым группам) – 
	//    необходимо деактивировать скидки (наценки) во всех индивидуальных соглашениях всех партнеров, 
	//    входящих в сегмент (категория клиента) по всем указанным ценовым группам.	
	
	ТаблицаЗначенийПоСкидкам = ТаблицаИзменныхДанныхДляЗаписи.Выгрузить(,"Порог_Скидка");
	ТаблицаЗначенийПоСкидкам.Свернуть("Порог_Скидка");
	ТаблицаЗначенийПоСкидкам.Сортировать("Порог_Скидка Возр");
	
	МассивИзмененныхСкидок = Новый Массив;
	МассивЦГПоСкидкам = Новый Массив;
	
	Для каждого СтрокаТаблицыСкидок из ТаблицаЗначенийПоСкидкам цикл
		Если  ТипЗнч(СтрокаТаблицыСкидок.Порог_Скидка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда 
			МассивИзмененныхСкидок.Добавить(СтрокаТаблицыСкидок.Порог_Скидка);
			
			СтруктураОтбораЦГДляИзменения = Новый Структура("Порог_Скидка,ОснованиеИзменения",СтрокаТаблицыСкидок.Порог_Скидка,СтрокаТаблицыСкидок.Порог_Скидка);
			МассивЦГ =  ТаблицаИзменныхДанныхДляЗаписи.НайтиСтроки(СтруктураОтбораЦГДляИзменения);
			Если МассивЦГ.количество() <> 0 тогда
				Для каждого СтрокаМассиваЦГ из МассивЦГ цикл 
					МассивЦГПоСкидкам.Добавить(СтрокаМассиваЦГ.ЦеноваяГруппа);
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Если МассивИзмененныхСкидок.Количество() <> 0 Тогда 
		
		Запрос  = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартнерыСегмента.Сегмент КАК Сегмент,
		               |	ПартнерыСегмента.Партнер КАК Партнер
		               |ПОМЕСТИТЬ ВТ_Партнеры
		               |ИЗ
		               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СкидкиНаценкиУсловияПредоставления.Ссылка КАК Скидка,
		               |	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментПартнеров КАК СегментПартнеров,
		               |	ВТ_Партнеры.Партнер КАК Партнер
		               |ПОМЕСТИТЬ ВТ_Клиенты
		               |ИЗ
		               |	ВТ_Партнеры КАК ВТ_Партнеры
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
		               |		ПО ВТ_Партнеры.Сегмент = СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментПартнеров
		               |ГДЕ
		               |	СкидкиНаценкиУсловияПредоставления.Ссылка В(&ТекущаяСкидка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СкидкиНаценкиУсловияПредоставления.Ссылка,
		               |	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментПартнеров,
		               |	ВТ_Партнеры.Партнер
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВложенныйЗапрос.Ссылка КАК Ссылка,
		               |	ВложенныйЗапрос.ЦеноваяГруппа КАК ЦеноваяГруппа,
		               |	ВложенныйЗапрос.Партнер КАК Партнер,
		               |	ВложенныйЗапрос.СегментПартнеров КАК СегментПартнеров,
		               |	ВложенныйЗапрос.Скидка КАК Скидка
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		СоглашенияСКлиентамиЦеновыеГруппы.Ссылка КАК Ссылка,
		               |		СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
		               |		ВТ_Клиенты.Партнер КАК Партнер,
		               |		СоглашенияСКлиентамиЦеновыеГруппы.Ссылка.Партнер КАК Партнер1,
		               |		ВТ_Клиенты.СегментПартнеров КАК СегментПартнеров,
		               |		ВТ_Клиенты.Скидка КАК Скидка
		               |	ИЗ
		               |		ВТ_Клиенты КАК ВТ_Клиенты
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
		               |			ПО ВТ_Клиенты.Партнер = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка.Партнер) КАК ВложенныйЗапрос
		               |ГДЕ
		               |	ВложенныйЗапрос.Ссылка <> &СсылкаПустая
		               |	И ВложенныйЗапрос.ЦеноваяГруппа В(&ЦеноваяГруппа)";
		Запрос.УстановитьПараметр("ТекущаяСкидка",МассивИзмененныхСкидок);
		Запрос.УстановитьПараметр("СсылкаПустая",Справочники.СкидкиНаценки.ПустаяСсылка());
		Запрос.УстановитьПараметр("ЦеноваяГруппа",МассивЦГПоСкидкам);
		
		РезультатПоСкидкам = Запрос.Выполнить().Выбрать();
		Пока РезультатПоСкидкам.Следующий() цикл
			// контороль на приоритет изменения по скидке от тарифа (т.е то, что даективировалось скидкой по тарифу не двигается изменением скидки категорной и в историю не пишется)
			СтруктураПОТарифу = Новый Структура("Порог_Скидка,ОснованиеИзменения,ЦеноваяГруппа",Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа,Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа,РезультатПоСкидкам.ЦеноваяГруппа);
			МассивОтбора = ТаблицаИзменныхДанныхДляЗаписи.НайтиСтроки(СтруктураОтбора);
			Если МассивОтбора.Количество() > 0 Тогда Продолжить; КонецЕсли;	
			
			ТекущееСоглашение = РезультатПоСкидкам.Ссылка.получитьобъект();
			СтруктураотбораЦГ = Новый Структура("ЦеноваяГруппа",РезультатПоСкидкам.ЦеноваяГруппа);
			МассивЗначений = ТекущееСоглашение.ЦеновыеГруппы.найтистроки(СтруктураотбораЦГ);
			Для Каждого СтрокаМассива из МассивЗначений Цикл 
				СтрокаМассива.Деактивирован = Истина;
				
				// проверяем на изменение значения:
				ЗначениеИзменения = СтрокаМассива.ПроцентИндивидуальнойСкидкиНаценки;
				СтруктураИзменения = Новый Структура("ЦеноваяГруппа,Порог_Скидка",СтрокаМассива.ЦеноваяГруппа,ТекущееСоглашение);
				МассивОтбораИзменений = ТаблицаИзменныхДанныхДляЗаписи.НайтиСтроки(СтруктураИзменения);
				Если МассивОтбораИзменений.Количество() <> 0 Тогда 
					ЗначениеИзменения = МассивОтбораИзменений[0].ЗначениеПоказателя;
				КонецЕсли;
				
								
				// формируем запись в регистр истории изменения ЦГ по соглашениям
				Запись = РегистрыСведений.ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашений.СоздатьМенеджерЗаписи();
				Запись.Активность 		= Истина;
				Запись.Деактивирован 	= СтрокаМассива.Деактивирован;
				Запись.Период 			= ТекущаяДата();
				Запись.Пользователь		= Пользователи.ТекущийПользователь();
				Запись.Соглашение 		= ТекущееСоглашение.Ссылка;
				Запись.ЦеноваяГруппа    = СтрокаМассива.ЦеноваяГруппа; 
				Если ЗначениеИзменения <> СтрокаМассива.ПроцентИндивидуальнойСкидкиНаценки Тогда 
					Запись.ЗначениеСкидки_Наценки = ЗначениеИзменения;
				КонецЕсли;
				Запись.Причина = РезультатПоСкидкам.Скидка;
				Запись.Записать(); 
				
				Если ВыводитьСообщения Тогда 
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Признак <Деактивирован> установлен для ценовой группы: "+СтрокаМассива.ЦеноваяГруппа.Наименование+" в соглашении с клиентом: "+ТекущееСоглашение.Наименование;
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЦикла;
			ТекущееСоглашение.Записать();
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультат(Команда)
	Если ТаблицаИзменныхДанныхДляЗаписи.Количество() > 0 Тогда 
		ТекстВопроса =  "Внимание! "+Символы.ПС+  
						"Внесенные изменения коснутся "+ТаблицаИзменныхДанныхДляЗаписи.Количество()+" элементов справочника Скидки/наценки и Пороги ограничений"+Символы.ПС+
						"Продолжить?";
	
		СтруктураРеквизитов = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ИзменениеДанныхЗавершение", ЭтотОбъект, СтруктураРеквизитов); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ВыводитьСообщения Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нет изменений для записи.";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеДанныхЗавершение(Ответ, СтруктураРеквизитов) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЗаписатьРезультатНаСервере();
	Сообщить("Запись изменений завершена.");
	ТаблицаИзменныхДанныхДляЗаписи.Очистить();
КонецПроцедуры

&НаСервере
Функция ПроверитьРасшифровкуНаСервере(Расшифровка)
	ПризнакЗащиты = Ложь;
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Если Данные.Элементы.Получить(Расшифровка).ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение тогда
		ПризнакЗащиты = Истина;
	КонецЕсли;	
	Возврат  ПризнакЗащиты;
КонецФункции	

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	Расшифровка = Элемент.ТекущаяОбласть.Расшифровка;
	Если НЕ Расшифровка = Неопределено Тогда 
		ПризнакСнятияЗащиты = ПроверитьРасшифровкуНаСервере(Расшифровка);
		Область.Защита = ПризнакСнятияЗащиты;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖРОбъектов(Команда)
	МассивСобытий = Новый Массив;
	МассивСобытий.Добавить("Данные.Изменение");
	МассивСобытий.Добавить("Данные.Добавление");
	
	ПараметрыФормы = Новый Структура("СобытиеЖурналаРегистрации,ДатаНачала, ДатаОкончания,Комменарий",
			                         МассивСобытий,НачалоДня(ТекущаяДата()) , ТекущаяДата(), "Запись данных при выполнении обработки АРМ Матрица ценообразования");
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ТаблицаДанныхРезультата.Очистить();
	ТаблицаИзменныхДанныхДляЗаписи.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = "Работа в данном окне не завершена! Необходимо корректное зактрытие обработки!";
		Отказ = Истина;
	ИначеЕсли ЗакрытиеРазрешено = Неопределено Тогда
		ПриЗакрытии(ЗавершениеРаботы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтбор(Команда)
	Если Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь Тогда 
		Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Истина;
	иначе
		Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьЗаголовки(Команда)
	Элементы.Результат.ОтображатьЗаголовки = Показатьзаголовки;
КонецПроцедуры





/// обработка данных дополнительной расшифровки
&НаКлиенте
Функция ПолучитьСписокДопДействий(Расшифровка)
 
 ДопМеню = Новый СписокЗначений;
 Допменю.Добавить("ПоказатьИсториюИзменения","Показать историю изменения",,БиблиотекаКартинок.ИсторияИзменений);
 
 Возврат  ДопМеню;
 
КонецФункции

&НаКлиенте
Процедура ПоказатьИсторию(СтруктураРасшифровки)
	
	Если СтруктураРасшифровки.Свойство("Порог_Скидка") и СтруктураРасшифровки.Свойство("ЦеноваяГруппа")	Тогда 
		Если ЗначениеЗаполнено(СтруктураРасшифровки.Порог_Скидка) и ЗначениеЗаполнено(СтруктураРасшифровки.ЦеноваяГруппа)  Тогда 
			СтруктураОтбораРегистра = Новый Структура("Порог_Скидка,ЦеноваяГруппа",СтруктураРасшифровки.Порог_Скидка,СтруктураРасшифровки.ЦеноваяГруппа);
			ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбораРегистра);
		
			ОткрытьФорму("РегистрСведений.ГИГ_ИсторияИзмененийЗначениейПороговИСкидок.ФормаСписка",ПараметрыОткрытия,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	Перем ВыполненноеДействие;
	СтандартнаяОбработка = Ложь;
	ОбработкаРасшифровкиКД = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));            
	ПараметрДействия = Неопределено;    
	
	МассивДоступныхДействий =  Новый Массив;
    МассивДоступныхДействий.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
    
    ЗначенияРасшифровки = ПолучитьВсеЗначенияРасшифровкиЯчейки(Расшифровка);

	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураРасшифровки",ЗначенияРасшифровки);
	ДополнительныеПараметры.Вставить("ЗначениеРасш",Расшифровка);
	ДополнительныеПараметры.Вставить("АдресСхемы", ДанныеРасшифровки);
	ДополнительныеПараметры.Вставить("ПараметрыОбработчика", Неопределено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиГИГ_МатрицаЗавершение",ЭтаФорма,ДополнительныеПараметры);
	
	ОбработкаРасшифровкиКД.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, МассивДоступныхДействий,ПолучитьСписокДопДействий(Расшифровка));
			
	Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда                        
		Если  ВыполненноеДействие = "ПоказатьИсториюИзменения" Тогда
			ПоказатьИсторию(Расшифровка);
		КонецЕсли;                   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиГИГ_МатрицаЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт 
	
	Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		
			Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
				ПоказатьЗначение(,ПараметрВыполненногоДействия);
			КонецЕсли;
			Если  ВыполненноеДействие = "ПоказатьИсториюИзменения" Тогда
				ПоказатьИсторию(ДополнительныеПараметры.СтруктураРасшифровки);
			КонецЕсли;                   
		КонецЕсли;
	
КонецПроцедуры

