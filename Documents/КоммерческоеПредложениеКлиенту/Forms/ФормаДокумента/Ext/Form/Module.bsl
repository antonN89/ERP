
&НаСервере
Функция ГИГ_ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение) //Схемы обеспечения потребностей 
	
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	ПутиКДанным = Новый Соответствие; //Описание особенностей формы
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки"); // дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано);
	ПараметрыДокумента.Вставить("ГруппаСкладов", Объект.Склад);
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыКлиентов);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	
	//Свернуть
	
	СтруктураОтбор= Новый Структура("Номенклатура,Характеристика,ВидЦены,Цена,ПроцентРучнойСкидки,СтавкаНДС");
	СтруктураСуммирование = Новый Структура("Количество,Количество");
	СтрокиВыбранные = Новый Массив;
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.Склад = Объект.Склад;
		Строка.КодСтроки = Строка.ПолучитьИдентификатор();
	КонецЦикла;
	
	СоответствиеСтрок =  Объект.Товары.Выгрузить(,"Номенклатура,Характеристика,ВидЦены,Цена,ПроцентРучнойСкидки,СтавкаНДС,ИсходныйНомерСтроки");
	СоответствиеСтрок.Очистить();
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 1 Тогда
		СверткаПроизводилась = Истина;
		Для Каждого ИдентификаторСтроки из  Элементы.Товары.ВыделенныеСтроки Цикл
			
			Строка = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			ЗаполнитьЗначенияСвойств(СтруктураОтбор,Строка);
			
			
			Стр = СоответствиеСтрок.НайтиСтроки(СтруктураОтбор);
			
			Если НЕ Стр.Количество() Тогда
				Нстр = СоответствиеСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(Нстр,Строка);
				Нстр.ИсходныйНомерСтроки = ИдентификаторСтроки;
				СтрокиВыбранные.Добавить(ИдентификаторСтроки);
			Иначе
				ЗаполнитьЗначенияСвойств(СтруктураСуммирование,Строка);
				
				СтрокаПриемник = Объект.Товары.НайтиПоИдентификатору(Стр[0].ИсходныйНомерСтроки);
				
				Для Каждого Колонка из СтруктураСуммирование Цикл
					СтрокаПриемник[Колонка.Ключ] = СтрокаПриемник[Колонка.Ключ] + Колонка.Значение;
				КонецЦикла;
				
				Объект.Товары.Удалить(Строка);
			КонецЕсли;	
			
			
		КонецЦикла;
	Иначе
		СверткаПроизводилась = Ложь;
		СтрокиВыбранные = Элементы.Товары.ВыделенныеСтроки;
	КонецЕсли;
	
	
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
	СтрокиВыбранные,
	Объект,
	Объект.Товары,
	ПараметрыЗаполнения,
	ПараметрыДокумента);
	
	
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура(
		"Ошибки",
		ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
		Таблица, "Товары", НСтр("ru = 'Товары'")));
	КонецЕсли;
	
	ГИГ_ДополнитьОбеспечение(Таблица,СтрокиВыбранные);
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.КоммерческоеПредложениеКлиенту";
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	ПараметрыСерийСклада = Ложь;
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = Ложь;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям =Ложь;
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	//Перенос результатов в документ.
	ТекстОповещения = Документы.КоммерческоеПредложениеКлиенту.ГИГ_ЗаполнитьВариантОбеспечения(
	Объект, ЭтаФорма, "СтрокиТовары", Таблица, , ЗависимыеРеквизиты());
	
	Если СверткаПроизводилась Тогда
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", КП_УправляемыеСкидки);
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВариантПараметровНаСервере(ВариантРасчета)
	Если ЗначениеЗаполнено(ВариантРасчета) Тогда
		Возврат ВариантРасчета.ВариантПараметров;
	Иначе
		Возврат Справочники.гиг_ВариантыПараметровНоменклатурыПроекта.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоНоменклатурыПроектаНаСервере(НоменклатураПроекта)
	Если ЗначениеЗаполнено(НоменклатураПроекта) Тогда
		Возврат НоменклатураПроекта.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиВариантаРасчетаНаСервере(ВариантРасчета)
	Если ЗначениеЗаполнено(ВариантРасчета) Тогда
		Возврат ВариантРасчета.КоэффициентУпаковки;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

//&НаСервере
//Функция ПолучитьМаксимальноеЗначение(Номенклатура,ТекущееЗначениеСкидкиНаценки)
//	МаксСкидка = 0;
//	Данные = Объект.Соглашение;
//	СтруктураОтбора = Новый Структура("ЦеноваяГруппа",Номенклатура.ЦеноваяГруппа);
//	МассивСтрок = Данные.ЦеновыеГруппы.НайтиСтроки(СтруктураОтбора);
//	Если МассивСтрок.Количество() > 0 Тогда 
//		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
//			Возврат Макс(МассивСтрок[0].ПроцентРучнойСкидки,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки);
//		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
//			ПроцентНаценкиОбщий = МассивСтрок[0].ПроцентРучнойНаценки;
//			ПроцентНаценкиИнд   = ?(МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки < 0,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки,0);
//			Возврат Мин(ПроцентНаценкиОбщий,ПроцентНаценкиИнд);
//		КонецЕсли;
//	Иначе
//		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
//			Возврат Объект.Соглашение.ПроцентРучнойСкидки;
//		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
//			Возврат Объект.Соглашение.ПроцентРучнойНаценки;
//		КонецЕсли;
//	КонецЕсли;
//КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНоменклатуруПоВариантуРасчетов(ВариантРасчета)
	Возврат ВариантРасчета.Номенклатура;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОсновнойВариантПараметровНаСервере(НоменклатураПроекта)
	Если ЗначениеЗаполнено(НоменклатураПроекта) Тогда
		Возврат НоменклатураПроекта.ОсновнойВариантПараметров;
	Иначе
		Возврат Справочники.гиг_ВариантыПараметровНоменклатурыПроекта.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОсновнойВариантРасчетаНаСервере(НоменклатураПроекта)
	Если ЗначениеЗаполнено(НоменклатураПроекта) Тогда
		Возврат НоменклатураПроекта.ОсновнойВариантРасчетов;
	Иначе
		Возврат Справочники.гиг_ВариантыРасчетовНоменклатурыПроекта.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьХарактеристикуПоВариантуРасчетов(ВариантРасчета)
	Возврат ВариантРасчета.Характеристика;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуВариантаРасчетаНаСервере(ВариантРасчета)
	Если ЗначениеЗаполнено(ВариантРасчета) И ВариантРасчета.Кратность <> 0 Тогда
		Возврат ВариантРасчета.Цена * ВариантРасчета.Курс / ВариантРасчета.Кратность;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервере
Функция РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЦеноваяГруппа",СсылкаНоменклатура.ЦеноваяГруппа);
	МассивСтрок = СтруктураТаблиц.Ограничения.НайтиСтроки(СтруктураОтбора);
	ЗначениеСкидки = 0;
	Если МассивСтрок.Количество() > 0 Тогда 
		Попытка
			Если НЕ МассивСтрок[0].ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка() и НЕ МассивСтрок[0].Деактивирован Тогда 
				ЗначениеСкидки = ?(МассивСтрок[0].МаксимальныйПроцентРучнойСкидки = 0,МассивСтрок[0].МаксимальныйПроцентРучнойНаценки,МассивСтрок[0].МаксимальныйПроцентРучнойСкидки);
			КонецЕсли;
		Исключение	
		КонецПопытки;
	КонецЕсли;;
	Возврат ЗначениеСкидки;
КонецФункции

&НаСервере
Функция ТестРасчетСк()
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", КП_УправляемыеСкидки);
	
	СписокПрименныхСкидок = Новый СписокЗначений;
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	Если ПримененныеСкидки.ДеревоСкидок.Строки.Количество() > 0 Тогда 
		Для Каждого СтрокаСписка из ПримененныеСкидки.ДеревоСкидок.Строки[0].Строки цикл
			Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий.Количество()>0  Тогда  // есть дополнительные условия по скидке... нужна на них проверка
				Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий[0].Выполнено = Истина тогда
					СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
				КонецЕсли;
			иначе // условий нет.. все скидки - в список...
				СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокПрименныхСкидок;
КонецФункции

&НаКлиенте
Процедура ГИГ_ГИГ_ВариантыРасчетаВариантРасчетаПриИзмененииПосле(Элемент)
	ТекущаяСтрока = Элементы.ГИГ_ВариантыРасчета.ТекущиеДанные;
	ТекущаяСтрока.ВариантПараметров = ПолучитьВариантПараметровНаСервере(ТекущаяСтрока.ВариантРасчета);
	ТекущаяСтрока.Цена = ПолучитьЦенуВариантаРасчетаНаСервере(ТекущаяСтрока.ВариантРасчета);
	ТекущаяСтрока.КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиВариантаРасчетаНаСервере(ТекущаяСтрока.ВариантРасчета);
	РассчитатьСуммыВТабличнойЧастиВариантовРасчета(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ВариантыРасчетаКоличествоПриИзмененииПосле(Элемент)
	ТекущаяСтрока = Элементы.ГИГ_ВариантыРасчета.ТекущиеДанные;
	РассчитатьСуммыВТабличнойЧастиВариантовРасчета(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ВариантыРасчетаНоменклатураПроектаПриИзмененииПосле(Элемент)
	ТекущаяСтрока = Элементы.ГИГ_ВариантыРасчета.ТекущиеДанные;
	ТекущаяСтрока.ВариантРасчета = ПолучитьОсновнойВариантРасчетаНаСервере(ТекущаяСтрока.НоменклатураПроекта);
	ТекущаяСтрока.ВариантПараметров = ПолучитьОсновнойВариантПараметровНаСервере(ТекущаяСтрока.НоменклатураПроекта);
	ТекущаяСтрока.Цена = ПолучитьЦенуВариантаРасчетаНаСервере(ТекущаяСтрока.ВариантРасчета);
	ТекущаяСтрока.Количество = ПолучитьКоличествоНоменклатурыПроектаНаСервере(ТекущаяСтрока.НоменклатураПроекта);
	ТекущаяСтрока.КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиВариантаРасчетаНаСервере(ТекущаяСтрока.ВариантРасчета);
	РассчитатьСуммыВТабличнойЧастиВариантовРасчета(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ВариантыРасчетаПроцентРучнойСкидкиПриИзмененииПосле(Элемент)
	ТекущаяСтрока = Элементы.ГИГ_ВариантыРасчета.ТекущиеДанные;
	ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.Количество * ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
	РассчитатьСуммыВТабличнойЧастиВариантовРасчета(ТекущаяСтрока, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ВариантыРасчетаСуммаДопЗатратПриИзмененииПосле(Элемент)
	ТекущаяСтрока = Элементы.ГИГ_ВариантыРасчета.ТекущиеДанные;
	РассчитатьСуммыВТабличнойЧастиВариантовРасчета(ТекущаяСтрока, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ВариантыРасчетаСуммаРучнойСкидкиПриИзмененииПосле(Элемент)
	ТекущаяСтрока = Элементы.ГИГ_ВариантыРасчета.ТекущиеДанные;
	РассчитатьСуммыВТабличнойЧастиВариантовРасчета(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ВариантыРасчетаЦенаПриИзмененииПосле(Элемент)
	ТекущаяСтрока = Элементы.ГИГ_ВариантыРасчета.ТекущиеДанные;
	РассчитатьСуммыВТабличнойЧастиВариантовРасчета(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ДополнительныеЗатратыРаспределятьПоКоэффициентуУпаковочностиПриИзмененииПосле(Элемент)
	ТекущаяСтрока = Элементы.ГИГ_ДополнительныеЗатраты.ТекущиеДанные;
	ТекущаяСтрока.РаспределятьПоСуммеИзделий = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ДополнительныеЗатратыРаспределятьПоСуммеИзделийПриИзмененииПосле(Элемент)
	ТекущаяСтрока = Элементы.ГИГ_ДополнительныеЗатраты.ТекущиеДанные;
	ТекущаяСтрока.РаспределятьПоКоэффициентуУпаковочности = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ЗаполнитьИзКонструктораКППосле(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ГИГ_ПослеЗакрытияВопросаЗаполнитьИзКонструктораКП", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'При заполнении из конструктора КП будет очищена табличная часть ""Товары"". Продолжить?';"
	+ " en = 'Do you want to continue?'"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_ПроектПриИзмененииПосле(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПроектПриИзмененииПослеЗакрытияВопроса", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "При изменении проекта будут перезаполнены табличные части конструктора КП. Продолжить?", Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ГИГ_РаспределитьНаВсеИзделияПосле(Команда)
	ГИГ_ГИГ_РаспределитьНаВсеИзделияПослеНаСервере();
	Для Каждого ТекСтрока Из Объект.ГИГ_ВариантыРасчета Цикл
		РассчитатьСуммыВТабличнойЧастиВариантовРасчета(ТекСтрока, Ложь);
	КонецЦикла;
КонецПроцедуры

//процедура распределения дополнительных затрат пропорционально указанной базе
&НаСервере
Процедура ГИГ_ГИГ_РаспределитьНаВсеИзделияПослеНаСервере()
	БазаРаспределенияСумма = Объект.ГИГ_ВариантыРасчета.Итог("Сумма");
	БазаРаспределенияКоэффициентУпаковки = Объект.ГИГ_ВариантыРасчета.Итог("КоэффициентУпаковки");
	Для Каждого ТекСтрока Из Объект.ГИГ_ВариантыРасчета Цикл
		ТекСтрока.СуммаДопЗатрат = 0;
	КонецЦикла;
	Для Каждого СтрокаЗатрат Из Объект.ГИГ_ДополнительныеЗатраты Цикл
		СуммаКРаспределению = СтрокаЗатрат.Сумма;
		Если СтрокаЗатрат.РаспределятьПоСуммеИзделий Тогда
			БазаРаспределения = БазаРаспределенияСумма;
			ИмяРеквизита = "Сумма";
		ИначеЕсли СтрокаЗатрат.РаспределятьПоКоэффициентуУпаковочности Тогда
			БазаРаспределения = БазаРаспределенияКоэффициентУпаковки;
			ИмяРеквизита = "КоэффициентУпаковки";
		Иначе
			Продолжить;
		КонецЕсли;
		Если БазаРаспределения = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "База распределения ("+?(СтрокаЗатрат.РаспределятьПоСуммеИзделий = Истина, "Сумма", "Коэффициент упаковочности")+") для " + СтрокаЗатрат.Номенклатура + " равна 0! Распределение не выполнено!";
			Сообщение.Поле = "Объект.ГИГ_ДополнительныеЗатраты["+(СтрокаЗатрат.НомерСтроки-1)+"].Номенклатура";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		Для Каждого ТекСтрока Из Объект.ГИГ_ВариантыРасчета Цикл
			ДопЗатраты = ТекСтрока[ИмяРеквизита]/БазаРаспределения * СуммаКРаспределению;
			БазаРаспределения = БазаРаспределения - ТекСтрока[ИмяРеквизита];
			СуммаКРаспределению = СуммаКРаспределению - ДопЗатраты;
			ТекСтрока.СуммаДопЗатрат = ТекСтрока.СуммаДопЗатрат + ДопЗатраты;
			Если БазаРаспределения = 0 Тогда  //проверим, есть ли еще не распределенные строки
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ГИГ_ДобавитьНовыеЭлементыНаСервере()
	
	КвЧисла = Новый КвалификаторыЧисла(15,2);	
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("ПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.Товары", "% общей скидки", Истина));
	нРеквизиты.Добавить(Новый РеквизитФормы("СуммаПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.Товары", "Общая скидка", Истина));
	
	нРеквизиты.Добавить(Новый РеквизитФормы("КодСтроки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10, 0)), "Объект.Товары", "Код строки", Истина));
	нРеквизиты.Добавить(Новый РеквизитФормы("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "Объект.Товары", "Склад", Истина));
	
	ИзменитьРеквизиты(нРеквизиты);
	
	нЭлемент = Элементы.Добавить("ПроцентОбщий", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.ПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.ПодчиненныеЭлементы.ПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	//<++ Гигабайт Казаков М.В. Схемы обеспечения потребностей  
	нЭлемент = Элементы.Добавить("СхемаОбеспечения", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.ГИГ_СхемаОбеспечения"; 
	НЭлемент.УстановитьДействие("НачалоВыбора","ГИГ_СхемаОбеспеченияНачалоВыбора");
	нЭлемент.УстановитьДействие("ОбработкаВыбора", "ГИГ_СхемаОбеспеченияОбработкаВыбора");
	
	нЭлемент = Элементы.Добавить("ГИГ_СрокПоставки", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	нЭлемент.ТолькоПросмотр = Истина;
	нЭлемент.ПутьКДанным = "Объект.Товары.ГИГ_СрокПоставки"; 
	
	нЭлемент = Элементы.Добавить("ДатаОтгрузки", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.ДатаОтгрузки"; 
	//++> Гигабайт Казаков М.В. 
	
	нЭлемент = Элементы.Добавить("СуммаПроцентОбщий", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.СуммаПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.ПодчиненныеЭлементы.СуммаПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СуммаПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	Если Объект.Товары.Количество() <> 0 Тогда 
		Для Каждого ТекущаяСтрока из Объект.Товары цикл
			ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
			ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		КонецЦикла;	
	КонецЕсли;
	
	Элементы.Клиент.УстановитьДействие("ОбработкаВыбора", "ПартнерОбработкаВыбора");
	//Элементы.Соглашение.УстановитьДействие("ОбработкаВыбора", "СоглашениеОбработкаВыбора");
	
	КомандаОбеспечение = Команды.Добавить("Обеспечение");
	КомандаОбеспечение.Действие = "Обеспечение";
	
	Элемент = Элементы.Добавить("ТоварыОбеспечение", Тип("КнопкаФормы"), Элементы.СтраницаТоварыУслуги.ПодчиненныеЭлементы.Товары.КоманднаяПанель);
	Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Элемент.ИмяКоманды = "Обеспечение";
	
КонецПроцедуры

&НаСервере
Процедура ГИГ_ДополнитьОбеспечение(Таблица,ИсходныеСтроки); //<++ Гигабайт Казаков М.В. 
	
	СкладыДляОпределенияСхем = Новый Массив;
	СкладыДляОпределенияСхем.Добавить(Объект.Склад);	
	ТаблицаСхемОбесчения = ГИГ_МодульСервер.ГИГ_ПолучитьТаблицуДоступныхСхемОбеспечения(СкладыДляОпределенияСхем);
	
	СтрокиТовары = Объект.Товары.Выгрузить(,"Номенклатура,Характеристика,ИсходныйНомерСтроки");
	СтрокиТовары.Очистить();
	
	Для Каждого Индекс из ИсходныеСтроки Цикл
		СтрТовара = СтрокиТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТовара,Объект.Товары.НайтиПоИдентификатору(Индекс));
		СтрТовара.ИсходныйНомерСтроки = Индекс;
	КонецЦикла;
	
	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ; 
	Запрос.Текст="ВЫБРАТЬ
	|	Товары.ИсходныйНомерСтроки  КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Табл.Идентификатор КАК Идентификатор,
	|	Табл.Склад КАК Склад,
	|	Табл.ВариантОбеспечения КАК ВариантОбеспечения,
	|	Табл.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Табл.Количество КАК Количество,
	|	Табл.Отгружено КАК Отгружено,
	|	Табл.Приоритет КАК Приоритет,
	|	Табл.ПриоритетТипаОбеспечения КАК ПриоритетТипаОбеспечения,
	|	Табл.СкладНаименование КАК СкладНаименование
	|ПОМЕСТИТЬ ВТТаблицаОбеспечения
	|ИЗ
	|	&Табл КАК Табл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСхем.Склад КАК Склад,
	|	ТаблицаСхем.СкладИсточник КАК СкладИсточник,
	|	ТаблицаСхем.СхемаОбеспечения КАК СхемаОбеспечения,
	|	ТаблицаСхем.СрокОбеспеченияМин КАК СрокОбеспеченияМин,
	|	ТаблицаСхем.СрокОбеспеченияМакс КАК СрокОбеспеченияМакс
	|ПОМЕСТИТЬ ВТдоступныеСхемы
	|ИЗ
	|	&ТаблицаСхем КАК ТаблицаСхем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСкладыДляПеремещения
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТдоступныеСхемы КАК ВТдоступныеСхемы
	|		ПО Склады.Ссылка = ВТдоступныеСхемы.СкладИсточник
	|			И (ВТдоступныеСхемы.Склад = &Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.ВНаличииОстаток КАК ВНаличии,
	|	Т.ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада,
	|	Т.ВРезервеПодЗаказОстаток КАК ВРезервеПодЗаказ
	|ПОМЕСТИТЬ ВтСвободныеОстатки
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Склад В
	|					(ВЫБРАТЬ
	|						ВТСкладыДляПеремещения.Ссылка
	|					ИЗ
	|						ВТСкладыДляПеремещения)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТТовары.Номенклатура
	|					ИЗ
	|						ВТТовары)) КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	СУММА(Т.Свободно) КАК Свободно,
	|	&ДатаЗаказа КАК ДатаДоступности,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТДоступныеДляПеремещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Склад КАК Склад,
	|		Т.ВНаличии - Т.ВРезервеСоСклада - Т.ВРезервеПодЗаказ КАК Свободно,
	|		Т.Номенклатура КАК Номенклатура,
	|		Т.Характеристика КАК Характеристика
	|	ИЗ
	|		ВтСвободныеОстатки КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Склад,
	|		Т.Количество,
	|		Т.Номенклатура,
	|		Т.Характеристика
	|	ИЗ
	|		ВТТовары КАК ВТТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
	|			ПО ВТТовары.Номенклатура = Т.Номенклатура
	|				И ВТТовары.Характеристика = Т.Характеристика
	|				И (Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
	|				И (Т.Количество < 0)) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Склад,
	|	Т.Количество + ЕСТЬNULL(ОстаткиСклада.ВНаличии - ОстаткиСклада.ВРезервеСоСклада - ОстаткиСклада.ВРезервеПодЗаказ, 0),
	|	Т.ДатаДоступности,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|ИЗ
	|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК ОстаткиСклада
	|		ПО Т.Склад = ОстаткиСклада.Склад
	|			И Т.Характеристика = ОстаткиСклада.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО Т.Номенклатура = ВТТовары.Номенклатура
	|			И Т.Характеристика = ВТТовары.Характеристика,
	|	ВТСкладыДляПеремещения КАК ВТСкладыДляПеремещения
	|ГДЕ
	|	Т.ДатаДоступности > ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Набор.Номенклатура КАК Номенклатура,
	|	СУММА(Набор.ВНаличии) КАК Доступно,
	|	Набор.Склад КАК Склад,
	|	Набор.СхемаОбеспечения КАК СхемаОбеспечения,
	|	СУММА(Набор.СпособОбеспеченияПотребностейСрокИсполненияЗаказа) КАК СрокОбеспеченияМин,
	|	СУММА(Набор.СпособОбеспеченияПотребностейГарантированныйСрокОтгрузки) КАК СрокОбеспеченияМакс,
	|	Набор.ГИГ_Приоритет КАК СхемаОбеспеченияГИГ_Приоритет,
	|	Набор.ГИГ_ЗакупкаСПроизводства КАК СхемаОбеспеченияГИГ_ЗакупкаСПроизводства,
	|	Набор.Характеристика КАК Характеристика,
	|	Набор.ДатаДоступности КАК ДатаДоступности
	|ПОМЕСТИТЬ ВТСхемы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГИГ_НоменклатураНаСкладеПоставщика.Номенклатура КАК Номенклатура,
	|		ГИГ_НоменклатураНаСкладеПоставщика.Характеристика КАК Характеристика,
	|		ГИГ_НоменклатураНаСкладеПоставщика.Количество КАК ВНаличии,
	|		ВТдоступныеСхемы.Склад КАК Склад,
	|		ВТдоступныеСхемы.СхемаОбеспечения КАК СхемаОбеспечения,
	|		ВТдоступныеСхемы.СрокОбеспеченияМин КАК СпособОбеспеченияПотребностейСрокИсполненияЗаказа,
	|		ВТдоступныеСхемы.СрокОбеспеченияМакс КАК СпособОбеспеченияПотребностейГарантированныйСрокОтгрузки,
	|		&ДатаЗаказа КАК ДатаДоступности,
	|		СхемыОбеспечения.ГИГ_Приоритет КАК ГИГ_Приоритет,
	|		СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства КАК ГИГ_ЗакупкаСПроизводства
	|	ИЗ
	|		ВТТовары КАК ВТТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГИГ_НоменклатураНаСкладеПоставщика КАК ГИГ_НоменклатураНаСкладеПоставщика
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТдоступныеСхемы КАК ВТдоступныеСхемы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыОбеспечения КАК СхемыОбеспечения
	|					ПО ВТдоступныеСхемы.СхемаОбеспечения = СхемыОбеспечения.Ссылка
	|						И (НЕ СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства)
	|				ПО ГИГ_НоменклатураНаСкладеПоставщика.Склад = ВТдоступныеСхемы.СкладИсточник
	|					И (ВТдоступныеСхемы.Склад = &Склад)
	|			ПО ВТТовары.Номенклатура = ГИГ_НоменклатураНаСкладеПоставщика.Номенклатура
	|				И ВТТовары.Характеристика = ГИГ_НоменклатураНаСкладеПоставщика.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура,
	|		ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Характеристика,
	|		0,
	|		ВТдоступныеСхемы.Склад,
	|		ВТдоступныеСхемы.СхемаОбеспечения,
	|		ВТдоступныеСхемы.СрокОбеспеченияМин + ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки,
	|		ВТдоступныеСхемы.СрокОбеспеченияМакс + ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставки,
	|		&ДатаЗаказа,
	|		СхемыОбеспечения.ГИГ_Приоритет,
	|		СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства
	|	ИЗ
	|		ВТТовары КАК ВТТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства КАК ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТдоступныеСхемы КАК ВТдоступныеСхемы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыОбеспечения КАК СхемыОбеспечения
	|					ПО ВТдоступныеСхемы.СхемаОбеспечения = СхемыОбеспечения.Ссылка
	|						И (СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства)
	|				ПО ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СкладПоставщика = ВТдоступныеСхемы.СкладИсточник
	|					И (ВТдоступныеСхемы.Склад = &Склад)
	|			ПО ВТТовары.Номенклатура = ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Номенклатура
	|				И ВТТовары.Характеристика = ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТДоступныеДляПеремещения.Номенклатура,
	|		ВТДоступныеДляПеремещения.Характеристика,
	|		ВТДоступныеДляПеремещения.Свободно,
	|		ВТдоступныеСхемы.Склад,
	|		ВТдоступныеСхемы.СхемаОбеспечения,
	|		ВТдоступныеСхемы.СрокОбеспеченияМин,
	|		ВТдоступныеСхемы.СрокОбеспеченияМакс,
	|		ВТДоступныеДляПеремещения.ДатаДоступности,
	|		СхемыОбеспечения.ГИГ_Приоритет,
	|		СхемыОбеспечения.ГИГ_ЗакупкаСПроизводства
	|	ИЗ
	|		ВТДоступныеДляПеремещения КАК ВТДоступныеДляПеремещения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТдоступныеСхемы КАК ВТдоступныеСхемы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыОбеспечения КАК СхемыОбеспечения
	|				ПО ВТдоступныеСхемы.СхемаОбеспечения = СхемыОбеспечения.Ссылка
	|			ПО ВТДоступныеДляПеремещения.Склад = ВТдоступныеСхемы.СкладИсточник
	|				И (ВТдоступныеСхемы.Склад = &Склад)) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Номенклатура,
	|	Набор.Склад,
	|	Набор.СхемаОбеспечения,
	|	Набор.Характеристика,
	|	Набор.ДатаДоступности,
	|	Набор.ГИГ_Приоритет,
	|	Набор.ГИГ_ЗакупкаСПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаОбеспечения.Идентификатор КАК Идентификатор,
	|	ВТТаблицаОбеспечения.Склад КАК Склад,
	|	ВТТаблицаОбеспечения.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВТТаблицаОбеспечения.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТТаблицаОбеспечения.Количество КАК Количество,
	|	ВТТаблицаОбеспечения.Отгружено КАК Отгружено,
	|	ВТТаблицаОбеспечения.Приоритет КАК Приоритет,
	|	ВТТаблицаОбеспечения.ПриоритетТипаОбеспечения КАК ПриоритетТипаОбеспечения,
	|	ВТТаблицаОбеспечения.СкладНаименование КАК СкладНаименование,
	|	ВТТовары.Номенклатура КАК Номенклатура,
	|	ВТТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТСтрокиКРаспределению
	|ИЗ
	|	ВТТаблицаОбеспечения КАК ВТТаблицаОбеспечения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО ВТТаблицаОбеспечения.Идентификатор = ВТТовары.НомерСтроки
	|			И (ВТТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|				ИЛИ ВТТаблицаОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаОбеспечения.Идентификатор КАК Идентификатор,
	|	ВТТаблицаОбеспечения.Склад КАК Склад,
	|	ВТТаблицаОбеспечения.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВТТаблицаОбеспечения.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТТаблицаОбеспечения.Количество КАК Количество,
	|	ВТТаблицаОбеспечения.Отгружено КАК Отгружено,
	|	ВТТаблицаОбеспечения.Приоритет КАК Приоритет,
	|	ВТТаблицаОбеспечения.ПриоритетТипаОбеспечения КАК ПриоритетТипаОбеспечения,
	|	ВТТаблицаОбеспечения.СкладНаименование КАК СкладНаименование,
	|	ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка) КАК ГИГ_СхемаОбеспечения,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК ГИГ_СрокПоставки
	|ИЗ
	|	ВТТаблицаОбеспечения КАК ВТТаблицаОбеспечения
	|ГДЕ
	|	ВТТаблицаОбеспечения.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И ВТТаблицаОбеспечения.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтрокиКРаспределению.Идентификатор КАК Идентификатор,
	|	ВТСтрокиКРаспределению.Склад КАК Склад,
	|	ВТСтрокиКРаспределению.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВТСтрокиКРаспределению.Количество КАК Количество,
	|	ВТСтрокиКРаспределению.Отгружено КАК Отгружено,
	|	ВТСтрокиКРаспределению.Приоритет КАК Приоритет,
	|	ВТСтрокиКРаспределению.ПриоритетТипаОбеспечения КАК ПриоритетТипаОбеспечения,
	|	ВТСтрокиКРаспределению.СкладНаименование КАК СкладНаименование,
	|	ВТСтрокиКРаспределению.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВТСхемы.СхемаОбеспечения, ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка)) КАК ГИГ_СхемаОбеспечения,
	|	ЕСТЬNULL(ВТСхемы.Доступно, 0) КАК Доступно,
	|	ВЫБОР
	|		КОГДА ВТСхемы.ДатаДоступности ЕСТЬ NULL
	|			ТОГДА &ДатаЗаказа
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТСхемы.ДатаДоступности, ДЕНЬ, ВТСхемы.СрокОбеспеченияМакс)
	|	КОНЕЦ КАК ДатаОтгрузки,
	|	ЕСТЬNULL(ВТСхемы.СхемаОбеспеченияГИГ_Приоритет, 9999) КАК ПриоритетСхемы,
	|	ЕСТЬNULL(ВТСхемы.СхемаОбеспеченияГИГ_ЗакупкаСПроизводства, ЛОЖЬ) КАК ЗакупкаСПроизводства,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК ГИГ_СрокПоставки,
	|	ЕСТЬNULL(ВТСхемы.СрокОбеспеченияМакс, 0) КАК СрокОбеспеченияМакс,
	|	ЕСТЬNULL(ВТСхемы.СрокОбеспеченияМин, 0) КАК СрокОбеспеченияМин
	|ИЗ
	|	ВТСтрокиКРаспределению КАК ВТСтрокиКРаспределению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСхемы КАК ВТСхемы
	|		ПО ВТСтрокиКРаспределению.Склад = ВТСхемы.Склад
	|			И ВТСтрокиКРаспределению.Номенклатура = ВТСхемы.Номенклатура
	|			И ВТСтрокиКРаспределению.Характеристика = ВТСхемы.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетСхемы,
	|	ДатаОтгрузки
	|ИТОГИ
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(ВариантОбеспечения),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(Отгружено),
	|	МАКСИМУМ(Приоритет),
	|	МАКСИМУМ(ПриоритетТипаОбеспечения),
	|	МАКСИМУМ(СкладНаименование),
	|	МАКСИМУМ(Доступно)
	|ПО
	|	Идентификатор";
	
	Запрос.УстановитьПараметр("Табл",Таблица);
	Запрос.УстановитьПараметр("Склад",Объект.Склад);
	Запрос.УстановитьПараметр("Товары",СтрокиТовары);
	
	Запрос.УстановитьПараметр("ТаблицаСхем",ТаблицаСхемОбесчения);
	Запрос.УстановитьПараметр("ДатаЗаказа",Объект.Дата);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДополненнаяТаблица = Результат[8].Выгрузить();
	
	ВыборкаКРаспределению = Результат[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКРаспределению.Следующий() Цикл
		
		КРаспределению = ВыборкаКРаспределению.Количество;
		
		ВыборкаКРаспределениюСтроки = ВыборкаКРаспределению.Выбрать();
		
		Пока КРаспределению > 0 Цикл
			
			Если НЕ ВыборкаКРаспределениюСтроки.Следующий() Тогда
				
				НовСтрока = ДополненнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаКРаспределению);
				НовСтрока.Количество = КРаспределению;
				НовСтрока.ДатаОтгрузки = '00010101';
				Прервать; 
			КонецЕсли;	 
			
			Если ВыборкаКРаспределениюСтроки.Доступно < КРаспределению 
				И ЗначениеЗаполнено(ВыборкаКРаспределениюСтроки.ГИГ_СхемаОбеспечения) 
				И НЕ ВыборкаКРаспределениюСтроки.ЗакупкаСПроизводства Тогда
				Количество = ВыборкаКРаспределениюСтроки.Доступно;
			Иначе
				Количество = КРаспределению;
			КонецЕсли;
			
			НовСтрока = ДополненнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаКРаспределениюСтроки);
			НовСтрока.Количество = Количество;
			Если ЗначениеЗаполнено(НовСтрока.ГИГ_СхемаОбеспечения) Тогда
				НовСтрока.ГИГ_СрокПоставки = ?(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин = ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс,"",Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМин)+" - ")+Строка(ВыборкаКРаспределениюСтроки.СрокОбеспеченияМакс) + " дн.";
			КонецЕсли;
			КРаспределению = КРаспределению - Количество; 
		КонецЦикла;
		
	КонецЦикла;
	
	ДополненнаяТаблица.Сортировать("Идентификатор,ДатаОтгрузки");
	
	Таблица = ДополненнаяТаблица;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ЗаполнитьВсеПоПроектуПосле(Команда)
	Если Не ЗначениеЗаполнено(Объект.ГИГ_Проект) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен реквизит ""Проект""!";
		Сообщение.Поле = "Объект.ГИГ_Проект";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьВсеПоПроектуПослеЗакрытияВопроса", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Будут перезаполнены все табличные части конструктора КП. Продолжить?", Режим, 0);
КонецПроцедуры

&НаСервере
Процедура ГИГ_ЗаполнитьВсеПоПроектуПослеНаСервере()
	ГИГ_ЗаполнитьПоПроектуПослеНаСервере();
	ГИГ_ЗаполнитьДопЗатратыПоПроектуПослеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ЗаполнитьДопЗатратыПоПроектуПосле(Команда)
	Если Не ЗначениеЗаполнено(Объект.ГИГ_Проект) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен реквизит ""Проект""!";
		Сообщение.Поле = "Объект.ГИГ_Проект";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДопЗатратыПоПроектуПослеЗакрытияВопроса", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Будет перезаполнена табличная часть дополнительных затрат. Продолжить?", Режим, 0);
КонецПроцедуры

&НаСервере
Процедура ГИГ_ЗаполнитьДопЗатратыПоПроектуПослеНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроектыГИГ_ДополнительныеЗатраты.Номенклатура КАК Номенклатура,
	|	ПроектыГИГ_ДополнительныеЗатраты.Сумма КАК Сумма,
	|	ПроектыГИГ_ДополнительныеЗатраты.РаспределятьПоСуммеИзделий КАК РаспределятьПоСуммеИзделий,
	|	ПроектыГИГ_ДополнительныеЗатраты.РаспределятьПоКоэффициентуУпаковочности КАК РаспределятьПоКоэффициентуУпаковочности
	|ИЗ
	|	Справочник.Проекты.ГИГ_ДополнительныеЗатраты КАК ПроектыГИГ_ДополнительныеЗатраты
	|ГДЕ
	|	ПроектыГИГ_ДополнительныеЗатраты.Ссылка = &Проект";
	Запрос.УстановитьПараметр("Проект", Объект.ГИГ_Проект);
	
	Объект.ГИГ_ДополнительныеЗатраты.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ЗаполнитьПоПроектуПосле(Команда)
	Если Не ЗначениеЗаполнено(Объект.ГИГ_Проект) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен реквизит ""Проект""!";
		Сообщение.Поле = "Объект.ГИГ_Проект";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоПроектуПослеЗакрытияВопроса", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Будет перезаполнена табличная часть вариантов расчета. Продолжить?", Режим, 0);
КонецПроцедуры

&НаСервере
Процедура ГИГ_ЗаполнитьПоПроектуПослеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гиг_НоменклатураПроекта.Ссылка КАК НоменклатураПроекта,
	|	гиг_НоменклатураПроекта.Количество КАК Количество,
	|	(гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Цена + гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.ДополнительныеЗатратыСумма) * гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Курс / гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Кратность КАК Цена,
	|	гиг_НоменклатураПроекта.Количество * ((гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Цена + гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.ДополнительныеЗатратыСумма) * гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Курс / гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Кратность) КАК Сумма,
	|	гиг_НоменклатураПроекта.Количество * ((гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Цена + гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.ДополнительныеЗатратыСумма) * гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Курс / гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Кратность) КАК СтоимостьИзделия,
	|	гиг_НоменклатураПроекта.ОсновнойВариантРасчетов КАК ВариантРасчета,
	|	гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.ВариантПараметров КАК ВариантПараметров,
	|	гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Валюта КАК ОсновнойВариантРасчетовВалюта,
	|	гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Курс КАК ОсновнойВариантРасчетовКурс,
	|	гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Кратность КАК ОсновнойВариантРасчетовКратность,
	|	гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Цена + гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.ДополнительныеЗатратыСумма КАК ЦенаВалютная,
	|	гиг_НоменклатураПроекта.Количество * (гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.Цена + гиг_НоменклатураПроекта.ОсновнойВариантРасчетов.ДополнительныеЗатратыСумма) КАК СуммаВалютная
	|ИЗ
	|	Справочник.гиг_НоменклатураПроекта КАК гиг_НоменклатураПроекта
	|ГДЕ
	|	гиг_НоменклатураПроекта.Владелец = &Проект
	|	И гиг_НоменклатураПроекта.ИспользоватьВКП";
	Запрос.УстановитьПараметр("Проект", Объект.ГИГ_Проект);
	
	Объект.ГИГ_ВариантыРасчета.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ПослеЗакрытияВопросаЗаполнитьИзКонструктораКП(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Объект.Товары.Очистить();
	Для Каждого ТекСтрока Из Объект.ГИГ_ВариантыРасчета Цикл
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекСтрока);
		ТекущаяСтрока.Цена = ?(ТекСтрока.Количество = 0, ТекСтрока.Сумма, ТекСтрока.Сумма/ТекСтрока.Количество);
		ТекущаяСтрока.Номенклатура = ПолучитьНоменклатуруПоВариантуРасчетов(ТекСтрока.ВариантРасчета);
		ТекущаяСтрока.Характеристика = ПолучитьХарактеристикуПоВариантуРасчетов(ТекСтрока.ВариантРасчета);
		//ТекущаяСтрока.ХарактеристикиИспользуются = ЗначениеЗаполнено(ТекСтрока.Характеристика);
		//ТекущаяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		ТекущаяСтрока.Количество = ТекСтрока.Количество;
		
		ТекущаяСтрока.Активность = Истина;
		
		ТекущаяСтрока.ВариантРасчета = ТекСтрока.ВариантРасчета;
		
		//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		//
		//СтруктураДействий = Новый Структура;
		//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		////СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		////СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		////Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		////	СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		////Иначе
		////	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		////КонецЕсли;
		//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		////СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, ПоДатеОтгрузки", Объект.НалогообложениеНДС, Объект.Дата, Истина));
		////СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		//СтруктураДействий.Вставить("ПересчитатьСумму");
		//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		////СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		////СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		//
		//СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		//ЭтаФорма.ИмяФормы, "Товары"));
		//		
		//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		//
		////КоммерческиеПредложенияДокументыКлиентУТ.ПриИзмененииКоличества(ЭтаФорма,ТекущаяСтрока,Ложь);
		
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущаяСтрока, "Номенклатура",Ложь);		
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Объект.ГИГ_ДополнительныеЗатраты Цикл
		Если ТекСтрока.РаспределятьПоСуммеИзделий Или ТекСтрока.РаспределятьПоКоэффициентуУпаковочности Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекСтрока);
		ТекущаяСтрока.Цена = ТекСтрока.Сумма;
		//ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Количество = 1;
		ТекущаяСтрока.Активность = Истина;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		//СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		
		СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ГИГ_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	ГИГ_ВыбранныйПроект = Объект.ГИГ_Проект;
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ГИГ_РассчитатьПроцентОбщий(ТекущаяСтрока)
	ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(СтрокаТабличнойЧасти)
	
	// автоматическое заполнение по скидкам / наценкам  при корректировке данных табличной части
	
	Если СтрокаТабличнойЧасти <> Неопределено тогда  
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда 
			СсылкаНоменклатура = СтрокаТабличнойЧасти.Номенклатура;
			Если  СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0 Тогда
				РассчитатьСкидкиНаценкиКлиент();
			КонецЕсли;
			Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 0 Тогда 
				РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура);
			КонецЕсли;
			ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(СтрокаТабличнойЧасти);
		КонецЕсли;
		ГИГ_РассчитатьПроцентОбщий(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_СхемаОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //<++ Гигабайт Казаков М.В.
	СтандартнаяОбработка = Ложь;
	ОтборСклад= Объект.Склад;
	ОтборНоменклатура= Элемент.Родитель.ТекущиеДанные.Номенклатура;
	ОтборХарактеристикаНоменклатуры= Элемент.Родитель.ТекущиеДанные.Характеристика;
	
	ОткрытьФорму("Справочник.СхемыОбеспечения.Форма.ГИГ_ВыборСхемыПоСкладу",Новый Структура("Склад,Номенклатура,Характеристика",ОтборСклад,ОтборНоменклатура,ОтборХарактеристикаНоменклатуры),Элементы["СхемаОбеспечения"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_СхемаОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) //<++ Гигабайт Казаков М.В. 
	
	ДатаРасчета = ?(НЕ ЗначениеЗаполнено(Объект.Дата),ТекущаяДата(),Объект.Дата);
	
	ДанныеНоменклатуры = Новый Структура("Номенклатура,Характеристика");
	ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры,Элемент.Родитель.ТекущиеДанные);
	
	
	СтруктураСроки = ГИГ_МодульВызовСервера.ГИГ_ПолучитьСрокиОбеспеченияПоСхеме(ВыбранноеЗначение,ДатаРасчета,Объект.Склад,ДанныеНоменклатуры);
	
	ЗаполнитьЗначенияСвойств(Объект.Товары.НайтиПоИдентификатору(Элемент.Родитель.ТекущаяСтрока),СтруктураСроки);
	
КонецПроцедуры

&НаСервере
Процедура ГИГ_УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГИГ_ВариантыРасчетаПроцентРучнойСкидки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГИГ_ВариантыРасчетаСуммаРучнойСкидки.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
&Вместо("ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок")
Процедура Рин1_ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаписатьДокументВместо(Команда)
	
	//++Гольм А.А. (Гигабайт)
	Объект.СкидкиРассчитаны = Истина;
	//--Гольм А.А. (Гигабайт)
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	//++Гольм А.А. (Гигабайт)
	ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
	//--Гольм А.А. (Гигабайт)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеПоПроектуПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ГИГ_Проект = ГИГ_ВыбранныйПроект;
		Возврат;
	КонецЕсли;
	
	ГИГ_ВыбранныйПроект = Объект.ГИГ_Проект;
	ГИГ_ЗаполнитьВсеПоПроектуПослеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДопЗатратыПоПроектуПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ГИГ_Проект = ГИГ_ВыбранныйПроект;
		Возврат;
	КонецЕсли;
	
	ГИГ_ВыбранныйПроект = Объект.ГИГ_Проект;
	ГИГ_ЗаполнитьДопЗатратыПоПроектуПослеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПроектуПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ГИГ_Проект = ГИГ_ВыбранныйПроект;
		Возврат;
	КонецЕсли;
	
	ГИГ_ВыбранныйПроект = Объект.ГИГ_Проект;
	ГИГ_ЗаполнитьПоПроектуПослеНаСервере();
КонецПроцедуры

//&НаКлиенте
//&Вместо("КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении")
//Процедура Рин1_КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
//	
//	Если Элемент.Имя = "Дата" Тогда
//		ДатаПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "Клиент" Тогда
//		ПартнерПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
//		СоглашениеПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "Организация" Тогда
//		ОрганизацияПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
//		ЦенаВключаетНДСПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
//		НалогообложениеНДСПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ГрафикОплаты" Тогда
//		ГрафикОплатыПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ФормаОплаты" Тогда
//		ФормаОплатыПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "Склад" Тогда
//		СкладПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "Валюта" Тогда
//		ВалютаПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
//		ХозяйственнаяОперацияПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
//		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТребуетсяЗалогЗаТару" Тогда
//		ТребуетсяЗалогЗаТаруПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыАктивность" Тогда
//		ТоварыАктивностьПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
//		ТоварыНоменклатураПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыХарактеристика" Тогда
//		ТоварыХарактеристикаПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковок" Тогда
//		ТоварыКоличествоУпаковокПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
//		ТоварыУпаковкаПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
//		ТоварыВидЦеныПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
//		ТоварыЦенаПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидки" Тогда
//		ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыСуммаРучнойСкидки" Тогда
//		ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыСумма" Тогда
//		ТоварыСуммаПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыСуммаНДС" Тогда
//		ТоварыСуммаНДСПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
//		ТоварыСтавкаНДСПриИзменении(Элемент);
//		//Добавлено начало ГИГ
//	ИначеЕсли Элемент.Имя = "ПроцентОбщий" Тогда
//		ПроцентПриИзменении(Элемент);
//	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
//		ПроцентПриИзменении(Элемент);
//		//Добавлено конецГИГ
//	Иначе
//		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьАвтоматическиеСкидкиЗавершение")
Процедура Рин1_НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры)
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		КП_УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", КП_УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		//++Гольм А.А. (Гигабайт)
		//ПоказатьОповещениеПользователя(
		//	НСтр("ru = 'Скидки (наценки)'"),
		//	,
		//	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		//	БиблиотекаКартинок.Информация32);
		//--Гольм А.А. (Гигабайт)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение")
Процедура Рин1_НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		//++Гольм А.А. (Гигабайт)
		//СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		//--Гольм А.А. (Гигабайт)
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьРучнуюСкидкуЗавершение")
Процедура Рин1_НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		//++Гольм А.А. (Гигабайт)
		//СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		//--Гольм А.А. (Гигабайт)
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение(Команда)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.Поля.Удалить("Подразделение");
	
	Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
		Объект, Объект.Товары, Элементы.Товары.ВыделенныеСтроки, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
		
		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа(ТипЗнч(Объект.Ссылка));
		//ПараметрыФормы.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
		ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОбработкаВыбораВместо(ВыбранноеЗначение, ИсточникВыбора)
	
	//++Гольм А.А. (Гигабайт)
	//Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		//--Гольм А.А. (Гигабайт)
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	//ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
	//	
	//	ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
	//	МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
		//<++ Гигабайт Казаков М.В. Схемы обеспечения потребностей
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда
		Детали = ГИГ_ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;
		//++> Гигабайт Казаков М.В.
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.Рин1_ФормаНастройкиСтруктурыВывода" Тогда
		ПодготовкаКФормированиюСтруктурыВывода(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
&Вместо("ОбработкаВыбораПодборНаСервере")
Процедура Рин1_ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		//++Гольм А.А. (Гигабайт)
		//ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки");
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ВидЦены, Цена, Количество, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СуммаАвтоматическойСкидки");
		//--Гольм А.А. (Гигабайт)
		
		//<++ Гигабайт Казаков М.В. Схемы обеспечения потребностей
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СтрокаТовара,"ГИГ_СхемаОбеспечения,ГИГ_СрокПоставки");
		ТекущаяСтрока.ДатаОтгрузки =СтрокаТовара.ДатаОтгрузки; 
		//++> Гигабайт Казаков М.В. 
		ТекущаяСтрока.Активность = Истина;
		//ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		ТекущаяСтрока.ИндексНабора = 0;

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		//СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		//++Гольм А.А. (Гигабайт)
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		//--Гольм А.А. (Гигабайт)
	КонецЦикла;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	//МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОткрытьПодборВместо(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
	"Документ.КоммерческоеПредложениеКлиенту.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	//Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
	//	Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
	//	ОчиститьСообщения();
	//	СообщитьОбОшибкахОткрытияПодбора(Отказ);
	//КонецЕсли;
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'коммерческое предложение клиенту'"));
	КонецЕсли;
	
	ОперацииПередачи = ОперацииПередачиТоваров();
	//++Гольм А.А. (Гигабайт)
	СкидкаПримененная = ТестРасчетСк();
	//--Гольм А.А. (Гигабайт)
	ПараметрыФормы = Новый Структура;
//	ПараметрыФормы.Вставить("Соглашение",      Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	//ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	//ПараметрыФормы.Вставить("ВозвращатьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	Если ОперацииПередачи.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
	Иначе
		ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Валюта",    Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",  Объект.Ссылка);
	//++Гольм А.А. (Гигабайт)
	//ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ПримененнаяСкидка",                       СкидкаПримененная);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Истина); //<++> Гигабайт Казаков М.В. 
	ОткрытьФорму("Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныеЧастиКонструктораКПНаСервере()
	Объект.ГИГ_ВариантыРасчета.Очистить();
	Объект.ГИГ_ДополнительныеЗатраты.Очистить();
КонецПроцедуры 

&НаКлиенте
Процедура ПартнерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Клиент <> ВыбранноеЗначение тогда
		Если Объект.Товары.Количество() <> 0 тогда
			Параметр = Новый Структура("СтароеЗначение,НовоеЗначение",Объект.Клиент,ВыбранноеЗначение);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
	
	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ОтветНаВопрос = РезультатВопроса;
	ТекПараметр = ДополнительныеПараметры.СтароеЗначение;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		//Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
		//	Объект.Соглашение = ДополнительныеПараметры.НовоеЗначение;
		//	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		//	СоглашениеПриИзмененииСервер();
		//	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
		//КонецЕсли;
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Клиент = ДополнительныеПараметры.НовоеЗначение;
			//ПартнерПриИзмененииСервер();
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			//Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			//	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
			//КонецЕсли;
		КонецЕсли;
		РассчитатьСкидкиНаценкиРучныеДляТаблЧасти();
	иначе
		//Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
		//	Объект.Соглашение = ДополнительныеПараметры.СтароеЗначение;
		//КонецЕсли;
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Клиент = ДополнительныеПараметры.СтароеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Рин1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	ГИГ_ДобавитьНовыеЭлементыНаСервере();
	ГИГ_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПровестиДокументВместо(Команда)
	
	//++Гольм А.А. (Гигабайт)
	Объект.СкидкиРассчитаны = Истина;
	//--Гольм А.А. (Гигабайт)
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	//++Гольм А.А. (Гигабайт)
	ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.Товары);
	//--Гольм А.А. (Гигабайт)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзмененииПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ГИГ_Проект = ГИГ_ВыбранныйПроект;
		Возврат;
	КонецЕсли;
	
	ГИГ_ВыбранныйПроект = Объект.ГИГ_Проект;
	
	Если ЗначениеЗаполнено(Объект.ГИГ_Проект) Тогда
		ГИГ_ЗаполнитьВсеПоПроектуПослеНаСервере();
	Иначе
		ОчиститьТабличныеЧастиКонструктораКПНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	// тут програмно обрабатываем изменения добавленной колонки...
	Если Элемент.Имя = "ПроцентОбщий" Тогда 
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ЗначениеАвтоматической = ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		Если ТекущаяСтрока.ПроцентОбщий <> 0 Тогда 
			ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ЗначениеАвтоматической;
			ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
		Иначе
			Если ЗначениеАвтоматической <> 0 Тогда 
				ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
			КонецЕсли;	
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ЗначениеАвтоматической = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если  ТекущаяСтрока.СуммаПроцентОбщий <> 0 Тогда 
			ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ЗначениеАвтоматической;
			ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
		Иначе
			Если ЗначениеАвтоматической <> 0 Тогда 
				ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
			КонецЕсли;	
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	Иначе
		Если ТекущаяСтрока <> Неопределено Тогда 
			ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("РассчитатьСкидкиНаценкиКлиент")
Процедура Рин1_РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", КП_УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	//++Гольм А.А. (Гигабайт)
	//ПоказатьОповещениеПользователя(
	//	НСтр("ru = 'Скидки (наценки)'"),
	//	,
	//	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
	//	БиблиотекаКартинок.Информация32);
	//--Гольм А.А. (Гигабайт)	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеДляТаблЧасти()
	//Если ЗначениеЗаполнено(Объект.Соглашение) Тогда 
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
		АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина,Ложь);
		// добавлено ГИГ
		Если Объект.Товары.Количество() > 0 Тогда 
			Для Каждого ТекущаяСтрока из Объект.Товары Цикл 
				// автоматическое заполнение по скидкам / наценкам
				Если ТекущаяСтрока <> Неопределено тогда  
					Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
						СсылкаНоменклатура = ТекущаяСтрока.Номенклатура;
						РассчитатьСкидкиНаценкиКлиент();
						ТекущаяСтрока.ПроцентРучнойСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
						
						ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						
						ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентАвтоматическойСкидки + ТекущаяСтрока.ПроцентРучнойСкидки;	
						ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура)
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина,Ложь);
	ЗначениеСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	ТекЭлемент = Элементы.Товары.ТекущиеДанные;
	ТекЭлемент.ПроцентРучнойСкидки = ЗначениеСкидки;	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВТабличнойЧастиВариантовРасчета(ТекущаяСтрока, ПересчитыватьПроцентСкидки = Истина, ПересчитыватьСуммуСкидки = Ложь)
	ТекущаяСтрока.СтоимостьИзделия = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена; 
	Если ПересчитыватьПроцентСкидки Тогда
		ТекущаяСтрока.ПроцентРучнойСкидки = ?(ТекущаяСтрока.СтоимостьИзделия = 0, 0, Окр(ТекущаяСтрока.СуммаРучнойСкидки / ТекущаяСтрока.СтоимостьИзделия * 100, 2));
	КонецЕсли;
	Если ПересчитыватьСуммуСкидки Тогда
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.СтоимостьИзделия * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
	КонецЕсли;
	ТекущаяСтрока.СтоимостьИзделия = ТекущаяСтрока.СтоимостьИзделия - ТекущаяСтрока.СуммаРучнойСкидки;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.СтоимостьИзделия + ТекущаяСтрока.СуммаДопЗатрат;
КонецПроцедуры

//&НаКлиенте
//Процедура СоглашениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
//	Если Объект.Соглашение <> ВыбранноеЗначение тогда
//		Если Объект.Товары.Количество() <> 0 тогда
//			СтандартнаяОбработка = Ложь;
//			Параметр = Новый Структура("СтароеЗначение,НовоеЗначение",Объект.Соглашение,ВыбранноеЗначение);
//			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
//		КонецЕсли;	
//	КонецЕсли;	
//КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыВидЦеныПриИзмененииВместо(Элемент)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	// ГИГ_Конец
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	//++Гольм А.А. (Гигабайт)
	ПроцентПриИзменении(Элементы.ПроцентОбщий);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыКоличествоУпаковокПриИзмененииВместо(Элемент)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	// ГИГ_Конец
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//++Гольм А.А. (Гигабайт)
	//РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	//++Гольм А.А. (Гигабайт)
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	//++Гольм А.А. (Гигабайт)
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	ПроцентПриИзменении(Элементы.ПроцентОбщий);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыНоменклатураПриИзмененииВместо(Элемент)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
	//	СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	//Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	//КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	//СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
	ЭтаФорма.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//++Гольм А.А. (Гигабайт)
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	//--Гольм А.А. (Гигабайт)
	
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	// ГИГ_Конец
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	//++Гольм А.А. (Гигабайт)
	//СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПроцентРучнойСкидкиПриИзмененииВместо(Элемент)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	// добавлена проверка на макс ручной
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,Объект.Дата,ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	// конец проверки
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыСтавкаНДСПриИзмененииВместо(Элемент)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыСуммаРучнойСкидкиПриИзмененииВместо(Элемент)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	//++Гольм А.А. (Гигабайт)
	ФлагНаценка = Ложь;
	//--Гольм А.А. (Гигабайт)
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	// добавлена проверка на макс ручной
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,Объект.Дата,ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	// конец проверки
	
КонецПроцедуры

//&НаКлиенте
//Процедура Рин1_ТоварыУпаковкаПриИзмененииВместо(Элемент)
//	
//	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
//	
//	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
//	
//	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
//	
//	СтруктураДействий = Новый Структура;
//	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
//	
//	Если ТекущаяСтрока.Количество > 0 Тогда
//		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
//	//ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
//	//	СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
//	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
//		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
//	КонецЕсли;
//	
//	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
//	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
//	СтруктураДействий.Вставить("ПересчитатьСумму");
//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
//	//++Гольм А.А. (Гигабайт)
//	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
//	//--Гольм А.А. (Гигабайт)
//	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
//	
//	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	
//	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
//	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
//	
//КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыЦенаПриИзмененииВместо(Элемент)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	// ГИГ_Конец
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
&После("УстановитьУсловноеОформление")
Процедура Рин1_УстановитьУсловноеОформление()
	
	ГИГ_УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Функция ВрФайлHTML_КомБлок(СхемаКомпоновки)

	ТЗ_Приложений = ДанныеФормыВЗначение(СхемаКомпоновки,Тип("ТаблицаЗначений"));
	
	ТабличнаяЧастьСоСкидкой = ТЗ_Приложений[1].Отметка;
	ВыборЦенаВключаетНДС = не ТЗ_Приложений[0].Отметка;
	
	//удалим лишнее
	ТЗ_Приложений.Удалить(ТЗ_Приложений[1]);
	ТЗ_Приложений.Удалить(ТЗ_Приложений[0]);
	
	//********************** подготавливаем данные
	HtmlTxt = "";
	
	//перенос строки - вставка пустой строки
	ПереносСтроки = "<p class=MsoNormal><o:p>&nbsp;</o:p></p>";
	
	//Получаем упорядоченные варианты расчетов (Варианты могут каждый раз быть разным составом, поэтому получаем каждый раз)
	Для каждого СтрокаТЧ Из Объект.Товары Цикл		
		Если СтрокаТЧ.Активность и ЗначениеЗаполнено(СтрокаТЧ.ВариантРасчета) Тогда
	
			НоваяСтрока = ТЗ_Сводная.Добавить();
			НоваяСтрока.КлючСвязи      = СтрокаТЧ.ВариантРасчета;
			НоваяСтрока.ВариантРасчета = СтрокаТЧ.ВариантРасчета;			 	
			НоваяСтрока.Родитель       = "Родитель";
			
			ПолучитьТаблицуВариантовРасчетов(СтрокаТЧ.ВариантРасчета);//рекурсия 1
			
		КонецЕсли;			
	КонецЦикла;	
	
	ТЗ_ВариантыРасчетовУпорядоченные = ДанныеФормыВЗначение(ТЗ_Сводная,Тип("ТаблицаЗначений"));
	Если ТЗ_ВариантыРасчетовУпорядоченные.Количество() > 0 Тогда
		
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Удалить");
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Обработана");
		
		ПолучитьСвязанныеВариантыРасчета(ТЗ_ВариантыРасчетовУпорядоченные); //рекурсия 2
		
	КонецЕсли;
	//**********************
		
	//*********Получим коммерческий блок		
	//шапка
	HtmlTxt = HtmlTxt + "<p>" + Формат(Объект.Дата,"ДЛФ=DD") + "</p>";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПРЕДСТАВЛЕНИЕ(&Партнер) КАК Партнер,
		|	КонтактныеЛицаПартнеров.Ссылка.Наименование КАК Наименование,
		|	КонтактныеЛицаПартнеров.Ссылка.ДолжностьПоВизитке КАК ДолжностьПоВизитке,
		|	ВЗ_Телефон.Телефон КАК Телефон,
		|	ВЗ_ЭлПочта.ЗлПочта КАК ЗлПочта
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка,
		|			КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Телефон
		|		ИЗ
		|			Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|		ГДЕ
		|			КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)) КАК ВЗ_Телефон
		|		ПО КонтактныеЛицаПартнеров.Ссылка = ВЗ_Телефон.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка,
		|			КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК ЗлПочта
		|		ИЗ
		|			Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|		ГДЕ
		|			КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) КАК ВЗ_ЭлПочта
		|		ПО КонтактныеЛицаПартнеров.Ссылка = ВЗ_ЭлПочта.Ссылка
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка = &КонтактноеЛицо
		|	И КонтактныеЛицаПартнеров.Владелец = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер",Объект.Клиент);
	Запрос.УстановитьПараметр("КонтактноеЛицо",Объект.КонтактноеЛицо);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//выводим с права и уменьшаем межстрочный интервал сверху и снизу
		HtmlTxt = HtmlTxt + "<p align=right style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;text-align:right;line-height:105%'>" + ВыборкаДетальныеЗаписи.Партнер + "</p>";
		HtmlTxt = HtmlTxt + "<p align=right style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;text-align:right;line-height:105%'>" + ВыборкаДетальныеЗаписи.ДолжностьПоВизитке + "</p>";
		HtmlTxt = HtmlTxt + "<p align=right style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;text-align:right;line-height:105%'>" + ВыборкаДетальныеЗаписи.Наименование + "</p>";
		HtmlTxt = HtmlTxt + "<p align=right style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;text-align:right;line-height:105%'>" + ВыборкаДетальныеЗаписи.ЗлПочта + "</p>";
		HtmlTxt = HtmlTxt + "<p align=right style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;text-align:right;line-height:105%'>" + "Тел. " + ВыборкаДетальныеЗаписи.Телефон + "</p>";		
	КонецЦикла;
	HtmlTxt = HtmlTxt + "<p align=center style='text-align:center;line-height:105%'><b style='mso-bidi-font-weight:normal'>" + 
	"Технико-коммерческое предложение №" + Объект.Номер + "<o:p></o:p></b></p>";
	
	//Титул проекта
	HtmlTxt = HtmlTxt + "<p align=center style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;text-align:center;line-height:105%'>" + 
	Объект.ГИГ_Проект.Рин1_Титул + "</p>";
	//
	
	КонтактноеЛицо = Строка(Объект.КонтактноеЛицо);
	HtmlTxt = HtmlTxt + "<p align=center style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;text-align:center;line-height:105%'><b style='mso-bidi-font-weight:normal'>" + 
	"Уважаемый (-ая) " + Сред(КонтактноеЛицо,СтрНайти(КонтактноеЛицо," ")+1) + "<o:p></o:p></b></p>";
	
	HtmlTxt = HtmlTxt + "<p align=center style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;text-align:center;line-height:105%'>" + 
	"Мы благодарим Вас за обращение и предлагаем поставку оборудования согласно вашего запроса:" + "</p>";
	
	//таблица
	Если НЕ ТабличнаяЧастьСоСкидкой Тогда
		HtmlTxt = HtmlTxt + ПолучитьТаблицуHTML_КоммБлок(1);
	Иначе
		HtmlTxt = HtmlTxt + ПолучитьТаблицуHTML_КоммБлок(2);
	КонецЕсли;
	
	//итоговая	
	ПредставлениеВалюты = ?(ЗначениеЗаполнено(Объект.Валюта), СокрЛП(Объект.Валюта), "");
		
	СуммаВсего    = 0;
	СуммаВсегоНДС = 0;
	НомерСтроки = 0;

	Для Каждого ВыборкаТовары Из Объект.Товары Цикл
		
		Если НЕ ВыборкаТовары.Активность Тогда
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		СуммаВсего        = СуммаВсего + ВыборкаТовары.Сумма;
		СуммаВсегоНДС     = СуммаВсегоНДС + ВыборкаТовары.СуммаНДС;
		
	КонецЦикла;
	
	СуммаКПрописи = СуммаВсего + ?(Объект.ЦенаВключаетНДС, 0, СуммаВсегоНДС);
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Объект.Валюта);
	
	ИтоговаяСтрока = "";
	
	//Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС ИЛИ 
	//	Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
	//	УчитыватьНДС = Ложь;
	//Иначе
		УчитыватьНДС = ИСТИНА;
	//КонецЕсли;
	
	Если УчитыватьНДС и НЕ Объект.ЦенаВключаетНДС Тогда
		ИтоговаяСтрока = НСтр("ru = 'Итого: %СуммаВсего% %ПредставлениеВалюты%, сумма НДС: %СуммаНДС% %ПредставлениеВалюты%';
								|en = 'Total: %СуммаВсего% %ПредставлениеВалюты%, VAT amount: %СуммаНДС% %ПредставлениеВалюты%'") + Символы.ПС;
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаВсего%", Формат(СуммаВсего,"ЧДЦ=2; ЧРД=,"));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаНДС%", Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%ПредставлениеВалюты%", ПредставлениеВалюты);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + НСтр("ru = 'Всего наименований %Количество%, на сумму %Сумма%';
											|en = 'Total number of names %Количество% in the amount of %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Объект.Валюта));
	
	Если УчитыватьНДС и Объект.ЦенаВключаетНДС Тогда
		
		СтрокаНДС = НСтр("ru = 'в том числе НДС %СуммаНДС% %ПредставлениеВалюты%';
						|en = 'VAT inclusive %СуммаНДС% %ПредставлениеВалюты%'");
		СтрокаНДС = СтрЗаменить(СтрокаНДС, "%СуммаНДС%", Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		СтрокаНДС = СтрЗаменить(СтрокаНДС, "%ПредставлениеВалюты%", ПредставлениеВалюты);
		ИтоговаяСтрока = ИтоговаяСтрока + ", " + СтрокаНДС;
		
	КонецЕсли;
	
	Если НЕ УчитыватьНДС Тогда
		ИтоговаяСтрока = ИтоговаяСтрока + ", " + НСтр("ru = 'Без налога (НДС)';
		|en = 'Without tax (VAT)'");
	КонецЕсли;
	
	HtmlTxt = HtmlTxt + "<p>" + ИтоговаяСтрока + " (" + СуммаПрописью + ")" + "</p>";	
	
	//условия
	HtmlTxt = HtmlTxt + "<p style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;line-height:105%'>" + Объект.УсловияОплатыТекст + "</p>";
	HtmlTxt = HtmlTxt + "<p style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;line-height:105%'>" + Объект.УсловияДоставкиТекст + "</p>";
	HtmlTxt = HtmlTxt + "<p style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;line-height:105%'>" + Объект.ПрочаяДополнительнаяИнформацияТекст + "</p>";
	HtmlTxt = HtmlTxt + "<p style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;line-height:105%'>" + Объект.СрокДействия + "</p>";
	HtmlTxt = HtmlTxt + "<p style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;line-height:105%'>" + Объект.Комментарий + "</p>";
	HtmlTxt = HtmlTxt + "<p>Настоящее коммерческое предложение не может рассматриваться, как оферта, а лишь, как подготовительный документ для согласования коммерческих и технических условий.</p>";

	//приложения
	Номер = 1;
	Для каждого СтрокаТЗ Из ТЗ_Приложений Цикл
		
		Если не СтрокаТЗ.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		HtmlTxt = HtmlTxt + "<p style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;line-height:105%'>Приложение №" + 
		          Номер + " - " + СтрокаТЗ.НаименованиеПриложения + ";" + "</p>"; 
		Номер = Номер +1;
		
	КонецЦикла;
	
	Если не Номер = 1 Тогда
	  HtmlTxt = HtmlTxt + "<p style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;line-height:105%'><o:p>&nbsp;</o:p></p>";
	КонецЕсли;
	
	//подвал	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиТ.ФизическоеЛицо КАК ФИО,
		|	ПриемНаРаботуТ.ДолжностьПоШтатномуРасписанию КАК Должность,
		|	Телеф.НомерТелефона КАК НомерТелефона,
		|	ЭлПочта.АдресЭП КАК АдресЭП,
		|	ПользователиТ.Подразделение.ТекущийРуководитель КАК Руководитель
		|ПОМЕСТИТЬ ВТ_Менеджер
		|ИЗ
		|	Справочник.Пользователи КАК ПользователиТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника.СрезПоследних КАК ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботуТ
		|			ПО ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних.Регистратор = ПриемНаРаботуТ.Ссылка
		|		ПО ПользователиТ.ФизическоеЛицо = ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Ссылка КАК Ссылка,
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Представление КАК АдресЭП
		|		ИЗ
		|			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛица_КонтактнаяИнформацияТ
		|		ГДЕ
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) КАК ЭлПочта
		|		ПО ПользователиТ.ФизическоеЛицо = ЭлПочта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Ссылка КАК Ссылка,
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Представление КАК НомерТелефона
		|		ИЗ
		|			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛица_КонтактнаяИнформацияТ
		|		ГДЕ
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|			И ФизическиеЛица_КонтактнаяИнформацияТ.Вид = &ВидТелефона) КАК Телеф
		|		ПО ПользователиТ.ФизическоеЛицо = Телеф.Ссылка
		|ГДЕ
		|	ПользователиТ.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриемНаРаботуТ.Должность КАК РуководительДолжность,
		|	ВТ_Менеджер.Руководитель КАК Руководитель,
		|	ВТ_Менеджер.Должность КАК МенеджерДолжность,
		|	ВТ_Менеджер.ФИО КАК МенеджерФИО,
		|	ВТ_Менеджер.АдресЭП КАК МенеджерАдресЭП,
		|	ВТ_Менеджер.НомерТелефона КАК МенеджерНомерТелефона,
		|	Телеф.НомерТелефона КАК РуководительНомерТелефона,
		|	ЭлПочта.АдресЭП КАК РуководительАдресЭП
		|ИЗ
		|	ВТ_Менеджер КАК ВТ_Менеджер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника.СрезПоследних КАК ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботуТ
		|			ПО ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних.Регистратор = ПриемНаРаботуТ.Ссылка
		|		ПО ВТ_Менеджер.Руководитель = ОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Ссылка КАК Ссылка,
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Представление КАК АдресЭП
		|		ИЗ
		|			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛица_КонтактнаяИнформацияТ
		|		ГДЕ
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) КАК ЭлПочта
		|		ПО ВТ_Менеджер.Руководитель = ЭлПочта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Представление КАК НомерТелефона,
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛица_КонтактнаяИнформацияТ
		|		ГДЕ
		|			ФизическиеЛица_КонтактнаяИнформацияТ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|			И ФизическиеЛица_КонтактнаяИнформацияТ.Вид = &ВидТелефона) КАК Телеф
		|		ПО ВТ_Менеджер.Руководитель = Телеф.Ссылка";
	
	Запрос.УстановитьПараметр("ВидТелефона", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Рабочий телефон"));//предопределенный
	Запрос.УстановитьПараметр("Ссылка", Объект.Менеджер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		HtmlTxt = HtmlTxt + "<p style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;line-height:105%'>С уважением,</p>"; 
		HtmlTxt = HtmlTxt + "<p style='margin-top:3.0pt;margin-right:0cm;margin-bottom:3.0pt;margin-left:0cm;line-height:105%'>" + 
		          ВыборкаДетальныеЗаписи.РуководительДолжность + "  " + ВыборкаДетальныеЗаписи.Руководитель + "</p>";
		HtmlTxt = HtmlTxt + "<p>" + "Исп.: " + ВыборкаДетальныеЗаписи.МенеджерДолжность + " " + ВыборкаДетальныеЗаписи.МенеджерФИО + "  e-mail: " +
		ВыборкаДетальныеЗаписи.МенеджерАдресЭП + "  тел.: " + ВыборкаДетальныеЗаписи.МенеджерНомерТелефона + "</p>";
	КонецЦикла;
		
	Возврат HtmlTxt;
	
КонецФункции 

&НаСервере
Функция ВрФайлHTML_ОписаниеИзПроекта(Номер)  //1
	
	HtmlTxt = "<p>" + "Приложение №" + Номер + "</p>"; 
	
	HtmlTxt_ОписаниеИзПроекта = Объект.ГИГ_Проект.ОписаниеТовара;
	HtmlTxt = HtmlTxt + ?(HtmlTxt_ОписаниеИзПроекта = "","",HtmlTxt_ОписаниеИзПроекта);
	
	//наделяем необходимым свойством HTML документа
	Если СтрНайти(HtmlTxt,"<html>") = 0  Тогда
		HtmlTxt = "<html>"  + HtmlTxt + "</html>";
	КонецЕсли;
		
	Возврат HtmlTxt;
	
КонецФункции

&НаСервере
Функция ВрФайлHTML_ОписаниеИзделияИзВариантаРасчета(Номер) //2
	
	HtmlTxt = "<p>" + "Приложение №" + Номер + "</p>"; 
		
	ТЗ_ВариантыРасчетовУпорядоченные = ДанныеФормыВЗначение(ТЗ_Сводная,Тип("ТаблицаЗначений"));
	Если ТЗ_ВариантыРасчетовУпорядоченные.Количество() > 0 Тогда
		
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Удалить");
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Обработана");
		
		ПолучитьСвязанныеВариантыРасчета(ТЗ_ВариантыРасчетовУпорядоченные); //рекурсия 2
		
	КонецЕсли;
	
	Для каждого Строка Из ТЗ_ВариантыРасчетовУпорядоченные Цикл
		HtmlTxt_ОписаниеИзВариантаРасчета = Строка.ВариантРасчета.ОписаниеТовара;
		HtmlTxt = HtmlTxt + ?(HtmlTxt_ОписаниеИзВариантаРасчета = "","",HtmlTxt_ОписаниеИзВариантаРасчета);
	КонецЦикла;
	
	//наделяем необходимым свойством HTML документа
	Если СтрНайти(HtmlTxt,"<html>") = 0  Тогда
		HtmlTxt = "<html>"  + HtmlTxt + "</html>";
	КонецЕсли;
		
	Возврат HtmlTxt;
	
КонецФункции

&НаСервере
Функция ВрФайлHTML_ОписаниеВнешнийВидИзВариантаРасчета(Номер)//3
	
	HtmlTxt = "<p>" + "Приложение №" + Номер + "</p>"; 	
	
	ТЗ_ВариантыРасчетовУпорядоченные = ДанныеФормыВЗначение(ТЗ_Сводная,Тип("ТаблицаЗначений"));
	Если ТЗ_ВариантыРасчетовУпорядоченные.Количество() > 0 Тогда
		
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Удалить");
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Обработана");
		
		ПолучитьСвязанныеВариантыРасчета(ТЗ_ВариантыРасчетовУпорядоченные); //рекурсия 2
		
	КонецЕсли;
	
	Для каждого Строка Из ТЗ_ВариантыРасчетовУпорядоченные Цикл
		Заголовок = Строка.ВариантРасчета.НоменклатураПроекта;
		HtmlTxt_ВнешнийВидИзВариантаРасчета = Строка.ВариантРасчета.ОписаниеТовара2;
		HtmlTxt = HtmlTxt + ?(HtmlTxt_ВнешнийВидИзВариантаРасчета = "","","<p>" + Заголовок + "</p>" + HtmlTxt_ВнешнийВидИзВариантаРасчета);
	КонецЦикла;	
	
	//наделяем необходимым свойством HTML документа
	Если СтрНайти(HtmlTxt,"<html>") = 0  Тогда
		HtmlTxt = "<html>"  + HtmlTxt + "</html>";
	КонецЕсли;
		
	Возврат HtmlTxt;
	
КонецФункции

&НаСервере
Функция ВрФайлHTML_ОписаниеПрименяемогоОборудованияИзЗначенийПараметров(Номер) //4
	
	HtmlTxt = "<p>" + "Приложение №" + Номер + "</p>"; 
		
	ТЗ_ВариантыРасчетовУпорядоченные = ДанныеФормыВЗначение(ТЗ_Сводная,Тип("ТаблицаЗначений"));
	Если ТЗ_ВариантыРасчетовУпорядоченные.Количество() > 0 Тогда
		
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Удалить");
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Обработана");
		
		ПолучитьСвязанныеВариантыРасчета(ТЗ_ВариантыРасчетовУпорядоченные); //рекурсия 2
		
	КонецЕсли;
	
	HtmlTxt = HtmlTxt + ПолучитьТаблицуHTML_ОписаниеПоВыбраннымЗначениям(ТЗ_ВариантыРасчетовУпорядоченные);
	
	//наделяем необходимым свойством HTML документа
	Если СтрНайти(HtmlTxt,"<html>") = 0  Тогда
		HtmlTxt = "<html>"  + HtmlTxt + "</html>";
	КонецЕсли;
	
	Возврат HtmlTxt;
	
КонецФункции

&НаСервере
Функция ВрФайлHTML_СпецификацияДетальная(Номер) //5
		
	HtmlTxt = "<p>" + "Приложение №" + Номер + "</p>"; 
		
	ТЗ_ВариантыРасчетовУпорядоченные = ДанныеФормыВЗначение(ТЗ_Сводная,Тип("ТаблицаЗначений"));
	Если ТЗ_ВариантыРасчетовУпорядоченные.Количество() > 0 Тогда
		
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Удалить");
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Обработана");
		
		ПолучитьСвязанныеВариантыРасчета(ТЗ_ВариантыРасчетовУпорядоченные); //рекурсия 2
		
	КонецЕсли;
	
	HtmlTxt = HtmlTxt + ПолучитьТаблицуHTML_Спецификации(ТЗ_ВариантыРасчетовУпорядоченные,1);
	
	//наделяем необходимым свойством HTML документа
	Если СтрНайти(HtmlTxt,"<html>") = 0  Тогда
		HtmlTxt = "<html>"  + HtmlTxt + "</html>";
	КонецЕсли;
		
	Возврат HtmlTxt;
	
КонецФункции

&НаСервере
Функция ВрФайлHTML_СпецификацияСводная(Номер) //6
	
	HtmlTxt = "<p>" + "Приложение №" + Номер + "</p>"; 
	
	ТЗ_ВариантыРасчетовУпорядоченные = ДанныеФормыВЗначение(ТЗ_Сводная,Тип("ТаблицаЗначений"));
	Если ТЗ_ВариантыРасчетовУпорядоченные.Количество() > 0 Тогда
		
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Удалить");
		ТЗ_ВариантыРасчетовУпорядоченные.Колонки.Добавить("Обработана");
		
		ПолучитьСвязанныеВариантыРасчета(ТЗ_ВариантыРасчетовУпорядоченные); //рекурсия 2
		
	КонецЕсли;
	
	HtmlTxt = HtmlTxt + ПолучитьТаблицуHTML_Спецификации(ТЗ_ВариантыРасчетовУпорядоченные,2);
	
	//наделяем необходимым свойством HTML документа
	Если СтрНайти(HtmlTxt,"<html>") = 0  Тогда
		HtmlTxt = "<html>"  + HtmlTxt + "</html>";
	КонецЕсли;
		
	Возврат HtmlTxt;
	
КонецФункции

&НаКлиенте
Процедура СформироватьДокументWord_ИЗ_HTML(СхемаКомпоновки) //собираем из описаний и текста КП
	
	Handler = Новый Структура("Тип", "DOC");
	Попытка
		//Создаем COM-объект для работы с Word
		COMОбъект = Новый COMОбъект("Word.Application");
	Исключение 
		Сообщить("Ошибка при запуске приложения "+ОписаниеОшибки());
	КонецПопытки;
	
	Handler.Вставить("COMСоединение", COMОбъект);
	
	Попытка
		COMОбъект.Documents.Add();
	Исключение
		COMОбъект.Quit(0);
		COMОбъект = 0;
	КонецПопытки;
	
	// Запомнить вид просмотра документа.
	Handler.Вставить("ViewType", COMОбъект.Application.ActiveWindow.View.Type);
	
	ПечатнаяФорма = Handler;
	ПечатнаяФорма.Вставить("Тип", "DOC");
	
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
	
	Word = ПечатнаяФорма.COMСоединение;
	Select = Word.Selection;
	Docum = Word.Application.Documents(1);
	
	Попытка
		//когда будет инн организации переделать
		Если НЕ СтрНайти(Объект.Организация,"Электропрофи") = 0 Тогда
			ПутьККартинкам = Рин1_ОбщийМодуль.ПолучитьЗначениеКонстантыПутьДляХраненияКартинок();
			
			ВерхнийКолонтитул = Docum.sections.item(1).headers.item(1);
			ВерхнийКолонтитул.Range.InlineShapes.AddPicture(ПутьККартинкам + "Электропрофи_Верх.jpg",False,True);
			
			НижнийКолонтитул = Docum.sections.item(1).footers.item(1);
			НижнийКолонтитул.Range.InlineShapes.AddPicture(ПутьККартинкам + "Электропрофи_Низ.jpg",False,True);  
		КонецЕсли;
		
	Исключение
		Сообщить("Ошибка при загрузке колонтитулов "+ОписаниеОшибки());
	КонецПопытки;
	
	HtmlTxt = "";
	
	//штрихкод
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          301);
	ПараметрыШтрихкода.Вставить("Высота",          27);
	ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ЧисловойКодПоСсылке(Объект.Ссылка)));
	ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",    6);
	
	Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	ИмяТемпФайла = ПолучитьИмяВременногоФайла("jpg");
	Попытка
		Картинка.Записать(ИмяТемпФайла);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();	
	КонецПопытки;
	HtmlTxt = HtmlTxt + "<p class=MsoNormal align=right style='text-align:right'><img src=" + ИмяТемпФайла + "></img></p>";
	//
	
	HtmlTxt = HtmlTxt + ВрФайлHTML_КомБлок(СхемаКомпоновки);
	
	//наделяем необходимым свойством HTML документа
	Если СтрНайти(HtmlTxt,"<html>") = 0  Тогда
		HtmlTxt = "<html>"  + HtmlTxt + "</html>";
	КонецЕсли;
	
	ТекстHTML = Новый ТекстовыйДокумент;
	ТекстHTML.УстановитьТекст(HtmlTxt);
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла("html");

	Попытка
		ТекстHTML.Записать(ИмяТемпФайла,"UTF-8");
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();	
	КонецПопытки;
	
	Select.InsertFile(ИмяТемпФайла);
	
	Массив = СхемаКомпоновки.НайтиСтроки(Новый Структура("Отметка",Истина));
	Если Массив.Количество() > 0 Тогда
		
		ТЗ_СхемаКомпоновки.Очистить();
		ТЗ_Сводная.Очистить();
		
		Для каждого СтрокаТЧ Из Объект.Товары Цикл		
			Если СтрокаТЧ.Активность и ЗначениеЗаполнено(СтрокаТЧ.ВариантРасчета) Тогда
	
				НоваяСтрока = ТЗ_Сводная.Добавить();
				НоваяСтрока.КлючСвязи      = СтрокаТЧ.ВариантРасчета;
				НоваяСтрока.ВариантРасчета = СтрокаТЧ.ВариантРасчета;			 	
				НоваяСтрока.Родитель       = "Родитель";
				
				ПолучитьТаблицуВариантовРасчетов(СтрокаТЧ.ВариантРасчета);//рекурсия 1
				
			КонецЕсли;			
		КонецЦикла;	
		
		Для каждого Строка Из СхемаКомпоновки Цикл
						
			НовСтр = ТЗ_СхемаКомпоновки.Добавить();	
			ЗаполнитьЗначенияСвойств(НовСтр,Строка);
			
		КонецЦикла;
		
		//удалим лишнее
		ТЗ_СхемаКомпоновки.Удалить(ТЗ_СхемаКомпоновки[1]);
		ТЗ_СхемаКомпоновки.Удалить(ТЗ_СхемаКомпоновки[0]);
		
		Номер = 1;
		
		Для каждого СтрокаТЗ Из ТЗ_СхемаКомпоновки Цикл
			
			Если не СтрокаТЗ.Отметка Тогда
				Продолжить;
			КонецЕсли;
			
			Docum.Sections.Add().Range.Select(); //с новой страницы
			
			Если СтрокаТЗ.НаименованиеПриложения = "Описание из проекта" Тогда	//1	
				HtmlTxt = ВрФайлHTML_ОписаниеИзПроекта(Номер);
				Select.InsertFile(HtmlFile(HtmlTxt));
			ИначеЕсли СтрокаТЗ.НаименованиеПриложения = "Описание изделия (описание из варианта расчета)" Тогда //2
				HtmlTxt = ВрФайлHTML_ОписаниеИзделияИзВариантаРасчета(Номер);
				Select.InsertFile(HtmlFile(HtmlTxt));			
			ИначеЕсли СтрокаТЗ.НаименованиеПриложения = "Внешний вид оборудования (внешний вид из варианта расчета)" Тогда //3
				HtmlTxt = ВрФайлHTML_ОписаниеВнешнийВидИзВариантаРасчета(Номер);
				Select.InsertFile(HtmlFile(HtmlTxt));
			ИначеЕсли СтрокаТЗ.НаименованиеПриложения = "Описание применяемого оборудования (описание общее из значений параметров предметов расчета)" Тогда //4
				HtmlTxt = ВрФайлHTML_ОписаниеПрименяемогоОборудованияИзЗначенийПараметров(Номер);
				Select.InsertFile(HtmlFile(HtmlTxt));
			ИначеЕсли СтрокаТЗ.НаименованиеПриложения = "Спецификация оборудования (детальная)" Тогда //5
				HtmlTxt = ВрФайлHTML_СпецификацияДетальная(Номер);
				Select.InsertFile(HtmlFile(HtmlTxt));
			ИначеЕсли СтрокаТЗ.НаименованиеПриложения = "Спецификация оборудования (сводная)" Тогда //6
				HtmlTxt = ВрФайлHTML_СпецификацияСводная(Номер);
				Select.InsertFile(HtmlFile(HtmlTxt));
			КонецЕсли;
			
			Номер = Номер +1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Word.Selection.HomeKey(6,0); //в конце вывода покажем первую страницу (с начала документа
	
	Docum.Activate();
	
	УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция HtmlFile(HtmlTxt)
	
	ТекстHTML = Новый ТекстовыйДокумент;
	ТекстHTML.УстановитьТекст(HtmlTxt);
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла("html");
	Попытка
		ТекстHTML.Записать(ИмяТемпФайла,"windows-1251");
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();	
	КонецПопытки;
	
	Возврат ИмяТемпФайла;
	
КонецФункции // HtmlFile()

&НаСервере
Функция ПолучитьТаблицуHTML_Спецификации(ТЗ_ВариантыРасчетовУпорядоченные, Вариант) //собираем из вариантов расчета
	
	//СтруктураПараметрыТаблицыХТМЛ
	//
	//Общие параметры:
	//СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы - общая ширина таблица
	//СтруктураПараметрыТаблицыХТМЛ.ЦветШапки - цвет шапки таблицы пример "eadbaf"
	//СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется - по умолчанию ЛОЖЬ
	//
	//Индивиуальные для каждой колонки:
	//СтруктураПараметрыТаблицыХТМЛ.Ширина1 - ширина для первой колонки, цифра на конце обознает номер колонки (не с нуля)
	//СтруктураПараметрыТаблицыХТМЛ.Положение1 - отвечает за положение текста в колонке (по умол. лево), передовать "center" или "right"
	
	СтруктураПараметрыТаблицыХТМЛ = Новый Структура;
	СтруктураПараметрыТаблицыХТМЛ.Вставить("ПунктПорядкуИспользуется",Ложь);
	СтруктураПараметрыТаблицыХТМЛ.Вставить("ШиринаТаблицы","600");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("ЦветШапки","eadbaf");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Ширина1","70");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Ширина3","50");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Ширина4","50");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Положение1","left");
	//Для второй колонки положение не задается тк успользуются уровни
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Положение3","right");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Положение4","center");

	ТаблицаХТМЛ = "";
	ПереносСтроки = "<p class=MsoNormal><o:p>&nbsp;</o:p></p>";

	Для каждого СтрокаТЧ Из Объект.Товары Цикл		
		Если СтрокаТЧ.Активность и ЗначениеЗаполнено(СтрокаТЧ.ВариантРасчета) Тогда
				
			ТЗ_Спецификация.Очистить();
			
			НоваяСтрока = ТЗ_Спецификация.Добавить();
			НоваяСтрока.Уровень = 0;
			НоваяСтрока.Номенклатура = Строка(СтрокаТЧ.Номенклатура);			 	
			НоваяСтрока.Количество = СтрокаТЧ.Количество;	
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.ВариантРасчета = СтрокаТЧ.ВариантРасчета;
			НоваяСтрока.Родитель = Строка(СтрокаТЧ.Номенклатура);
			НоваяСтрока.ГруппаНоменклатуры = Ложь;
			
			ПолучитьТаблицуСпецификаций(СтрокаТЧ.ВариантРасчета,0); //рекурсия спецификации
			
			ТЗ_СпецификацииУпорядоченные = ДанныеФормыВЗначение(ТЗ_Спецификация,Тип("ТаблицаЗначений"));
			Если ТЗ_СпецификацииУпорядоченные.Количество() > 0 Тогда
				
				ТЗ_СпецификацииУпорядоченные.Колонки.Добавить("Удалить");
				ТЗ_СпецификацииУпорядоченные.Колонки.Добавить("Обработана");
				
				ПолучитьСвязанныеСпецификации(ТЗ_СпецификацииУпорядоченные, Вариант); //таблица спецификаций упорядоченная в виде дерева
				
				ТЗ_СпецификацияОбщая = Новый ТаблицаЗначений;
				ТЗ_СпецификацияОбщая.Колонки.Добавить("Производитель");
				ТЗ_СпецификацияОбщая.Колонки.Добавить("Номенклатура");
				ТЗ_СпецификацияОбщая.Колонки.Добавить("Количество");
				ТЗ_СпецификацияОбщая.Колонки.Добавить("ЕдиницаИзмерения");
				ТЗ_СпецификацияОбщая.Колонки.Добавить("Уровень");
				ТЗ_СпецификацияОбщая.Колонки.Добавить("ГруппаНоменклатуры");
				
				Для каждого СтрокаТЗ Из ТЗ_СпецификацииУпорядоченные Цикл   //соберем спецификации всех отмеченых товаров
					НоваяСтрокаТЗ = ТЗ_СпецификацияОбщая.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ,СтрокаТЗ);
				КонецЦикла;
				
				//переиминуем для красивого вывода
				ТЗ_СпецификацияОбщая.Колонки.ЕдиницаИзмерения.Имя = "ЕдИзм";
				
				ТаблицаХТМЛ = ТаблицаХТМЛ + "<p>Спецификация " + ?(Вариант = 1,"детальная","сводная") +  " на " + Строка(СтрокаТЧ.Номенклатура) + "</p>" + 
				ТаблицаЗначенийВТаблицуХТМЛ_Спецификации(ТЗ_СпецификацияОбщая,СтруктураПараметрыТаблицыХТМЛ,Вариант);
				
			КонецЕсли;
			
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат ТаблицаХТМЛ;
	
КонецФункции

&НаСервере
Функция ТаблицаЗначенийВТаблицуХТМЛ_Спецификации(ТабЗначений,СтруктураПараметрыТаблицыХТМЛ = Неопределено,Вариант)
	
	МассивИменКолонок = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметрыТаблицыХТМЛ) <> Тип("Структура") Тогда
		СтруктураПараметрыТаблицыХТМЛ = Новый Структура;
	КонецЕсли;
	
	КоличествоКолонок = ТабЗначений.Колонки.Количество();
	ПунктПорядкуИспользуется = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ПунктПорядкуИспользуется"),СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется,ЛОЖЬ);	
	
	Если КоличествоКолонок < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЦветШапки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ЦветШапки")," bgcolor=""#" + СтруктураПараметрыТаблицыХТМЛ.ЦветШапки + """","");
	ШиринаТаблицы = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ШиринаТаблицы")," style=""width:" + СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы + "px""",""); 
	ТаблицаХТМЛ = "<table border=""1"" cellpadding=""1"" cellspacing=""0"" " + ШиринаТаблицы + ">
	|<tbody>
	|<tr>";
	
	////Первым выводим столбик П/П если он задан в шапку
	Если ПунктПорядкуИспользуется Тогда
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
		|<td" + ЦветШапки + " style=""width:30px"" align=""center"">п/п</td>";	
	КонецЕсли;
	
	//Формируем шапку
	Для Счетчик = 1 по КоличествоКолонок Цикл
		ИмяСвойстваШирина = "Ширина" + Счетчик;
		ШиринаСтолбца = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваШирина)," style=""width:" + СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваШирина] + "px""","");
		ИмяКолонки = ТабЗначений.Колонки[Счетчик-1].Имя;
		Если ИмяКолонки = "Уровень" или ИмяКолонки = "ГруппаНоменклатуры"  Тогда		
			Продолжить;		
		КонецЕсли;
		ИмяСвойстваЗаголовок = "Заголовок" + Счетчик;
		ЗаголовокКолонки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваЗаголовок),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваЗаголовок],ИмяКолонки);
		ТаблицаХТМЛ = ТаблицаХТМЛ + " 
		|<td" + ЦветШапки + ШиринаСтолбца + " align=""center"">" + ЗаголовокКолонки + "</td>";	
		МассивИменКолонок.Добавить(ИмяКолонки);
	КонецЦикла;
	ТаблицаХТМЛ = ТаблицаХТМЛ + "
	|</tr>";
	
	//Заполняем таблицу	
	ПунктПорядку = 0;
	
	Для каждого СтрокаТаблицы Из ТабЗначений Цикл
		ПунктПорядку = ПунктПорядку + 1;
		
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
		|<tr>" + ?(ПунктПорядкуИспользуется, Символы.ПС + "<td align=""center"">" + ПунктПорядку + "</td>","") + "";
		Для Счетчик = 0 по КоличествоКолонок - 3 Цикл
			
			Если Вариант = 1 Тогда //детальный вывод
				Если Счетчик = 1 Тогда //колонка номенклатура
					СтрокаПробел = Символ(160);
					Если СтрокаТаблицы.Уровень = 0 или СтрокаТаблицы.ГруппаНоменклатуры Тогда
						Для Позиция = 0 По СтрокаТаблицы.Уровень *3 Цикл
							СтрокаПробел = СтрокаПробел + Символ(160);//пробел	
						КонецЦикла;
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td >" +
						"<b style='mso-bidi-font-weight:normal'>" +  //жирность шрифта
						"<span style='mso-fareast-font-family:" + Символ(34) + "Times New Roman" + "'>" +   //шрифт
						"<span style='mso-spacerun:yes'>" + СтрокаПробел + "</span>" + 
						СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";
					ИначеЕсли СтрокаТаблицы[МассивИменКолонок[Счетчик]] = "в составе (на единицу продукции)" Тогда
						Для Позиция = 0 По СтрокаТаблицы.Уровень *3 Цикл
							СтрокаПробел = СтрокаПробел + Символ(160);//пробел	
						КонецЦикла;
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td >" + //не нужно сказали - "<td colspan=3 style='padding:.75pt .75pt .75pt .75pt'>" + //объединить ячейки
						//"<b style='mso-bidi-font-weight:normal'>" + 
						"<span style='mso-fareast-font-family:" + Символ(34) + "Times New Roman" + "'>" + 
						"<span style='mso-spacerun:yes'>" + СтрокаПробел + "</span>" + 
						СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";
						//не нужно сказали - Прервать;  //не оформляем следующие колонки
					Иначе 	
						Для Позиция = 0 По СтрокаТаблицы.Уровень *3 Цикл
							СтрокаПробел = СтрокаПробел + Символ(160);//пробел	
						КонецЦикла;
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td >" +
						"<span style='mso-fareast-font-family:" + Символ(34) + "Times New Roman" + "'>" + 
						"<span style='mso-spacerun:yes'>" + СтрокаПробел + "</span>" + 
						СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";
					КонецЕсли;
				ИначеЕсли Счетчик = 2 Тогда //колонка количество
					Если СтрокаТаблицы[МассивИменКолонок[1]] = "в составе (на единицу продукции)" Тогда //ничего не выводим
						ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
						Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td " + Положение + ">" + Символы.НПП + "" + "</td>";
					Иначе 
						ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
						Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td " + Положение + ">" + Символы.НПП + СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";
					КонецЕсли;
				Иначе
					ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
					Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
					ТаблицаХТМЛ = ТаблицаХТМЛ + "<td " + Положение + ">" + Символы.НПП + СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";	
				КонецЕсли;
				
			Иначе  //упрощенный вывод
				Если Счетчик = 1 Тогда //колонка номенклатура
					СтрокаПробел = Символ(160);
					Если ТабЗначений.Индекс(СтрокаТаблицы) = 0 Тогда
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td >" +
						"<b style='mso-bidi-font-weight:normal'>" +  //жирность шрифта
						"<span style='mso-fareast-font-family:" + Символ(34) + "Times New Roman" + "'>" +   //шрифт
						"<span style='mso-spacerun:yes'>" + "</span>" + 
						СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";
					ИначеЕсли СтрокаТаблицы[МассивИменКолонок[Счетчик]] = "в составе (на единицу продукции)" Тогда
						Для Позиция = 0 По 3 Цикл
							СтрокаПробел = СтрокаПробел + Символ(160);//пробел	
						КонецЦикла;
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td >" + //не нужно сказали - "<td colspan=3 style='padding:.75pt .75pt .75pt .75pt'>" + //объединить ячейки
						//"<b style='mso-bidi-font-weight:normal'>" + 
						"<span style='mso-fareast-font-family:" + Символ(34) + "Times New Roman" + "'>" + 
						"<span style='mso-spacerun:yes'>" + СтрокаПробел + "</span>" + 
						СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";
						//не нужно сказали - Прервать;  //не оформляем следующие колонки
					Иначе
						Для Позиция = 0 По 6 Цикл 
							СтрокаПробел = СтрокаПробел + Символ(160);//пробел	
						КонецЦикла;
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td >" +
						"<span style='mso-fareast-font-family:" + Символ(34) + "Times New Roman" + "'>" + 
						"<span style='mso-spacerun:yes'>" + СтрокаПробел + "</span>" + 
						СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";
					КонецЕсли;
				ИначеЕсли Счетчик = 2 Тогда //колонка количество
					Если СтрокаТаблицы[МассивИменКолонок[1]] = "в составе (на единицу продукции)" Тогда //ничего не выводим
						ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
						Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td " + Положение + ">" + Символы.НПП + "" + "</td>";
					Иначе 
						ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
						Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
						ТаблицаХТМЛ = ТаблицаХТМЛ + "<td " + Положение + ">" + Символы.НПП + СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";
					КонецЕсли;
				Иначе
					ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
					Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
					ТаблицаХТМЛ = ТаблицаХТМЛ + "<td " + Положение + ">" + Символы.НПП + СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";	
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;				
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
		|</tr>";
	КонецЦикла;	
	
	ТаблицаХТМЛ = ТаблицаХТМЛ + " 
	|</tbody>
	|</table>";
	
	Возврат ТаблицаХТМЛ;
	
КонецФункции
	
&НаСервере
Процедура ПолучитьТаблицуВариантовРасчетов(ТЗ_Элементов) //рекурсия 1 описание
	
	ЕщеКружок = Ложь;
	
	ТЗ_Временная  = Новый ТаблицаЗначений;
	ТЗ_Временная.Колонки.Добавить("ВариантРасчета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Ссылка КАК КлючСвязи,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.ВариантРасчета КАК ВариантРасчета,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Номенклатура КАК Номенклатура,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Количество КАК Количество,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.гиг_ВариантыРасчетовНоменклатурыПроекта.Товары КАК гиг_ВариантыРасчетовНоменклатурыПроектаТовары
	|ГДЕ
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Ссылка.Ссылка В(&МассивЭлементов)
	|	И НЕ гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивЭлементов", ТЗ_Элементов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("КлючСвязи",ВыборкаДетальныеЗаписи.КлючСвязи);
		Отбор.Вставить("ВариантРасчета",ВыборкаДетальныеЗаписи.ВариантРасчета);
		
		Массив = ТЗ_Сводная.НайтиСтроки(Отбор);
		
		Если Массив.Количество() = 0 Тогда
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КлючСвязи) и не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВариантРасчета) Тогда
				Продолжить;	
			КонецЕсли;
			
			НоваяСтрокаСводная = ТЗ_Сводная.Добавить();
			НоваяСтрокаСводная.КлючСвязи      = ВыборкаДетальныеЗаписи.КлючСвязи;
			НоваяСтрокаСводная.ВариантРасчета = ВыборкаДетальныеЗаписи.ВариантРасчета;
			
			НоваяСтрокаВременная = ТЗ_Временная.Добавить();
			НоваяСтрокаВременная.ВариантРасчета = ВыборкаДетальныеЗаписи.ВариантРасчета;
			
		КонецЕсли;
		
		ЕщеКружок = Истина;
		
	КонецЦикла;
		
	Если ЕщеКружок Тогда		
		ПолучитьТаблицуВариантовРасчетов(ТЗ_Временная);		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСвязанныеВариантыРасчета(ТЗ_Сводная)   //рекурсия 2 описание
	
	Прервались = ложь;
	
	Для каждого Строка Из ТЗ_Сводная Цикл
		Если не Строка.ВариантРасчета = Строка.КлючСвязи Тогда
			
			Если Строка.Удалить = Неопределено и Строка.Обработана = Неопределено Тогда
				СтрокаВариантРасчета = ТЗ_Сводная.Найти(Строка.КлючСвязи, "ВариантРасчета");
				ИндексВариантРасчета = ТЗ_Сводная.Индекс(СтрокаВариантРасчета)+1;
				Если не ТЗ_Сводная.Индекс(Строка) = ИндексВариантРасчета Тогда				
					
					Строка.Удалить = "Удалить";
					
					НоваяСтрока = ТЗ_Сводная.Вставить(ИндексВариантРасчета);
					НоваяСтрока.КлючСвязи      = Строка.КлючСвязи;
					НоваяСтрока.ВариантРасчета = Строка.ВариантРасчета;
					НоваяСтрока.Обработана = "Обработана";
					
					Прервались = Истина;
					
					Прервать;
				Иначе 
					Строка.Обработана = "Обработана";
				КонецЕсли;
			КонецЕсли;
			
		Иначе 
			Строка.Обработана = "Обработана";
		КонецЕсли;	 
	КонецЦикла;	
	
	Если  Прервались Тогда
		
		Отбор = Новый Структура("Удалить", "Удалить");
		Массив = ТЗ_Сводная.НайтиСтроки(Отбор);
		Для каждого Строка Из Массив Цикл
			
			ТЗ_Сводная.Удалить(Строка);
			
		КонецЦикла;
		
		ПолучитьСвязанныеВариантыРасчета(ТЗ_Сводная);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСпецификаций(ТЗ_Элементов,Уровень) //рекурсия спецификации
	
	ЕщеКружок = Ложь;
	СмещениеУровня = 0;
	
	ТЗ_Временная  = Новый ТаблицаЗначений;
	ТЗ_Временная.Колонки.Добавить("ВариантРасчета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры.Ссылка КАК ВариантРасчета,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры.Группа КАК Номенклатура,
	|	&Уровень + 1 КАК Уровень,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры.Количество КАК Количество,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры.Ссылка.Номенклатура КАК Родитель,
	|	ИСТИНА КАК ГруппаНоменклатуры,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры.ВыводитьВКП КАК ВыводитьВКП,
	|	НЕОПРЕДЕЛЕНО КАК Производитель
	|ИЗ
	|	Справочник.гиг_ВариантыРасчетовНоменклатурыПроекта.ГруппыНоменклатуры КАК гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры
	|ГДЕ
	|	гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры.Ссылка В(&Ссылка)
	|	И НЕ гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры.Ссылка.ПометкаУдаления
	|	И гиг_ВариантыРасчетовНоменклатурыПроектаГруппыНоменклатуры.ВыводитьВКП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.ВариантРасчета,
	|	ПРЕДСТАВЛЕНИЕ(гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Номенклатура),
	|	&Уровень + 2,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Количество,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Номенклатура.ЕдиницаИзмерения,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Ссылка.Номенклатура,
	|	ЛОЖЬ,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.ВыводитьВКП,
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Номенклатура.Производитель
	|ИЗ
	|	Справочник.гиг_ВариантыРасчетовНоменклатурыПроекта.Товары КАК гиг_ВариантыРасчетовНоменклатурыПроектаТовары
	|ГДЕ
	|	гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Ссылка В(&Ссылка)
	|	И НЕ гиг_ВариантыРасчетовНоменклатурыПроектаТовары.Ссылка.ПометкаУдаления
	|	И гиг_ВариантыРасчетовНоменклатурыПроектаТовары.ВыводитьВКП";
	
	Запрос.УстановитьПараметр("Ссылка", ТЗ_Элементов);
	Запрос.УстановитьПараметр("Уровень", Уровень);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ВариантРасчета = ?(ТипЗнч(ВыборкаДетальныеЗаписи.ВариантРасчета) = Тип("СправочникСсылка.РесурсныеСпецификации"),Справочники.гиг_ВариантыРасчетовНоменклатурыПроекта.ПустаяСсылка(),ВыборкаДетальныеЗаписи.ВариантРасчета);
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура);
		Отбор.Вставить("ВариантРасчета",ВариантРасчета);
		Отбор.Вставить("Родитель",Строка(ВыборкаДетальныеЗаписи.Родитель));
		
		Массив = ТЗ_Спецификация.НайтиСтроки(Отбор);
		
		Если Массив.Количество() = 0 Тогда
			
			Если ВыборкаДетальныеЗаписи.ГруппаНоменклатуры Тогда
				
				НоваяСтрокаСпецификация = ТЗ_Спецификация.Добавить();
				НоваяСтрокаСпецификация.Уровень = ВыборкаДетальныеЗаписи.Уровень;
				НоваяСтрокаСпецификация.ВариантРасчета = Справочники.гиг_ВариантыРасчетовНоменклатурыПроекта.ПустаяСсылка();
				НоваяСтрокаСпецификация.Номенклатура = "в составе (на единицу продукции)";
				НоваяСтрокаСпецификация.Количество = Неопределено;
				НоваяСтрокаСпецификация.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				НоваяСтрокаСпецификация.Родитель = Строка(ВыборкаДетальныеЗаписи.Родитель);
				НоваяСтрокаСпецификация.ГруппаНоменклатуры = Ложь;
				НоваяСтрокаСпецификация.Производитель = Неопределено;

				Если ВыборкаДетальныеЗаписи.ВыводитьВКП Тогда 
					СмещениеУровня =  1;	
				Иначе
					СмещениеУровня =  0;
					Продолжить;	 //поскольку по тз нужно выводить эту запись даже если нет группы номенклатуры
				КонецЕсли;				
				
			КонецЕсли;
			
			НоваяСтрокаСпецификация = ТЗ_Спецификация.Добавить();
			//уровень криво отображался из за добавленной строки "в составе (на единицу продукции)"
			ОтборУровня = Новый Структура();
			ОтборУровня.Вставить("Родитель",Строка(ВыборкаДетальныеЗаписи.Родитель));	
			ОтборУровня.Вставить("ГруппаНоменклатуры",Истина);
			МассивУровня = ТЗ_Спецификация.НайтиСтроки(ОтборУровня);
			Если МассивУровня.Количество() > 0 Тогда
				//может потом потребуется в цикле еще определить уровень из массива строк
				НоваяСтрокаСпецификация.Уровень = МассивУровня[0].Уровень +1;
			Иначе 
				НоваяСтрокаСпецификация.Уровень = ВыборкаДетальныеЗаписи.Уровень + СмещениеУровня;	
			КонецЕсли;
			//
			НоваяСтрокаСпецификация.ВариантРасчета = ВариантРасчета;
			НоваяСтрокаСпецификация.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
			НоваяСтрокаСпецификация.Количество = ВыборкаДетальныеЗаписи.Количество;
			НоваяСтрокаСпецификация.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
			НоваяСтрокаСпецификация.Родитель = Строка(ВыборкаДетальныеЗаписи.Родитель);
			НоваяСтрокаСпецификация.ГруппаНоменклатуры = ВыборкаДетальныеЗаписи.ГруппаНоменклатуры;
			НоваяСтрокаСпецификация.Производитель = ВыборкаДетальныеЗаписи.Производитель;

			НоваяСтрокаВременная = ТЗ_Временная.Добавить();
			НоваяСтрокаВременная.ВариантРасчета = ВариантРасчета;
			
		КонецЕсли;		
		
		ЕщеКружок = Истина;
		
	КонецЦикла;
	
	Если ЕщеКружок Тогда
		Уровень = Уровень + 2 + СмещениеУровня;
		ПолучитьТаблицуСпецификаций(ТЗ_Временная,Уровень);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПолучитьСвязанныеСпецификации(ТЗ_СпецификацииУпорядоченные, Вариант) //таблица спецификаций упорядоченная в виде дерева
	
	Для каждого Строка Из ТЗ_СпецификацииУпорядоченные Цикл
		Если не Строка.Родитель = Строка.Номенклатура Тогда
			
			Если Строка.Удалить = Неопределено и Строка.Обработана = Неопределено Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Родитель",Строка.Номенклатура);
				Отбор.Вставить("Обработана",Неопределено);
				
				Массив = ТЗ_СпецификацииУпорядоченные.НайтиСтроки(Отбор);
				Если Массив.Количество() > 0 Тогда
					ИндексНоменклатуры = ТЗ_СпецификацииУпорядоченные.Индекс(Строка)+1;
					Для каждого СтрМассива  Из Массив Цикл
						НоваяСтрока = ТЗ_СпецификацииУпорядоченные.Вставить(ИндексНоменклатуры);
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрМассива);
						НоваяСтрока.Обработана = Неопределено;
						СтрМассива.Удалить = "Удалить";
						ИндексНоменклатуры = ИндексНоменклатуры + 1;
					КонецЦикла;
					Строка.Обработана = "Обработана";
										
				Иначе 
					Строка.Обработана = "Обработана";
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		Иначе 
			Строка.Обработана = "Обработана";
		КонецЕсли;
	КонецЦикла;
	
	ОтборУдалить = Новый Структура("Удалить", "Удалить");
	МассивУдалить = ТЗ_СпецификацииУпорядоченные.НайтиСтроки(ОтборУдалить);
	Для каждого СтрокаУдалить Из МассивУдалить Цикл
		ТЗ_СпецификацииУпорядоченные.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	//вариант СОКРАЩЕННЫЙ
	//Отбор = Новый Структура("ГруппаНоменклатуры",Ложь);
	//ТЗ_СпецификацииУпорядоченныеСокращенные = ТЗ_СпецификацииУпорядоченные.Скопировать(Отбор,"Номенклатура,ЕдиницаИзмерения,Количество");
	ТЗ_СпецификацииУпорядоченныеСокращенные = ТЗ_СпецификацииУпорядоченные.Скопировать();
	ТЗ_СпецификацииУпорядоченныеСокращенные.Колонки.Добавить("НачальныйУровень");
	ТЗ_СпецификацииУпорядоченныеСокращенные[0].НачальныйУровень = Истина;
	ТЗ_СпецификацииУпорядоченныеСокращенные.Свернуть("Номенклатура,ЕдиницаИзмерения,НачальныйУровень,ГруппаНоменклатуры,Производитель","Количество");
	ТЗ_СпецификацииУпорядоченныеСокращенные.Сортировать("Номенклатура");
	
	Для каждого Строка Из ТЗ_СпецификацииУпорядоченныеСокращенные Цикл
	    Если не Строка.НачальныйУровень = Неопределено и Строка.НачальныйУровень Тогда
			ТЗ_СпецификацииУпорядоченныеСокращенные.Сдвинуть(Строка, -ТЗ_СпецификацииУпорядоченныеСокращенные.Индекс(Строка));
		  Прервать;
		КонецЕсли;
	КонецЦикла;
	ТЗ_СпецификацииУпорядоченныеСокращенные.Колонки.Удалить("НачальныйУровень");
	//
	Если Вариант = 2 Тогда
		ТЗ_СпецификацииУпорядоченные = ТЗ_СпецификацииУпорядоченныеСокращенные.Скопировать(); 
	КонецЕсли;
	//
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуHTML_ОписаниеПоВыбраннымЗначениям(ТЗ_Элементов)
	
    ТЗ_Элементов.Свернуть("ВариантРасчета");
	
	ОписаниеОбщее = "";
	ПереносСтроки = "<div class=" + Символ(34) + "col-md-12"  + Символ(34) + " style=" + Символ(34) + "box-sizing: border-box; position: relative; min-height: 1px; padding-right: 15px; padding-left: 15px; float: left; width: 487.5px;" + Символ(34) + "><br></div>";
	
	ТЗ_КоллекцияОписаний = Новый ТаблицаЗначений; //нужна для исключения дублирования описаний
	ТЗ_КоллекцияОписаний.Колонки.Добавить("ОписаниеТовара");
	ТЗ_КоллекцияОписаний.Колонки.Добавить("ДлинаОписания");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гиг_ВариантыРасчетовНоменклатурыПроектаЗначенияПараметров.ЗначениеПараметра.Ссылка КАК ЗначениеПараметра,
		|	гиг_ВариантыРасчетовНоменклатурыПроектаЗначенияПараметров.ЗначениеПараметра.ОписаниеТовара КАК ОписаниеТовара,
		|	гиг_ВариантыРасчетовНоменклатурыПроектаЗначенияПараметров.ЗначениеПараметра.ИндексЭлемента КАК ИндексЭлемента
		|ИЗ
		|	Справочник.гиг_ВариантыРасчетовНоменклатурыПроекта.ЗначенияПараметров КАК гиг_ВариантыРасчетовНоменклатурыПроектаЗначенияПараметров
		|ГДЕ
		|	гиг_ВариантыРасчетовНоменклатурыПроектаЗначенияПараметров.Ссылка В(&ТЗ_Элементов)
		|	И гиг_ВариантыРасчетовНоменклатурыПроектаЗначенияПараметров.Выделен";
	
	Запрос.УстановитьПараметр("ТЗ_Элементов", ТЗ_Элементов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Не ВыборкаДетальныеЗаписи.ОписаниеТовара = "" Тогда
			НоваяСтрока = ТЗ_КоллекцияОписаний.Добавить();
			НоваяСтрока.ОписаниеТовара = ВыборкаДетальныеЗаписи.ОписаниеТовара;
			НоваяСтрока.ДлинаОписания  = СтрДлина(ВыборкаДетальныеЗаписи.ОписаниеТовара);
		КонецЕсли;
	КонецЦикла;
	
	ТЗ_КоллекцияОписаний.Свернуть("ОписаниеТовара,ДлинаОписания");
	
	Для каждого Строка Из ТЗ_КоллекцияОписаний Цикл
	
		ОписаниеОбщее  = ОписаниеОбщее + Строка.ОписаниеТовара + ПереносСтроки; 
	
	КонецЦикла;
	
	Возврат ОписаниеОбщее;
	
КонецФункции

&НаКлиенте
&Вместо("Подключаемый_ВыполнитьКоманду")
Процедура Рин1_Подключаемый_ВыполнитьКоманду(Команда)
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Перед выводом на печать документ необходимо записать!");
		Возврат;
	КонецЕсли;
	
	Если Команда.Имя = "ПодменюПечатьОбычное_КоммерческоеПредложениеMicrosoftWord_ТКП" Тогда
				
		//вызов формы для определения структуры комм предложения
		ОткрытьФорму("Документ.КоммерческоеПредложениеКлиенту.Форма.Рин1_ФормаНастройкиСтруктурыВывода",,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КомандаФормы = Команда;
		Возврат;
				
	КонецЕсли;
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКФормированиюСтруктурыВывода(ВыбранноеЗначение)
	
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(ВыбранноеЗначение).СхемаКомпоновки;
	СформироватьДокументWord_ИЗ_HTML(СхемаКомпоновки);

КонецПроцедуры // ПодготовкаКФормированиюСтруктурыВывода()

&НаСервере
Функция ПолучитьТаблицуHTML_КоммБлок(Вариант) 
	
	//СтруктураПараметрыТаблицыХТМЛ
	//
	//Общие параметры:
	//СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы - общая ширина таблица
	//СтруктураПараметрыТаблицыХТМЛ.ЦветШапки - цвет шапки таблицы пример "eadbaf"
	//СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется - по умолчанию ЛОЖЬ
	//
	//Индивиуальные для каждой колонки:
	//СтруктураПараметрыТаблицыХТМЛ.Ширина1 - ширина для первой колонки, цифра на конце обознает номер колонки (не с нуля)
	//СтруктураПараметрыТаблицыХТМЛ.Положение1 - отвечает за положение текста в колонке (по умол. лево), передовать "center" или "right"
	
	СтруктураПараметрыТаблицыХТМЛ = Новый Структура;
	СтруктураПараметрыТаблицыХТМЛ.Вставить("ПунктПорядкуИспользуется",Истина);
	СтруктураПараметрыТаблицыХТМЛ.Вставить("ШиринаТаблицы","600");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("ЦветШапки","eadbaf");
	//СтруктураПараметрыТаблицыХТМЛ.Вставить("Ширина1","70");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Ширина2","60");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Ширина3","60");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Ширина4","80");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Ширина5","100");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Ширина6","100");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Положение1","left");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Положение2","center");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Положение3","center");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Положение4","right");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Положение5","center");
	СтруктураПараметрыТаблицыХТМЛ.Вставить("Положение6","right");

	
	ТаблицаХТМЛ = "";
	ПереносСтроки = "<p class=MsoNormal><o:p>&nbsp;</o:p></p>";
	
	ТЗ_Номенклатура = Новый ТаблицаЗначений;
	ТЗ_Номенклатура.Колонки.Добавить("Наименование");
	ТЗ_Номенклатура.Колонки.Добавить("Количество");
	ТЗ_Номенклатура.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ_Номенклатура.Колонки.Добавить("Цена");
	ТЗ_Номенклатура.Колонки.Добавить("Скидка");
	ТЗ_Номенклатура.Колонки.Добавить("Сумма");
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл		
		Если СтрокаТЧ.Активность Тогда
			
			НоваяСтрока = ТЗ_Номенклатура.Добавить();
			НоваяСтрока.Наименование = Строка(СтрокаТЧ.Номенклатура);			 	
			НоваяСтрока.Количество = СтрокаТЧ.Количество;	
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = СтрокаТЧ.Цена;
			НоваяСтрока.Скидка = СтрокаТЧ.СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
			НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
			
		КонецЕсли;	
	КонецЦикла;	
	
	//переиминуем для красивого вывода
	ТЗ_Номенклатура.Колонки.ЕдиницаИзмерения.Имя = "Ед";
	ТЗ_Номенклатура.Колонки.Количество.Имя = "КолВо";

	ТаблицаХТМЛ = ТаблицаЗначенийВТаблицуХТМЛ_КоммБлок(ТЗ_Номенклатура,СтруктураПараметрыТаблицыХТМЛ,Вариант);
	
	Возврат ТаблицаХТМЛ;
	
КонецФункции

&НаСервере
Функция ТаблицаЗначенийВТаблицуХТМЛ_КоммБлок(ТабЗначений,СтруктураПараметрыТаблицыХТМЛ = Неопределено,Вариант)
	
	МассивИменКолонок = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметрыТаблицыХТМЛ) <> Тип("Структура") Тогда
		СтруктураПараметрыТаблицыХТМЛ = Новый Структура;
	КонецЕсли;
	
	КоличествоКолонок = ТабЗначений.Колонки.Количество();
	ПунктПорядкуИспользуется = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ПунктПорядкуИспользуется"),СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется,ЛОЖЬ);	
	
	Если КоличествоКолонок < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЦветШапки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ЦветШапки")," bgcolor=""#" + СтруктураПараметрыТаблицыХТМЛ.ЦветШапки + """","");
	ШиринаТаблицы = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ШиринаТаблицы")," style=""width:" + СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы + "px""",""); 
	ТаблицаХТМЛ = "<table border=""1"" cellpadding=""1"" cellspacing=""0"" " + ШиринаТаблицы + ">
	|<tbody>
	|<tr>";
	
	////Первым выводим столбик П/П если он задан в шапку
	Если ПунктПорядкуИспользуется Тогда
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
		|<td" + ЦветШапки + " style=""width:30px"" align=""center"">№</td>";	
	КонецЕсли;
	
	//Формируем шапку
	Для Счетчик = 1 по КоличествоКолонок Цикл
		ИмяСвойстваШирина = "Ширина" + Счетчик;
		ШиринаСтолбца = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваШирина)," style=""width:" + СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваШирина] + "px""","");
		ИмяКолонки = ТабЗначений.Колонки[Счетчик-1].Имя;
		Если Вариант = 1 и ИмяКолонки = "Скидка"  Тогда		
			Продолжить;		
		КонецЕсли;
		ИмяСвойстваЗаголовок = "Заголовок" + Счетчик;
		ЗаголовокКолонки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваЗаголовок),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваЗаголовок],ИмяКолонки);
		ТаблицаХТМЛ = ТаблицаХТМЛ + " 
		|<td" + ЦветШапки + ШиринаСтолбца + " align=""center"">" + ЗаголовокКолонки + "</td>";	
		МассивИменКолонок.Добавить(ИмяКолонки);
	КонецЦикла;
	ТаблицаХТМЛ = ТаблицаХТМЛ + "
	|</tr>";
	
	//Заполняем таблицу	
	ПунктПорядку = 0;
	
	Если ПунктПорядкуИспользуется Тогда
		Если Вариант = 1 Тогда		
			КоличествоКолонок = КоличествоКолонок -2;
		Иначе 
			КоличествоКолонок = КоличествоКолонок -1;
		КонецЕсли;
	Иначе
		Если Вариант = 1 Тогда		
			КоличествоКолонок = КоличествоКолонок -1;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТабЗначений Цикл
		ПунктПорядку = ПунктПорядку + 1;
		
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
		|<tr>" + ?(ПунктПорядкуИспользуется, Символы.ПС + "<td align=""center"">" + ПунктПорядку + "</td>","") + "";
		Для Счетчик = 0 по КоличествоКолонок Цикл
			ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
			Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
			ТаблицаХТМЛ = ТаблицаХТМЛ + "<td " + Положение + ">" + Символы.НПП + СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";	
		КонецЦикла;				
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
		|</tr>";
	КонецЦикла;	
	
	ТаблицаХТМЛ = ТаблицаХТМЛ + " 
	|</tbody>
	|</table>";
	
	Возврат ТаблицаХТМЛ;
	
КонецФункции

&НаСервере
Функция ЧисловойКодПоСсылке(Ссылка) Экспорт
	ШестнадцатиричноеЧисло = СтрЗаменить(Строка(Ссылка.УникальныйИдентификатор()),"-","");
	Возврат ПреобразоватьИзШестнадцатиричнойСистемыСчисленияВДесятичноеЧисло(ШестнадцатиричноеЧисло);
КонецФункции

&НаСервере
Функция ПреобразоватьИзШестнадцатиричнойСистемыСчисленияВДесятичноеЧисло(Знач Значение)
	
	Значение = НРег(Значение);
	ДлинаСтроки = СтрДлина(Значение);
	
	Результат = 0;
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Результат = Результат * 16 + СтрНайти("0123456789abcdef", Сред(Значение, НомерСимвола, 1)) - 1;
	КонецЦикла;
	
	Возврат Формат(Результат, "ЧГ=0");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
	//"Активность, БезВозвратнойТары, АктивностьБезВозвратнойТары",
		"Активность",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");

КонецФункции

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(КП_АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		КП_АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиКоммерческогоПредложения(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	//Форма.СуммаАктивныхСтрок = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
	//	КоллекцияТовары.Итог("СуммаСНДСАктивность"),
	//	КоллекцияТовары.Итог("СуммаСНДСАктивностьБезВозвратнойТары"));
	//Форма.СуммаНДСАктивныхСтрок = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
	//	КоллекцияТовары.Итог("СуммаНДСАктивность"),
	//	КоллекцияТовары.Итог("СуммаНДСАктивностьБезВозвратнойТары"));
	//Форма.СуммаАвтоСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
	//	КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивность"),
	//	КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивностьБезВозвратнойТары"));
	//Форма.СуммаРучнойСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
	//	КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивность"),
	//	КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивностьБезВозвратнойТары"));
	//Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	//Форма.СуммаВсего = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
	//	КоллекцияТовары.Итог("СуммаСНДС"),
	//	КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары"));
	//
	//СуммаАктивныхСтрокБезНДС = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
	//	КоллекцияТовары.Итог("СуммаАктивность"),
	//	КоллекцияТовары.Итог("СуммаАктивностьБезВозвратнойТары"));
	
	//Форма.СуммаАктивныхСтрок = КоллекцияТовары.Итог("СуммаСНДСАктивностьБезВозвратнойТары");
	//Форма.СуммаНДСАктивныхСтрок = КоллекцияТовары.Итог("СуммаНДСАктивностьБезВозвратнойТары");
	//Форма.СуммаАвтоСкидки = КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивностьБезВозвратнойТары");
	//Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивностьБезВозвратнойТары");
	//Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	//Форма.СуммаВсего = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары");
	//
	//СуммаАктивныхСтрокБезНДС = КоллекцияТовары.Итог("СуммаАктивностьБезВозвратнойТары");
	////
	//
	//Если СуммаАктивныхСтрокБезНДС > 0 Тогда
	//	Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
	//	Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
	//	Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	//ИначеЕсли Форма.СуммаСкидки > 0 Тогда
	//	Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
	//	Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
	//	Форма.ПроцентСкидки       = 100;
	//Иначе
	//	Форма.ПроцентАвтоСкидки   = 0;
	//	Форма.ПроцентРучнойСкидки = 0;
	//	Форма.ПроцентСкидки       = 0;
	//КонецЕсли;
	//
	////ОтображатьИтогСуммыНДС = УчетНДСУПКлиентСервер.ПродажаОблагаетсяНДС(Форма.Объект.НалогообложениеНДС);
	//
	//Если Истина Тогда//Если ОтображатьИтогСуммыНДС Тогда
	//	Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
	//	Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	//Иначе
	//	Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
	//	Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", КП_УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	//++Гольм А.А. (Гигабайт)
	//ПоказатьОповещениеПользователя(
	//	НСтр("ru = 'Скидки (наценки)'"),
	//	,
	//	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
	//	БиблиотекаКартинок.Информация32);
	//--Гольм А.А. (Гигабайт)	
	
КонецПроцедуры

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки, АдресВоВременномХранилище)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Истина);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		СтрокаТЧТовары.Активность = Истина;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	//МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Функция ОперацииПередачиТоваров()
	
	ОперацииПередачи = Новый Массив;
	ОперацииПередачи.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	ОперацииПередачи.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи"));
	
	Возврат ОперацииПередачи;
	
КонецФункции

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки, ТолькоАктивныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки,,ТолькоАктивныеСтроки);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		//++Гольм А.А. (Гигабайт)
		//ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки");
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ВидЦены, Цена, Количество, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СуммаАвтоматическойСкидки");
		//--Гольм А.А. (Гигабайт)
		
		//<++ Гигабайт Казаков М.В. Схемы обеспечения потребностей
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СтрокаТовара,"ГИГ_СхемаОбеспечения,ГИГ_СрокПоставки");
		ТекущаяСтрока.ДатаОтгрузки =СтрокаТовара.ДатаОтгрузки; 
		//++> Гигабайт Казаков М.В. 
		ТекущаяСтрока.Активность = Истина;
		//ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		//ТекущаяСтрока.ИндексНабора = 0;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		//СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		//++Гольм А.А. (Гигабайт)
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		//--Гольм А.А. (Гигабайт)
	КонецЦикла;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	
	//НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	//МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ЗагрузитьИзВнешнегоФайлаВместо(Команда)
	
	НалогообложениеНДС              = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
	МассивОтборовПоТипуНоменклатуры = КоммерческиеПредложенияДокументыКлиентСерверУТ.МассивОтборовПоТипуНоменклатуры(Объект.ХозяйственнаяОперация);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены",           Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",         Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС",      НалогообложениеНДС);
	ПараметрыФормы.Вставить("Дата",                    Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                  Объект.Валюта);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(МассивОтборовПоТипуНоменклатуры));
	
	ОткрытьФорму(
		"Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры
