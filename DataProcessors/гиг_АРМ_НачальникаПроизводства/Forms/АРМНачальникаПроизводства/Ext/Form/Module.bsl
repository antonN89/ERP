
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КлючОбъекта  = "гиг_АРМ_НачальникаПроизводства";
	КлючНастроек = "НастройкиФормы";
	 
	//ПроизвольныеНастройкиФормы  =
	//    ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
		
	ЗаполнитьСлужебныеРеквизиты();
		
	//Если ТипЗнч(ПроизвольныеНастройкиФормы) = Тип("Массив") Тогда
	//	СтатьяКалькуляции = ПроизвольныеНастройкиФормы[0];
	//КонецЕсли;
		
	ОбновитьДеревоЗаказовНаСервере();
	ОтборыСписковКлиентСервер.ЗаполнитьСписокВыбораОтбораПоАктуальности(Элементы.ДатаПотребностиОтбор.СписокВыбора);

КонецПроцедуры

// + [Rineco], [Киселев А.] [10.12.2021] [Log_Diff][№ 24815], [#АРМ начальника производства] 
&НаСервере
Процедура ОбновитьДеревоЗаказовНаСервере(ОбновитьПоКнопке = Ложь)
	
	// + [Rineco], [Киселев А.] [10.12.2021] 
	// Задача: [№ 24815], [#Обновить по кнопке]
	Если Не ОбновитьПоКнопке Тогда
		Возврат;
	КонецЕсли;
	// - [Rineco], [Киселев А.] [10.12.2021]
	
	
	ДеревоЗаказовОбработка = РеквизитФормыВЗначение("ДеревоЗаказов");
	ДеревоЗаказовОбработка.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказНаПроизводство2_2Продукция.Ссылка КАК Ссылка,
	               |	ВЫРАЗИТЬ(ЗаказНаПроизводство2_2Продукция.Номенклатура.Наименование + ВЫБОР
	               |			КОГДА НЕ ЗаказНаПроизводство2_2Продукция.Характеристика.Наименование ЕСТЬ NULL
	               |				ТОГДА ""("" + ЕСТЬNULL(ЗаказНаПроизводство2_2Продукция.Характеристика.Наименование, """") + "")""
	               |			ИНАЧЕ """"
	               |		КОНЕЦ КАК СТРОКА(1000)) КАК Номенклатура,
	               |	ЗаказНаПроизводство2_2Продукция.КоличествоУпаковок КАК КоличествоПродукции,
	               |	ЗаказНаПроизводство2_2Продукция.Ссылка.ДатаПотребности КАК ДатаВыпуска,
	               |	ЗаказНаПроизводство2_2Продукция.Ссылка.НачатьНеРанее КАК НачатьНеРанее,
	               |	ЗаказНаПроизводство2_2Продукция.Спецификация КАК Спецификация
	               |ПОМЕСТИТЬ ВТ_ЗаказыНаПроизводство
	               |ИЗ
	               |	Документ.ЗаказНаПроизводство2_2.Продукция КАК ЗаказНаПроизводство2_2Продукция
	               |ГДЕ
	               |	ЗаказНаПроизводство2_2Продукция.Ссылка.Проведен
	               |	И ЗаказНаПроизводство2_2Продукция.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка КАК Ссылка,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	               |				ТОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки
	               |			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |		КОНЕЦ) КАК ДатаРезерва
	               |ПОМЕСТИТЬ ВТ_ДатаРезерва
	               |ИЗ
	               |	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами
	               |ГДЕ
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка.Проведен = ИСТИНА
	               |	И ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка.Распоряжение В
	               |			(ВЫБРАТЬ
	               |				ВТ_ЗаказыНаПроизводство.Ссылка КАК Ссылка
	               |			ИЗ
	               |				ВТ_ЗаказыНаПроизводство КАК ВТ_ЗаказыНаПроизводство)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Номенклатура КАК Материал,
	               |	СУММА(ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок) КАК КоличествоМатериалы,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка.ЖелаемаяДатаОбеспечения КАК ДатаВыполненияЭтапа,
	               |	ЭтапПроизводства2_2.Ссылка КАК Этап,
	               |	ЭтапПроизводства2_2.Распоряжение КАК Распоряжение,
	               |	ГрафикЭтаповПроизводства2_2.НачалоЭтапа КАК НачалоЭтапа,
	               |	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	               |				ТОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК КоличествоМатериаловВРезерве,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	               |				ТОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК КоличествоМатериалаВРезервеВПути,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения КАК ВариантОбеспечения,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки КАК ДатаОтгрузки,
	               |	ЭтапПроизводства2_2.Статус КАК Статус,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции КАК СтатьяКалькуляции,
	               |	ВЫБОР
	               |		КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	               |			ТОГДА ВТ_ДатаРезерва.ДатаРезерва
	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |	КОНЕЦ КАК ДатаМатериалаВРезервеВПути,
	               |	ЭтапПроизводства2_2.НомерЭтапа КАК НомерЭтапа,
	               |	ЭтапПроизводства2_2.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	               |	ЭтапПроизводства2_2.ПланироватьНеРанее КАК ПланироватьНеРанее,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Характеристика КАК Характеристика,
	               |	ЭтапПроизводства2_2.Спецификация КАК СпецификацияЭтапа
	               |ПОМЕСТИТЬ ВТ_Этапы
	               |ИЗ
	               |	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами
	               |		ПО ЭтапПроизводства2_2.Ссылка = ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	               |		ПО ЭтапПроизводства2_2.Ссылка = ГрафикЭтаповПроизводства2_2.ЭтапПроизводства
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатаРезерва КАК ВТ_ДатаРезерва
	               |		ПО ЭтапПроизводства2_2.Ссылка = ВТ_ДатаРезерва.Ссылка
	               |ГДЕ
	               |	ЭтапПроизводства2_2.Проведен = ИСТИНА
	               |	И ЭтапПроизводства2_2.Распоряжение В
	               |			(ВЫБРАТЬ
	               |				ВТ_ЗаказыНаПроизводство.Ссылка КАК Ссылка
	               |			ИЗ
	               |				ВТ_ЗаказыНаПроизводство КАК ВТ_ЗаказыНаПроизводство)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Номенклатура,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка.ЖелаемаяДатаОбеспечения,
	               |	ЭтапПроизводства2_2.Ссылка,
	               |	ЭтапПроизводства2_2.Распоряжение,
	               |	ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
	               |	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки,
	               |	ЭтапПроизводства2_2.Статус,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции,
	               |	ВЫБОР
	               |		КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	               |			ТОГДА ВТ_ДатаРезерва.ДатаРезерва
	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |	КОНЕЦ,
	               |	ЭтапПроизводства2_2.НомерЭтапа,
	               |	ЭтапПроизводства2_2.НомерСледующегоЭтапа,
	               |	ЭтапПроизводства2_2.ПланироватьНеРанее,
	               |	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Характеристика,
	               |	ЭтапПроизводства2_2.Спецификация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ВТ_Этапы.Этап.Подразделение.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |			ТОГДА ВТ_Этапы.Этап.Подразделение
	               |		ИНАЧЕ ВТ_Этапы.Этап.Подразделение.Родитель
	               |	КОНЕЦ КАК ЭтапПодразделение,
	               |	ВТ_Этапы.Этап КАК Этап
	               |ПОМЕСТИТЬ ВТ_ПодразделенияЭтапов
	               |ИЗ
	               |	ВТ_Этапы КАК ВТ_Этапы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Склады.Ссылка КАК СкладДляОтбора
	               |ПОМЕСТИТЬ ВТ_ОтборПоСкладам
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	Склады.Подразделение В ИЕРАРХИИ
	               |			(ВЫБРАТЬ
	               |				ВТ_ПодразделенияЭтапов.ЭтапПодразделение КАК ЭтапПодразделение
	               |			ИЗ
	               |				ВТ_ПодразделенияЭтапов КАК ВТ_ПодразделенияЭтапов
	               |			СГРУППИРОВАТЬ ПО
	               |				ВТ_ПодразделенияЭтапов.ЭтапПодразделение)
	               |	И Склады.ПометкаУдаления = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Склады.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Этапы.Материал КАК Материал,
	               |	ВТ_Этапы.Этап КАК Этап,
	               |	ВТ_Этапы.ВариантОбеспечения КАК ВариантОбеспечения,
	               |	КОЛИЧЕСТВО(ВТ_Этапы.Материал) КАК КоэффициентМатериалов,
	               |	ВТ_Этапы.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_Этапы_БезСтатейКалькуляции
	               |ИЗ
	               |	ВТ_Этапы КАК ВТ_Этапы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Этапы.Материал,
	               |	ВТ_Этапы.Этап,
	               |	ВТ_Этапы.ВариантОбеспечения,
	               |	ВТ_Этапы.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК СвободныйОстаток,
	               |	СвободныеОстаткиОстатки.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_СвободныйОстаток
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(
	               |			,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_Этапы.Материал КАК Материал
	               |					ИЗ
	               |						ВТ_Этапы КАК ВТ_Этапы
	               |					СГРУППИРОВАТЬ ПО
	               |						ВТ_Этапы.Материал)
	               |				И Склад В
	               |					(ВЫБРАТЬ
	               |						ВТ_ОтборПоСкладам.СкладДляОтбора КАК СкладДляОтбора
	               |					ИЗ
	               |						ВТ_ОтборПоСкладам КАК ВТ_ОтборПоСкладам
	               |					СГРУППИРОВАТЬ ПО
	               |						ВТ_ОтборПоСкладам.СкладДляОтбора)) КАК СвободныеОстаткиОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура,
	               |	ДоступныеОстаткиПланируемыхПоступлений.Количество,
	               |	ДоступныеОстаткиПланируемыхПоступлений.Характеристика
	               |ИЗ
	               |	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений
	               |ГДЕ
	               |	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура В
	               |			(ВЫБРАТЬ
	               |				ВТ_Этапы.Материал КАК Материал
	               |			ИЗ
	               |				ВТ_Этапы КАК ВТ_Этапы
	               |			СГРУППИРОВАТЬ ПО
	               |				ВТ_Этапы.Материал)
	               |	И ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
	               |	И ДоступныеОстаткиПланируемыхПоступлений.Количество < 0
	               |	И ДоступныеОстаткиПланируемыхПоступлений.Склад В
	               |			(ВЫБРАТЬ
	               |				ВТ_ОтборПоСкладам.СкладДляОтбора КАК СкладДляОтбора
	               |			ИЗ
	               |				ВТ_ОтборПоСкладам КАК ВТ_ОтборПоСкладам
	               |			СГРУППИРОВАТЬ ПО
	               |				ВТ_ОтборПоСкладам.СкладДляОтбора)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СвободныйОстаток.Номенклатура КАК Номенклатура,
	               |	СУММА(ВТ_СвободныйОстаток.СвободныйОстаток) КАК СвободныйОстаток,
	               |	ВТ_СвободныйОстаток.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_СвободныйОстаток_Группировка
	               |ИЗ
	               |	ВТ_СвободныйОстаток КАК ВТ_СвободныйОстаток
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СвободныйОстаток.Номенклатура,
	               |	ВТ_СвободныйОстаток.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура КАК Номенклатура,
	               |	ДоступныеОстаткиПланируемыхПоступлений.Количество КАК Количество,
	               |	ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности КАК ДатаДоступности,
	               |	ДоступныеОстаткиПланируемыхПоступлений.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_ДоступностьТоваров
	               |ИЗ
	               |	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений
	               |ГДЕ
	               |	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура В
	               |			(ВЫБРАТЬ
	               |				ВТ_Этапы.Материал КАК Материал
	               |			ИЗ
	               |				ВТ_Этапы КАК ВТ_Этапы
	               |			СГРУППИРОВАТЬ ПО
	               |				ВТ_Этапы.Материал)
	               |	И ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности > ДАТАВРЕМЯ(1, 1, 1)
	               |	И ДоступныеОстаткиПланируемыхПоступлений.Склад В
	               |			(ВЫБРАТЬ
	               |				ВТ_ОтборПоСкладам.СкладДляОтбора КАК СкладДляОтбора
	               |			ИЗ
	               |				ВТ_ОтборПоСкладам КАК ВТ_ОтборПоСкладам
	               |			СГРУППИРОВАТЬ ПО
	               |				ВТ_ОтборПоСкладам.СкладДляОтбора)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличииОстаток,
	               |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_ОстаткиНаСкладе
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_Этапы.Материал КАК Материал
	               |					ИЗ
	               |						ВТ_Этапы КАК ВТ_Этапы
	               |					СГРУППИРОВАТЬ ПО
	               |						ВТ_Этапы.Материал)
	               |				И Склад В
	               |					(ВЫБРАТЬ
	               |						ВТ_ОтборПоСкладам.СкладДляОтбора КАК СкладДляОтбора
	               |					ИЗ
	               |						ВТ_ОтборПоСкладам КАК ВТ_ОтборПоСкладам
	               |					СГРУППИРОВАТЬ ПО
	               |						ВТ_ОтборПоСкладам.СкладДляОтбора)) КАК ТоварыНаСкладахОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗаказыНаПроизводство.Ссылка КАК ЗаказНаПроизводство,
	               |	ВТ_ЗаказыНаПроизводство.Номенклатура КАК Продукция,
	               |	ВТ_ЗаказыНаПроизводство.НачатьНеРанее КАК НачатьНеРанее,
	               |	ВТ_Этапы.Материал КАК Материал,
	               |	ВТ_ЗаказыНаПроизводство.КоличествоПродукции КАК КоличествоПродукции,
	               |	ВТ_Этапы.КоличествоМатериалы КАК КоличествоМатериалы,
	               |	ВТ_ЗаказыНаПроизводство.ДатаВыпуска КАК ДатаВыпуска,
	               |	ВТ_Этапы.ДатаВыполненияЭтапа КАК ДатаВыполненияЭтапа,
	               |	ВТ_Этапы.Этап КАК Этап,
	               |	ВТ_Этапы.НачалоЭтапа КАК НачалоЭтапа,
	               |	ВТ_Этапы.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
	               |	ВТ_Этапы.КоличествоМатериаловВРезерве КАК КоличествоМатериаловВРезерве,
	               |	ВТ_Этапы.КоличествоМатериалаВРезервеВПути КАК КоличествоМатериалаВРезервеВПути,
	               |	ВЫБОР
	               |		КОГДА ВТ_Этапы_БезСтатейКалькуляции.КоэффициентМатериалов = 0
	               |			ТОГДА ЕСТЬNULL(ВТ_ОстаткиНаСкладе.ВНаличииОстаток, 0)
	               |		ИНАЧЕ ЕСТЬNULL(ВТ_ОстаткиНаСкладе.ВНаличииОстаток, 0) / ВТ_Этапы_БезСтатейКалькуляции.КоэффициентМатериалов
	               |	КОНЕЦ КАК ВНаличииОстаток,
	               |	ВТ_СвободныйОстаток_Группировка.СвободныйОстаток КАК СвободныйОстаток,
	               |	ВТ_ДоступностьТоваров.ДатаДоступности КАК ДатаДоступности,
	               |	ВТ_ДоступностьТоваров.Количество КАК КоличествоКОбеспечению,
	               |	ВТ_Этапы.Статус КАК СтатусЭтапа,
	               |	ВТ_Этапы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	               |	ВТ_Этапы.ДатаМатериалаВРезервеВПути КАК ДатаМатериалаВРезервеВПути,
	               |	ВТ_Этапы.НомерЭтапа КАК НомерЭтапа,
	               |	ВТ_Этапы.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	               |	ВТ_Этапы.ПланироватьНеРанее КАК ПланироватьНеРанее,
	               |	ВТ_ЗаказыНаПроизводство.Спецификация КАК Спецификация,
	               |	ВТ_Этапы.Характеристика КАК Характеристика,
	               |	ВТ_Этапы.ДатаОтгрузки КАК ДатаОтгрузки
	               |ПОМЕСТИТЬ ВТ_Конечная_ДляДолиЭтапа
	               |ИЗ
	               |	ВТ_ЗаказыНаПроизводство КАК ВТ_ЗаказыНаПроизводство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Этапы КАК ВТ_Этапы
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвободныйОстаток_Группировка КАК ВТ_СвободныйОстаток_Группировка
	               |			ПО ВТ_Этапы.Материал = ВТ_СвободныйОстаток_Группировка.Номенклатура
	               |				И ВТ_Этапы.Характеристика = ВТ_СвободныйОстаток_Группировка.Характеристика
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступностьТоваров КАК ВТ_ДоступностьТоваров
	               |			ПО ВТ_Этапы.Материал = ВТ_ДоступностьТоваров.Номенклатура
	               |				И ВТ_Этапы.Характеристика = ВТ_ДоступностьТоваров.Характеристика
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаСкладе КАК ВТ_ОстаткиНаСкладе
	               |			ПО ВТ_Этапы.Материал = ВТ_ОстаткиНаСкладе.Номенклатура
	               |				И ВТ_Этапы.Характеристика = ВТ_ОстаткиНаСкладе.Характеристика
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Этапы_БезСтатейКалькуляции КАК ВТ_Этапы_БезСтатейКалькуляции
	               |			ПО ВТ_Этапы.Этап = ВТ_Этапы_БезСтатейКалькуляции.Этап
	               |				И ВТ_Этапы.Материал = ВТ_Этапы_БезСтатейКалькуляции.Материал
	               |				И ВТ_Этапы.ВариантОбеспечения = ВТ_Этапы_БезСтатейКалькуляции.ВариантОбеспечения
	               |				И ВТ_Этапы.Характеристика = ВТ_Этапы_БезСтатейКалькуляции.Характеристика
	               |		ПО ВТ_ЗаказыНаПроизводство.Ссылка = ВТ_Этапы.Распоряжение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Конечная_ДляДолиЭтапа.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	               |	ВТ_Конечная_ДляДолиЭтапа.Продукция КАК Продукция,
	               |	ВТ_Конечная_ДляДолиЭтапа.НачатьНеРанее КАК НачатьНеРанее,
	               |	ВТ_Конечная_ДляДолиЭтапа.Материал КАК Материал,
	               |	ВТ_Конечная_ДляДолиЭтапа.КоличествоПродукции КАК КоличествоПродукции,
	               |	ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериалы КАК КоличествоМатериалы,
	               |	ВТ_Конечная_ДляДолиЭтапа.ДатаВыпуска КАК ДатаВыпуска,
	               |	ВТ_Конечная_ДляДолиЭтапа.ДатаВыполненияЭтапа КАК ДатаВыполненияЭтапа,
	               |	ВТ_Конечная_ДляДолиЭтапа.Этап КАК Этап,
	               |	ВТ_Конечная_ДляДолиЭтапа.НачалоЭтапа КАК НачалоЭтапа,
	               |	ВТ_Конечная_ДляДолиЭтапа.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
	               |	ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериаловВРезерве КАК КоличествоМатериаловВРезерве,
	               |	ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериалаВРезервеВПути КАК КоличествоМатериалаВРезервеВПути,
	               |	ВТ_Конечная_ДляДолиЭтапа.ВНаличииОстаток КАК ВНаличииОстаток,
	               |	ВТ_Конечная_ДляДолиЭтапа.СвободныйОстаток КАК СвободныйОстаток,
	               |	ВТ_Конечная_ДляДолиЭтапа.ДатаДоступности КАК ДатаДоступности,
	               |	ВТ_Конечная_ДляДолиЭтапа.КоличествоКОбеспечению КАК КоличествоКОбеспечению,
	               |	ВТ_Конечная_ДляДолиЭтапа.СтатусЭтапа КАК СтатусЭтапа,
	               |	ВТ_Конечная_ДляДолиЭтапа.СтатьяКалькуляции КАК СтатьяКалькуляции,
	               |	ВЫБОР
	               |		КОГДА ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериалы = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ ВТ_Конечная_ДляДолиЭтапа.ВНаличииОстаток / ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериалы * 100
	               |	КОНЕЦ КАК ДоляМатериалов,
	               |	ВТ_Конечная_ДляДолиЭтапа.ДатаМатериалаВРезервеВПути КАК ДатаМатериалаВРезервеВПути,
	               |	ВТ_Конечная_ДляДолиЭтапа.НомерЭтапа КАК НомерЭтапа,
	               |	ВТ_Конечная_ДляДолиЭтапа.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	               |	ВТ_Конечная_ДляДолиЭтапа.Спецификация КАК Спецификация,
	               |	ВТ_Конечная_ДляДолиЭтапа.ПланироватьНеРанее КАК ПланироватьНеРанее,
	               |	ВТ_Конечная_ДляДолиЭтапа.Характеристика КАК Характеристика,
	               |	ВТ_Конечная_ДляДолиЭтапа.ДатаОтгрузки КАК ДатаОтгрузки
	               |ПОМЕСТИТЬ ВТ_Конечная
	               |ИЗ
	               |	ВТ_Конечная_ДляДолиЭтапа КАК ВТ_Конечная_ДляДолиЭтапа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Конечная.Этап КАК Этап,
	               |	ВТ_Конечная.СтатьяКалькуляции КАК СтатьяКалькуляции,
	               |	ВЫБОР
	               |		КОГДА ВТ_Конечная.ДоляМатериалов > 100
	               |			ТОГДА 100
	               |		ИНАЧЕ ВТ_Конечная.ДоляМатериалов
	               |	КОНЕЦ КАК ДоляМатериалов,
	               |	ВТ_Конечная.НомерЭтапа КАК НомерЭтапа
	               |ПОМЕСТИТЬ ВТ_ДоляЭтапа_СоСтатьей
	               |ИЗ
	               |	ВТ_Конечная КАК ВТ_Конечная
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ВТ_Конечная.СтатьяКалькуляции = &СтатьяКалькуляции
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДоляЭтапа_СоСтатьей.Этап КАК Этап,
	               |	СРЕДНЕЕ(ВТ_ДоляЭтапа_СоСтатьей.ДоляМатериалов) КАК ДоляМатериалов
	               |ПОМЕСТИТЬ ВТ_ДоляЭтапа
	               |ИЗ
	               |	ВТ_ДоляЭтапа_СоСтатьей КАК ВТ_ДоляЭтапа_СоСтатьей
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ДоляЭтапа_СоСтатьей.Этап
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Конечная.Этап КАК Этап,
	               |	СРЕДНЕЕ(ВЫБОР
	               |			КОГДА ВТ_Конечная.ДоляМатериалов > 100
	               |				ТОГДА 100
	               |			ИНАЧЕ ВТ_Конечная.ДоляМатериалов
	               |		КОНЕЦ) КАК ДоляМатериалов
	               |ПОМЕСТИТЬ ВТ_ДоляЭтапаОбщая
	               |ИЗ
	               |	ВТ_Конечная КАК ВТ_Конечная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Конечная.Этап
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Конечная.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	               |	ВТ_Конечная.Продукция КАК Продукция,
	               |	ВТ_Конечная.НачатьНеРанее КАК НачатьНеРанее,
	               |	ВТ_Конечная.Материал КАК Материал,
	               |	ВТ_Конечная.Материал.Наименование КАК МатериалНаименование,
	               |	ВТ_Конечная.КоличествоПродукции КАК КоличествоПродукции,
	               |	ВТ_Конечная.КоличествоМатериалы КАК КоличествоМатериалы,
	               |	ВТ_Конечная.ДатаВыпуска КАК ДатаВыпуска,
	               |	ВТ_Конечная.ДатаВыполненияЭтапа КАК ДатаВыполненияЭтапа,
	               |	ВТ_Конечная.Этап КАК Этап,
	               |	ВТ_Конечная.Этап.Представление КАК ЭтапПредставление,
	               |	ВТ_Конечная.Этап.Статус КАК ЭтапСтатус,
	               |	ВТ_Конечная.Этап.гиг_ПланируемаяДатаОкончания КАК Этапгиг_ПланируемаяДатаОкончания,
	               |	ВТ_Конечная.НачалоЭтапа КАК НачалоЭтапа,
	               |	ВТ_Конечная.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
	               |	ВТ_Конечная.КоличествоМатериаловВРезерве КАК КоличествоМатериаловВРезерве,
	               |	ВТ_Конечная.КоличествоМатериалаВРезервеВПути КАК КоличествоМатериалаВРезервеВПути,
	               |	ВТ_Конечная.ВНаличииОстаток КАК ВНаличииОстаток,
	               |	ВТ_Конечная.СвободныйОстаток КАК СвободныйОстаток,
	               |	ВТ_Конечная.ДатаДоступности КАК ДатаДоступности,
	               |	ВТ_Конечная.КоличествоКОбеспечению КАК КоличествоКОбеспечению,
	               |	ВТ_Конечная.СтатусЭтапа КАК СтатусЭтапа,
	               |	ВТ_Конечная.СтатьяКалькуляции КАК СтатьяКалькуляции,
	               |	ВТ_Конечная.ДоляМатериалов КАК ДоляМатериалов,
	               |	ВТ_ДоляЭтапа.ДоляМатериалов КАК ДоляМатериаловЭтапа,
	               |	ВТ_Конечная.ДатаМатериалаВРезервеВПути КАК ДатаМатериалаВРезервеВПути,
	               |	ВТ_Конечная.НомерЭтапа КАК НомерЭтапа,
	               |	ВТ_Конечная.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	               |	ВТ_Конечная.Спецификация КАК Спецификация,
	               |	ВТ_Конечная.ПланироватьНеРанее КАК ПланироватьНеРанее,
	               |	ВТ_Конечная.Характеристика КАК Характеристика,
	               |	ВТ_Конечная.ДатаОтгрузки КАК ДатаОтгрузки,
	               |	ВТ_ДоляЭтапаОбщая.ДоляМатериалов КАК ДоляМатериаловОбщая
	               |ИЗ
	               |	ВТ_Конечная КАК ВТ_Конечная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоляЭтапа КАК ВТ_ДоляЭтапа
	               |		ПО ВТ_Конечная.Этап = ВТ_ДоляЭтапа.Этап
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоляЭтапаОбщая КАК ВТ_ДоляЭтапаОбщая
	               |		ПО ВТ_Конечная.Этап = ВТ_ДоляЭтапаОбщая.Этап
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ВыводитьГотовыеКЗакрытию
	               |				ТОГДА ВТ_Конечная.Этап.гиг_ТрудозатратыЗавершены = ИСТИНА
	               |						И ВТ_Конечная.Этап.гиг_РасходМатериаловЗавершен = ИСТИНА
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказНаПроизводство,
	               |	НомерЭтапа
	               |ИТОГИ
	               |	МАКСИМУМ(НачатьНеРанее),
	               |	МАКСИМУМ(КоличествоПродукции),
	               |	СУММА(КоличествоМатериалы),
	               |	МИНИМУМ(НачалоЭтапа),
	               |	МАКСИМУМ(ОкончаниеЭтапа),
	               |	СРЕДНЕЕ(ДоляМатериаловЭтапа),
	               |	МАКСИМУМ(НомерЭтапа),
	               |	МАКСИМУМ(НомерСледующегоЭтапа),
	               |	МАКСИМУМ(Спецификация),
	               |	МАКСИМУМ(ПланироватьНеРанее),
	               |	СРЕДНЕЕ(ДоляМатериаловОбщая)
	               |ПО
	               |	ЗаказНаПроизводство,
	               |	Продукция,
	               |	Этап";
	
	Если ЗначениеЗаполнено(Актуальность) Тогда
		Если НЕ ЗначениеЗаполнено(Актуальность) Тогда
			ДатаСобытия      = Дата(1,1,1);
		ИначеЕсли Актуальность = "Сегодня" Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ДатаСобытия = ТекущаяДатаСеанса();
			#Иначе
			ДатаСобытия = ОбщегоНазначенияКлиент.ДатаСеанса();
			#КонецЕсли
		ИначеЕсли Актуальность = "Завтра" Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ДатаСобытия = ТекущаяДатаСеанса() + 86400;
			#Иначе
			ДатаСобытия = ОбщегоНазначенияКлиент.ДатаСеанса() + 86400;
			#КонецЕсли
		ИначеЕсли Актуальность = "Послезавтра" Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ДатаСобытия = ТекущаяДатаСеанса() + 2*86400;
			#Иначе
			ДатаСобытия = ОбщегоНазначенияКлиент.ДатаСеанса() + 2*86400;			
			#КонецЕсли		
		ИначеЕсли Актуальность = "Через неделю" Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ДатаСобытия = ТекущаяДатаСеанса() + 7*86400;
			#Иначе
			ДатаСобытия = ОбщегоНазначенияКлиент.ДатаСеанса() + 7*86400;			
			#КонецЕсли		
		// Отрабатываем старые значения, из сохранившихся настроек
		ИначеЕсли Актуальность = "Все" 
			ИЛИ СтрНайти(Актуальность, "Истекающие на") > 0 Тогда
			Актуальность = "";
			ДатаСобытия      = Дата(1,1,1);
		ИначеЕсли Актуальность = "Просроченные" Тогда
			Актуальность = "Просрочен";
			ДатаСобытия      = Дата(1,1,1);
		ИначеЕсли Актуальность = "Не просроченные" Тогда
			Актуальность = "Не просрочен";
			ДатаСобытия      = Дата(1,1,1);
		КонецЕсли;
		
		// + [Rineco], [Киселев А.] [10.12.2021] 
		// Задача: [№ ], [#]
		
		// Было:
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "//условие по потребности", "И ЗаказНаПроизводство2_2Продукция.Ссылка.ДатаПотребности <= &ДатаСобытия");
		//Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
		// Стало:
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ЗаказНаПроизводство2_2Продукция.Ссылка.ДатаПотребности <= &ДатаСобытия");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
		
		// - [Rineco], [Киселев А.] [10.12.2021]
	КонецЕсли;
	
	// + [Rineco], [Киселев А.] [10.12.2021] 
	// Задача: [№ 24815], [#АРМ начальника производства]
	
	// Было:
	//	Если ЗначениеЗаполнено(Подразделение) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//условие по подразделению", "И ЗаказНаПроизводство2_2Продукция.Ссылка.Подразделение <= &Подразделение");
	//	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//КонецЕсли;
	// Стало:
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ЗаказНаПроизводство2_2Продукция.Ссылка.Подразделение = &Подразделение");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	КонецЕсли;
	// - [Rineco], [Киселев А.] [10.12.2021]
	
	// + [Rineco], [Киселев А.] [10.12.2021] 
	// Задача: [№ 24815], [#АРМ начальника производства]
	
	// Было:
	//Если ЗначениеЗаполнено(Ответственный) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//условие по ответственному", "И ЗаказНаПроизводство2_2Продукция.Ссылка.Ответственный <= &Ответственный");
	//	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	//КонецЕсли;
	// Стало:
	Если ЗначениеЗаполнено(Ответственный) Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ЗаказНаПроизводство2_2Продукция.Ссылка.Ответственный = &Ответственный");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("Ответственный", Ответственный);
	КонецЕсли;
	
	// - [Rineco], [Киселев А.] [10.12.2021]
	
	// + [Rineco], [Киселев А.] [10.12.2021] 
	
	// Задача: [№ 24815], [#АРМ начальника производства]
	
	// Было:
	Если ЗначениеЗаполнено(Приоритет) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//условие по приоритету", "И ЗаказНаПроизводство2_2Продукция.Ссылка.Приоритет <= &Приоритет");
		Запрос.УстановитьПараметр("Приоритет", Приоритет);
	КонецЕсли;
	// Стало:
	Если ЗначениеЗаполнено(Приоритет) Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ЗаказНаПроизводство2_2Продукция.Ссылка.Приоритет = &Приоритет");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("Приоритет", Приоритет);	
	КонецЕсли;
		
		// - [Rineco], [Киселев А.] [10.12.2021]

	// + [Rineco], [Киселев А.] [10.12.2021] 
	// Задача: [№ 24815], [#АРМ начальника производства]
	
	// Было:
	//Если ЗначениеЗаполнено(СтатьяКалькуляции) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//условие по статье калькуляции", "ГДЕ ВТ_Конечная.СтатьяКалькуляции = &СтатьяКалькуляции");
	//	Запрос.УстановитьПараметр("СтатьяКалькуляции", СтатьяКалькуляции);
	//КонецЕсли;
	// Стало:
	Если ЗначениеЗаполнено(СтатьяКалькуляции) Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[15].Операторы[0].Отбор.Добавить("ВТ_Конечная.СтатьяКалькуляции = &СтатьяКалькуляции");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("СтатьяКалькуляции", СтатьяКалькуляции);	
	КонецЕсли;
	
	// - [Rineco], [Киселев А.] [10.12.2021]

	// + [Rineco], [Киселев А.] [10.12.2021] 
	// Задача: [№ 24815], [#АРМ начальника производства]
	Если ЗначениеЗаполнено(Заказ) Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ЗаказНаПроизводство2_2Продукция.Ссылка В (&МассивЗаказов)");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("МассивЗаказов", Заказ.ВыгрузитьЗначения());
	КонецЕсли;
	// - [Rineco], [Киселев А.] [10.12.2021]
	Запрос.УстановитьПараметр("СтатьяКалькуляции", СтатьяКалькуляции);	
	Запрос.УстановитьПараметр("ВыводитьГотовыеКЗакрытию", ВыводитьЭтапыГотовыеКЗакрытию);
		
	ЗапросВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ЗапросВыборка.Следующий() Цикл
		СтрокаЗаказа = ДеревоЗаказовОбработка.Строки.Добавить();
		НаименованиеКлиента = "";
		Если ТипЗнч(ЗапросВыборка.ЗаказНаПроизводство.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			НаименованиеКлиента = "(" + ЗапросВыборка.ЗаказНаПроизводство.ДокументОснование.Контрагент.Наименование + ")";
		КонецЕсли;
		
		СтрокаЗаказа.Представление = Строка(ЗапросВыборка.ЗаказНаПроизводство) + НаименованиеКлиента;
		СтрокаЗаказа.ЗаказНаПроизводство = ЗапросВыборка.ЗаказНаПроизводство;
		СтрокаЗаказа.Продукция = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаЗаказа.ЭтапПроизводства = Документы.ЭтапПроизводства2_2.ПустаяСсылка();
		СтрокаЗаказа.Материалы = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаЗаказа.КоличествоПродукции = 0; //ЗапросВыборка.КоличествоПродукции;
		СтрокаЗаказа.КоличествоМатериаловНеобходимо = 0; //ЗапросВыборка.КоличествоМатериалы;
		
		СтрокаЗаказа.КоличествоМатериаловВРезерве = 0;
		СтрокаЗаказа.КоличествоМатериалаВРезервеВПути = 0;
		СтрокаЗаказа.ДатаЭтапа = Дата('00010101');
		СтрокаЗаказа.Склад = Справочники.Склады.ПустаяСсылка();
		СтрокаЗаказа.БлижайшаяДатаПоставки = Дата('00010101');
		СтрокаЗаказа.КоличествоМатериаловКОбеспечению = 0;
		СтрокаЗаказа.ОбщийОстаток = 0;
		СтрокаЗаказа.ВПроизводстве = "";
		СтрокаЗаказа.КоличествоСвободныйОстаток = 0;
		СтрокаЗаказа.ДатаВыпуска = ЗапросВыборка.ЗаказНаПроизводство.ДатаПотребности;
		СтрокаЗаказа.СтатусЭтапа = Перечисления.СтатусыЭтаповПроизводства2_2.ПустаяСсылка();
		СтрокаЗаказа.ДоляМатериалов = 0;
		СтрокаЗаказа.ДоляМатериаловОбщая = 0;
		СтрокаЗаказа.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
		СтрокаЗаказа.БезЭтапов = Истина;
		СтрокаЗаказа.НомерЭтапа = 0;
		СтрокаЗаказа.НомерСледующегоЭтапа = 0;
		СтрокаЗаказа.Спецификация = ЗапросВыборка.Спецификация;
		СтрокаЗаказа.ДатаНачала = ЗапросВыборка.НачатьНеРанее;
		СтрокаЗаказа.ДатаОтгрузки = Дата('00010101');
		СтрокаЗаказа.ЭтоПродукция = Ложь;
		СтрокаЗаказа.Характеристика = Справочники.Номенклатура.ПустаяСсылка();
				
		ЗапросВыборкаПродукция = ЗапросВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ЗапросВыборкаПродукция.Следующий() Цикл
			СтрокаПродукции = СтрокаЗаказа.Строки.Добавить();
			СтрокаПродукции.Представление = ЗапросВыборкаПродукция.Продукция;
			СтрокаПродукции.ЗаказНаПроизводство = ЗапросВыборка.ЗаказНаПроизводство;;
			СтрокаПродукции.Продукция = ЗапросВыборкаПродукция.Продукция;
			СтрокаПродукции.ЭтапПроизводства = Документы.ЭтапПроизводства2_2.ПустаяСсылка();
			СтрокаПродукции.СтатусЭтапа = Перечисления.СтатусыЭтаповПроизводства2_2.ПустаяСсылка();
			СтрокаПродукции.Материалы = Справочники.Номенклатура.ПустаяСсылка();
			СтрокаПродукции.КоличествоПродукции = ЗапросВыборкаПродукция.КоличествоПродукции;
			СтрокаПродукции.КоличествоМатериаловНеобходимо = 0;//ЗапросВыборкаПродукция.КоличествоМатериалы;
			
			СтрокаПродукции.КоличествоМатериаловВРезерве = 0;
			СтрокаПродукции.КоличествоМатериалаВРезервеВПути = 0;
			СтрокаПродукции.ДатаЭтапа = Дата('00010101');
			СтрокаПродукции.Склад = Справочники.Склады.ПустаяСсылка();
			СтрокаПродукции.БлижайшаяДатаПоставки = Дата('00010101');
			СтрокаПродукции.КоличествоМатериаловКОбеспечению = 0;
			СтрокаПродукции.ОбщийОстаток = 0;
			СтрокаПродукции.ВПроизводстве = "";
			СтрокаПродукции.КоличествоСвободныйОстаток = 0;
			СтрокаПродукции.ДатаВыпуска = Дата('00010101'); //ЗапросВыборка.ЗаказНаПроизводство.ДатаПотребности;
			СтрокаПродукции.ДоляМатериалов = 0;
			СтрокаПродукции.ДоляМатериаловОбщая = 0;
			СтрокаПродукции.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
			
			СтрокаПродукции.БезЭтапов = Ложь;
			СтрокаПродукции.НомерЭтапа = 0;
			СтрокаПродукции.НомерСледующегоЭтапа = 0;
			СтрокаПродукции.Спецификация = ЗапросВыборкаПродукция.Спецификация;
			СтрокаПродукции.ДатаНачала = Дата('00010101');
			СтрокаПродукции.ДатаОтгрузки = Дата('00010101');
			СтрокаПродукции.Характеристика = Справочники.Номенклатура.ПустаяСсылка();
			СтрокаПродукции.ЭтоПродукция = Истина;


			ЗапросВыборкаЭтап = ЗапросВыборкаПродукция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
			Пока ЗапросВыборкаЭтап.Следующий() Цикл
				СтрокаЭтап = СтрокаПродукции.Строки.Добавить();
				// + [Rineco], [Киселев А.] [09.12.2021] 
				// Задача: [№ 24815], [#АРМНачальникаОптимизация]
				
				// Было:
				//СтрокаЭтап.Представление = ЗапросВыборкаЭтап.Этап
				// Стало:
				СтрокаЭтап.Представление = ЗапросВыборкаЭтап.ЭтапПредставление;
				// - [Rineco], [Киселев А.] [09.12.2021]
				
				СтрокаЭтап.ЗаказНаПроизводство = ЗапросВыборка.ЗаказНаПроизводство;;
				СтрокаЭтап.Продукция = ЗапросВыборкаПродукция.Продукция;
				СтрокаЭтап.ЭтапПроизводства = ЗапросВыборкаЭтап.Этап;
				Если НЕ ЗапросВыборкаЭтап.Этап = NULL Тогда
					// + [Rineco], [Киселев А.] [09.12.2021] 
					// Задача: [№ 24815], [##АРМНачальникаОптимизация]
					
					// Было:
					//СтрокаЭтап.СтатусЭтапа = ЗапросВыборкаЭтап.Этап.Статус;
					//СтрокаЭтап.ДатаВыпуска = ЗапросВыборкаЭтап.Этап.гиг_ПланируемаяДатаОкончания; //ЗапросВыборка.ЗаказНаПроизводство.ДатаПотребности;
					// Стало:
					СтрокаЭтап.СтатусЭтапа = ЗапросВыборкаЭтап.ЭтапСтатус;
					СтрокаЭтап.ДатаВыпуска = ЗапросВыборкаЭтап.Этапгиг_ПланируемаяДатаОкончания; //ЗапросВыборка.ЗаказНаПроизводство.ДатаПотребности;
					// - [Rineco], [Киселев А.] [09.12.2021]
					
					
				Иначе
					СтрокаЭтап.СтатусЭтапа = Перечисления.СтатусыЭтаповПроизводства2_2.ПустаяСсылка();
					СтрокаЭтап.ДатаВыпуска = Дата('00010101'); //ЗапросВыборка.ЗаказНаПроизводство.ДатаПотребности;
				КонецЕсли;
				
				СтрокаЭтап.Материалы = Справочники.Номенклатура.ПустаяСсылка();
				СтрокаЭтап.КоличествоПродукции = 0; //ЗапросВыборкаЭтап.КоличествоПродукции;
				СтрокаЭтап.КоличествоМатериаловНеобходимо = 0; //ЗапросВыборкаЭтап.КоличествоМатериалы;
				
				СтрокаЭтап.КоличествоМатериаловВРезерве = 0;
				СтрокаЭтап.КоличествоМатериалаВРезервеВПути = 0;
				Если ТипЗнч(ЗапросВыборкаЭтап.Этап) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
					СтрокаЭтап.ДатаЭтапа = ЗапросВыборкаЭтап.Этап.ЖелаемаяДатаОбеспечения;
				КонецЕсли;
				
				СтрокаЭтап.Склад = Справочники.Склады.ПустаяСсылка();
				СтрокаЭтап.БлижайшаяДатаПоставки = Дата('00010101');
				СтрокаЭтап.КоличествоМатериаловКОбеспечению = 0;
				СтрокаЭтап.ОбщийОстаток = 0;
				Если НЕ ЗапросВыборкаЭтап.НачалоЭтапа = NULL И НЕ  ЗапросВыборкаЭтап.ОкончаниеЭтапа = NULL Тогда
					СтрокаЭтап.ВПроизводстве = Строка(Формат(ЗапросВыборкаЭтап.НачалоЭтапа, "ДЛФ=Д")) + " - " + Строка(Формат(ЗапросВыборкаЭтап.ОкончаниеЭтапа, "ДЛФ=Д"));
				Иначе
					СтрокаЭтап.ВПроизводстве = "";
				КонецЕсли;
				
				СтрокаЭтап.КоличествоСвободныйОстаток = 0;
				
				Если НЕ ЗапросВыборкаЭтап.ДоляМатериаловЭтапа = NULL И ЗапросВыборкаЭтап.ДоляМатериаловЭтапа > 100 Тогда
					СтрокаЭтап.ДоляМатериалов = 100;
				Иначе
					СтрокаЭтап.ДоляМатериалов = ЗапросВыборкаЭтап.ДоляМатериаловЭтапа;
				КонецЕсли;
				
				Если НЕ ЗапросВыборкаЭтап.ДоляМатериаловОбщая = NULL И ЗапросВыборкаЭтап.ДоляМатериаловОбщая > 100 Тогда
					СтрокаЭтап.ДоляМатериаловОбщая = 100;
				Иначе
					СтрокаЭтап.ДоляМатериаловОбщая = ЗапросВыборкаЭтап.ДоляМатериаловОбщая;
				КонецЕсли;
								
				СтрокаЭтап.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
				
				СтрокаЭтап.БезЭтапов = Ложь;
				СтрокаЭтап.НомерЭтапа = ЗапросВыборкаЭтап.НомерЭтапа;
				СтрокаЭтап.НомерСледующегоЭтапа = ЗапросВыборкаЭтап.НомерСледующегоЭтапа;
				Если ЗначениеЗаполнено(СтрокаЭтап.ЭтапПроизводства) Тогда
					СтрокаЗаказа.БезЭтапов = Ложь;
				КонецЕсли;
				
				СтрокаЭтап.Спецификация = ЗапросВыборкаЭтап.Спецификация;
				
				Если ТипЗнч(ЗапросВыборкаЭтап.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
					Если ЗначениеЗаполнено(ЗапросВыборкаЭтап.ПланироватьНеРанее) Тогда 
						СтрокаЭтап.ДатаНачала = ЗапросВыборкаЭтап.ПланироватьНеРанее.Дата;
					Иначе
						СтрокаЭтап.ДатаНачала = Дата('00010101');
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЗапросВыборкаЭтап.ПланироватьНеРанее) = Тип("Дата") Тогда
					СтрокаЭтап.ДатаНачала = ЗапросВыборкаЭтап.ПланироватьНеРанее;
				Иначе
					СтрокаЭтап.ДатаНачала = Дата('00010101');
				КонецЕсли;
				
				СтрокаЭтап.ДатаОтгрузки = Дата('00010101');
				СтрокаЭтап.Характеристика = Справочники.Номенклатура.ПустаяСсылка();
				СтрокаЭтап.ЭтоПродукция = Ложь;
				
				ЗапросВыборкаМатериал = ЗапросВыборкаЭтап.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
				Пока ЗапросВыборкаМатериал.Следующий() Цикл
					Если НЕ ЗапросВыборкаМатериал.Материал = NULL Тогда
						СтрокаМатериал = СтрокаЭтап.Строки.Добавить();
						// + [Rineco], [Киселев А.] [09.12.2021] 
						// Задача: [№ 24815], [#АРМНачальникаОптимизация]
						
						// Было:
						//СтрокаМатериал.Представление = Строка(ЗапросВыборкаМатериал.Материал);
						// Стало:
						СтрокаМатериал.Представление = ЗапросВыборкаМатериал.МатериалНаименование;
						// - [Rineco], [Киселев А.] [09.12.2021]
						
						СтрокаМатериал.Материалы = ЗапросВыборкаМатериал.Материал;
						СтрокаМатериал.ЗаказНаПроизводство = ЗапросВыборка.ЗаказНаПроизводство;;
						СтрокаМатериал.Продукция = ЗапросВыборкаПродукция.Продукция;
						СтрокаМатериал.ЭтапПроизводства = ЗапросВыборкаЭтап.Этап;
						СтрокаМатериал.СтатусЭтапа = Перечисления.СтатусыЭтаповПроизводства2_2.ПустаяСсылка();
						СтрокаМатериал.КоличествоПродукции = 0; //ЗапросВыборкаМатериал.КоличествоПродукции;
						СтрокаМатериал.КоличествоМатериаловНеобходимо = ЗапросВыборкаМатериал.КоличествоМатериалы;
						
						СтрокаМатериал.КоличествоМатериаловВРезерве = ЗапросВыборкаМатериал.КоличествоМатериаловВРезерве;
						СтрокаМатериал.КоличествоМатериалаВРезервеВПути = ЗапросВыборкаМатериал.КоличествоМатериалаВРезервеВПути;
						СтрокаМатериал.ДатаКоличествоМатериаловВРезервеВПути = ЗапросВыборкаМатериал.ДатаМатериалаВРезервеВПути;
						 
						Если ТипЗнч(ЗапросВыборкаЭтап.Этап) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
							СтрокаМатериал.ДатаЭтапа = ЗапросВыборкаЭтап.Этап.ЖелаемаяДатаОбеспечения;
						КонецЕсли;
						СтрокаМатериал.Склад = Справочники.Склады.ПустаяСсылка();
						СтрокаМатериал.БлижайшаяДатаПоставки = ЗапросВыборкаМатериал.ДатаДоступности;//Дата('00010101');
						
												
						СтрокаМатериал.КоличествоМатериаловКОбеспечению = ЗапросВыборкаМатериал.КоличествоКОбеспечению;
						СтрокаМатериал.ОбщийОстаток = ЗапросВыборкаМатериал.ВНаличииОстаток;
						Если НЕ ЗапросВыборкаМатериал.НачалоЭтапа = NULL И НЕ  ЗапросВыборкаМатериал.ОкончаниеЭтапа = NULL Тогда
							СтрокаМатериал.ВПроизводстве = Строка(Формат(ЗапросВыборкаМатериал.НачалоЭтапа, "ДЛФ=Д")) + " - " + Строка(Формат(ЗапросВыборкаМатериал.ОкончаниеЭтапа, "ДЛФ=Д"));
						Иначе
							СтрокаМатериал.ВПроизводстве = "";
						КонецЕсли;
						СтрокаМатериал.КоличествоСвободныйОстаток = ЗапросВыборкаМатериал.СвободныйОстаток;
						СтрокаМатериал.ДатаВыпуска = ЗапросВыборкаЭтап.Этап.гиг_ПланируемаяДатаОкончания; //ЗапросВыборка.ЗаказНаПроизводство.ДатаПотребности;
						Если НЕ ЗапросВыборкаМатериал.ДоляМатериалов = NULL И  ЗапросВыборкаМатериал.ДоляМатериалов > 100 Тогда
							СтрокаМатериал.ДоляМатериалов = 100;
							СтрокаМатериал.ДоляМатериаловОбщая = 100;
						Иначе
							СтрокаМатериал.ДоляМатериалов = ЗапросВыборкаМатериал.ДоляМатериалов;
							СтрокаМатериал.ДоляМатериаловОбщая = ЗапросВыборкаМатериал.ДоляМатериалов;
						КонецЕсли;
											
						
						СтрокаМатериал.СтатьяКалькуляции = ЗапросВыборкаМатериал.СтатьяКалькуляции;
						СтрокаМатериал.БезЭтапов = Ложь;
						СтрокаМатериал.НомерЭтапа = 0;
						СтрокаМатериал.НомерСледующегоЭтапа = 0;
						СтрокаМатериал.Спецификация = ЗапросВыборкаМатериал.Спецификация;
						СтрокаМатериал.ДатаНачала = Дата('00010101');
						СтрокаМатериал.ДатаОтгрузки = ЗапросВыборкаМатериал.ДатаОтгрузки;
						СтрокаМатериал.Характеристика = ЗапросВыборкаМатериал.Характеристика;
						СтрокаМатериал.ЭтоПродукция = Ложь;
					КонецЕсли;
										
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗаказовОбработка, "ДеревоЗаказов");

	УстановитьУсловноеОформление();
	
	//пытался оптимизировать - пока не очень вышло
	//	ВЫБРАТЬ
	//	ЗаказНаПроизводство2_2Продукция.Ссылка КАК Ссылка,
	//	ВЫРАЗИТЬ(ЗаказНаПроизводство2_2Продукция.Номенклатура.Наименование + ВЫБОР
	//			КОГДА НЕ ЗаказНаПроизводство2_2Продукция.Характеристика.Наименование ЕСТЬ NULL
	//				ТОГДА "(" + ЕСТЬNULL(ЗаказНаПроизводство2_2Продукция.Характеристика.Наименование, "") + ")"
	//			ИНАЧЕ ""
	//		КОНЕЦ КАК СТРОКА(1000)) КАК Номенклатура,
	//	ЗаказНаПроизводство2_2Продукция.КоличествоУпаковок КАК КоличествоПродукции,
	//	ЗаказНаПроизводство2_2Продукция.Спецификация КАК Спецификация,
	//	ЗаказНаПроизводство2_2.ДатаПотребности КАК ДатаВыпуска,
	//	ЗаказНаПроизводство2_2.НачатьНеРанее КАК НачатьНеРанее
	//ПОМЕСТИТЬ ВТ_ЗаказыНаПроизводство
	//ИЗ
	//	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	//		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2.Продукция КАК ЗаказНаПроизводство2_2Продукция
	//		ПО ЗаказНаПроизводство2_2.Ссылка = ЗаказНаПроизводство2_2Продукция.Ссылка
	//ГДЕ
	//	ЗаказНаПроизводство2_2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
	//	И ЗаказНаПроизводство2_2.Проведен
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка КАК Ссылка,
	//	МАКСИМУМ(ВЫБОР
	//			КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	//				ТОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки
	//			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	//		КОНЕЦ) КАК ДатаРезерва
	//ПОМЕСТИТЬ ВТ_ДатаРезерва
	//ИЗ
	//	ВТ_ЗаказыНаПроизводство КАК ВТ_ЗаказыНаПроизводство
	//		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами
	//		ПО ВТ_ЗаказыНаПроизводство.Ссылка = ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка.Распоряжение
	//ГДЕ
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка.Проведен = ИСТИНА
	
	//СГРУППИРОВАТЬ ПО
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Номенклатура КАК Материал,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок КАК КоличествоМатериалы,
	//	ЭтапПроизводства2_2.ЖелаемаяДатаОбеспечения КАК ДатаВыполненияЭтапа,
	//	ЭтапПроизводства2_2.Ссылка КАК Этап,
	//	ЭтапПроизводства2_2.Распоряжение КАК Распоряжение,
	//	ГрафикЭтаповПроизводства2_2.НачалоЭтапа КАК НачалоЭтапа,
	//	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
	//	ВЫБОР
	//		КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	//			ТОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок
	//		ИНАЧЕ 0
	//	КОНЕЦ КАК КоличествоМатериаловВРезерве,
	//	ВЫБОР
	//		КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	//			ТОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок
	//		ИНАЧЕ 0
	//	КОНЕЦ КАК КоличествоМатериалаВРезервеВПути,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения КАК ВариантОбеспечения,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки КАК ДатаОтгрузки,
	//	ЭтапПроизводства2_2.Статус КАК Статус,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции КАК СтатьяКалькуляции,
	//	ВЫБОР
	//		КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	//			ТОГДА ВТ_ДатаРезерва.ДатаРезерва
	//		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	//	КОНЕЦ КАК ДатаМатериалаВРезервеВПути,
	//	ЭтапПроизводства2_2.НомерЭтапа КАК НомерЭтапа,
	//	ЭтапПроизводства2_2.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	//	ЭтапПроизводства2_2.ПланироватьНеРанее КАК ПланироватьНеРанее,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Характеристика КАК Характеристика,
	//	ЭтапПроизводства2_2.Спецификация КАК СпецификацияЭтапа,
	//	ЭтапПроизводства2_2.Подразделение КАК Подразделение
	//ПОМЕСТИТЬ ВТ_Этапы
	//ИЗ
	//	ВТ_ЗаказыНаПроизводство КАК ВТ_ЗаказыНаПроизводство
	//		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	//			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами
	//			ПО ЭтапПроизводства2_2.Ссылка = ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка
	//			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	//			ПО ЭтапПроизводства2_2.Ссылка = ГрафикЭтаповПроизводства2_2.ЭтапПроизводства
	//			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатаРезерва КАК ВТ_ДатаРезерва
	//			ПО ЭтапПроизводства2_2.Ссылка = ВТ_ДатаРезерва.Ссылка
	//		ПО ВТ_ЗаказыНаПроизводство.Ссылка = ЭтапПроизводства2_2.Распоряжение
	//ГДЕ
	//	ЭтапПроизводства2_2.Проведен = ИСТИНА
	
	//СГРУППИРОВАТЬ ПО
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Номенклатура,
	//	ЭтапПроизводства2_2.Ссылка,
	//	ЭтапПроизводства2_2.Распоряжение,
	//	ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
	//	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки,
	//	ЭтапПроизводства2_2.Статус,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции,
	//	ВЫБОР
	//		КОГДА ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	//			ТОГДА ВТ_ДатаРезерва.ДатаРезерва
	//		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	//	КОНЕЦ,
	//	ЭтапПроизводства2_2.НомерЭтапа,
	//	ЭтапПроизводства2_2.НомерСледующегоЭтапа,
	//	ЭтапПроизводства2_2.ПланироватьНеРанее,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Характеристика,
	//	ЭтапПроизводства2_2.Спецификация,
	//	ЭтапПроизводства2_2.ЖелаемаяДатаОбеспечения,
	//	ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок,
	//	ЭтапПроизводства2_2.Подразделение
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВЫБОР
	//		КОГДА ВТ_Этапы.Подразделение.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	//			ТОГДА ВТ_Этапы.Подразделение
	//		ИНАЧЕ ВТ_Этапы.Подразделение.Родитель
	//	КОНЕЦ КАК ЭтапПодразделение,
	//	ВТ_Этапы.Этап КАК Этап
	//ПОМЕСТИТЬ ВТ_ПодразделенияЭтапов
	//ИЗ
	//	ВТ_Этапы КАК ВТ_Этапы
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	Склады.Ссылка КАК СкладДляОтбора
	//ПОМЕСТИТЬ ВТ_ОтборПоСкладам
	//ИЗ
	//	ВТ_ПодразделенияЭтапов КАК ВТ_ПодразделенияЭтапов
	//		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	//		ПО ВТ_ПодразделенияЭтапов.ЭтапПодразделение = Склады.Подразделение
	//ГДЕ
	//	Склады.ПометкаУдаления = ЛОЖЬ
	
	//СГРУППИРОВАТЬ ПО
	//	Склады.Ссылка
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_Этапы.Материал КАК Материал,
	//	ВТ_Этапы.Этап КАК Этап,
	//	ВТ_Этапы.ВариантОбеспечения КАК ВариантОбеспечения,
	//	КОЛИЧЕСТВО(ВТ_Этапы.Материал) КАК КоэффициентМатериалов,
	//	ВТ_Этапы.Характеристика КАК Характеристика
	//ПОМЕСТИТЬ ВТ_Этапы_БезСтатейКалькуляции
	//ИЗ
	//	ВТ_Этапы КАК ВТ_Этапы
	
	//СГРУППИРОВАТЬ ПО
	//	ВТ_Этапы.Материал,
	//	ВТ_Этапы.Этап,
	//	ВТ_Этапы.ВариантОбеспечения,
	//	ВТ_Этапы.Характеристика
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_Этапы.Материал КАК Материал
	//ПОМЕСТИТЬ ВТ_Этапы_Группировка
	//ИЗ
	//	ВТ_Этапы КАК ВТ_Этапы
	
	//СГРУППИРОВАТЬ ПО
	//	ВТ_Этапы.Материал
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_ОтборПоСкладам.СкладДляОтбора КАК СкладДляОтбора
	//ПОМЕСТИТЬ ВТ_ОтборПоСкладам_Группировка
	//ИЗ
	//	ВТ_ОтборПоСкладам КАК ВТ_ОтборПоСкладам
	
	//СГРУППИРОВАТЬ ПО
	//	ВТ_ОтборПоСкладам.СкладДляОтбора
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	//	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК СвободныйОстаток,
	//	СвободныеОстаткиОстатки.Характеристика КАК Характеристика
	//ПОМЕСТИТЬ ВТ_СвободныйОстаток
	//ИЗ
	//	РегистрНакопления.СвободныеОстатки.Остатки(
	//			,
	//			Номенклатура В
	//					(ВЫБРАТЬ
	//						ВТ_Этапы_Группировка.Материал КАК Материал
	//					ИЗ
	//						ВТ_Этапы_Группировка КАК ВТ_Этапы_Группировка)
	//				И Склад В
	//					(ВЫБРАТЬ
	//						ВТ_ОтборПоСкладам_Группировка.СкладДляОтбора КАК СкладДляОтбора
	//					ИЗ
	//						ВТ_ОтборПоСкладам_Группировка КАК ВТ_ОтборПоСкладам_Группировка)) КАК СвободныеОстаткиОстатки
	
	//ОБЪЕДИНИТЬ ВСЕ
	
	//ВЫБРАТЬ
	//	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура,
	//	ДоступныеОстаткиПланируемыхПоступлений.Количество,
	//	ДоступныеОстаткиПланируемыхПоступлений.Характеристика
	//ИЗ
	//	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений
	//ГДЕ
	//	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура В
	//			(ВЫБРАТЬ
	//				ВТ_Этапы_Группировка.Материал КАК Материал
	//			ИЗ
	//				ВТ_Этапы_Группировка КАК ВТ_Этапы_Группировка)
	//	И ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
	//	И ДоступныеОстаткиПланируемыхПоступлений.Количество < 0
	//	И ДоступныеОстаткиПланируемыхПоступлений.Склад В
	//			(ВЫБРАТЬ
	//				ВТ_ОтборПоСкладам_Группировка.СкладДляОтбора КАК СкладДляОтбора
	//			ИЗ
	//				ВТ_ОтборПоСкладам_Группировка КАК ВТ_ОтборПоСкладам_Группировка)
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_СвободныйОстаток.Номенклатура КАК Номенклатура,
	//	СУММА(ВТ_СвободныйОстаток.СвободныйОстаток) КАК СвободныйОстаток,
	//	ВТ_СвободныйОстаток.Характеристика КАК Характеристика
	//ПОМЕСТИТЬ ВТ_СвободныйОстаток_Группировка
	//ИЗ
	//	ВТ_СвободныйОстаток КАК ВТ_СвободныйОстаток
	
	//СГРУППИРОВАТЬ ПО
	//	ВТ_СвободныйОстаток.Номенклатура,
	//	ВТ_СвободныйОстаток.Характеристика
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура КАК Номенклатура,
	//	ДоступныеОстаткиПланируемыхПоступлений.Количество КАК Количество,
	//	ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности КАК ДатаДоступности,
	//	ДоступныеОстаткиПланируемыхПоступлений.Характеристика КАК Характеристика
	//ПОМЕСТИТЬ ВТ_ДоступностьТоваров
	//ИЗ
	//	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений
	//ГДЕ
	//	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура В
	//			(ВЫБРАТЬ
	//				ВТ_Этапы_Группировка.Материал КАК Материал
	//			ИЗ
	//				ВТ_Этапы_Группировка КАК ВТ_Этапы_Группировка)
	//	И ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности > ДАТАВРЕМЯ(1, 1, 1)
	//	И ДоступныеОстаткиПланируемыхПоступлений.Склад В
	//			(ВЫБРАТЬ
	//				ВТ_ОтборПоСкладам_Группировка.СкладДляОтбора КАК СкладДляОтбора
	//			ИЗ
	//				ВТ_ОтборПоСкладам_Группировка КАК ВТ_ОтборПоСкладам_Группировка)
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	//	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличииОстаток,
	//	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика
	//ПОМЕСТИТЬ ВТ_ОстаткиНаСкладе
	//ИЗ
	//	РегистрНакопления.ТоварыНаСкладах.Остатки(
	//			,
	//			Номенклатура В
	//					(ВЫБРАТЬ
	//						ВТ_Этапы_Группировка.Материал КАК Материал
	//					ИЗ
	//						ВТ_Этапы КАК ВТ_Этапы,
	//						ВТ_Этапы_Группировка КАК ВТ_Этапы_Группировка)
	//				И Склад В
	//					(ВЫБРАТЬ
	//						ВТ_ОтборПоСкладам_Группировка.СкладДляОтбора КАК СкладДляОтбора
	//					ИЗ
	//						ВТ_ОтборПоСкладам КАК ВТ_ОтборПоСкладам,
	//						ВТ_ОтборПоСкладам_Группировка КАК ВТ_ОтборПоСкладам_Группировка)) КАК ТоварыНаСкладахОстатки
	
	//СГРУППИРОВАТЬ ПО
	//	ТоварыНаСкладахОстатки.Номенклатура,
	//	ТоварыНаСкладахОстатки.Характеристика
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_ЗаказыНаПроизводство.Ссылка КАК ЗаказНаПроизводство,
	//	ВТ_ЗаказыНаПроизводство.Номенклатура КАК Продукция,
	//	ВТ_ЗаказыНаПроизводство.НачатьНеРанее КАК НачатьНеРанее,
	//	ВТ_Этапы.Материал КАК Материал,
	//	ВТ_ЗаказыНаПроизводство.КоличествоПродукции КАК КоличествоПродукции,
	//	ВТ_Этапы.КоличествоМатериалы КАК КоличествоМатериалы,
	//	ВТ_ЗаказыНаПроизводство.ДатаВыпуска КАК ДатаВыпуска,
	//	ВТ_Этапы.Этап КАК Этап,
	//	ВТ_Этапы.НачалоЭтапа КАК НачалоЭтапа,
	//	ВТ_Этапы.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
	//	ВТ_Этапы.КоличествоМатериаловВРезерве КАК КоличествоМатериаловВРезерве,
	//	ВТ_Этапы.КоличествоМатериалаВРезервеВПути КАК КоличествоМатериалаВРезервеВПути,
	//	ВЫБОР
	//		КОГДА ВТ_Этапы_БезСтатейКалькуляции.КоэффициентМатериалов = 0
	//			ТОГДА ЕСТЬNULL(ВТ_ОстаткиНаСкладе.ВНаличииОстаток, 0)
	//		ИНАЧЕ ЕСТЬNULL(ВТ_ОстаткиНаСкладе.ВНаличииОстаток, 0) / ВТ_Этапы_БезСтатейКалькуляции.КоэффициентМатериалов
	//	КОНЕЦ КАК ВНаличииОстаток,
	//	ВТ_СвободныйОстаток_Группировка.СвободныйОстаток КАК СвободныйОстаток,
	//	ВТ_ДоступностьТоваров.ДатаДоступности КАК ДатаДоступности,
	//	ВТ_ДоступностьТоваров.Количество КАК КоличествоКОбеспечению,
	//	ВТ_Этапы.Статус КАК СтатусЭтапа,
	//	ВТ_Этапы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	//	ВТ_Этапы.ДатаМатериалаВРезервеВПути КАК ДатаМатериалаВРезервеВПути,
	//	ВТ_Этапы.НомерЭтапа КАК НомерЭтапа,
	//	ВТ_Этапы.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	//	ВТ_Этапы.ПланироватьНеРанее КАК ПланироватьНеРанее,
	//	ВТ_ЗаказыНаПроизводство.Спецификация КАК Спецификация,
	//	ВТ_Этапы.Характеристика КАК Характеристика,
	//	ВТ_Этапы.ДатаОтгрузки КАК ДатаОтгрузки
	//ПОМЕСТИТЬ ВТ_Конечная_ДляДолиЭтапа
	//ИЗ
	//	ВТ_ЗаказыНаПроизводство КАК ВТ_ЗаказыНаПроизводство
	//		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Этапы КАК ВТ_Этапы
	//			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвободныйОстаток_Группировка КАК ВТ_СвободныйОстаток_Группировка
	//			ПО ВТ_Этапы.Материал = ВТ_СвободныйОстаток_Группировка.Номенклатура
	//				И ВТ_Этапы.Характеристика = ВТ_СвободныйОстаток_Группировка.Характеристика
	//			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступностьТоваров КАК ВТ_ДоступностьТоваров
	//			ПО ВТ_Этапы.Материал = ВТ_ДоступностьТоваров.Номенклатура
	//				И ВТ_Этапы.Характеристика = ВТ_ДоступностьТоваров.Характеристика
	//			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаСкладе КАК ВТ_ОстаткиНаСкладе
	//			ПО ВТ_Этапы.Материал = ВТ_ОстаткиНаСкладе.Номенклатура
	//				И ВТ_Этапы.Характеристика = ВТ_ОстаткиНаСкладе.Характеристика
	//			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Этапы_БезСтатейКалькуляции КАК ВТ_Этапы_БезСтатейКалькуляции
	//			ПО ВТ_Этапы.Этап = ВТ_Этапы_БезСтатейКалькуляции.Этап
	//				И ВТ_Этапы.Материал = ВТ_Этапы_БезСтатейКалькуляции.Материал
	//				И ВТ_Этапы.ВариантОбеспечения = ВТ_Этапы_БезСтатейКалькуляции.ВариантОбеспечения
	//				И ВТ_Этапы.Характеристика = ВТ_Этапы_БезСтатейКалькуляции.Характеристика
	//		ПО ВТ_ЗаказыНаПроизводство.Ссылка = ВТ_Этапы.Распоряжение
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_Конечная_ДляДолиЭтапа.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	//	ВТ_Конечная_ДляДолиЭтапа.Продукция КАК Продукция,
	//	ВТ_Конечная_ДляДолиЭтапа.НачатьНеРанее КАК НачатьНеРанее,
	//	ВТ_Конечная_ДляДолиЭтапа.Материал КАК Материал,
	//	ВТ_Конечная_ДляДолиЭтапа.КоличествоПродукции КАК КоличествоПродукции,
	//	ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериалы КАК КоличествоМатериалы,
	//	ВТ_Конечная_ДляДолиЭтапа.ДатаВыпуска КАК ДатаВыпуска,
	//	ВТ_Конечная_ДляДолиЭтапа.Этап КАК Этап,
	//	ВТ_Конечная_ДляДолиЭтапа.НачалоЭтапа КАК НачалоЭтапа,
	//	ВТ_Конечная_ДляДолиЭтапа.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
	//	ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериаловВРезерве КАК КоличествоМатериаловВРезерве,
	//	ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериалаВРезервеВПути КАК КоличествоМатериалаВРезервеВПути,
	//	ВТ_Конечная_ДляДолиЭтапа.ВНаличииОстаток КАК ВНаличииОстаток,
	//	ВТ_Конечная_ДляДолиЭтапа.СвободныйОстаток КАК СвободныйОстаток,
	//	ВТ_Конечная_ДляДолиЭтапа.ДатаДоступности КАК ДатаДоступности,
	//	ВТ_Конечная_ДляДолиЭтапа.КоличествоКОбеспечению КАК КоличествоКОбеспечению,
	//	ВТ_Конечная_ДляДолиЭтапа.СтатусЭтапа КАК СтатусЭтапа,
	//	ВТ_Конечная_ДляДолиЭтапа.СтатьяКалькуляции КАК СтатьяКалькуляции,
	//	ВЫБОР
	//		КОГДА ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериалы = 0
	//			ТОГДА 0
	//		ИНАЧЕ ВТ_Конечная_ДляДолиЭтапа.ВНаличииОстаток / ВТ_Конечная_ДляДолиЭтапа.КоличествоМатериалы * 100
	//	КОНЕЦ КАК ДоляМатериалов,
	//	ВТ_Конечная_ДляДолиЭтапа.ДатаМатериалаВРезервеВПути КАК ДатаМатериалаВРезервеВПути,
	//	ВТ_Конечная_ДляДолиЭтапа.НомерЭтапа КАК НомерЭтапа,
	//	ВТ_Конечная_ДляДолиЭтапа.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	//	ВТ_Конечная_ДляДолиЭтапа.Спецификация КАК Спецификация,
	//	ВТ_Конечная_ДляДолиЭтапа.ПланироватьНеРанее КАК ПланироватьНеРанее,
	//	ВТ_Конечная_ДляДолиЭтапа.Характеристика КАК Характеристика,
	//	ВТ_Конечная_ДляДолиЭтапа.ДатаОтгрузки КАК ДатаОтгрузки
	//ПОМЕСТИТЬ ВТ_Конечная
	//ИЗ
	//	ВТ_Конечная_ДляДолиЭтапа КАК ВТ_Конечная_ДляДолиЭтапа
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_Конечная.Этап КАК Этап,
	//	ВТ_Конечная.СтатьяКалькуляции КАК СтатьяКалькуляции,
	//	ВЫБОР
	//		КОГДА ВТ_Конечная.ДоляМатериалов > 100
	//			ТОГДА 100
	//		ИНАЧЕ ВТ_Конечная.ДоляМатериалов
	//	КОНЕЦ КАК ДоляМатериалов,
	//	ВТ_Конечная.НомерЭтапа КАК НомерЭтапа
	//ПОМЕСТИТЬ ВТ_ДоляЭтапа_СоСтатьей
	//ИЗ
	//	ВТ_Конечная КАК ВТ_Конечная
	//ГДЕ
	//	ВЫБОР
	//			КОГДА &СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	//				ТОГДА ИСТИНА
	//			ИНАЧЕ ВТ_Конечная.СтатьяКалькуляции = &СтатьяКалькуляции
	//		КОНЕЦ
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_ДоляЭтапа_СоСтатьей.Этап КАК Этап,
	//	СРЕДНЕЕ(ВТ_ДоляЭтапа_СоСтатьей.ДоляМатериалов) КАК ДоляМатериалов
	//ПОМЕСТИТЬ ВТ_ДоляЭтапа
	//ИЗ
	//	ВТ_ДоляЭтапа_СоСтатьей КАК ВТ_ДоляЭтапа_СоСтатьей
	
	//СГРУППИРОВАТЬ ПО
	//	ВТ_ДоляЭтапа_СоСтатьей.Этап
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_Конечная.Этап КАК Этап,
	//	СРЕДНЕЕ(ВЫБОР
	//			КОГДА ВТ_Конечная.ДоляМатериалов > 100
	//				ТОГДА 100
	//			ИНАЧЕ ВТ_Конечная.ДоляМатериалов
	//		КОНЕЦ) КАК ДоляМатериалов
	//ПОМЕСТИТЬ ВТ_ДоляЭтапаОбщая
	//ИЗ
	//	ВТ_Конечная КАК ВТ_Конечная
	
	//СГРУППИРОВАТЬ ПО
	//	ВТ_Конечная.Этап
	//;
	
	//////////////////////////////////////////////////////////////////////////////////
	//ВЫБРАТЬ
	//	ВТ_Конечная.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	//	ВТ_Конечная.Продукция КАК Продукция,
	//	ВТ_Конечная.НачатьНеРанее КАК НачатьНеРанее,
	//	ВТ_Конечная.Материал КАК Материал,
	//	ВТ_Конечная.КоличествоПродукции КАК КоличествоПродукции,
	//	ВТ_Конечная.КоличествоМатериалы КАК КоличествоМатериалы,
	//	ВТ_Конечная.ДатаВыпуска КАК ДатаВыпуска,
	//	ВТ_Конечная.Этап КАК Этап,
	//	ВТ_Конечная.НачалоЭтапа КАК НачалоЭтапа,
	//	ВТ_Конечная.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
	//	ВТ_Конечная.КоличествоМатериаловВРезерве КАК КоличествоМатериаловВРезерве,
	//	ВТ_Конечная.КоличествоМатериалаВРезервеВПути КАК КоличествоМатериалаВРезервеВПути,
	//	ВТ_Конечная.ВНаличииОстаток КАК ВНаличииОстаток,
	//	ВТ_Конечная.СвободныйОстаток КАК СвободныйОстаток,
	//	ВТ_Конечная.ДатаДоступности КАК ДатаДоступности,
	//	ВТ_Конечная.КоличествоКОбеспечению КАК КоличествоКОбеспечению,
	//	ВТ_Конечная.СтатусЭтапа КАК СтатусЭтапа,
	//	ВТ_Конечная.СтатьяКалькуляции КАК СтатьяКалькуляции,
	//	ВТ_Конечная.ДоляМатериалов КАК ДоляМатериалов,
	//	ВТ_ДоляЭтапа.ДоляМатериалов КАК ДоляМатериаловЭтапа,
	//	ВТ_Конечная.ДатаМатериалаВРезервеВПути КАК ДатаМатериалаВРезервеВПути,
	//	ВТ_Конечная.НомерЭтапа КАК НомерЭтапа,
	//	ВТ_Конечная.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	//	ВТ_Конечная.Спецификация КАК Спецификация,
	//	ВТ_Конечная.ПланироватьНеРанее КАК ПланироватьНеРанее,
	//	ВТ_Конечная.Характеристика КАК Характеристика,
	//	ВТ_Конечная.ДатаОтгрузки КАК ДатаОтгрузки,
	//	ВТ_ДоляЭтапаОбщая.ДоляМатериалов КАК ДоляМатериаловОбщая
	//ИЗ
	//	ВТ_Конечная КАК ВТ_Конечная
	//		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоляЭтапа КАК ВТ_ДоляЭтапа
	//		ПО ВТ_Конечная.Этап = ВТ_ДоляЭтапа.Этап
	//		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоляЭтапаОбщая КАК ВТ_ДоляЭтапаОбщая
	//		ПО ВТ_Конечная.Этап = ВТ_ДоляЭтапаОбщая.Этап
	//ГДЕ
	//	ВЫБОР
	//			КОГДА &ВыводитьГотовыеКЗакрытию
	//				ТОГДА ВТ_Конечная.Этап.гиг_ТрудозатратыЗавершены = ИСТИНА
	//						И ВТ_Конечная.Этап.гиг_РасходМатериаловЗавершен = ИСТИНА
	//			ИНАЧЕ ИСТИНА
	//		КОНЕЦ
	
	//УПОРЯДОЧИТЬ ПО
	//	ЗаказНаПроизводство,
	//	НомерЭтапа
	//ИТОГИ
	//	МАКСИМУМ(НачатьНеРанее),
	//	МАКСИМУМ(КоличествоПродукции),
	//	СУММА(КоличествоМатериалы),
	//	МИНИМУМ(НачалоЭтапа),
	//	МАКСИМУМ(ОкончаниеЭтапа),
	//	СРЕДНЕЕ(ДоляМатериаловЭтапа),
	//	МАКСИМУМ(НомерЭтапа),
	//	МАКСИМУМ(НомерСледующегоЭтапа),
	//	МАКСИМУМ(Спецификация),
	//	МАКСИМУМ(ПланироватьНеРанее),
	//	СРЕДНЕЕ(ДоляМатериаловОбщая)
	//ПО
	//	ЗаказНаПроизводство,
	//	Продукция,
	//	Этап
	//

КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоЗаказов.ТекущиеДанные;
	
	Если Поле = Элементы.ДеревоЗаказовПредставление И НЕ ТолькоПросмотр Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ЭтапПроизводства) Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыОтрытия = Новый Структура("Ключ", ТекущиеДанные.ЭтапПроизводства);
			ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента", ПараметрыОтрытия, ЭтаФорма); 
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Продукция) Тогда
		Иначе
			Если ЗначениеЗаполнено(ТекущиеДанные.ЗаказНаПроизводство) Тогда
				СтандартнаяОбработка = Ложь;
				ПараметрыОтрытия = Новый Структура("Ключ", ТекущиеДанные.ЗаказНаПроизводство);
				ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.Форма.ФормаДокумента", ПараметрыОтрытия, ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СвернутьДеревоЗаказов(Команда)
	
	ЗаказыДерево = ДеревоЗаказов.ПолучитьЭлементы();
	Для каждого ТекущаяСтрока Из ЗаказыДерево Цикл
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		Элементы.ДеревоЗаказов.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура РазвернутьДеревоЗаказов(Команда)
	
	ЗаказыДерево = ДеревоЗаказов.ПолучитьЭлементы();
	Для каждого ТекущаяСтрока Из ЗаказыДерево Цикл
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		Элементы.ДеревоЗаказов.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ДиспетчированиеЭтапов(Команда)
	
	Перем Распоряжение;
	
	ТекущиеДанные = Элементы.ДеревоЗаказов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗаказНаПроизводство) Тогда
	       Распоряжение = ТекущиеДанные.ЗаказНаПроизводство;
		ОткрытьДиспетчированиеЭтапов(Распоряжение);	
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиспетчированиеЭтапов(Распоряжение, ДополнительныеОтборы = Неопределено)
	
	Отборы = Новый Структура;
	
	Отборы.Вставить("ПодразделениеДиспетчер", Подразделение);
	Отборы.Вставить("Распоряжение",           Распоряжение);
	
	Если ДополнительныеОтборы <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Отборы, ДополнительныеОтборы);
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.Диспетчирование",
		Новый Структура("СтруктураОтборов", Отборы), ЭтаФорма);
	
	Оповестить(УправлениеПроизводствомКлиентСервер.ИмяСобытияОбновитьДиспетчированиеЭтапов(),
		Отборы, ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапы(Распоряжения)
	
	ПараметрыФормы = УправлениеПроизводствомКлиентСервер.ПараметрыФормыИсполнениеЗаказа();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьПараметрыИСформироватьЭтапыЗавершение", 
			ЭтотОбъект, Распоряжения);
			
	//ЭтаФорма.Параметры.Вставить("ДействиеДляЗаказа", Истина);
	ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", 
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапыЗавершение(Результат, Распоряжения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Распоряжения", Распоряжения);
	ПараметрыЗадания.Вставить("ВариантыОбеспечения", Результат.ПереченьВариантов);
	
	ЗапуститьФоновоеЗадание("СформироватьЭтапыПроизводства", ПараметрыЗадания);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания, ПараметрыЗадания)
	
	ЗаданиеВыполнено = ЗапуститьФоновоеЗаданиеНаСервере(ИмяЗадания, ПараметрыЗадания);
	
	Если ЗаданиеВыполнено Тогда
		ОбработатьЗавершениеЗаданияНаКлиенте();
	Иначе
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(Знач ИмяЗадания, Знач ПараметрыЗадания)
	
	Если ИмяЗадания = "СформироватьЭтапыПроизводства" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеСформироватьЭтапыПроизводства(ПараметрыЗадания);
		
	ИначеЕсли ИмяЗадания = "ПередатьЭтапыКВыполнению" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеПередатьЭтапыКВыполнению(ПараметрыЗадания);
		
	ИначеЕсли ИмяЗадания = "ПометитьНаУдалениеЭтапыПроизводства" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеПометитьНаУдалениеЭтапыПроизводства(ПараметрыЗадания);
		
	ИначеЕсли ИмяЗадания = "ПланироватьГрафикПроизводства" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеПланироватьГрафикПроизводства(ПараметрыЗадания);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Неизвестное задание ""%1""'"),
							ИмяЗадания);
	КонецЕсли;
	
	ФоновоеЗадание.ИмяЗадания           = ИмяЗадания;
	ФоновоеЗадание.ИдентификаторЗадания = РезультатЗапускаЗадания.ИдентификаторЗадания;
	ФоновоеЗадание.АдресХранилища       = РезультатЗапускаЗадания.АдресХранилища;
	
	Возврат РезультатЗапускаЗадания.ЗаданиеВыполнено;

КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеСформироватьЭтапыПроизводства(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Формирование этапов производства'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Документы.ЭтапПроизводства2_2.ОбеспечитьПотребностиПроизводстваВПродукцииИПолуфабрикатах",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеПередатьЭтапыКВыполнению(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Передача этапов к выполнению'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Документы.ЭтапПроизводства2_2.ПередатьЭтапыКВыполнениюОтложенно",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеПометитьНаУдалениеЭтапыПроизводства(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Пометка на удаление этапов производства'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Документы.ЭтапПроизводства2_2.ПометитьНаУдалениеЭтапыОтложенно",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеПланироватьГрафикПроизводства(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Планирование графика производства'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьРабочийГрафикРаспоряжений",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗаданияНаКлиенте()

	Если ФоновоеЗадание.ИмяЗадания = "СформироватьЭтапыПроизводства" Тогда
		ЗавершениеЗаданияСформироватьЭтапыПроизводства(ФоновоеЗадание.АдресХранилища);
	ИначеЕсли ФоновоеЗадание.ИмяЗадания = "ПередатьЭтапыКВыполнению" Тогда
		ЗавершениеЗаданияПередатьЭтапыКВыполнению(ФоновоеЗадание.АдресХранилища);
	ИначеЕсли ФоновоеЗадание.ИмяЗадания = "ПометитьНаУдалениеЭтапыПроизводства" Тогда
		ЗавершениеЗаданияПометитьНаУдалениеЭтапыПроизводства(ФоновоеЗадание.АдресХранилища);
	ИначеЕсли ФоновоеЗадание.ИмяЗадания = "ПланироватьГрафикПроизводства" Тогда
		ЗавершениеЗаданияПланироватьГрафикПроизводства(ФоновоеЗадание.АдресХранилища);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(
		ЭтаФорма, ФоновоеЗадание.ИдентификаторЗадания);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() Тогда
			
			Если ЗаданиеВыполнено(ФоновоеЗадание.ИдентификаторЗадания) Тогда
				ОбработатьЗавершениеЗаданияНаКлиенте();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции


&НаКлиенте
Процедура ЗавершениеЗаданияСформироватьЭтапыПроизводства(АдресХранилища)
	
	Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
	
	УправлениеПроизводствомКлиент.ОповеститьПользователяОФормированииЭтаповПроизводства(
			Результат, УникальныйИдентификатор);
			
			
	//начало блока изменений @гигабайт Яшин В.В. 06.02.2019 г.
	//установим статус этапов - КВыполнению
	Если ТипЗнч(Результат.Распоряжения) = Тип("Массив") Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Распоряжения", Результат.Распоряжения);
		
		ЗапуститьФоновоеЗадание("ПередатьЭтапыКВыполнению", ПараметрыЗадания);
	КонецЕсли;
	//конец блока изменений @гигабайт Яшин В.В. 06.02.2019 г.
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗаданияПередатьЭтапыКВыполнению(АдресХранилища)
	
	Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
	
	УправлениеПроизводствомКлиент.ОповеститьПользователяОПередачиЭтаповКВыполнению(
			Результат, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗаданияПометитьНаУдалениеЭтапыПроизводства(АдресХранилища)
	
	Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
	УправлениеПроизводствомКлиент.ОповеститьПользователяОПометкеНаУдалениеЭтаповПроизводства(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗаданияПланироватьГрафикПроизводства(АдресХранилища)
	
	Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
	
	УправлениеПроизводствомКлиент.ОповеститьПользователяОПланированииГрафикаПроизводства(
			Результат, УникальныйИдентификатор);
	
КонецПроцедуры
		
&НаСервере
Функция ЗавершениеЗаданияНаСервере(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ОбновитьДанныеНаСервере();
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	ОбновитьДеревоЗаказовНаСервере();
	
	Элементы.ДеревоЗаказов.Обновить();
			
КонецПроцедуры

&НаКлиенте
Процедура ДатаПотребностиОтборПриИзменении(Элемент)
	ОбновитьДеревоЗаказовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПотребностиОтборОчистка(Элемент, СтандартнаяОбработка)
	ОбновитьДеревоЗаказовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетОтборПриИзменении(Элемент)
	ОбновитьДеревоЗаказовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОтборПриИзменении(Элемент)
	ОбновитьДеревоЗаказовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяКалькуляцииПриИзменении(Элемент)
	ОбновитьДеревоЗаказовНаСервере();
	ПриЗакрытииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	КлючОбъекта  = "гиг_АРМ_НачальникаПроизводства";
	КлючНастроек = "НастройкиФормы";
			 
	ПроизвольныеНастройкиОбработки  = Новый Массив;
	ПроизвольныеНастройкиОбработки.Добавить(СтатьяКалькуляции);
		 
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек,
	            ПроизвольныеНастройкиОбработки);
КонецПроцедуры
			
&НаКлиенте
Процедура СформироватьЭтапыПроизводства(Команда)

	КомандаДляЭтапа = Ложь;
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьПараметрыИСформироватьЭтапы(ВыбранныеЗаказы);
	
	
КонецПроцедуры

	
&НаКлиенте
Функция ВыбранныеЗаказы()

	//Возврат ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ДеревоЗаказов);
	МассивЗаказов = Новый Массив;
	
	Для Каждого Итератор Из Элементы.ДеревоЗаказов.ВыделенныеСтроки Цикл
		СтрокаЗаказов = ДеревоЗаказов.НайтиПоИдентификатору(Итератор); //ПолучитьЭлементы().Получить(Итератор);
		Если ТипЗнч(СтрокаЗаказов.ЗаказНаПроизводство) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
			Если ЗначениеЗаполнено(СтрокаЗаказов.ЗаказНаПроизводство) Тогда
				Если МассивЗаказов.Найти(СтрокаЗаказов.ЗаказНаПроизводство) = Неопределено Тогда
					МассивЗаказов.Добавить(СтрокаЗаказов.ЗаказНаПроизводство);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Возврат МассивЗаказов;
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ПланируетсяГрафикПроизводства = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	
	ФоновоеЗадание = Новый Структура("
		|ИмяЗадания,
		|ИдентификаторЗадания,
		|АдресХранилища");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЭтапыКВыполнению(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Распоряжения", ВыбранныеЗаказы);
	
	ЗапуститьФоновоеЗадание("ПередатьЭтапыКВыполнению", ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьТекущий(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПланированияЗаказа(ВыбранныеЗаказы[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПланированияЗаказа(Распоряжение)
	
	ПараметрыФормы = Новый Структура("Распоряжение", Распоряжение);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.ПланированиеГрафикаЗаказа", 
		ПараметрыФормы,, Распоряжение);

КонецПроцедуры
	
&НаКлиенте
Процедура ПланироватьВыбранные(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьПараметрыИЗапланировать(ВыбранныеЗаказы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИЗапланировать(Распоряжения)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Распоряжения", Распоряжения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьПараметрыИЗапланироватьЗавершение", 
			ЭтотОбъект, Распоряжения);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.НастройкиПланированияСпискаРаспоряженийИЭтапов", 
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОпределитьПараметрыИЗапланироватьЗавершение(Результат, Распоряжения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Распоряжения", Распоряжения);
	
	Для Каждого КлючИЗначение Из Результат Цикл
		ПараметрыЗадания.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ЗапуститьФоновоеЗадание("ПланироватьГрафикПроизводства", ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьОчередьПоТекущий(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОчередьПланирования = ОчередьПланирования(ВыбранныеЗаказы[0], Подразделение);
	ОпределитьПараметрыИЗапланировать(ОчередьПланирования);
	
КонецПроцедуры

&НаСервере
Функция ОчередьПланирования(ТекущийЗаказ, ПодразделениеДиспетчер = Неопределено) Экспорт
	
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаПроизводство.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
		|		ПО (ТекущийЗаказНаПроизводство.Ссылка = &ТекущийЗаказ)
		|			И (ЗаказНаПроизводство.Проведен)
		|			И (ЗаказНаПроизводство.Статус = &СтатусКПроизводству)
		|			И (НЕ &ЕстьОтборПоПодразделению
		|				ИЛИ &ЕстьОтборПоПодразделению
		|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение)
		|			И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|				ИЛИ НЕ &ЕстьОтборПоПодразделению
		|					И ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|					И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания
		|				ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|					И (&ЕстьОтборПоПодразделению
		|						ИЛИ НЕ &ЕстьОтборПоПодразделению
		|							И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания)
		|					И ЗаказНаПроизводство.Очередь <= ТекущийЗаказНаПроизводство.Очередь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Очередь");
	
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер", ПодразделениеДиспетчер);
	Запрос.УстановитьПараметр("ЕстьОтборПоПодразделению", ЗначениеЗаполнено(ПодразделениеДиспетчер));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция СтатусЗаказаКПроизводству()
	
	Возврат Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиЖелаемыеДатыОбеспечения(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Распоряжение", ВыбранныеЗаказы[0]);
	
	ОткрытьФорму("Обработка.ПереносЖелаемойДатыОбеспеченияЭтаповПроизводства.Форма",
		ПараметрыФормы, ЭтаФорма, ВыбранныеЗаказы[0]);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗакрытыеЗаказы(Команда)
	
	ОткрытьЗакрытыеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗакрытыеЗаказы()
	
	СтруктураОтборов = ЗначенияОсновныхОтборов(ЭтаФорма, Ложь);
	СтруктураОтборов.Вставить("Статус", СтатусЗаказаЗакрыт());
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаСписка",
		Новый Структура("СтруктураОтборов", СтруктураОтборов));

КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияОсновныхОтборов(Форма, ТолькоЗаполненные = Истина)
	
	СтруктураОтборов = Новый Структура;
	
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(Форма.Приоритет) Тогда
		СтруктураОтборов.Вставить("Приоритет", Форма.Приоритет);
	КонецЕсли;
	
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(Форма.Подразделение) Тогда
		СтруктураОтборов.Вставить("Подразделение", Форма.Подразделение);
	КонецЕсли;
	
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(Форма.Ответственный) Тогда
		СтруктураОтборов.Вставить("Ответственный", Форма.Ответственный);
	КонецЕсли;

	Возврат СтруктураОтборов;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗаказаЗакрыт()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОбновитьДеревоЗаказовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапыПроизводства(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЭтапыПроизводстваЗавершение", ЭтаФорма, ВыбранныеЗаказы);
	
	Если ВыбранныеЗаказы.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Пометить на удаление все этапы выбранных заказов?'");
	Иначе
		Представление = УправлениеПроизводствомВызовСервера.ПредставлениеЗаказа(ВыбранныеЗаказы[0],"");
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить на удаление все этапы заказа %1?'"), Представление);
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапыПроизводстваЗавершение(РезультатВопроса, ПараметрыЗадания) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ЗапуститьФоновоеЗадание("ПометитьНаУдалениеЭтапыПроизводства", ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение(Команда)
	
	КомандаДляЭтапа = Истина;
	МассивОбработанныхЭтапов = ВыбранныеЭтапы();
	Если МассивОбработанныхЭтапов.Количество() > 0 Тогда
		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа("ЭтапПроизводства2_2");
		ПараметрыФормы.СписокВыбора = УправлениеПроизводствомКлиентСервер.ДоступныеВариантыОбеспечения();
				
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы, ЭтаФорма);	
	Иначе
		Сообщить("Строки с документами ""Этап производства"" не выбраны. Заполнение обеспечения невозможно!"); 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда
		Если КомандаДляЭтапа Тогда
			МассивОбработанныхЭтапов = ВыбранныеЭтапы();
			Если МассивОбработанныхЭтапов.Количество() > 0 Тогда
				Для Каждого СтрокаЭтапа Из МассивОбработанныхЭтапов Цикл
					П = Новый Структура("Ключ", СтрокаЭтапа);
					ФормаЭтапа = ПолучитьФорму("Документ.ЭтапПроизводства2_2.ФормаОбъекта", П);
					ПутиКДанным = Новый Соответствие;
			
					ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");
					
					Если ФормаЭтапа.ПараметрыРедактированияЭтапа.Режим = "Объект" Тогда
						
						ПутиКДанным.Вставить("Назначение", "НазначениеМатериалы");
						
					КонецЕсли;
					
					МассивИдентификаторовСтрок = Новый Массив;
					Для Каждого СтрокаОбеспечения Из ФормаЭтапа.Объект.ОбеспечениеМатериаламиИРаботами Цикл
						МассивИдентификаторовСтрок.Добавить(СтрокаОбеспечения.ПолучитьИдентификатор());
					КонецЦикла;
					
					КопироватьДанныеФормы(ФормаЭтапа.Объект, Объект);
					
					Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение, ПутиКДанным, МассивИдентификаторовСтрок, СтрокаЭтапа);
					Если Детали.Ошибки <> Неопределено Тогда
						ОчиститьСообщения();
						ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
					Иначе
						ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
					КонецЕсли;
				КонецЦикла;
				ТекЭпат = Элементы.ДеревоЗаказов.ТекущиеДанные.ЭтапПроизводства;
				ТекЗаказ = Элементы.ДеревоЗаказов.ТекущиеДанные.ЗаказНаПроизводство;
				////спозиционируем строку на выделенной строке дерева
				//мОтбор = Новый Структура("Этап", ТекЭпат);
				
				ОбновитьДеревоЗаказовНаСервере();
				ИдентификаторСтроки = 0;

				ДеревоЗаказовКоллекция = ДеревоЗаказов.ПолучитьЭлементы();
				Для Каждого СтрокаДерева Из ДеревоЗаказовКоллекция Цикл
					
					Если СтрокаДерева.ЗаказНаПроизводство = ТекЗаказ Тогда
						ИдентификаторЗаказа = СтрокаДерева.ПолучитьИдентификатор();
						Элементы.ДеревоЗаказов.Развернуть(ИдентификаторЗаказа, Истина);
						Прервать;
					КонецЕсли;
							
				КонецЦикла;
				
				ПрекратитьПоиск = Ложь;
				НайтиСтрокуДерева(ДеревоЗаказовКоллекция, ТекЭпат, ИдентификаторСтроки, ПрекратитьПоиск);
				
				Элементы.ДеревоЗаказов.ТекущаяСтрока = ИдентификаторСтроки;
			Иначе
				Сообщить("Строки с документами ""Этап производства"" не выбраны. Заполнение обеспечения нефозможно!"); 
			КонецЕсли;
			
			ПоказатьОповещениеПользователя("Этапы сформированы!");
		КонецЕсли;
				
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.гиг_АРМ_НачальникаПроизводства.Форма.ФормаВыбораСтатусаЭтапа" Тогда
		МассивОбработанныхЭтапов = ВыбранныеЭтапы();
		СтатусЭтапа = ВыбранноеЗначение;
		Если МассивОбработанныхЭтапов.Количество() > 0 Тогда
			
			УстановитьСтатусЭтапаНаСервере(МассивОбработанныхЭтапов);
			
			ТекЭпат = Элементы.ДеревоЗаказов.ТекущиеДанные.ЭтапПроизводства;
			ТекЗаказ = Элементы.ДеревоЗаказов.ТекущиеДанные.ЗаказНаПроизводство;
			
			ОбновитьДеревоЗаказовНаСервере();
			ИдентификаторСтроки = 0;
			
			ДеревоЗаказовКоллекция = ДеревоЗаказов.ПолучитьЭлементы();
			Для Каждого СтрокаДерева Из ДеревоЗаказовКоллекция Цикл
				
				Если СтрокаДерева.ЗаказНаПроизводство = ТекЗаказ Тогда
					ИдентификаторЗаказа = СтрокаДерева.ПолучитьИдентификатор();
					Элементы.ДеревоЗаказов.Развернуть(ИдентификаторЗаказа, Истина);
					Прервать;
				КонецЕсли;
						
			КонецЦикла;
			
			ПрекратитьПоиск = Ложь;
			НайтиСтрокуДерева(ДеревоЗаказовКоллекция, ТекЭпат, ИдентификаторСтроки, ПрекратитьПоиск);
			
			Элементы.ДеревоЗаказов.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусЭтапаНаСервере(МассивЭтапов)
	
	ИндексЗначения = Перечисления.СтатусыЭтаповПроизводства2_2.Индекс(СтатусЭтапа);
	ИмяСтатуса = Метаданные.Перечисления.СтатусыЭтаповПроизводства2_2.ЗначенияПеречисления[ИндексЗначения].Имя;
	Для Каждого СтрокаЭтапа Из МассивЭтапов Цикл
		Если ЗначениеЗаполнено(СтрокаЭтапа) Тогда
			ДокЭтапОбъект = СтрокаЭтапа.ПолучитьОбъект();
			Ошибка = ДокЭтапОбъект.УстановитьСтатус(ИмяСтатуса, Неопределено);
			ДокЭтапОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура НайтиСтрокуДерева(КоллекцияЭлементовДерева, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск) 

Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл 
	Если ПрекратитьПоиск Тогда 
		Возврат; 
	КонецЕсли; 

	Если СтрокаДерева.ЭтапПроизводства = ТекущиеДанные Тогда 
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
		ПрекратитьПоиск = Истина; 
		Возврат; 
	КонецЕсли; 

	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы(); 

	Если КоллекцияЭлементов.Количество() > 0 Тогда 
		НайтиСтрокуДерева(КоллекцияЭлементов, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск); 
	КонецЕсли; 
КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение, ПутиКДанным, МассивИдентификаторовСтрок, ЭтапСсылка)
	
	ДокЭтап = ЭтапСсылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ДокЭтап, "Объект");
	
	МассивИдентификаторовСтрок = Новый Массив;
	Для Каждого СтрокаОбеспечения Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		МассивИдентификаторовСтрок.Добавить(СтрокаОбеспечения.ПолучитьИдентификатор());
	КонецЦикла;
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
		
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыМатериаловВПроизводство);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> СтатусФормируется() И Объект.Статус <> СтатусСформирован());
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		МассивИдентификаторовСтрок,
		Объект,
		Объект.ОбеспечениеМатериаламиИРаботами,
		ПараметрыЗаполнения,
		ПараметрыДокумента);
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура(
			"Ошибки",
			ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
				Таблица, "ОбеспечениеМатериаламиИРаботами", НСтр("ru = 'Обеспечение'")));
	КонецЕсли;

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокЭтап, Документы.ЭтапПроизводства2_2));
	ПараметрыРедактированияЭтапа = Новый ФиксированнаяСтруктура(Документы.ЭтапПроизводства2_2.ПараметрыРедактированияЭтапа());

	ИсходныйСтатус = Объект.Статус;
	
	// Перенос результатов в документ.
	ТекстОповещения = Документы.ЭтапПроизводства2_2.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыРедактированияЭтапа, ПараметрыУказанияСерий);
		
	ДокЭтап.ОбеспечениеМатериаламиИРаботами.Очистить();
	
	ДокЭтап.ОбеспечениеМатериаламиИРаботами.Загрузить(Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить());
	
	Если ДокЭтап.Проведен Тогда
		ДокЭтап.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ДокЭтап.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	
	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения + " в документе: " + ДокЭтап.Ссылка);
	
КонецФункции

&НаКлиенте
Функция ВыбранныеЭтапы()

	//Возврат ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ДеревоЗаказов);
	МассивЗаказов = Новый Массив;
	
	Для Каждого Итератор Из Элементы.ДеревоЗаказов.ВыделенныеСтроки Цикл
		СтрокаЗаказов = ДеревоЗаказов.НайтиПоИдентификатору(Итератор); //ПолучитьЭлементы().Получить(Итератор);
		Если ТипЗнч(СтрокаЗаказов.ЭтапПроизводства) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			Если ЗначениеЗаполнено(СтрокаЗаказов.ЭтапПроизводства) Тогда
				Если МассивЗаказов.Найти(СтрокаЗаказов.ЭтапПроизводства) = Неопределено Тогда
					МассивЗаказов.Добавить(СтрокаЗаказов.ЭтапПроизводства);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Возврат МассивЗаказов;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусФормируется()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусСформирован()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусКВыполнению()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");

КонецФункции

&НаКлиенте
Процедура ИзменениеСтатусаЭтапов(Команда)
	МассивОбработанныхЭтапов = ВыбранныеЭтапы();
	Если МассивОбработанныхЭтапов.Количество() > 0 Тогда
		СтатусЭтапа = ПолучитьСтатусЭтапа(МассивОбработанныхЭтапов[0]);
		ПараметрыФормы = Новый Структура("СтатусЭтапа", СтатусЭтапа);
						
		ОткрытьФорму("Обработка.гиг_АРМ_НачальникаПроизводства.Форма.ФормаВыбораСтатусаЭтапа", ПараметрыФормы, ЭтаФорма);	
	Иначе
		Сообщить("Строки с документами ""Этап производства"" не выбраны. Заполнение обеспечения невозможно!"); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусЭтапа(Этап)
	Возврат Этап.Ссылка.Статус;
КонецФункции

&НаСервере
Функция ПолучитьИмяСтатусаЭтапа()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыЭтаповПроизводства2_2.Ссылка КАК Ссылка
	               |ИЗ
	               |	Перечисление.СтатусыЭтаповПроизводства2_2 КАК СтатусыЭтаповПроизводства2_2
	               |ГДЕ
	               |	СтатусыЭтаповПроизводства2_2.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СтатусЭтапа);
	
	ЗапросВыборка = Запрос.Выполнить().Выбрать();
	
	Если ЗапросВыборка.Следующий() Тогда
		Возврат ЗапросВыборка.Ссылка;
	КонецЕсли;
	Возврат Перечисления.СтатусыЭтаповПроизводства2_2.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура ВывестиЭтапыГотовыеКЗакрытию(Команда)
	
	ВыводитьЭтапыГотовыеКЗакрытию = Не ВыводитьЭтапыГотовыеКЗакрытию;
	Элементы.ВывестиЭтапыГотовыеКЗакрытию.Пометка = ВыводитьЭтапыГотовыеКЗакрытию;
	ОбновитьДеревоЗаказовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	ОшибокНет = Истина;
	ПрименитьИзмененияНаСервере(ОшибокНет);
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаказовПриИзменении(Элемент)
	
	//ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ДеревоЗаказов");
	ТекДанные = Элементы.ДеревоЗаказов.ТекущиеДанные;
	ТекДанныеИдентификатор = Элементы.ДеревоЗаказов.ТекущиеДанные.ПолучитьИдентификатор();
	Если ЗначениеЗаполнено(ТекДанные.ЭтапПроизводства) Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоЗаказовСтатусЭтапов" ИЛИ Элемент.ТекущийЭлемент.Имя = "ДеревоЗаказовДатаВыпуска" ИЛИ Элемент.ТекущийЭлемент.Имя = "ДеревоЗаказовДатаЭтапа" Тогда
			ТекДанные.ДанныеИзменены = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭтапНаСервере(СтрокаДанных, ОшибокНет)
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЭтапПроизводства) Тогда
		СсылкаНаЭтап = СтрокаДанных.ЭтапПроизводства.Ссылка;
		ДокЭтапОбъект = СтрокаДанных.ЭтапПроизводства.Ссылка.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		Если СтрокаДанных.СтатусЭтапа <> СсылкаНаЭтап.Статус Тогда
			ИндексЗначения = Перечисления.СтатусыЭтаповПроизводства2_2.Индекс(СтрокаДанных.СтатусЭтапа);
			ИмяСтатуса = Метаданные.Перечисления.СтатусыЭтаповПроизводства2_2.ЗначенияПеречисления[ИндексЗначения].Имя;
			ОшибокНет = ДокЭтапОбъект.УстановитьСтатус(ИмяСтатуса, Неопределено);
			ДокЭтапОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если СтрокаДанных.ДатаЭтапа <> СсылкаНаЭтап.ЖелаемаяДатаОбеспечения Тогда
			ДокЭтапОбъект.ЖелаемаяДатаОбеспечения = СтрокаДанных.ДатаЭтапа; 
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если СтрокаДанных.ДатаВыпуска <> СсылкаНаЭтап.гиг_ПланируемаяДатаОкончания Тогда
			ДокЭтапОбъект.гиг_ПланируемаяДатаОкончания = СтрокаДанных.ДатаВыпуска; 
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			Попытка
				ДокЭтапОбъект.Записать();
				Сообщить("" + ДокЭтапОбъект.Ссылка + " изменен!");
			Исключение
				Сообщить(ОписаниеОшибки());
				ОшибокНет = Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ЗаказНаПроизводство) Тогда
		СсылкаНаЗаказ = СтрокаДанных.ЗаказНаПроизводство.Ссылка;
		ЕстьИзменения = Ложь;
		ДокЗаказОбъект = СсылкаНаЗаказ.ПолучитьОбъект();
		Если СтрокаДанных.ДатаВыпуска <> СсылкаНаЗаказ.ДатаПотребности Тогда
			ДокЗаказОбъект.ДатаПотребности = СтрокаДанных.ДатаВыпуска; 
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если ЕстьИзменения Тогда
			Попытка
				ДокЗаказОбъект.Записать();
				Сообщить("" + ДокЗаказОбъект.Ссылка + " изменен!");
			Исключение
				Сообщить(ОписаниеОшибки());
				ОшибокНет = Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзмененияНаСервере(ОшибокНет)
		
	ДеревоЗаказовКоллекция = ДеревоЗаказов.ПолучитьЭлементы();
	
	Для Каждого СтрокаЗаказов Из ДеревоЗаказовКоллекция Цикл
		ДеревоМатериаловКоллекция = СтрокаЗаказов.ПолучитьЭлементы();
		Для Каждого СтрокаМатериалов Из ДеревоМатериаловКоллекция Цикл
			ДеревоЭтаповКоллекция = СтрокаМатериалов.ПолучитьЭлементы();
			Для Каждого СтрокаЭтапа Из ДеревоЭтаповКоллекция Цикл
				Если СтрокаЭтапа.ДанныеИзменены Тогда
					ИзменитьЭтапНаСервере(СтрокаЭтапа, ОшибокНет);
					Если ОшибокНет Тогда
						СтрокаЭтапа.ДанныеИзменены = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДеревоСпецификации(Команда)
	ТекДанные = Элементы.ДеревоЗаказов.ТекущиеДанные;
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ДеревоРесурсныхСпецификаций.Команда.ДеревоСпецификации");
	
	Если ЗначениеЗаполнено(ТекДанные.Спецификация) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Спецификация", ТекДанные.Спецификация); 
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Дерево спецификации'")); 
		ПараметрыОткрытия.Вставить("РежимОтображения", "Спецификация");
		
		ОткрытьФорму("Обработка.ДеревоРесурсныхСпецификаций.Форма", ПараметрыОткрытия, 
			ЭтаФорма, ,);
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗаказовПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ДеревоЗаказов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ЭтоПродукция Тогда
		Элементы.ДеревоЗаказовВывестиДеревоСпецификации.Доступность = Истина;
	Иначе
		Элементы.ДеревоЗаказовВывестиДеревоСпецификации.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервированиеМатериалов(Команда)
	
	ТекДанные = Элементы.ДеревоЗаказов.ТекущиеДанные;
	ПоВсемуЭтапу = ЗначениеЗаполнено(ТекДанные.ЭтапПроизводства) И НЕ ЗначениеЗаполнено(ТекДанные.Материалы);
	МассивМатериалов = Новый Массив;
	МассивХарактеристик = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗаказов.ВыделенныеСтроки Цикл
		ТекДанные = ДеревоЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		МассивМатериалов.Добавить(ТекДанные.Материалы);
		МассивХарактеристик.Добавить(ТекДанные.Характеристика);
	КонецЦикла;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПоВсемуЭтапу", ПоВсемуЭтапу); 
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыОткрытия.Вставить("Этап", ТекДанные.ЭтапПроизводства);
	Если ПоВсемуЭтапу Тогда
		ВыборкаЭлементов = ТекДанные.ПолучитьЭлементы();
		Для Каждого Строка Из ВыборкаЭлементов Цикл
			МассивМатериалов.Добавить(Строка.Материалы);
			МассивХарактеристик.Добавить(Строка.Характеристика);
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Материал", МассивМатериалов);
	ПараметрыОткрытия.Вставить("Характеристика", МассивХарактеристик);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Изменение резервирования'")); 
	//ПараметрыОткрытия.Вставить("РежимОтображения", "Спецификация");
		
	ОткрытьФорму("Обработка.гиг_АРМ_НачальникаПроизводства.Форма.ФормаИзмененияРезервированияОбеспечения", ПараметрыОткрытия, 
			ЭтаФорма, ,);
	
КонецПроцедуры
		
&НаСервере 
Функция ПолучитьДеревоМатериалов(Этап = Неопределено, Материал = Неопределено, Характеристика = Неопределено)
	
	ДеревоЗаказовПараметр = РеквизитФормыВЗначение("ДеревоЗаказов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Материалы КАК Материал,
	               |	ТЗ.ЭтапПроизводства КАК Этап,
	               |	ТЗ.СтатьяКалькуляции КАК СтатьяКалькуляции,
	               |	ТЗ.ДоляМатериалов КАК ДоляМатериалов,
	               |	ТЗ.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_Выборка
	               |ИЗ
	               |	&ДеревоЗаказов КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Выборка.Материал КАК Материал,
	               |	ВТ_Выборка.Этап КАК Этап,
	               |	ВТ_Выборка.СтатьяКалькуляции КАК СтатьяКалькуляции,
	               |	ВТ_Выборка.ДоляМатериалов КАК ДоляМатериалов,
	               |	ВТ_Выборка.Характеристика КАК Характеристика
	               |ИЗ
	               |	ВТ_Выборка КАК ВТ_Выборка";
	Запрос.УстановитьПараметр("ДеревоЗаказов", ДеревоЗаказовПараметр);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЕстьОформление = Ложь;
	ЭлУсловногоОформления = Неопределено;
	Для Каждого ЭлементУсловноеОформление Из УсловноеОформление.Элементы Цикл
		
		Если ЭлементУсловноеОформление.Представление = "Статья калькуляции" Тогда
			ЕстьОформление = Истина;
			ЭлУсловногоОформления = ЭлементУсловноеОформление;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОформление Тогда
		УсловноеОформление.Элементы.Удалить(ЭлУсловногоОформления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяКалькуляции) Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();

		Элемент.Представление = "Статья калькуляции";
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказов.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.СтатьяКалькуляции");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = СтатьяКалькуляции;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лазурный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоОбеспечению(Команда)
	ТекДанные = Элементы.ДеревоЗаказов.ТекущиеДанные;
	//ПоВсемуЭтапу = ЗначениеЗаполнено(ТекДанные.ЭтапПроизводства) И НЕ ЗначениеЗаполнено(ТекДанные.Материалы);
	//МассивМатериалов = Новый Массив;
	//МассивХарактеристик = Новый Массив;
	ТаблицаМатериалов.Очистить();
	ПоВсемуЗаказу = Истина;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗаказов.ВыделенныеСтроки Цикл
		ТекДанные = ДеревоЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ЗначениеЗаполнено(ТекДанные.ЭтапПроизводства) Тогда
			ПоВсемуЗаказу = Ложь;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаМатериалов.Добавить();
		НоваяСтрока.Номенклатура = ТекДанные.Материалы;
		НоваяСтрока.Характеристика = ТекДанные.Характеристика;
		НоваяСтрока.Склад = ТекДанные.Склад;
		НоваяСтрока.Заказ = ТекДанные.ЗаказНаПроизводство;
		НоваяСтрока.Этап = ТекДанные.ЭтапПроизводства;
		НоваяСтрока.СтатьяКалькуляции = ТекДанные.СтатьяКалькуляции;
		НоваяСтрока.Требуется = ТекДанные.КоличествоМатериаловНеобходимо;
		НоваяСтрока.Остаток = ТекДанные.ОбщийОстаток;
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТаблицаМатериалов", ТаблицаМатериалов); 
	ПараметрыОткрытия.Вставить("ПоВсемуЗаказу", ПоВсемуЗаказу);
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Изменение резервирования'"));
	ОткрытьФорму("Отчет.гиг_ОбеспечениеМатериаловДляАРМ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ОтчетПоОбеспечениюСформироватьНаСервере()
КонецПроцедуры


#Область Задача_24815
// + [Rineco], [Киселев А.] [10.12.2021] [Log_Diff][№ 24815], [#ОбновлениеДанныхДерева по кнопке ] 
&НаКлиенте
Процедура ОбновитьДерево(Команда)
	ОбновитьДеревоЗаказовНаСервере(Истина);
КонецПроцедуры
#КонецОбласти








