#Область ОписаниеПеременных

&НаКлиенте
Перем ПоследняяАктивнаяОбласть; //Для функции выделение активной строки

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	
	ОбъектОбработки().УКО_ТабличныйДокумент_ИнициализироватьФорму(ЭтаФорма);
	
	Заголовок = СтрШаблон(НСтр("ru = 'Результат (%1)'; en = 'Result (%1)'"), Параметры.Имя);
	
	ТекущийРезультат = Новый Структура("Адрес, АдресДанныхРасшифровки, АдресСхемыКомпоновкиДанных");
	
	ТабличныйДокументРезультат.Вывести(ПолучитьИзВременногоХранилища(Параметры.АдресРезультата));
	ТекущийРезультат.Адрес = ПоместитьВоВременноеХранилище(ТабличныйДокументРезультат, УникальныйИдентификатор);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Параметры.АдресДанныхРасшифровки);
	ТекущийРезультат.АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	Если Параметры.Свойство("АдресСхемыКомпоновкиДанных") Тогда
		
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(Параметры.АдресСхемыКомпоновкиДанных);
		ТекущийРезультат.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Элементы.ГруппаНеВсеСтрокиВыведены.Видимость = Не Параметры.ВсеСтрокиВыведены;
	
	// Фиксация шапки
	Элементы.ФиксацияШапки.Доступность = Параметры.ФиксацияШапкиДоступность;
	Элементы.ФиксацияШапки.Пометка = Параметры.ФиксацияШапки;
	УКО_ТабличныйДокументКлиентСервер_ЗафиксироватьШапку(ТабличныйДокументРезультат, Параметры.ФиксацияШапки);
	
	УКО_ТабличныйДокументКлиентСервер_ОбновитьЭлементыПодменюУровеньГруппировок(ЭтаФорма, ТабличныйДокументРезультат, Элементы.ТабличныйДокументРезультатКонтекстноеМенюГруппировкиУровень);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Обработка исключений 1С совместимо и платформенной проверки {
	Если Ложь Тогда
		КомандаУстановитьУровеньГруппировки(Неопределено);
	КонецЕсли;
	//}
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	УКО_ТабличныйДокументКлиент_ОбработчикПриАктивизацииОбласти(Элемент, ТабличныйДокументРезультат, ПоследняяАктивнаяОбласть, ТекущийРезультат.АдресДанныхРасшифровки);
	
	Если ТипЗнч(ТабличныйДокументРезультат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	УКО_ТабличныйДокументКлиент_ОбработчикВыбор(ЭтаФорма, ТекущийРезультат.АдресДанныхРасшифровки, Область, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ФиксацияШапки(Команда)
	
	ПометкаФиксацияШапки = Не Элементы.ФиксацияШапки.Пометка;
	Элементы.ФиксацияШапки.Пометка = ПометкаФиксацияШапки;
	
	УКО_ТабличныйДокументКлиентСервер_ЗафиксироватьШапку(ТабличныйДокументРезультат, ПометкаФиксацияШапки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВ(Команда)
	
	УКО_ФормыКлиент_ОткрытьДополнительную("ЭкспортВ",, ЭтаФорма,, Новый ОписаниеОповещения("ЭкспортФайлаЗакончен", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЯчейки(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаВыделитьЯчейки(ТекущийРезультат.Адрес, ТабличныйДокументРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьUIDСсылки(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаКопироватьСсылку(ТабличныйДокументРезультат, ТекущийРезультат.АдресДанныхРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСсылкуКодНаВстроенномЯзыке(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаКопироватьСсылку(ТабличныйДокументРезультат, ТекущийРезультат.АдресДанныхРасшифровки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьУровеньГруппировки (Команда)

	ТабличныйДокументРезультат.ПоказатьУровеньГруппировокСтрок(УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(Команда.Имя,,НаправлениеПоиска.СКонца) - 1);

КонецПроцедуры

&НаКлиенте
Процедура СсылкаВСоответствияОбъектовИнформационныхБаз(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаСсылкаВСоответствияОбъектовИнформационныхБаз(ТабличныйДокументРезультат, ТекущийРезультат.АдресДанныхРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов(ТабличныйДокументРезультат, ТекущийРезультат.АдресДанныхРасшифровки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РезультатПриАктивизацииОбластиПодключаемый()
	
	УКО_ТабличныйДокументКлиент_ПриАктивизацииОбластиОбработка(ЭтаФорма, ТабличныйДокументРезультат);
	ОтключитьОбработчикОжидания("РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортФайлаЗакончен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ВыводРезультатаВТабличныйДокументНаСервер(ТабличныйДокумент);
	УКО_ТабличныйДокументКлиент_ПодготовитьДляЭкспорта(ТабличныйДокумент, Результат.Формат, ПоследняяАктивнаяОбласть);
	
	ОповещениеПослеСохранения = Новый ОписаниеОповещения();
	Если Результат.ОткрытьПослеСохранения Тогда
		ОповещениеПослеСохранения = Новый ОписаниеОповещения("ОповещениеЗапускПриложения", ЭтаФорма, Новый Структура("Команда", Результат.ПолноеИмяФайла));
	КонецЕсли;
	
	ТабличныйДокумент.НачатьЗапись(ОповещениеПослеСохранения, Результат.ПолноеИмяФайла, ТипФайлаТабличногоДокумента[Результат.Формат]);
	
КонецПроцедуры

&НаСервере
Процедура ВыводРезультатаВТабличныйДокументНаСервер(ТабличныйДокумент)
	
	ТабличныйДокумент.Вывести(ТабличныйДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаСервере
// Возвращает сумму выделенных ячеек табличного документа.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ, содержащий ячейки для суммирования.
//	КэшВыделеннойОбласти - Структура - Содержит ячейки выделенной области.
//
// Возвращаемое значение:
//	Число - Сумма значений ячеек.
//
Функция УКО_ТабличныйДокументВызовСервера_ВычислитьСуммуВыделенныхЯчеек(ТабличныйДокумент, КэшВыделеннойОбласти) Экспорт
	
	Если ТипЗнч(ТабличныйДокумент) = Тип("Строка") И ЭтоАдресВременногоХранилища(ТабличныйДокумент) Тогда
		АнализируемыйТабличныйДокумент = ПолучитьИзВременногоХранилища(ТабличныйДокумент);
	Иначе
		АнализируемыйТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				
				Попытка
					
					Ячейка = АнализируемыйТабличныйДокумент.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					
					Если Ячейка.Видимость = Истина Тогда
						
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							
							Сумма = Сумма + Ячейка.Значение;
							
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							
							ЧислоВЯчейке = Число(УКО_СтрокиКлиентСервер_ЗаменитьОдниСимволыДругими(Символ(32)+Символ(43), Ячейка.Текст, Символ(0)));
							Сумма = Сумма + ЧислоВЯчейке;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Исключение
					
					НеБудемОбрабатыватьИсключение = Истина;
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение целого число из строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Число	- Прочитанное целое число
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(Строка, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс > 0 Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс); 
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Число(Результат);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЦифры()
	
	Возврат "0123456789";
	
КонецФункции
&НаКлиенте

Функция УКО_ТабличныйДокументКлиент_НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти)
	Перем СтруктураАдресВыделеннойОбласти;
	
	ВыделенныеОбласти    = Результат.ВыделенныеОбласти;
	КоличествоВыделенных = ВыделенныеОбласти.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		КэшВыделеннойОбласти = Новый Структура();
		Возврат Истина;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Ложь;
	Если ТипЗнч(КэшВыделеннойОбласти) <> Тип("Структура") Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли ВыделенныеОбласти.Количество() <> КэшВыделеннойОбласти.Количество() Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	Иначе
		Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
			ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
			ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
			КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			
			// Не нашли нужную область в кэше, поэтому заново инициализируем кэш.
			Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
				КэшВыделеннойОбласти = Новый Структура();
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
		ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
		ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
			Продолжить;
		КонецЕсли;
		
		КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
		Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		Если СтруктураАдресВыделеннойОбласти.Верх <> ВыделеннаяОбласть.Верх
			ИЛИ СтруктураАдресВыделеннойОбласти.Низ <> ВыделеннаяОбласть.Низ
			ИЛИ СтруктураАдресВыделеннойОбласти.Лево <> ВыделеннаяОбласть.Лево
			ИЛИ СтруктураАдресВыделеннойОбласти.Право <> ВыделеннаяОбласть.Право Тогда
				СтруктураАдресВыделеннойОбласти = Новый Структура;
				СтруктураАдресВыделеннойОбласти.Вставить("Верх",  ВыделеннаяОбласть.Верх);
				СтруктураАдресВыделеннойОбласти.Вставить("Низ",   ВыделеннаяОбласть.Низ);
				СтруктураАдресВыделеннойОбласти.Вставить("Лево",  ВыделеннаяОбласть.Лево);
				СтруктураАдресВыделеннойОбласти.Вставить("Право", ВыделеннаяОбласть.Право);
				КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
				ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
&НаКлиенте
// Вычисляет суммы выделенных ячеек табличного документа.
//
// Параметры:
//	ПолеСумма - Число - Сумма ячеек.
//	Результат - ТабличныйДокумент - Табличный документ с ячейками.
//	КэшВыделеннойОбласти - Структура - Содержит ранее рассчитанные значения ячеек.
//	НеобходимоВычислятьНаСервере - Булево - Признак того, что необходим вызов сервера.
//
Процедура УКО_ТабличныйДокументКлиент_ВычислитьСуммуВыделенныхЯчеек(ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере) Экспорт
	
	Если УКО_ТабличныйДокументКлиент_НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти) Тогда
		
		ПолеСумма = 0;
		КоличествоВыделенныхОбластей = КэшВыделеннойОбласти.Количество();
		
		Если КоличествоВыделенныхОбластей = 0      // Ничего не выделено.
				ИЛИ КэшВыделеннойОбласти.Свойство("T") Тогда // Выделен весь табличный документ (Ctrl+A).
				
			КэшВыделеннойОбласти.Вставить("Сумма", 0);
				
		ИначеЕсли КоличествоВыделенныхОбластей = 1 Тогда
			
			// Если выделено небольшое количество ячеек, то получим сумму на клиенте.
			Для каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
				СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
			КонецЦикла;
			
			РазмерОбластиПоВертикали   = СтруктураАдресВыделеннойОбласти.Низ   - СтруктураАдресВыделеннойОбласти.Верх;
			РазмерОбластиПоГоризонтали = СтруктураАдресВыделеннойОбласти.Право - СтруктураАдресВыделеннойОбласти.Лево;
			
			// В некоторых отчетах показатели (да и аналитика на которую может встать пользователь)
			// выводятся в "объединенных" ячейках - не желательно в этом случае делать серверный вызов. 
			// Выделенная область из 10 ячеек закрывает все такие случае и скорее всего всегда будет доступна на клиенте.
			// Максимум, может быть сделан один неявный серверный вызов.
			ВычислитьНаКлиенте = (РазмерОбластиПоВертикали + РазмерОбластиПоГоризонтали) < 12;
			Если ВычислитьНаКлиенте Тогда
				
				СуммаВЯчейках = 0;
				Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
					
					Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
						Попытка
							
							Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
							
							Если Ячейка.Видимость = Истина Тогда
								Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
									
									СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
									
								ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
									
									ЧислоВЯчейке  = Число(УКО_СтрокиКлиентСервер_ЗаменитьОдниСимволыДругими(Символ(32)+Символ(43), Ячейка.Текст, Символ(0)));
									СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
									
								КонецЕсли;
							КонецЕсли;
							
						Исключение
							
							НеБудемОбрабатыватьИсключение = Истина;
							
						КонецПопытки;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ПолеСумма = СуммаВЯчейках;
				КэшВыделеннойОбласти.Вставить("Сумма", ПолеСумма);
				
			Иначе
				
				// Если ячеек много, то лучше вычислим сумму ячеек на сервере за один вызов,
				// т.к. неявных серверных вызовов может быть гораздо больше.
				НеобходимоВычислятьНаСервере = Истина;
				
			КонецЕсли;
		Иначе
			
			// Вычислим сумму ячеек на сервере.
			НеобходимоВычислятьНаСервере = Истина;
			
		КонецЕсли;
	Иначе
		
		ПолеСумма = КэшВыделеннойОбласти.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Определяет этот объект перечисление
//
// Параметры:
//   ИмяОбъекта - Строка - Объект метаданных
//
// Возвращаемое значение:
//   Булево - Истина, это имя перечисление
//
Функция УКО_МетаданныеКлиентСервер_ЭтоОбъектПеречисление(ИмяОбъекта) Экспорт
	
	Возврат ИмяОбъекта = "Перечисление" 
				ИЛИ ИмяОбъекта = "Enum";

КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает Описание типов строка)
// Параметры:
//   ДлинаСтроки - Число - Длина строки
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов строка
Функция УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(ДлинаСтроки = 0) Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
	
КонецФункции
&НаКлиенте
// Обработчик в табличном документе "ПриАктивизацииОбласти"
//
// Параметры:
//	Форма - Форма - Форма
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//
Процедура УКО_ТабличныйДокументКлиент_ПриАктивизацииОбластиОбработка(Форма, ТабличныйДокумент) Экспорт
	
	НеобходимоВычислятьНаСервере = Ложь;
	УКО_ТабличныйДокументКлиент_ВычислитьСуммуВыделенныхЯчеек(Форма["ПолеСумма"], ТабличныйДокумент, Форма["КэшВыделеннойОбласти"], НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		АдресРезультата = Форма.ТекущийРезультат.Адрес;
		Если ЗначениеЗаполнено(АдресРезультата) Тогда
			Форма["ПолеСумма"] = УКО_ТабличныйДокументВызовСервера_ВычислитьСуммуВыделенныхЯчеек(АдресРезультата, Форма["КэшВыделеннойОбласти"]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает по объекту метаданных доступны ли для него предопределенные элементы
//
// Параметры:
//   ИмяОбъекта - Строка - Имя объекта метаданных
//
// Возвращаемое значение:
//   Булево - Истина, доступны предопределенные элементы
//
Функция УКО_МетаданныеКлиентСервер_ОбъектCПредопределенными(ИмяОбъекта) Экспорт
	
	Возврат ИмяОбъекта = "Справочник" 
				ИЛИ ИмяОбъекта = "Catalog"
				ИЛИ УКО_МетаданныеКлиентСервер_ЭтоОбъектПеречисление(ИмяОбъекта)
				ИЛИ ИмяОбъекта = "ПланВидовХарактеристик"
				ИЛИ ИмяОбъекта = "ChartOfCharacteristicTypes"
				ИЛИ ИмяОбъекта = "ПланСчетов"
				ИЛИ ИмяОбъекта = "ChartOfAccounts"
				ИЛИ ИмяОбъекта = "ПланВидовРасчета"
				ИЛИ ИмяОбъекта = "ChartOfCalculationTypes";

КонецФункции
&НаКлиенте
// Копирует текст в буфер обмена (Через HTML)
//
// Параметры:
//	Текст - Строка - Текст
Процедура УКО_БуферОбменаКлиент_Копировать(Текст) Экспорт
	
    ОбъектHTML = Новый COMОбъект("htmlfile");
    ОбъектHTML.ParentWindow.ClipboardData.Setdata("Text", Текст);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Выполняет замену символов в строке.
// Предназначена для простых случаев, например, для замены латиницы на похожие кириллические символы.
//
// Параметры:
//  ЗаменяемыеСимволы - Строка - строка символов, каждый из которых требует замены;
//  Значение          - Строка - исходная строка, в которой требуется замена символов;
//  СимволыЗамены     - Строка - строка символов, на каждый из которых нужно заменить символы параметра
//                               ЗаменяемыеСимволы.
// 
// Возвращаемое значение:
//  Строка - строка после замены символов.
//
Функция УКО_СтрокиКлиентСервер_ЗаменитьОдниСимволыДругими(ЗаменяемыеСимволы, Значение, СимволыЗамены) Экспорт
	
	Результат = Значение;
	
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Результат = СтрЗаменить(Результат, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), Сред(СимволыЗамены, НомерСимвола, 1));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаСервере
// Получает код на встроенном языке для значения
//
// Параметры:
//  Значение  - Произвольный - Произвольное значений
//
// Возвращаемое значение:
//   Строка - Код на встроенном языке для значения
//
Функция УКО_КодНаВстроенномЯзыкеВызовСервера_Значение(Значение) Экспорт
	
	Возврат ОбъектОбработки().УКО_КодНаВстроенномЯзыке_ДляЗначения(Значение);
	
КонецФункции
&НаКлиенте
// Обработка команды выделить ячейки табличного документа
//
// Параметры:
//	АдресТабличногоДокумента - Строка - Адрес табличного документа во временном хранилище
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//
Процедура УКО_ТабличныйДокументКлиент_КомандаВыделитьЯчейки(АдресТабличногоДокумента, ТабличныйДокумент) Экспорт
	
	Если ЗначениеЗаполнено(АдресТабличногоДокумента) Тогда
		
		ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
		ВыделеннаяОбласть = Новый Структура;
		ВыделеннаяОбласть.Вставить("Лево", ТекущаяОбласть.Лево);
		ВыделеннаяОбласть.Вставить("Верх", ТекущаяОбласть.Верх);
		ВыделеннаяОбласть.Вставить("Право", ТекущаяОбласть.Право);
		ВыделеннаяОбласть.Вставить("Низ", ТекущаяОбласть.Низ);
		
		УКО_ТабличныйДокументКлиентСервер_ВыделитьЯчейки(ТабличныйДокумент, ВыделеннаяОбласть);
		УКО_ТабличныйДокументВызовСервера_ВыделитьЯчейки(АдресТабличногоДокумента, ВыделеннаяОбласть);
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
// Выделить ячейки табличного документа
//
// Параметры:
//	АдресТабличногоДокумента - Строка - Адрес табличного документа во временном хранилище
//	ВыделеннаяОбласть - Структура - Выделенная область
//
Процедура УКО_ТабличныйДокументВызовСервера_ВыделитьЯчейки(АдресТабличногоДокумента, ВыделеннаяОбласть) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресТабличногоДокумента) Тогда
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(АдресТабличногоДокумента);
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	УКО_ТабличныйДокументКлиентСервер_ВыделитьЯчейки(ТабличныйДокумент, ВыделеннаяОбласть);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Проверяет строка многострочная?
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, если строка многострочная
//
Функция УКО_СтрокиКлиентСервер_МногострочнаяСтрока(Строка) Экспорт
	
	Возврат Булево(СтрНайти(Строка, Символы.ПС));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Выделить ячейки табличного документа
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	ВыделеннаяОбласть - Структура - Выделенная область
//
Процедура УКО_ТабличныйДокументКлиентСервер_ВыделитьЯчейки(ТабличныйДокумент, ВыделеннаяОбласть) Экспорт
	
	ПерваяСтрока 		= ВыделеннаяОбласть.Верх;
	ПерваяКолонка 		= ВыделеннаяОбласть.Лево;
	ПоследняяСтрока 	= ВыделеннаяОбласть.Низ;
	ПоследняяКолонка 	= ВыделеннаяОбласть.Право;
	
	ЭталоннаяОбласть = ТабличныйДокумент.Область(ПерваяСтрока, ПерваяКолонка, ПерваяСтрока, ПерваяКолонка);
	ШрифтЭталоннойОбласти = ЭталоннаяОбласть.Шрифт;
	Если ШрифтЭталоннойОбласти = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ФлагЖирности = Не ШрифтЭталоннойОбласти.Жирный;
	Если ФлагЖирности = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Для НомерСтроки = ПерваяСтрока По ПоследняяСтрока Цикл
		Для НомерКолонки = ПерваяКолонка По ПоследняяКолонка Цикл 
			ТекущаяОбластьРезультата = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			ТекущийШрифт = ТекущаяОбластьРезультата.Шрифт;
			Если ТекущийШрифт <> Неопределено Тогда 
				ТекущаяОбластьРезультата.Шрифт = Новый Шрифт(ТекущийШрифт,,, ФлагЖирности);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры
&НаКлиенте
// Обработка команды выделить ячейки табличного документа
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//	НаВстроенномЯзыке - Булево - На встроенном языке
//
Процедура УКО_ТабличныйДокументКлиент_КомандаКопироватьСсылку(ТабличныйДокумент, АдресДанныхРасшифровки, НаВстроенномЯзыке = Ложь) Экспорт
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	Расшифровка = УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, ТекущаяОбласть);
	
	Если Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Расшифровка) Тогда
		
		Если НаВстроенномЯзыке Тогда
			ТекстВБуферОбмена = УКО_КодНаВстроенномЯзыкеВызовСервера_Значение(Расшифровка);
		Иначе
			ТекстВБуферОбмена = Строка(Расшифровка.УникальныйИдентификатор());
		КонецЕсли;
		
		УКО_БуферОбменаКлиент_Копировать(ТекстВБуферОбмена);

	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Восстанавливает фон области табличного документа по описанию
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	Формат - Строка - Формат выгрузки
//	ОписаниеАктивнойОбласти - Структура - Описание активной области
//
Процедура УКО_ТабличныйДокументКлиент_ПодготовитьДляЭкспорта(ТабличныйДокумент, Формат, ОписаниеАктивнойОбласти) Экспорт
	
	УКО_ТабличныйДокументКлиент_ВосстановитьФонОбласти(ТабличныйДокумент, ОписаниеАктивнойОбласти);
	
	Если Формат = "MXL" Тогда
		// Установим защиту всех ячеек
		ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы; ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
		Для НомерСтроки = 1 По ВысотаТаблицы Цикл 
			ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, ШиринаТаблицы).Защита = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает идентификатор расширения
// Возвращаемое значение:
//   Строка	- Идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения() Экспорт 
	
	Возврат "УправляемаяКонсольОтчетов";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Обновляем подменю уровень результата в табличном документе
//
// Параметры:
//  Элемент  - Элемент - Элемент
//  Форма  - Форма - Форма
//  ТабличныйДокумент  - ТабличныйДокумент - ТабличныйДокумент
//
Процедура УКО_ТабличныйДокументКлиентСервер_ОбновитьЭлементыПодменюУровеньГруппировок(Форма, ТабличныйДокумент, Элемент) Экспорт
	
	КоличествоУровнейГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	КоличествоЭлементовУровеньГруппировки = Элемент.ПодчиненныеЭлементы.Количество();
	
	НомерУровня = 1;
	Для Каждого ЭлементПодменю Из Элемент.ПодчиненныеЭлементы Цикл 
		ЭлементПодменю.Видимость = (НомерУровня <= КоличествоУровнейГруппировокСтрок);
		НомерУровня = НомерУровня + 1;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
// Обработчик выбора в табличном документа
//
// Параметры:
//	Форма - Форма - Форма
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//	Область - ОбластьТабличногоДокумента - Область табличного документа
//	СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура УКО_ТабличныйДокументКлиент_ОбработчикВыбор(Форма, АдресДанныхРасшифровки, Область, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Расшифровка = УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, Область);
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		УКО_ФормыКлиент_ОткрытьТаблицуЗначений(УКО_ОбщегоНазначенияВызовСервера_АдресТаблицыЗначенийПоРасшифровке(АдресДанныхРасшифровки, Расшифровка.Значение), Форма, Ложь);
		
	ИначеЕсли Расшифровка <> Неопределено Тогда
		
		ПоказатьЗначение(, Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Получает значение свойства структуры
// Параметры:
//   Структура - Структура - Структура
//   Имя - Строка - Имя свойства
//   ЗначениеПоУмолчанию - Произвольный - Значение по умолчанию, когда в данной структуре нет этого свойства
// Возвращаемое значение:
//   Произвольный - Значение свойства структуры
Функция УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Структура = Неопределено, Имя = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Значение = ЗначениеПоУмолчанию;
	
	Если (ТипЗнч(Структура) = Тип("Структура")
				ИЛИ ТипЗнч(Структура) = Тип("ДанныеФормыСтруктура"))
			И Структура.Свойство(Имя) Тогда
		
		Значение = Структура[Имя];
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение идентификатора строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный идентификатор
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	НаборСимволовИдентификатор = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + УКО_СтрокиКлиентСервер_НаборСимволовЦифры() + "_";
	НаборСимволовИдентификаторПервыйСимвол = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
		
		Символ = Сред(Строка, Индекс, 1);
		Если Индекс = НачальныйИндекс Тогда
			НаборСимволов = НаборСимволовИдентификаторПервыйСимвол;
		Иначе
			НаборСимволов = НаборСимволовИдентификатор;
		КонецЕсли;
		
		Если Не СтрНайти(НаборСимволов, Символ) Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает набор символов букв русского и английского языков
// Возвращаемое значение:
//   Строка - Набор символов букв
Функция УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы()
	
	НаборСимволовРусскиеБуквы = "ЙЦУКЕ" + Символ(1025) + "НГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"; //1025 - Код символа буквы ежик, елка
	НаборСимволовРусскиеБуквы = НаборСимволовРусскиеБуквы + НРег(НаборСимволовРусскиеБуквы);
	
	Возврат НаборСимволовРусскиеБуквы + УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы();
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы()
	
	НаборСимволов = "QWERTYUIOPASDFGHJKLZXCVBNM";
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает Число в виде строки
//
// Параметры:
//   Число - Число - Преобразуемое число
//
// Возвращаемое значение:
//   Строка - Число в виде строки
//
Функция УКО_СтрокиКлиентСервер_ЧислоВСтроку(Число) Экспорт
	
	Возврат Формат(Число, "ЧН=; ЧГ=");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это является ли значение ссылкой
//
// Параметры:
//  Ссылка  - Ссылка - Ссылка
//  ИсключаяПеречисления  - Булево - Исключать перечисление из ссылочных типов
//
// Возвращаемое значение:
//   Булево - Истина, это ссылка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Ссылка, ИсключаяПеречисления = Ложь) Экспорт
	
	Возврат УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(ТипЗнч(Ссылка), ИсключаяПеречисления);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это ссылочный тип
//
// Параметры:
//  Тип  - Тип - Тип
//  ИсключаяПеречисления  - Булево - Исключать перечисление из ссылочных типов
//
// Возвращаемое значение:
//   Булево - Истина, ссылочный тип
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(Тип, ИсключаяПеречисления = Ложь) Экспорт
	
	ПростойТип = УКО_ОбщегоНазначенияКлиентСервер_ЭтоПростойТип(Тип);
	Результат = Не ПростойТип;
	Если ИсключаяПеречисления Тогда 
		
		#Если Сервер Тогда
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Результат = Ложь;  
			КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это простой тип
//
// Параметры:
//   Тип - Тип - Тип
//
// Возвращаемое значение:
//   Булево - Если тип простой
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоПростойТип(Тип)
	
	Результат = Тип = Тип("Null") ИЛИ Тип = Тип("Неопределено") ИЛИ Тип = Тип("Число") ИЛИ Тип = Тип("Строка") ИЛИ Тип = Тип("Дата") ИЛИ Тип = Тип("Булево") 
				ИЛИ Тип = Тип("УникальныйИдентификатор") ИЛИ Тип = Тип("ХранилищеЗначения") ИЛИ Тип = Тип("Тип") ИЛИ Тип = Тип("МоментВремени") ИЛИ Тип = Тип("Структура") ИЛИ Тип = Тип("ОписаниеТипов");
				
	#Если Сервер Тогда
		Результат = Результат ИЛИ Тип = Тип("РезультатЗапроса");
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте

Функция УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, Область)
	
	Попытка
		Расшифровка = Область.Расшифровка;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		
		Результат = УКО_СКДВызовСервера_РасшифровкаОбласти(АдресДанныхРасшифровки, Расшифровка);
		
	Иначе
		
		Результат = Расшифровка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаСервере
// Проверяет текст схемы компоновки данных
//
// Параметры:
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//	ИдентификаторРасшифровки - Число - Идентификатор расшифровки
//
// Возвращаемое значение:
//	Произвольный - Значение расшифровки области
//
Функция УКО_СКДВызовСервера_РасшифровкаОбласти(АдресДанныхРасшифровки, ИдентификаторРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	Возврат ДанныеРасшифровки.Элементы[ИдентификаторРасшифровки].ПолучитьПоля()[0].Значение;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает префикс объектов расширения
// Возвращаемое значение:
//   Строка	- Префикс объектов расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения() Экспорт 
	
	Возврат "УКО_";
	
КонецФункции
&НаКлиенте
// Обработка команды ссылка в СоответствияОбъектовИнформационныхБаз
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//
Процедура УКО_ТабличныйДокументКлиент_КомандаСсылкаВСоответствияОбъектовИнформационныхБаз(ТабличныйДокумент, АдресДанныхРасшифровки) Экспорт
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	Расшифровка = УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, ТекущаяОбласть);
	
	Если Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Расшифровка, Истина) Тогда
		
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("УникальныйИдентификаторИсточника", Расшифровка);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("РегистрСведений.СоответствияОбъектовИнформационныхБаз.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);

	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Обработка команды ссылка в ПубличныеИдентификаторыСинхронизируемыхОбъектов
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//
Процедура УКО_ТабличныйДокументКлиент_КомандаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов(ТабличныйДокумент, АдресДанныхРасшифровки) Экспорт
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	Расшифровка = УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, ТекущаяОбласть);
	
	Если Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Расшифровка, Истина) Тогда
		
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("Ссылка", Расшифровка);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);

	КонецЕсли;
	
КонецПроцедуры
&НаСервере
// Получает адрес таблицы в расшифровки
//
// Параметры:
//  АдресДанныхРасшифровки  - Адрес - Адрес данных расшифровки во временном хранилище
//  ЗначениеРасшифровки  - Произвольный - Значение расшифровки
//
// Возвращаемое значение:
//   Строка - Адрес таблицы значений в расшифровке
//
Функция УКО_ОбщегоНазначенияВызовСервера_АдресТаблицыЗначенийПоРасшифровке(АдресДанныхРасшифровки, ЗначениеРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	ТаблицаЗначений = ДанныеРасшифровки[ЗначениеРасшифровки].Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗначений);
	
КонецФункции
&НаКлиенте
// Открывает таблицу значений в отдельной форме
//
// Параметры:
//	Адрес - Строка - Адрес значения
//	ФормаВладелец - Форма - Форма владелец
//	Редактирование - Булево - Возможность редактирования
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//		* ДополнениеЗаголовка - Строка - Дополнение заголовка
//		* НастройкаИндексацииКолонок - Булево - Настраивать индексацию колонок
//		* ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии
//
Процедура УКО_ФормыКлиент_ОткрытьТаблицуЗначений(Адрес, ФормаВладелец, Редактирование = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Адрес", Адрес);
	ПараметрыФормы.Вставить("Редактирование", Редактирование);
	
	ОписаниеОповещенияОЗакрытии = Неопределено;
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		Если ДополнительныеПараметры.Свойство("ДополнениеЗаголовка") Тогда
			ПараметрыФормы.Вставить("ДополнениеЗаголовка", ДополнительныеПараметры.ДополнениеЗаголовка);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("НастройкаИндексацииКолонок") Тогда
			ПараметрыФормы.Вставить("НастройкаИндексацииКолонок", ДополнительныеПараметры.НастройкаИндексацииКолонок);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ОписаниеОповещенияОЗакрытии") Тогда
			ОписаниеОповещенияОЗакрытии = ДополнительныеПараметры.ОписаниеОповещенияОЗакрытии
		КонецЕсли;
		
	КонецЕсли;
	
	УКО_ФормыКлиент_ОткрытьДополнительную("ОткрытиеТаблицыЗначений", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры
&НаКлиенте
// Открывает дополнительную/вспомогательную форму
//
// Параметры:
//	Имя - Строка - Имя формы
//	Параметры - Структура - Параметры формы (необязательный)
//	Владелец - Форма - Форма владелец
//	Уникальность - Произвольный - Уникальность (необязательный)
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии (необязательный)
//
Процедура УКО_ФормыКлиент_ОткрытьДополнительную(Имя, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	Если УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Тогда
		ОбъектФорм = СтрШаблон("ВнешняяОбработка.%1%2.Форма.", УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения());
	Иначе
		ОбъектФорм = "ОбщаяФорма";
	КонецЕсли;
	
	ПолноеИмяФормы = СтрШаблон("%1.%2%3", ОбъектФорм, УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), Имя);
	
	Если Владелец = Неопределено Тогда
		РежимОткрытия = Неопределено;
	Иначе 
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, Параметры, Владелец, Уникальность,,,ОписаниеОповещенияОЗакрытии, РежимОткрытия);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Определяет, это режим запуска программы
//
// Возвращаемое значение:
//   Булево	- Истина, Режим запуска внешняя обработка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Экспорт
	
	Возврат Истина;
	
КонецФункции
&НаКлиенте
// Обработчик ПриАктивизацииОбласти в табличном документа
//
// Параметры:
//	Элемент - ЭлементФормы - Элемент формы
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	ОписаниеАктивнойОбласти - Структура - Описание активной области
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//
Процедура УКО_ТабличныйДокументКлиент_ОбработчикПриАктивизацииОбласти(Элемент, ТабличныйДокумент, ОписаниеАктивнойОбласти, АдресДанныхРасшифровки) Экспорт
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	Расшифровка = УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, ТекущаяОбласть);
	
	// Обновить элементы управления
	МенюГруппа = Элемент.КонтекстноеМеню.ПодчиненныеЭлементы.ТабличныйДокументРезультатКонтекстноеМенюГруппа;
	КнопкаКопироватьUIDСсылки = МенюГруппа.ПодчиненныеЭлементы.КнопкаКопироватьUIDСсылки;
	КнопкаКопироватьСсылкуКодНаВстроенномЯзыке = МенюГруппа.ПодчиненныеЭлементы.КнопкаКопироватьСсылкуКодНаВстроенномЯзыке;
	
	РасшифровкаЭтоСсылка = (Расшифровка <> Неопределено) И УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Расшифровка);
	РасшифровкаЭтоСсылкаБезПеречислений = (Расшифровка <> Неопределено) И УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Расшифровка, Ложь);
	
	КнопкаКопироватьUIDСсылки.Доступность = РасшифровкаЭтоСсылка;
	КнопкаКопироватьСсылкуКодНаВстроенномЯзыке.Доступность = РасшифровкаЭтоСсылка;
	
	Попытка
		КнопкаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов = МенюГруппа.ПодчиненныеЭлементы.КнопкаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов;
		КнопкаСсылкаВСоответствияОбъектовИнформационныхБаз = МенюГруппа.ПодчиненныеЭлементы.КнопкаСсылкаВСоответствияОбъектовИнформационныхБаз;
		КнопкаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов.Доступность = РасшифровкаЭтоСсылкаБезПеречислений И Не Расшифровка.Пустая();
		КнопкаСсылкаВСоответствияОбъектовИнформационныхБаз.Доступность = РасшифровкаЭтоСсылкаБезПеречислений И Не Расшифровка.Пустая();
	Исключение
	КонецПопытки;
	
	// Снятие установка выделения
	НомерАктивнойСтроки = ТекущаяОбласть.Низ;
	
	КоличествоКолонок = 0;
	Пока Истина Цикл 
		
		ТипЛинии = ТабличныйДокумент.Область(НомерАктивнойСтроки, КоличествоКолонок + 1).ГраницаСправа.ТипЛинии;
		
		Если ТипЛинии <> ТипЛинииЯчейкиТабличногоДокумента.Сплошная Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоКолонок = КоличествоКолонок + 1;
		
	КонецЦикла;
	
	УКО_ТабличныйДокументКлиент_ВосстановитьФонОбласти(ТабличныйДокумент, ОписаниеАктивнойОбласти);
	
	Если КоличествоКолонок > 0 Тогда
		АктивнаяСтрокаОбласть = ТабличныйДокумент.Область(НомерАктивнойСтроки, 1, НомерАктивнойСтроки, КоличествоКолонок);
		ОписаниеАктивнойОбласти = Новый Структура("НомерСтроки, КоличествоКолонок, ЦветФона", НомерАктивнойСтроки, КоличествоКолонок, АктивнаяСтрокаОбласть.ЦветФона);
		АктивнаяСтрокаОбласть.ЦветФона = WebЦвета.СветлоЗолотистый;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте

Процедура УКО_ТабличныйДокументКлиент_ВосстановитьФонОбласти(ТабличныйДокумент, ОписаниеАктивнойОбласти)
	
	Если ЗначениеЗаполнено(ОписаниеАктивнойОбласти) Тогда
		
		Если ОписаниеАктивнойОбласти.ЦветФона <> Неопределено Тогда // Иногда непонятным образом попадает значение неопределено (возможно при переключении результатов запрос, СКД) 
			СтрокаОбласть = ТабличныйДокумент.Область(ОписаниеАктивнойОбласти.НомерСтроки, 1, ОписаниеАктивнойОбласти.НомерСтроки, ОписаниеАктивнойОбласти.КоличествоКолонок);
			СтрокаОбласть.ЦветФона = ОписаниеАктивнойОбласти.ЦветФона;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Устанавливает фиксацию шапки табличного документа
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//   Зафиксировать - Булево - Признак фиксации
Процедура УКО_ТабличныйДокументКлиентСервер_ЗафиксироватьШапку(ТабличныйДокумент, Зафиксировать = Истина) Экспорт //ЗафиксироватьШапкуТабличногоДокумента
	
	Если Зафиксировать Тогда
		ТабличныйДокумент.ФиксацияСлева = 1;
		ТабличныйДокумент.ФиксацияСверху = 3;
	Иначе
		ТабличныйДокумент.ФиксацияСлева = 0;
		ТабличныйДокумент.ФиксацияСверху = 0;
	КонецЕсли;
	
КонецПроцедуры
