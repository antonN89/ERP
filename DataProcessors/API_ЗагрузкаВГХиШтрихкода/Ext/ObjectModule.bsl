Процедура ВыполнитьЗапросSE(СтруктураМетодовЗапроса) Экспорт 
	
		
		АвторизационныйКлюч = "HYHlIz771aID8quFHxxq6gwNLlgcEsiZ";
		
		СтруктураПараметровСоединения = Новый Структура;
		СтруктураПараметровСоединения.Вставить("Сервер",						 "web.se-ecatalog.ru");	
		СтруктураПараметровСоединения.Вставить("Порт",							 443);	
		СтруктураПараметровСоединения.Вставить("Пользователь",					 "");	
		СтруктураПараметровСоединения.Вставить("Пароль",						 "");	
		СтруктураПараметровСоединения.Вставить("Прокси",						 Неопределено);	
		СтруктураПараметровСоединения.Вставить("Таймаут",						 0);	
		
		ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());

		СтруктураПараметровСоединения.Вставить("ЗащищенноеСоединение",			 ssl1);
		СтруктураПараметровСоединения.Вставить("ИспользоватьАутентификациюОС",	 Ложь);
	
		Для каждого Стр Из СтруктураМетодовЗапроса Цикл
			
           Если Стр.Ключ = "getPackingData" Тогда 
				//
				Если ЗначениеЗаполнено(Номенклатура) Тогда 
					пПостраничныйЗапрос = Ложь;
				Иначе 
					пПостраничныйЗапрос = Истина;
				КонецЕсли;
				Если Не пПостраничныйЗапрос Тогда 
					HTTPАдресРесурса = СтруктураМетодовЗапроса["getPackingData"] + "commercialRef=" + СокрЛП(Номенклатура.Артикул) + "&accessCode=" + СокрЛП(АвторизационныйКлюч) + "&packingData=brutto";
					//
					СтруктураПараметровЗапроса = Новый Структура;
					СтруктураПараметровЗапроса.Вставить("АдресРесурса",	СокрЛП(HTTPАдресРесурса));	
					СтруктураПараметровЗапроса.Вставить("Заголовки",	Новый Соответствие);
					//
					РезультатGetЗапрос = ВыполнитьGetЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса);
					
					ПрочитатьФайлXMLЧерезDOM_getpackingData(РезультатGetЗапрос.ИмяФайлаОтвета);	
				Иначе
					HTTPАдресРесурса = СтруктураМетодовЗапроса["getPackingData"] + "&accessCode=" + СокрЛП(АвторизационныйКлюч) + "&packingData=brutto&pageSize=250&page=";
					пНомерСтраницы = 1;
					пПустаяСтраница = Ложь; //переменная примет истина, когда в ответе не будет данных, значит прекратим запросы
					
					Пока Не пПустаяСтраница Цикл 
						СтруктураПараметровЗапроса = Новый Структура;
						
						HTTPАдресРесурсаСтраница = HTTPАдресРесурса + Строка(пНомерСтраницы);
						
						СтруктураПараметровЗапроса.Вставить("АдресРесурса",	СокрЛП(HTTPАдресРесурсаСтраница));	
						СтруктураПараметровЗапроса.Вставить("Заголовки",	Новый Соответствие);
						
						РезультатGetЗапрос = ВыполнитьGetЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса);
						
						пПустаяСтраница = ПрочитатьФайлXMLЧерезDOM_getpackingData(РезультатGetЗапрос.ИмяФайлаОтвета);
						
						пНомерСтраницы = пНомерСтраницы + 1;
					КонецЦикла;

					
				КонецЕсли;
				
			КонецЕсли;
			
			Попытка
				УдалитьФайлы(РезультатGetЗапрос.ИмяФайлаОтвета);
			Исключение
				//СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
		ДанныеОбработаны = Истина;
		
КонецПроцедуры
Функция ВыполнитьGetЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса) 
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".xml");
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".xml");
	
	// Создаем новое HTTP соединение с указанием сервера
	// Последний параметр отвечает за использование защищенного соединения
	HTTPСоединение = Новый HTTPСоединение(СтруктураПараметровСоединения.Сервер, СтруктураПараметровСоединения.Порт, 
	СтруктураПараметровСоединения.Пользователь, СтруктураПараметровСоединения.Пароль, 
	СтруктураПараметровСоединения.Прокси, СтруктураПараметровСоединения.Таймаут, 
	СтруктураПараметровСоединения.ЗащищенноеСоединение, СтруктураПараметровСоединения.ИспользоватьАутентификациюОС);
	
	// Записываем содержимое тела в файл отправки
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(СтруктураПараметровЗапроса.АдресРесурса);          
	ТекстовыйФайл.Записать(ИмяФайлаЗапроса, КодировкаТекста.UTF8);
	ФайлОтправки = Новый Файл(ИмяФайлаЗапроса);
	
	// Отсылаем POST запрос на обработку.
	// АдресРесурса — ссылка на веб-сервер (страницу), к которой посылается POST запрос
	// Выполним POST запрос через URL
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураПараметровЗапроса.АдресРесурса, СтруктураПараметровЗапроса.Заголовки);     
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяФайлаОтвета);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаОтвета, КодировкаТекста.UTF8);
	
	ТекстОтвета = ТекстовыйДокумент.ПолучитьТекст();
		
	РезультатGetЗапрос = Новый Структура;
	РезультатGetЗапрос.Вставить("HTTPОтвет", HTTPОтвет);
	РезультатGetЗапрос.Вставить("ТекстОтвета", ТекстОтвета);	
	РезультатGetЗапрос.Вставить("ИмяФайлаОтвета", ИмяФайлаОтвета);	
	
	// Обнулим запрос, чтобы освободить чтение ИмяФайлаЗапроса!
	HTTPЗапрос = Неопределено;
	
	Попытка
		УдалитьФайлы(ИмяФайлаЗапроса);
	Исключение
		//СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат РезультатGetЗапрос;
	
КонецФункции	
	

Функция  ПрочитатьФайлXMLЧерезDOM_getpackingData(ПутьКФайлу)
// Разбор документа через DOM (document object model)
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ПутьКФайлу);
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер);
	
	пЕстьДанныеНаСтранице = Ложь;
		
	Для Каждого Элемент Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		
		// Проверка на успешную загрузку
		Если Элемент.ИмяУзла = "result" Тогда
			
			Если Элемент.ТекстовоеСодержимое = "success" Тогда
				// Файл загрузился корректно!
				Продолжить;	
			Иначе
				//СообщитьПользователю("Ответ поставщика содержит ошибки. Обратитесь к разработчику!");
				Возврат Истина; //прервем постраничное формирование запроса
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		//
		Если Элемент.ИмяУзла = "data" Тогда
			
			пЕстьДанныеНаСтранице = Истина;
			
			Если Элемент.ДочерниеУзлы.Количество() = 0 Тогда
				//ЭтотОбъект.Описание = "Артикул номенклатуры отсутствует в базе данных поставщика!";
				Возврат Истина; //прервем постраничное формирование запроса
				Прервать;
			КонецЕсли;
			
			Для каждого Элемент1 Из Элемент.ДочерниеУзлы Цикл
				
				Если Элемент1.ИмяУзла = "reference" Тогда
					
					//Добавим строку с артикулом
					пНоваяСтрока = Результат.Добавить();
					
					пНоваяСтрока.Производитель = Производитель;

					Для Каждого Элемент2 из Элемент1.ДочерниеУзлы Цикл
						
						Если Элемент2.ИмяУзла = "commercialRef" Тогда
                             пНоваяСтрока.Артикул = Элемент2.ТекстовоеСодержимое;
							 
						ИначеЕсли Элемент2.ИмяУзла = "packing_data_brutto" Тогда
							
							Для каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл
								
								Если Элемент3.ИмяУзла = "unit" Тогда
									Элемент3ДочерниеУзлы = Элемент3.ДочерниеУзлы;
									пНайденыВГХ = Ложь;
									Для Каждого Элемент4 из Элемент3ДочерниеУзлы Цикл
										Если Элемент4.ИмяУзла = "packing_type" и (Элемент4.ТекстовоеСодержимое = "Piece" или Элемент4.ТекстовоеСодержимое ="PCE" )Тогда 
											пНайденыВГХ = Истина;
											Прервать;
										КонецЕсли;
									КонецЦикла;
									
									Если пНайденыВГХ   Тогда 
										Для Каждого Элемент4 из Элемент3ДочерниеУзлы Цикл
											пНоваяСтрока.ЕдИзмОбъемAPI = "";
									
											Если Элемент4.ИмяУзла = "length"  Тогда 
												Для Каждого Элемент5 из Элемент4.ДочерниеУзлы Цикл
													Если Элемент5.ИмяУзла = "value"  Тогда 
														 пНоваяСтрока.ДлинаAPI = Число(УдалитьЛишниеСимволы(Элемент5.ТекстовоеСодержимое));
													КонецЕсли;
													
													//++Шерстюк Ю.Ю. 20.04.2021
													Если Элемент5.ИмяУзла = "description"  Тогда
														пНоваяСтрока.ЕдИзмДлинаAPI = СокрЛП(Элемент5.ТекстовоеСодержимое);
													КонецЕсли;
													//--Шерстюк Ю.Ю.													
												КонецЦикла;
											КонецЕсли;
											
											Если Элемент4.ИмяУзла = "weight"  Тогда 
												Для Каждого Элемент5 из Элемент4.ДочерниеУзлы Цикл
													Если Элемент5.ИмяУзла = "value"  Тогда 
														 пНоваяСтрока.ВесAPI = Число(УдалитьЛишниеСимволы(Элемент5.ТекстовоеСодержимое));
													 КонецЕсли;
													//++Шерстюк Ю.Ю. 20.04.2021
													Если Элемент5.ИмяУзла = "description"  Тогда
														пНоваяСтрока.ЕдИзмВесAPI = СокрЛП(Элемент5.ТекстовоеСодержимое);
													КонецЕсли;
													//--Шерстюк Ю.Ю.													
												КонецЦикла;
											КонецЕсли;
											
											Если Элемент4.ИмяУзла = "ean" Тогда 
												пНоваяСтрока.ШтрихкодAPI = Элемент4.ТекстовоеСодержимое;
											КонецЕсли;
											
											Если Элемент4.ИмяУзла = "height"  Тогда 
												Для Каждого Элемент5 из Элемент4.ДочерниеУзлы Цикл
													Если Элемент5.ИмяУзла = "value"  Тогда 
														 пНоваяСтрока.ВысотаAPI = Число(УдалитьЛишниеСимволы(Элемент5.ТекстовоеСодержимое));
													 КонецЕсли;
													//++Шерстюк Ю.Ю. 20.04.2021
													Если Элемент5.ИмяУзла = "description"  Тогда
														пНоваяСтрока.ЕдИзмВысотаAPI = СокрЛП(Элемент5.ТекстовоеСодержимое);
													КонецЕсли;
													//--Шерстюк Ю.Ю.													

												КонецЦикла;
											КонецЕсли;
											
											Если Элемент4.ИмяУзла = "width"  Тогда 
												Для Каждого Элемент5 из Элемент4.ДочерниеУзлы Цикл
													Если Элемент5.ИмяУзла = "value"  Тогда 
														 пНоваяСтрока.ШиринаAPI = Число(УдалитьЛишниеСимволы(Элемент5.ТекстовоеСодержимое));
													КонецЕсли;
													//++Шерстюк Ю.Ю. 20.04.2021
													Если Элемент5.ИмяУзла = "description"  Тогда
														пНоваяСтрока.ЕдИзмШиринаAPI = СокрЛП(Элемент5.ТекстовоеСодержимое);
													КонецЕсли;
													//--Шерстюк Ю.Ю.													
												КонецЦикла;
											КонецЕсли;

											
										КонецЦикла;

										Прервать;
									КонецЕсли;
									
								КонецЕсли;
								
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					КонецЕсли;
						
					КонецЦикла;
			
		КонецЕсли;
				
						
		
		
	КонецЦикла;
	
	Парсер.Закрыть();
	
	Возврат Не пЕстьДанныеНаСтранице;
КонецФункции

Функция УдалитьЛишниеСимволы(пСтрока)
	
	КоличествоСимволов = СтрДлина(пСтрока);
	пПозиция = 1;
	
	Пока пПозиция <= КоличествоСимволов Цикл
		пКодСимвола = КодСимвола(пСтрока,пПозиция);
		пПозиция = пПозиция + 1;
		Если (пКодСимвола >= 48 и пКодСимвола <= 57) или пКодСимвола = 46 или пКодСимвола = 44 Тогда 
			Продолжить;
		Иначе
			пСтрока = СтрЗаменить(пСтрока,Символ(пКодСимвола),"");
		КонецЕсли;
	КонецЦикла;
	
	Возврат пСтрока;
КонецФункции
Процедура ВыполнитьЗапросDKC() Экспорт 
	
	пЕдИзмДлиныМетр =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("006");
	пЕдИзмВесаКг = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("166");
	пЕдИзмОбъемаМетр = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("113");
	
	пЕдИзмДлиныДм =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("005");
	пЕдИзмОбъемаДм = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("112");
	
	пЕдИзмДлиныСм =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("004");
	пЕдИзмОбъемаСм = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("111");
	
	
	СтруктураПараметровПодключения = ПолучитьПараметрыПодключенияGET();
	Токен = СтруктураПараметровПодключения.access_token; 
	
	пФлагВсеПрочитано = Ложь;
	Страница = 1;
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		тзНоменклатура = ПолучитьНоменклатуруПоПроизводителю(Производитель);
	Иначе
		тзНоменклатура = Новый ТаблицаЗначений;
		тзНоменклатура.Колонки.Добавить("Артикул");
		тзНоменклатура.Колонки.Добавить("Ссылка");
		СтрТзНоменклатура = тзНоменклатура.Добавить();
		СтрТзНоменклатура.Артикул = Номенклатура.Артикул;
		СтрТзНоменклатура.Ссылка = Номенклатура.Ссылка;
	КонецЕсли;
	
	Для Каждого стрНоменклатура из тзНоменклатура Цикл 
		Ресурс = "v1/catalog/material?code=" + стрНоменклатура.Артикул;
		
		РезультатЗапросаДанных = ВыполнитьЗапросGet(Токен,Ресурс);
		
		Если РезультатЗапросаДанных.КодСостояния = 200 Тогда
			ПутьКФайлу = РезультатЗапросаДанных.ИмяФайлаОтвета;
			//прочитаем json
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
			пОтвет = ПрочитатьJSON(ЧтениеJSON,Истина);
			ЧтениеJSON.Закрыть();
			тзВГХ = пОтвет;
			Если тзВГХ.Количество() = 0 Тогда
				пФлагВсеПрочитано = Истина;
			КонецЕсли;					
			
			НоваяСтрока = Результат.Добавить();
			Для Каждого Стр из тзВГХ Цикл
				НоваяСтрока.Артикул = стрНоменклатура.Артикул;
				Для Каждого СтрПараметры из Стр.Значение Цикл
					Если СтрПараметры.Ключ = "weight" Тогда
						НоваяСтрока.ВесAPI = СтрПараметры.Значение;
						НоваяСтрока.ЕдИзмВесAPI = пЕдИзмВесаКг;
					КонецЕсли;
					
					Если СтрПараметры.Ключ = "barcode" Тогда
						Если СтрПараметры.Значение.Количество() > 0 Тогда 
							НоваяСтрока.ШтрихкодAPI = Формат(СтрПараметры.Значение[0],"ЧГ=0");
						КонецЕсли;
					КонецЕсли;
					
					Если СтрПараметры.Ключ = "volume" Тогда 
						пОбъем = СтрПараметры.Значение;
						
						Если пОбъем > 0.001 Тогда 
							НоваяСтрока.ОбъемAPI = пОбъем;
							НоваяСтрока.ЕдИзмОбъемAPI = пЕдИзмОбъемаМетр;
						ИначеЕсли пОбъем > 0.000001 Тогда
							НоваяСтрока.ОбъемAPI = пОбъем*1000;
							НоваяСтрока.ЕдИзмОбъемAPI = пЕдИзмОбъемаДм;
						Иначе 
							НоваяСтрока.ОбъемAPI = пОбъем*1000000;
							НоваяСтрока.ЕдИзмОбъемAPI = пЕдИзмОбъемаСм;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьНоменклатуруПоПроизводителю(пПроизводитель)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка КАК Ссылка,
	                      |	Номенклатура.Артикул КАК Артикул
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Производитель = &Производитель");
	Запрос.УстановитьПараметр("Производитель",пПроизводитель);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьДШВ(пСтрокаГабаритов)
	пСтруктураДШВ = Новый Структура;
	
	пПервыйРазделитель = СтрНайти(пСтрокаГабаритов,"*",,1);
	пВторойРазделитель = СтрНайти(пСтрокаГабаритов,"*",,пПервыйРазделитель+1);
	пДлинаСтроки = СтрДлина(пСтрокаГабаритов);
	пСтрокаГабаритов = СтрЗаменить(пСтрокаГабаритов,".",",");
	Если пПервыйРазделитель = 0 Тогда 
		пСтруктураДШВ.Вставить("Длина",0);
		пСтруктураДШВ.Вставить("Ширина",0);
		пСтруктураДШВ.Вставить("Высота",0);
	ИначеЕсли пВторойРазделитель = 0 Тогда 
		пВторойРазделитель = пДлинаСтроки + 1;
		пСтруктураДШВ.Вставить("Длина",Число(Лев(пСтрокаГабаритов, пПервыйРазделитель-1)));
		пСтруктураДШВ.Вставить("Ширина",Число(Сред(пСтрокаГабаритов, пПервыйРазделитель+1,пВторойРазделитель-пПервыйРазделитель-1)));
        пСтруктураДШВ.Вставить("Высота",0);
	Иначе 
		пСтруктураДШВ.Вставить("Длина",Число(Лев(пСтрокаГабаритов, пПервыйРазделитель-1)));
		пСтруктураДШВ.Вставить("Ширина",Число(Сред(пСтрокаГабаритов, пПервыйРазделитель+1,пВторойРазделитель-пПервыйРазделитель-1)));
		пСтруктураДШВ.Вставить("Высота",Число(Прав(пСтрокаГабаритов, пДлинаСтроки-пВторойРазделитель)));
	КонецЕсли;

	Возврат пСтруктураДШВ;
КонецФункции

Функция ВыполнитьЗапросGet(Токен,Ресурс) 
	РезультатЗапросаДанных = Новый Структура;
	
	Сервер = "api.dkc.ru";
	//Ресурс = "v1/catalog/material/stock?code=&id=";
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,,ssl1);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".xml");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json"); 
	ЗаголовокHTTP.Вставить("AccessToken", Токен);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс,ЗаголовокHTTP);
	
	ЗапросаРезультат = HTTP.Получить(HTTPЗапрос,ИмяФайлаОтвета);
	
	РезультатЗапросаДанных.Вставить("КодСостояния",ЗапросаРезультат.КодСостояния);
	РезультатЗапросаДанных.Вставить("ИмяФайлаОтвета",ИмяФайлаОтвета);
	
	Возврат РезультатЗапросаДанных;
	
КонецФункции	
	
Функция ПолучитьПараметрыПодключенияGET() 
	Сервер = "api.dkc.ru";
	Ресурс = "v1/auth.access.token/718e2e66ea41d51c8ca5c50018b8ff07";
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,,ssl1);
	
	ФайлРезультата = ПолучитьИмяВременногоФайла(".xml");
			
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json"); 
		
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс,ЗаголовокHTTP);
	
    HTTP.Получить(HTTPЗапрос,ФайлРезультата);
		
	//прочитаем json
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ФайлРезультата);
	ПараметрыПодключения = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
		
	// Обнулим запрос, чтобы освободить чтение ИмяФайлаЗапроса!
	HTTPЗапрос = Неопределено;
	
	Попытка
		УдалитьФайлы(ФайлРезультата);
	Исключение
		ЗаписьЖурналаРегистрации("ФоновыеЗадания.РегламентноеЗаданиеAPI_ABB_stockall", УровеньЖурналаРегистрации.Информация, , , ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
		
	Возврат ПараметрыПодключения;

		
КонецФункции



Процедура ВыполнитьЗапросABB() Экспорт 
	
	пЕдИзмДлиныМетр =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("006");
	пЕдИзмВесаКг = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("166");
	пЕдИзмОбъемаМетр = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("113");
	
	пЕдИзмДлиныДм =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("005");
	пЕдИзмОбъемаДм = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("112");

	пЕдИзмДлиныСм =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("004");
	пЕдИзмОбъемаСм = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("111");

		
	СтруктураПараметровПодключения = ПолучитьПараметрыПодключенияPOSTABB();
	ТипТокена_Токен = СтруктураПараметровПодключения.tokenType + " " + СтруктураПараметровПодключения.token; 
	
	пФлагВсеПрочитано = Ложь;
	Страница = 1;
		//создадим цикл и прокрутим страницы - на 140720 их было 12
		Пока Не пФлагВсеПрочитано Цикл
			Если ЗначениеЗаполнено(Номенклатура) Тогда 
				Ресурс = "api/v1/products/?manufacturerCode=" + Номенклатура.Артикул;
				пФлагВсеПрочитано = Истина;
			Иначе
				Ресурс = "api/v1/products/?page=" + Страница + "&perPage=1000";
			КонецЕсли;

			РезультатЗапросаДанных = ВыполнитьЗапросGetABB(ТипТокена_Токен,Ресурс);
			
			Если РезультатЗапросаДанных.КодСостояния = 200 Тогда
				ПутьКФайлу = РезультатЗапросаДанных.ИмяФайлаОтвета;
				//прочитаем json
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
				пОтвет = ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Закрыть();
				тзВГХ = пОтвет.items;
				Если тзВГХ.Количество() = 0 Тогда
					пФлагВсеПрочитано = Истина;
				КонецЕсли;
				Для Каждого Стр из тзВГХ Цикл
					НоваяСтрока = Результат.Добавить();
					НоваяСтрока.Артикул = Стр.manufacturerCode;
					
					Если Стр.weight  <> Неопределено Тогда
						НоваяСтрока.ВесAPI = Формат(Стр.weight/1000,"ЧДЦ=3");  //ВГХ в граммах и их переводим в метры и кг
						НоваяСтрока.ЕдИзмВесAPI = пЕдИзмВесаКг;
					КонецЕсли;
					
					Если Стр.size <> Неопределено Тогда 
						пСтруктураДШВ = ПолучитьДШВ(Стр.size);
						НоваяСтрока.ДлинаAPI = пСтруктураДШВ.Длина;
						НоваяСтрока.ШиринаAPI = пСтруктураДШВ.Ширина;
						НоваяСтрока.ВысотаAPI = пСтруктураДШВ.Высота;
						НоваяСтрока.ЕдИзмВысотаAPI = СокрЛП(Стр.sizeUnit);
						НоваяСтрока.ЕдИзмШиринаAPI = СокрЛП(Стр.sizeUnit);
						НоваяСтрока.ЕдИзмДлинаAPI = СокрЛП(Стр.sizeUnit);
						НоваяСтрока.ЕдИзмОбъемAPI = "";
					//	пОбъем = пСтруктураДШВ.Длина*пСтруктураДШВ.Ширина*пСтруктураДШВ.Высота;
					//
					//	Если Окр(пОбъем/1000000000,3) > 0.001 Тогда 
					//		НоваяСтрока.ОбъемAPI = Окр(пОбъем/1000000000,3);
					//		НоваяСтрока.ЕдИзмОбъемAPI = пЕдИзмОбъемаМетр;
					//	ИначеЕсли Окр(пОбъем/1000000,3) > 0.001 Тогда
					//		НоваяСтрока.ОбъемAPI = Окр(пОбъем/1000000,3);
					//		НоваяСтрока.ЕдИзмОбъемAPI = пЕдИзмОбъемаДм;
					//	Иначе 
					//		НоваяСтрока.ОбъемAPI = Окр(пОбъем/1000,3);
					//		НоваяСтрока.ЕдИзмОбъемAPI = пЕдИзмОбъемаСм;
					//	КонецЕсли;
						//НоваяСтрока.ОбъемAPI = Формат(пСтруктураДШВ.Длина*пСтруктураДШВ.Ширина*пСтруктураДШВ.Высота/1000000000,"ЧДЦ=3");
					КонецЕсли;
					НоваяСтрока.ШтрихкодAPI = Стр.ean;
				КонецЦикла;
				Страница = Страница + 1;
			Иначе 
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	
		
КонецПроцедуры

Функция ВыполнитьЗапросGetABB(ТипТокена_Токен, Ресурс) 
	
//api дает взять максимум 1000 записей
	РезультатЗапросаДанных = Новый Структура;
	
	Сервер = "abb-api.ru";
	//Ресурс = "api/v1/products/?page=" + НомерСтраницы + "&perPage=1000";
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,,ssl1);
	//HTTP =  Новый HTTPСоединение(Сервер);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".xml");
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
		
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json"); 
	ЗаголовокHTTP.Вставить("Authorization", ТипТокена_Токен);
	
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс,ЗаголовокHTTP);
	
	РезультатЗапроса = HTTP.Получить(HTTPЗапрос,ИмяФайлаОтвета);
	//
	ТекстовыйФайл.Прочитать(ИмяФайлаОтвета, КодировкаТекста.UTF8);
	
	ТекстОтвета = ТекстовыйФайл.ПолучитьТекст();
    //ОбщегоНазначения.СообщитьПользователю(ТекстОтвета);
	РезультатЗапросаДанных.Вставить("КодСостояния",РезультатЗапроса.КодСостояния);
	РезультатЗапросаДанных.Вставить("ИмяФайлаОтвета",ИмяФайлаОтвета);
	
	Возврат РезультатЗапросаДанных;

	
КонецФункции	
	
Функция ПолучитьПараметрыПодключенияPOSTABB() 
	
	Сервер = "abb-api.ru";
	Ресурс = "api/v1/users/authenticate";
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,,ssl1);

//	HTTP =  Новый HTTPСоединение(Сервер);
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла(".xml");
	ФайлРезультата = ПолучитьИмяВременногоФайла(".xml");
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	
	//создадим запись json
	Структура = Новый Структура;
	Структура.Вставить("email","i.cherevach@rineco.ru");
	Структура.Вставить("password","FRsMPJ02xl6l71Ps2Egs3hhlSvQ3SNt03x3NP0qm");
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса,,,Новый ПараметрыЗаписиJSON(,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON,Структура);
	ЗаписьJSON.Закрыть();	
	//
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json"); 
		
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс,ЗаголовокHTTP);
	HTTPЗапрос.УстановитьИмяФайлаТела(ФайлЗапроса);
	
	HTTP.ОтправитьДляОбработки(HTTPЗапрос,ФайлРезультата);
	
	//прочитаем json
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ФайлРезультата);
	ПараметрыПодключения = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
		
	//пример = токен дается на 10 часов
	//{"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImkuY2hlcmV2YWNoQHJpbmVjby
	//5ydSIsImlhdCI6MTU5NDcwODQyMiwiZXhwIjoxNTk0NzQ0NDIyfQ.FgXK8Ds1j_I1AoFWRl9rEsxPWDM7GRMG2z34tZJ2jR0","tokenType":"Bearer"}
				
	// Обнулим запрос, чтобы освободить чтение ИмяФайлаЗапроса!
	HTTPЗапрос = Неопределено;
	
	Попытка
		УдалитьФайлы(ФайлЗапроса);
		УдалитьФайлы(ФайлРезультата);
	Исключение
		ЗаписьЖурналаРегистрации("ФоновыеЗадания.РегламентноеЗаданиеAPI_ABB_stockall", УровеньЖурналаРегистрации.Информация, , , ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
		
	Возврат ПараметрыПодключения;
		
КонецФункции

