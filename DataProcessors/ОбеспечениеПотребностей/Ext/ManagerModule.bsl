&Вместо("ТаблицаСпособовОбеспечения")
Процедура Рин1_ТаблицаСпособовОбеспечения(Параметры, АдресРезультата)
	
	СхемаКомпоновкиДанных = Обработки.ОбеспечениеПотребностей.ПолучитьМакет("МакетКомпоновкиДляСерверныхОтборов");
	СхемаКомпоновкиДанных.НаборыДанных.Набор.Запрос = ВременнаяТаблицаСпособовОбеспечения();
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Параметры.Настройки);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, "Набор");
	УдалитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДоступныеТипыОбеспечения", ДоступныеТипыОбеспечения());
	Запрос.УстановитьПараметр("ФОЗаказыНаПеремещенияВключена",
	ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение"));
	Запрос.УстановитьПараметр("ФОПроизводство2_2Включена",
	ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2"));
	Запрос.УстановитьПараметр("ОптимизироватьЗапасыРаспределительногоЦентра",
	Константы.ОптимизироватьЗапасыРаспределительногоЦентра.Получить());
	
	//bercut190120
	ТекстЗапроса = Запрос.Текст;
	СтрокаПоиска = "РегистрНакопления.ГрафикОтгрузкиТоваров КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияРаботами КАК ТаблицаВариантыОбеспеченияРаботами
	|		ПО (Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			И (ТаблицаВариантыОбеспеченияРаботами.Номенклатура = Т.Номенклатура)
	|			И (ТаблицаВариантыОбеспеченияРаботами.Характеристика = Т.Характеристика)
	|			И (ТаблицаВариантыОбеспеченияРаботами.РеквизитДопУпорядочивания = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК ТаблицаВариантыОбеспеченияТоварами
	|		ПО (Т.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)))
	|			И (ТаблицаВариантыОбеспеченияТоварами.Номенклатура = Т.Номенклатура)
	|			И (ТаблицаВариантыОбеспеченияТоварами.Характеристика = Т.Характеристика)
	|			И (ТаблицаВариантыОбеспеченияТоварами.Склад = Т.Склад)
	|			И (ТаблицаВариантыОбеспеченияТоварами.РеквизитДопУпорядочивания = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтФорматыСкладов КАК ТаблицаФорматыСкладов
	|		ПО (ТаблицаФорматыСкладов.Склад = Т.Склад)
	|			И (ТаблицаВариантыОбеспеченияТоварами.Номенклатура ЕСТЬ NULL)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК ТаблицаСхемыОбеспеченияСкладов
	|		ПО (ТаблицаСхемыОбеспеченияСкладов.СхемаОбеспечения = Т.Номенклатура.СхемаОбеспечения)";
	СтрокаЗамены = "РегистрНакопления.ГрафикОтгрузкиТоваров КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияРаботами КАК ТаблицаВариантыОбеспеченияРаботами
	|		ПО (Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			И (ТаблицаВариантыОбеспеченияРаботами.Номенклатура = Т.Номенклатура)
	|			И (ТаблицаВариантыОбеспеченияРаботами.Характеристика = Т.Характеристика)
	|			И (ТаблицаВариантыОбеспеченияРаботами.РеквизитДопУпорядочивания = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК ТаблицаВариантыОбеспеченияТоварами
	|		ПО (Т.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)))
	|			И (ТаблицаВариантыОбеспеченияТоварами.Номенклатура = Т.Номенклатура)
	|			И (ТаблицаВариантыОбеспеченияТоварами.Характеристика = Т.Характеристика)
	|			И (ТаблицаВариантыОбеспеченияТоварами.Склад = Т.Склад)
	|			И (ТаблицаВариантыОбеспеченияТоварами.РеквизитДопУпорядочивания = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтФорматыСкладов КАК ТаблицаФорматыСкладов
	|		ПО (ТаблицаФорматыСкладов.Склад = Т.Склад)
	|			И (ТаблицаВариантыОбеспеченияТоварами.Номенклатура ЕСТЬ NULL)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК ТаблицаСхемыОбеспеченияСкладов
	|		ПО (ТаблицаСхемыОбеспеченияСкладов.СхемаОбеспечения = Т.ГИГ_СхемаОбеспечения)";
	Если СтрНайти(ТекстЗапроса,СтрокаПоиска) > 0 Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,СтрокаПоиска,СтрокаЗамены);
	КонецЕсли;
	//
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Выполнить();
	
	// Актуализируем график заказов для используемых способов, записываем изменения в базу.
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня);
	Запрос.Текст = Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаАктуализацииСпособовОбеспечения();
	
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	Пока Выборка.Следующий() Цикл
		
		СпособОбъект = Выборка.СпособОбеспечения.ПолучитьОбъект();
		Справочники.СпособыОбеспеченияПотребностей.АктуализироватьГрафикЗаказовНаСервере(СпособОбъект, НачалоДня);
		СпособОбъект.Записать();
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КалендарьПредприятия", Константы.ОсновнойКалендарьПредприятия.Получить());
	Запрос.Текст = Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаРеквизитовСпособаОбеспечения(Неопределено);
	
	ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), АдресРезультата);
	
КонецПроцедуры
&Вместо("ТаблицаПотребностейПоЗаказамИОстатков")
Процедура Рин1_ТаблицаПотребностейПоЗаказамИОстатков(Параметры, АдресРезультата)
	
	ТекстыЗапросов = Новый Массив;
	
	Если Параметры.ТипОтбора = "ОтборПоЗначениям" Тогда
		
		Запрос = Новый Запрос();
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	&Номенклатура   КАК Номенклатура,
		|	&Характеристика КАК Характеристика,
		|	&Склад          КАК Склад,
		|	&ДатаОтгрузкиЗаказа      КАК ДатаОтгрузкиЗаказа,
		|	&СкладОтгрузкиЗаказа     КАК СкладОтгрузкиЗаказа,
		|	&ПодразделениеПолучатель КАК ПодразделениеПолучатель,
		|	ВЫБОР КОГДА &СпособОбеспечения = ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка) ТОГДА
		|			NULL
		|		ИНАЧЕ
		|			&СпособОбеспечения
		|	КОНЕЦ           КАК СпособОбеспечения,
		|	
		|	&Назначение     КАК Назначение,
		|	&Заказ          КАК Заказ,
		|	&ДатаОтгрузки   КАК ДатаОтгрузки,
		|	&Требуется      КАК Количество
		|ПОМЕСТИТЬ ВтТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Способы.СпособОбеспечения                                           КАК СпособОбеспечения,
		|	ЕСТЬNULL(Способы.СпособОбеспечения.ФормироватьПлановыеЗаказы, ЛОЖЬ) КАК ФормироватьПлановыеЗаказы,
		|	NULL                                                                КАК ДатаПоставки
		|ПОМЕСТИТЬ ВтСпособыОбеспеченияПереопределенный
		|ИЗ
		|	ВтТовары КАК Способы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");
		
		Для Каждого Свойство Из Параметры.Отбор Цикл
			Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		КонецЦикла;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
	Иначе
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		//++ НЕ УТКА
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = ВременнаяТаблицаКорректировкаЗаказаНаПроизводствоРабот();
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		//-- НЕ УТКА
		
		СхемаКомпоновкиДанных = Обработки.ОбеспечениеПотребностей.ПолучитьМакет("МакетКомпоновкиДляСерверныхОтборов");
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
		
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Параметры.Отбор);
		
		// Основной запрос
		Тексты = Новый Массив();
		//++ НЕ УТКА
		Тексты.Добавить(ВременнаяТаблицаКорректировкаЗаказаНаПроизводствоРаботФиктивная());
		//-- НЕ УТКА
		//++Шерстюк Ю.Ю. 23.11.2020
		//ищем в настройках отбора отбор по Не равно или Не всписке сегмента, в этом случае к типовому запросу добавим номенклатуру без сегмента
		пЭлОтбораПольз = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		пТипСегментыНоменклатуры = Тип("СправочникСсылка.СегментыНоменклатуры"); 
		пСписокЗначений = Тип("СписокЗначений");
		Для Каждого Стр из пЭлОтбораПольз Цикл
			Если ТипЗнч(Стр) = Тип("ОтборКомпоновкиДанных") Тогда //Произвольный отбор пользователя
				Для Каждого подВыборка из Стр.Элементы Цикл 
					Если ТипЗнч(подВыборка.ПравоеЗначение) = пТипСегментыНоменклатуры И подВыборка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
						 и подВыборка.Использование Тогда 
						пДобавитьНоменБезСегмента = Истина;
						Прервать;
					ИначеЕсли подВыборка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке и подВыборка.Использование 
							и ТипЗнч(подВыборка.ПравоеЗначение) = пСписокЗначений Тогда 
	                            Если подВыборка.ПравоеЗначение.Количество() > 0 Тогда 
									пДобавитьНоменБезСегмента = ?(ТипЗнч(подВыборка.ПравоеЗначение[0].Значение) = пТипСегментыНоменклатуры,Истина,Ложь);
									Если пДобавитьНоменБезСегмента Тогда 
										Прервать;
									КонецЕсли;
								Иначе
									пДобавитьНоменБезСегмента = Ложь;
								КонецЕсли;
					Иначе
						пДобавитьНоменБезСегмента = Ложь;
                    КонецЕсли;
			    КонецЦикла;
                Если пДобавитьНоменБезСегмента Тогда 
					Прервать;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Стр.ПравоеЗначение) = пТипСегментыНоменклатуры И Стр.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно 
				                											И Стр.Использование Тогда
				пДобавитьНоменБезСегмента = Истина;
				Прервать;
			ИначеЕсли ТипЗнч(Стр.ПравоеЗначение) = пСписокЗначений И  Стр.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
																   И Стр.Использование Тогда
				Если Стр.ПравоеЗначение.Количество() > 0 Тогда 
					пДобавитьНоменБезСегмента = ?(ТипЗнч(Стр.ПравоеЗначение[0].Значение) = пТипСегментыНоменклатуры,Истина,Ложь);
					Если пДобавитьНоменБезСегмента Тогда 
						Прервать;
					КонецЕсли;

				Иначе
					пДобавитьНоменБезСегмента = Ложь;
				КонецЕсли;
								
			Иначе	
				пДобавитьНоменБезСегмента = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если не пДобавитьНоменБезСегмента Тогда 
			Тексты.Добавить(ВременнаяТаблицаОтборПоСегментам());
		Иначе
			Тексты.Добавить(ВременнаяТаблицаОтборПоСегментамИНоменклатураБезСегмента());
		КонецЕсли;
		//Тексты.Добавить(ВременнаяТаблицаОтборПоСегментам());
		//--Шерстюк Ю.Ю.

		Тексты.Добавить(ВременнаяТаблицаОтборПоЗаказам());
		
		//bercut190120/130320
		ТекстДляПравки = ВременнаяТаблицаПотребностиВсехСкладовПоЗаказам();
		Если СтрНайти(ТекстДляПравки,"Товары.Номенклатура.СхемаОбеспечения") > 0 Тогда
			
			Если СтрНайти(ТекстДляПравки,"ТаблицаСхемыОбеспеченияСкладовТовары.СхемаОбеспечения = Товары.Номенклатура.СхемаОбеспечения") > 0 Тогда
				ТекстДляПравки = СтрЗаменить(ТекстДляПравки,"ТаблицаСхемыОбеспеченияСкладовТовары.СхемаОбеспечения = Товары.Номенклатура.СхемаОбеспечения",
				"(ВЫБОР
				|     КОГДА Товары.ГИГ_СхемаОбеспечения = ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка)
				| 	      ТОГДА ТаблицаСхемыОбеспеченияСкладовТовары.СхемаОбеспечения = Товары.Номенклатура.СхемаОбеспечения
				|     ИНАЧЕ ТаблицаСхемыОбеспеченияСкладовТовары.СхемаОбеспечения = Товары.ГИГ_СхемаОбеспечения
				|КОНЕЦ)");
			КонецЕсли;
			Если СтрНайти(ТекстДляПравки,"ТаблицаСхемыОбеспеченияФорматовТовары.СхемаОбеспечения = Товары.Номенклатура.СхемаОбеспечения") > 0 Тогда
				ТекстДляПравки = СтрЗаменить(ТекстДляПравки,"ТаблицаСхемыОбеспеченияФорматовТовары.СхемаОбеспечения = Товары.Номенклатура.СхемаОбеспечения",
				"(ВЫБОР
				|     КОГДА Товары.ГИГ_СхемаОбеспечения = ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка)
				| 	      ТОГДА ТаблицаСхемыОбеспеченияФорматовТовары.СхемаОбеспечения = Товары.Номенклатура.СхемаОбеспечения
				|     ИНАЧЕ ТаблицаСхемыОбеспеченияФорматовТовары.СхемаОбеспечения = Товары.ГИГ_СхемаОбеспечения
				|КОНЕЦ)");
			КонецЕсли;			
			Тексты.Добавить(ТекстДляПравки);
			
		Иначе
			Тексты.Добавить(ВременнаяТаблицаПотребностиВсехСкладовПоЗаказам());
		КонецЕсли;
		//
		
		Тексты.Добавить(ВременнаяТаблицаРазличнаяНоменклатура("ПотребностиВсехСкладовПоЗаказам"));
		Тексты.Добавить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаТопологияСкладов("РазличнаяНоменклатура"));
		Тексты.Добавить(ВременнаяТаблицаПотребностиВыбранныхСкладов());
		Тексты.Добавить(ВыборкаПервойЗаписиПотребностейПоЗаказамДляКомпоновкиЗапроса());
		Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
		
		СхемаКомпоновкиДанных.НаборыДанных.Набор.Запрос = Текст;
		Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, "Набор");
		УдалитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		//++ НЕ УТКА
		Позиция = СтрНайти(Запрос.Текст, "ПОМЕСТИТЬ КорректировкаЗаказаНаПроизводствоРабот");
		Позиция = СтрНайти(Запрос.Текст, "ВЫБРАТЬ", НаправлениеПоиска.СНачала, Позиция);
		Запрос.Текст = Сред(Запрос.Текст, Позиция);
		//-- НЕ УТКА
		
		// Отделим часть запроса, которую необходимо выполнить привилегированно
		Позиция = СтрНайти(Запрос.Текст, "УНИЧТОЖИТЬ ВтОстаткиОбособленныхТоваров");
		Позиция = СтрНайти(Запрос.Текст, "ВЫБРАТЬ", НаправлениеПоиска.СНачала, Позиция);
		ТекстЗапросаПривилегированно = Сред(Запрос.Текст, Позиция);
		Запрос.Текст = Лев(Запрос.Текст, Позиция - 1);
		Запрос.УстановитьПараметр("ОптимизироватьЗапасыРаспределительногоЦентра",
		Константы.ОптимизироватьЗапасыРаспределительногоЦентра.Получить());
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Текст = ТекстЗапросаПривилегированно;
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Способы.СпособОбеспечения         КАК СпособОбеспечения,
		|	Способы.ФормироватьПлановыеЗаказы КАК ФормироватьПлановыеЗаказы,
		|	Способы.ДатаПоставки              КАК ДатаПоставки
		|ПОМЕСТИТЬ ВтСпособыОбеспеченияПереопределенный
		|ИЗ
		|	&ТаблицаСпособовОбеспечения КАК Способы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");
		
		Запрос.УстановитьПараметр("ТаблицаСпособовОбеспечения", Параметры.ТаблицаСпособовОбеспечения);
		
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура            КАК Номенклатура,
		|	Товары.Характеристика          КАК Характеристика,
		|	Товары.Склад                   КАК Склад,
		|	Товары.Назначение              КАК Назначение,
		|	Товары.ПодразделениеПолучатель КАК Подразделение
		|ПОМЕСТИТЬ ТоварыИСкладыПопавшиеВОбработку
		|ИЗ
		|	ВтТовары КАК Товары
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");
		
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.СпособОбеспечения КАК Ссылка
	|ПОМЕСТИТЬ ВтСпособыОбеспечения
	|ИЗ
	|	ВтТовары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияПереопределенный КАК ТаблицаСпособыОбеспеченияПререопределенный
	|		ПО ЕСТЬNULL(Товары.СпособОбеспечения, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))
	|			= ТаблицаСпособыОбеспеченияПререопределенный.СпособОбеспечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|");
	ТекстыЗапросов.Добавить(Справочники.СпособыОбеспеченияПотребностей.ВременнаяТаблицаДатПоставок());
	
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Склад             КАК Склад,
	|	Товары.СпособОбеспечения КАК СпособОбеспечения
	|
	|ПОМЕСТИТЬ ВтСкладыИСпособыОбеспечения
	|ИЗ
	|	ВтТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|");
	ТекстыЗапросов.Добавить(Справочники.СпособыОбеспеченияПотребностей.ВременнаяТаблицаИнтерваловРаботыСкладов());
	
	ТекстыЗапросов.Добавить(ВременнаяТаблицаГраницыОбеспечиваемогоПериода());
	ТекстыЗапросов.Добавить(ВременнаяТаблицаДанныеЗаполненияЗаказаПоставщику());
	
	Текст =
	"ВЫБРАТЬ
	|	Т.Номенклатура                                   КАК Номенклатура,
	|	Т.Характеристика                                 КАК Характеристика,
	|	Т.Склад                                          КАК Склад," +
	?(Параметры.ТипОтбора = "ОтборПоЗначениям", "",
	"
	|	ЕСТЬNULL(ТопологияСкладов.Центр,
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))    КАК РаспределительныйЦентр,
	|	НЕ ТоварыИСкладыПопавшиеВОбработку.Номенклатура ЕСТЬ NULL КАК РаспределительныйЦентрЕстьВТаблице,") + "
	|	Т.СкладОтгрузкиЗаказа                            КАК СкладОтгрузкиЗаказа,
	|	Т.ДатаОтгрузкиЗаказа                             КАК ДатаОтгрузкиЗаказа,
	|	Т.Номенклатура.Наименование                      КАК НоменклатураНаименование,
	|	Т.Характеристика.Наименование                    КАК ХарактеристикаНаименование,
	|	Т.Склад.Наименование                             КАК СкладНаименование,
	|
	|	Т.ПодразделениеПолучатель                        КАК ПодразделениеПолучатель,
	|	Т.Назначение                                     КАК Назначение,
	|	Т.Заказ                                          КАК Заказ,
	|	СпрПриоритет.Ссылка                              КАК Приоритет,
	|	ЕСТЬNULL(СпрПриоритет.РеквизитДопУпорядочивания,
	|		0)                                           КАК ПриоритетРеквизитДопУпорядочивания,
	|	Т.ДатаОтгрузки                                   КАК ДатаОтгрузки,
	|	Т.Количество                                     КАК Требуется,
	|
	|	ВЫБОР КОГДА Т.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		 И ТоварныеОграничения.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
	|		 И ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса = ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.НезависимоОтЗапасов) ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ КАК ОбеспечиватьНезависимоОтЗапасов,
	|	
	|	(Т.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ТоварныеОграничения.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
	|		И ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса = ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.НезависимоОтЗапасов))
	|	 ИЛИ Т.СкладОтгрузкиЗаказа = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	 ИЛИ Т.Склад = Т.СкладОтгрузкиЗаказа                КАК РазмещатьЗаказыНаОтгрузку,
	// Параметры номенклатуры
	|	&ТекстЗапросаВесНоменклатуры                        КАК Вес,
	|	Т.Номенклатура.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	Т.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипЕдиницыИзмерения,
	|	Т.Номенклатура.Код                                  КАК Код,
	|	Т.Номенклатура.Артикул                              КАК Артикул,
	|	Т.Номенклатура.ИспользоватьУпаковки                 КАК ИспользоватьУпаковки,
	|
	|	ВЫБОР КОГДА Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ КАК ЭтоРабота,
	|
	// Способ обеспечения
	|	Т.СпособОбеспечения                                  КАК СпособОбеспечения,
	|	ЕСТЬNULL(Т.СпособОбеспечения.ТипОбеспечения,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка))  КАК ТипОбеспечения,
	|	ЕСТЬNULL(ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы, ЛОЖЬ) КАК ФормироватьПлановыеЗаказы,
	|	ВЫБОР КОГДА ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы ТОГДА
	|			ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки
	|		ИНАЧЕ
	// При методе Заказ под заказ и правиле Заказ при достижении точки заказа, источником является ДатаОтгрузки заказа,
	// если она больше даты возможной поставки по способу обеспечения.
	|			ВЫБОР КОГДА (НЕ ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы)
	|				И (ТоварныеОграничения.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
	|					ИЛИ ТоварныеОграничения.МетодОбеспеченияПотребностей ЕСТЬ NULL) ТОГДА
	|				
	|				ВЫБОР КОГДА ЕСТЬNULL(ТаблицаСпособовОбеспеченияПереопределенный.ДатаПоставки, ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки) >
	|					
	|					ВЫБОР КОГДА Т.ДатаОтгрузки > &НачалоТекущегоДня ТОГДА
	|								Т.ДатаОтгрузки
	|							ИНАЧЕ
	|								&НачалоТекущегоДня
	|						КОНЕЦ
	|					
	|					ТОГДА
	|							ЕСТЬNULL(ТаблицаСпособовОбеспеченияПереопределенный.ДатаПоставки, ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки)
	|					ИНАЧЕ
	|						
	|						ВЫБОР КОГДА Т.ДатаОтгрузки > &НачалоТекущегоДня ТОГДА
	|									Т.ДатаОтгрузки
	|								ИНАЧЕ
	|									&НачалоТекущегоДня
	|							КОНЕЦ
	|						
	|				КОНЕЦ
	|					
	|			ИНАЧЕ
	|				ЕСТЬNULL(ТаблицаСпособовОбеспеченияПереопределенный.ДатаПоставки,
	|					ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки)
	|			КОНЕЦ
	|		КОНЕЦ                                            КАК ДатаПоставки,
	|	
	|	ЕСТЬNULL(ТаблицаСпособовОбеспеченияПереопределенный.ДатаПоставки,
	|		ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки) КАК ДатаВозможнойПоставки,
	|	
	|	НЕ ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы
	|		И (ТоварныеОграничения.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
	|					ИЛИ ТоварныеОграничения.МетодОбеспеченияПотребностей ЕСТЬ NULL) КАК ДатаПоставкиРассчитанаПоДатеОтгрузки,
	|	
	|	ТаблицаСпособовОбеспечения.ПлановаяДатаЗаказа        КАК ДатаЗаказа,
	|	ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки      КАК ДатаБлижайшейПоставкиПоГрафику,
	|	ЕСТЬNULL(ТаблицаСпособовОбеспечения.ДатаСледующейПоставки, ДАТАВРЕМЯ(1,1,1)) КАК ДатаСледующейПоставкиПоГрафику,
	|	ЕСТЬNULL(ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод, 0)      КАК ОбеспечиваемыйПериод,
	|	ВозможнаяПоставка.КоличествоДней                     КАК СрокПоставки,
	|	ЕСТЬNULL(ВЫБОР КОГДА СпрКалендарьСклада.Ссылка ЕСТЬ NULL ТОГДА
	|				ДОБАВИТЬКДАТЕ(ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки,
	|					ДЕНЬ, ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод)
	|			ИНАЧЕ
	|				ГраницаПериода.Дата
	|		КОНЕЦ, ДАТАВРЕМЯ(1,1,1)) КАК ГраницаОбеспечиваемогоПериода,
	|	ЕСТЬNULL(&ФОЗаказыНаПеремещенияВключена И НЕ Т.Склад.ЦеховаяКладовая
	|		ИЛИ &ФОПроизводство2_2Включена И Т.Склад.ЦеховаяКладовая, ЛОЖЬ) КАК ПеремещениеРазрешено,
	|
	// Диагностика проблем
	|	СпрКалендарьСклада.Ссылка                                       КАК КалендарьСклада,
	|	ОсновнойКалендарь.Значение                                      КАК КалендарьПредприятия,
	|
	|	ТаблицаСпособовОбеспечения.ОшибкаНеЗаполненкалендарьПредприятия КАК ОшибкаНеЗаполненКалендарьПредприятия,
	|	ВЫБОР КОГДА ВозможнаяПоставка.КоличествоДней ЕСТЬ NULL
	|			ИЛИ ГраницаПериода.Дата ЕСТЬ NULL ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ                                                       КАК ОшибкаНеЗаполненКалендарьСклада,
	|
	// Условия закупок
	|	//%УсловияЗакупок
	|	ЕСТЬNULL(ДанныеЗаполнения.Партнер,
	|		Т.СпособОбеспечения.ИсточникОбеспеченияПотребностей)        КАК ИсточникОбеспечения,
	|	ВЫБОР КОГДА Т.СпособОбеспечения.Соглашение <> ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) ТОГДА
	|				Т.СпособОбеспечения.Соглашение
	|			ИНАЧЕ
	|				ДанныеЗаполнения.Соглашение
	|		КОНЕЦ                                                       КАК Соглашение,
	|	СпрУпаковки.Ссылка                                              КАК УпаковкаЗаказа,
	|	ЕСТЬNULL(СпрУпаковки.Числитель, 1)                              КАК ЧислительУпаковки,
	|	ЕСТЬNULL(СпрУпаковки.Знаменатель, 1)                            КАК ЗнаменательУпаковки
	|ИЗ
	|	ВтТовары КАК Т
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
	|		ПО ИСТИНА
	|
//++Шерстюк Ю.Ю. обновление с 2.4.9.82 кто-то изменил соединение без комментариев	
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияПереопределенный КАК ТаблицаСпособовОбеспеченияПереопределенный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияПереопределенный КАК ТаблицаСпособовОбеспеченияПереопределенный
//--Шерстюк Ю.Ю.	
	|		ПО ЕСТЬNULL(Т.СпособОбеспечения, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))
	|			= ТаблицаСпособовОбеспеченияПереопределенный.СпособОбеспечения
	|		 И ВЫБОР КОГДА Т.СпособОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение) ТОГДА
	|					ЕСТЬNULL(&ФОЗаказыНаПеремещенияВключена И НЕ Т.Склад.ЦеховаяКладовая
	|						ИЛИ &ФОПроизводство2_2Включена И Т.Склад.ЦеховаяКладовая, ЛОЖЬ)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари КАК СпрКалендарьСклада
	|		ПО ВЫБОР КОГДА Т.Склад.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
	|					Т.Склад.Календарь
	|				ИНАЧЕ
	|					ОсновнойКалендарь.Значение
	|			КОНЕЦ = СпрКалендарьСклада.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияДатыПоставок КАК ТаблицаСпособовОбеспечения
	|		ПО Т.СпособОбеспечения = ТаблицаСпособовОбеспечения.Ссылка
	|" +
	?(Параметры.ТипОтбора = "ОтборПоЗначениям", "",
	"
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТопологияСкладов КАК ТопологияСкладов
	|		ПО ТопологияСкладов.Номенклатура   = Т.Номенклатура
	|		 И ТопологияСкладов.Характеристика = Т.Характеристика
	|		 И ТопологияСкладов.Склад          = Т.Склад
	|		 И ТопологияСкладов.Центр         <> Т.Склад
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыИСкладыПопавшиеВОбработку КАК ТоварыИСкладыПопавшиеВОбработку
	|		ПО ТоварыИСкладыПопавшиеВОбработку.Номенклатура   = Т.Номенклатура
	|		 И ТоварыИСкладыПопавшиеВОбработку.Характеристика = Т.Характеристика
	|		 И ТоварыИСкладыПопавшиеВОбработку.Назначение     = Т.Назначение
	|		 И ТоварыИСкладыПопавшиеВОбработку.Склад          = ТопологияСкладов.Центр") + "
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК РеквизитыСпособаОбеспечения
	|		ПО РеквизитыСпособаОбеспечения.Ссылка = Т.СпособОбеспечения
	|		 И РеквизитыСпособаОбеспечения.ДлительностьВДнях > 0
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИнтервалКалендарногоГрафика КАК ВозможнаяПоставка
	|		ПО СпрКалендарьСклада.Ссылка = ВозможнаяПоставка.Календарь
	|		 И &НачалоТекущегоДня = ВозможнаяПоставка.Дата1
	|		 И ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки = ВозможнаяПоставка.Дата2
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыГрафика КАК ГраницаПериода
	|		ПО СпрКалендарьСклада.Ссылка = ГраницаПериода.Календарь
	|		 И ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод  = ГраницаПериода.ЧислоДней
	|		 И ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки = ГраницаПериода.ДатаОтсчета
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеЗаполненияЗаказаПоставщику КАК ДанныеЗаполнения
	|		ПО Т.Номенклатура    = ДанныеЗаполнения.Номенклатура
	|		 И Т.Характеристика  = ДанныеЗаполнения.Характеристика
	|		 И Т.Склад           = ДанныеЗаполнения.Склад
	|		 И ЕСТЬNULL(Т.СпособОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка), ИСТИНА)
	|		 И Т.СпособОбеспечения.ИсточникОбеспеченияПотребностей.Ссылка ЕСТЬ NULL
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоставщиков КАК ЦеныПоставщиков
	|		ПО Т.Номенклатура       = ЦеныПоставщиков.Номенклатура
	|			И Т.Характеристика  = ЦеныПоставщиков.Характеристика
	|			И ЕСТЬNULL(ДанныеЗаполнения.ВидЦеныПоставщика, Т.СпособОбеспечения.ВидЦеныПоставщика) = ЦеныПоставщиков.ВидЦеныПоставщика
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныПоставщиков.Валюта = КурсыВалют.Валюта
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютаСоглашения
	|		ПО ЕСТЬNULL(ДанныеЗаполнения.Валюта, Т.СпособОбеспечения.Соглашение.Валюта) = КурсВалютаСоглашения.Валюта
	|
	//++ НЕ УТКА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДокументЭтап
	|		ПО ДокументЭтап.Ссылка = Т.Заказ
	//-- НЕ УТКА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Приоритеты КАК СпрПриоритет
	|		ПО &ПриоритетУсловие = СпрПриоритет.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
	|		ПО &ПодстановкаТоварногоОграничения
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК УпаковкиЗаказа
	|		ПО &ПодстановкаУпаковкиЗаказа
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
	|		ПО УпаковкиЗаказа.УпаковкаЗаказа = СпрУпаковки.Ссылка
	|
	|//%Ассортимент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетРеквизитДопУпорядочивания,
	|	ДатаОтгрузки,
	|	Заказ,
	|	НоменклатураНаименование, ХарактеристикаНаименование, СкладНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтСпособыОбеспечения;";
	
	Текст = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Текст,
	"ПодстановкаТоварногоОграничения");
	Текст = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединениеДляУпаковкиЗаказа(Текст,
	"ПодстановкаУпаковкиЗаказа");
	Текст = СтрЗаменить(Текст, "&ТекстЗапросаВесНоменклатуры",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
	"Т.Номенклатура.ЕдиницаИзмерения",
	"Т.Номенклатура"));
	
	ТекстПриоритет = "Т.Заказ.Приоритет";
	Если Параметры.ТипОтбора = "ОтборПоЗначениям" И Параметры.Отбор.Заказ.Метаданные().Реквизиты.Найти("Приоритет") = Неопределено Тогда
		ТекстПриоритет = "NULL";
	КонецЕсли;
	//++ НЕ УТКА
	ТекстПриоритет = "ЕСТЬNULL(ДокументЭтап.Распоряжение.Приоритет, Т.Заказ.Приоритет)";
	Если Параметры.ТипОтбора = "ОтборПоЗначениям" И Параметры.Отбор.Заказ.Метаданные().Реквизиты.Найти("Приоритет") = Неопределено Тогда
		ТекстПриоритет = "NULL";
		Если ТипЗнч(Параметры.Отбор.Заказ) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			ТекстПриоритет = "ДокументЭтап.Распоряжение.Приоритет";
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТКА
	Текст = СтрЗаменить(Текст, "&ПриоритетУсловие", ТекстПриоритет);
	
	Текст = СтрЗаменить(Текст, "//%УсловияЗакупок", ТекстПолейУсловияЗакупок());
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") Тогда
		Текст = СтрЗаменить(Текст, "//%Ассортимент", ТекстУсловияАссортимент());
	Иначе
		Текст = СтрЗаменить(Текст, "//%Ассортимент", "");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(Текст);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов);
	
	Запрос.УстановитьПараметр("ФОЗаказыНаПеремещенияВключена",
	ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение"));
	Запрос.УстановитьПараметр("ФОПроизводство2_2Включена",
	ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2"));
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоДня);
	
	КоэффициентВалютыУпрУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыУправленческогоУчета(НачалоДня);
	Запрос.УстановитьПараметр("КоэффициентВалютыУпрУчета", КоэффициентВалютыУпрУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();
	
	Если Параметры.ТипОтбора <> "ОтборПоЗначениям" Тогда
		
		Поля = "Номенклатура,Характеристика,Склад,КЗаказу";
		ТаблицаЗапасы = Параметры.ТаблицаЗапасы.Скопировать(Новый Структура("Отметка", Истина), Поля);
		Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
		
		ТекстыЗапросов = Новый Массив();
		
		Текст =
		"ВЫБРАТЬ
		|	Запасы.Номенклатура   КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.Склад          КАК Склад,
		|	Запасы.КЗаказу        КАК КЗаказу
		|ПОМЕСТИТЬ ВтЗапасы
		|ИЗ
		|	&ТаблицаЗапасы КАК Запасы
		|ГДЕ
		|	Запасы.КЗаказу > 0";
		
		ТекстыЗапросов.Добавить(Текст);
		
		ТекстыЗапросов.Добавить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаРазличныеТоварыИСклады("ТоварыИСкладыПопавшиеВОбработку", Истина));
		ТекстыЗапросов.Добавить(ВременнаяТаблицаСвободныеОстатки(Истина));
		ТекстыЗапросов.Добавить(ВременнаяТаблицаЗаказыКПоступлениюИОтгрузке(Истина));
		
		Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура                                    КАК Номенклатура,
		|	Товары.Характеристика                                  КАК Характеристика,
		|	Товары.Склад                                           КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеПолучатель,
		|	Товары.Назначение                                      КАК Назначение,
		|	
		|	ВЫБОР КОГДА Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ИЛИ НастройкаПоддержанияЗапаса.ОбеспечениеЗаказовПриПоддержанииЗапаса ЕСТЬ NULL
		|			ИЛИ НастройкаПоддержанияЗапаса.ОбеспечениеЗаказовПриПоддержанииЗапаса
		|				= ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов) ТОГДА
		|			
		|				ЕСТЬNULL(Запасы.КЗаказу, 0)
		|					+ ЕСТЬNULL(Остатки.ВНаличииМинусРезерв, 0)
		|					+ ЕСТЬNULL(Заказы.ПоступитМинусРезерв, 0)
		|					- ЕСТЬNULL(ЗаказыВнутриСети.КРезервированию, 0)
		|			
		|			ИНАЧЕ // в режиме Обеспечивать независимо к резервированию берутся только излишки (остаток > максимального запаса и т.п.)
		|				
		|				ВЫБОР КОГДА ЕСТЬNULL(Заказы.ПоступитМинусРезерв, 0)
		|								- ЕСТЬNULL(ЗаказыВнутриСети.КРезервированию, 0)
		|								- ЕСТЬNULL(НастройкаПоддержанияЗапаса.МинимальноеКоличествоЗапаса, 0) <= 0 ТОГДА
		|							
		|							ЕСТЬNULL(Остатки.ВНаличииМинусРезерв, 0)
		|								- ВЫБОР КОГДА ЕСТЬNULL(Заказы.ПоступитМинусРезерв, 0) - ЕСТЬNULL(ЗаказыВнутриСети.КРезервированию, 0) > 0 ТОГДА
		|											0
		|										ИНАЧЕ
		|											ЕСТЬNULL(ЗаказыВнутриСети.КРезервированию, 0) - ЕСТЬNULL(Заказы.ПоступитМинусРезерв, 0)
		|									КОНЕЦ
		|									- ЕСТЬNULL(НастройкаПоддержанияЗапаса.МаксимальноеКоличествоЗапаса, 0)
		|						            - ЕСТЬNULL(НастройкаПоддержанияЗапаса.СтраховоеКоличествоЗапаса, 0)
		|
		|						ИНАЧЕ
		|							
		|							ЕСТЬNULL(Остатки.ВНаличииМинусРезерв, 0)
		|								+ ЕСТЬNULL(Заказы.ПоступитМинусРезерв, 0)
		|								- ЕСТЬNULL(ЗаказыВнутриСети.КРезервированию, 0)
		|								- ЕСТЬNULL(НастройкаПоддержанияЗапаса.МаксимальноеКоличествоЗапаса, 0)
		|								- ЕСТЬNULL(НастройкаПоддержанияЗапаса.МинимальноеКоличествоЗапаса, 0)
		|						        - ЕСТЬNULL(НастройкаПоддержанияЗапаса.СтраховоеКоличествоЗапаса, 0)
		|
		|					КОНЕЦ
		|					
		|		КОНЕЦ КАК КРезервированию
		|ИЗ
		|	ТоварыИСкладыПопавшиеВОбработку КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК Остатки
		|		ПО Остатки.Номенклатура   = Товары.Номенклатура
		|		 И Остатки.Характеристика = Товары.Характеристика
		|		 И Остатки.Склад          = Товары.Склад
		|		 И Остатки.Назначение     = Товары.Назначение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаказы КАК Заказы
		|		ПО Заказы.Номенклатура   = Товары.Номенклатура
		|		 И Заказы.Характеристика = Товары.Характеристика
		|		 И Заказы.Склад          = Товары.Склад
		|		 И Заказы.Назначение     = Товары.Назначение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаказыРаспределительнойСетиНеОтгруженные КАК ЗаказыВнутриСети
		|		ПО ЗаказыВнутриСети.Номенклатура   = Товары.Номенклатура
		|		 И ЗаказыВнутриСети.Характеристика = Товары.Характеристика
		|		 И ЗаказыВнутриСети.ЦентрСети      = Товары.Склад
		|		 И ЗаказыВнутриСети.Назначение     = Товары.Назначение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗапасы КАК Запасы
		|		ПО Запасы.Номенклатура = Товары.Номенклатура
		|		 И Запасы.Характеристика = Товары.Характеристика
		|		 И Запасы.Склад          = Товары.Склад
		|		 И Товары.Назначение     = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаПоддержанияЗапаса
		|		ПО &ПодстановкаТоварногоОграничения
		|ГДЕ
		|	Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботыНабор.Номенклатура                 КАК Номенклатура,
		|	РаботыНабор.Характеристика               КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
		|	РаботыНабор.Подразделение                КАК ПодразделениеПолучатель,
		|	РаботыНабор.Назначение                   КАК Назначение,
		|	СУММА(РаботыНабор.КОбеспечениюРасход)    КАК КРезервированию
		|ИЗ(
		|	ВЫБРАТЬ
		|		Работы.Номенклатура       КАК Номенклатура,
		|		Работы.Характеристика     КАК Характеристика,
		|		Работы.Подразделение      КАК Подразделение,
		|		Работы.Назначение         КАК Назначение,
		|		Работы.КОбеспечениюРасход КАК КОбеспечениюРасход
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказовРаботами.Обороты(,,,
		|			(Номенклатура, Характеристика, Назначение, Подразделение) В(
		|				ВЫБРАТЬ
		|					Фильтр.Номенклатура   КАК Номенклатура,
		|					Фильтр.Характеристика КАК Характеристика,
		|					Фильтр.Назначение     КАК Назначение,
		|					Фильтр.Подразделение  КАК Подразделение
		|				ИЗ
		|					ТоварыИСкладыПопавшиеВОбработку КАК Фильтр)) КАК Работы
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Товары.Номенклатура   КАК Номенклатура,
		|		Товары.Характеристика КАК Характеристика,
		|		Товары.Подразделение  КАК Подразделение,
		|		Товары.Назначение     КАК Назначение,
		|		Товары.Количество     КАК КОбеспечениюРасход
		|	ИЗ
		|		Документ.ЗаказПоставщику.Товары КАК Товары
		|			
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыИСкладыПопавшиеВОбработку КАК Фильтр
		|			ПО Товары.Номенклатура   = Фильтр.Номенклатура
		|			 И Товары.Характеристика = Фильтр.Характеристика
		|			 И Товары.Подразделение  = Фильтр.Подразделение
		|			 И Товары.Назначение     = Фильтр.Назначение
		|	ГДЕ
		|		Товары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
		|			И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			И НЕ Товары.Отменено
		|			И Товары.Ссылка.Проведен) КАК РаботыНабор
		|	СГРУППИРОВАТЬ ПО
		|		РаботыНабор.Номенклатура,
		|		РаботыНабор.Характеристика,
		|		РаботыНабор.Подразделение,
		|		РаботыНабор.Назначение";
		ТекстыЗапросов.Добавить(Текст);
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.Текст = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Запрос.Текст, "ПодстановкаТоварногоОграничения", 
		"Товары.Номенклатура,Товары.Характеристика,Товары.Склад", "НастройкаПоддержанияЗапаса");
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаОстатки = РезультатЗапроса.Выгрузить();
		ТаблицаОстатки.Индексы.Добавить("Номенклатура, Характеристика, Склад, ПодразделениеПолучатель, Назначение");
		
		ТаблицаОстатковНаВсехСкладах = Новый ТаблицаЗначений();
		ТаблицаОстатковНаВсехСкладах.Колонки.Добавить("Номенклатура");
		ТаблицаОстатковНаВсехСкладах.Колонки.Добавить("Характеристика");
		ТаблицаОстатковНаВсехСкладах.Колонки.Добавить("Назначение");
		ТаблицаОстатковНаВсехСкладах.Колонки.Добавить("КРезервированию");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПеремещениемОбособленныхТоваров") Тогда
			
			// Получаем все, что заказано по всем складам (Потребность, всего - КЗаказу).
			// Вычитаем разницу (Потребность, всего - Потребность, попавшая в обработку).
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Набор.Номенклатура           КАК Номенклатура,
			|	Набор.Характеристика         КАК Характеристика,
			|	Набор.Назначение             КАК Назначение,
			|	СУММА(Набор.КРезервированию) КАК КРезервированию
			|ИЗ(
			|	ВЫБРАТЬ
			|		ОстаткиОбеспечениеЗаказов.Номенклатура         КАК Номенклатура,
			|		ОстаткиОбеспечениеЗаказов.Характеристика       КАК Характеристика,
			|		ОстаткиОбеспечениеЗаказов.Назначение           КАК Назначение,
			|		ОстаткиОбеспечениеЗаказов.Склад                КАК Склад,
			|		- ОстаткиОбеспечениеЗаказов.КЗаказуОстаток     КАК КРезервированию
			|	ИЗ
			|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
			|			(Номенклатура, Характеристика, Назначение) В(
			|				ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Товары.Номенклатура   КАК Номенклатура,
			|					Товары.Характеристика КАК Характеристика,
			|					Товары.Назначение     КАК Назначение
			|				ИЗ
			|					РазличныеТоварыИСклады КАК Товары
			|				ГДЕ
			|					Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))) КАК ОстаткиОбеспечениеЗаказов
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОстаткиОбеспечениеЗаказов.Номенклатура         КАК Номенклатура,
			|		ОстаткиОбеспечениеЗаказов.Характеристика       КАК Характеристика,
			|		ОстаткиОбеспечениеЗаказов.Назначение           КАК Назначение,
			|		ОстаткиОбеспечениеЗаказов.Склад                КАК Склад,
			|		ОстаткиОбеспечениеЗаказов.ПотребностьОстаток   КАК КРезервированию
			|	ИЗ
			|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
			|			(Номенклатура, Характеристика, Назначение, Склад) В(
			|				ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Товары.Номенклатура   КАК Номенклатура,
			|					Товары.Характеристика КАК Характеристика,
			|					Товары.Назначение     КАК Назначение,
			|					Товары.Склад          КАК Склад
			|				ИЗ
			|					РазличныеТоварыИСклады КАК Товары
			|				ГДЕ
			|					Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))) КАК ОстаткиОбеспечениеЗаказов
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗаказыВнутриСети.Номенклатура     КАК Номенклатура,
			|		ЗаказыВнутриСети.Характеристика   КАК Характеристика,
			|		ЗаказыВнутриСети.Назначение       КАК Назначение,
			|		ЗаказыВнутриСети.ЦентрСети        КАК Склад,
			|		-ЗаказыВнутриСети.КРезервированию КАК КРезервированию
			|	ИЗ
			|		ВтТовары КАК Таблица
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаказыРаспределительнойСетиНеОтгруженные КАК ЗаказыВнутриСети
			|			ПО ЗаказыВнутриСети.Номенклатура   = Таблица.Номенклатура
			|			 И ЗаказыВнутриСети.Характеристика = Таблица.Характеристика
			|			 И ЗаказыВнутриСети.ЦентрСети      = Таблица.Склад
			|			 И ЗаказыВнутриСети.Назначение     = Таблица.Назначение) КАК Набор
			|СГРУППИРОВАТЬ ПО
			|	Набор.Номенклатура, Набор.Характеристика, Набор.Назначение
			|ИМЕЮЩИЕ
			|	СУММА(Набор.КРезервированию) > 0";
			
			ТаблицаОстатковНаВсехСкладах = Запрос.Выполнить().Выгрузить();
			ТаблицаОстатковНаВсехСкладах.Индексы.Добавить("Номенклатура, Характеристика, Назначение");
			
		КонецЕсли;
		
		//++ НЕ УТКА
		ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов(Запрос.МенеджерВременныхТаблиц);
		Если ЗначениеЗаполнено(ТаблицаПолуфабрикатов) Тогда
			
			УдалитьСтрокиИзТаблицы(Таблица, ТаблицаПолуфабрикатов, "Требуется", "Заказ,Номенклатура,Характеристика,Склад,Назначение");
			УдалитьСтрокиИзТаблицы(ТаблицаОстатки, ТаблицаПолуфабрикатов, "КРезервированию", "Номенклатура,Характеристика,Склад,Назначение");
			УдалитьСтрокиИзТаблицы(ТаблицаОстатковНаВсехСкладах, ТаблицаПолуфабрикатов, "КРезервированию", "Номенклатура,Характеристика,Назначение");
			
		КонецЕсли;
		//-- НЕ УТКА
		
		ЕстьОбособленныеТоварыНаДругихСкладах = ЗначениеЗаполнено(ТаблицаОстатковНаВсехСкладах);
		
		// Расчет количества к резервированию с текущего склада.
		Отбор = Новый Структура("Номенклатура, Характеристика, Склад, Назначение, ПодразделениеПолучатель");
		ОтборОстатковВсехСкладов = Новый Структура("Номенклатура, Характеристика, Назначение");
		КвалифкаторКРезервированию = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		Таблица.Колонки.Добавить("КРезервированию", Новый ОписаниеТипов("Число", , , КвалифкаторКРезервированию));
		
		Для Каждого СтрокаЗаказы Из Таблица Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаЗаказы);
			ЗаполнитьЗначенияСвойств(ОтборОстатковВсехСкладов, СтрокаЗаказы);
			СтрокиОстатков = ТаблицаОстатки.НайтиСтроки(Отбор);
			
			Если СтрокиОстатков.Количество() > 0 Тогда
				
				НайденнаяСтрока = СтрокиОстатков[0];
				КРезервированию = Мин(НайденнаяСтрока.КРезервированию, СтрокаЗаказы.Требуется);
				СтрокаЗаказы.КРезервированию = КРезервированию;
				НайденнаяСтрока.КРезервированию = НайденнаяСтрока.КРезервированию - КРезервированию;
				
			КонецЕсли;
			
			Если ЕстьОбособленныеТоварыНаДругихСкладах
				И ЗначениеЗаполнено(СтрокаЗаказы.Назначение)
				И Не СтрокаЗаказы.ЭтоРабота
				И Не СтрокаЗаказы.РаспределительныйЦентрЕстьВТаблице Тогда
				
				НайденныеСтроки = ТаблицаОстатковНаВсехСкладах.НайтиСтроки(ОтборОстатковВсехСкладов);
				Если НайденныеСтроки.Количество() > 0 Тогда
					КРезервированию = Мин(НайденныеСтроки[0].КРезервированию, СтрокаЗаказы.КРезервированию);
					НайденныеСтроки[0].КРезервированию = НайденныеСтроки[0].КРезервированию - КРезервированию;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Дообеспечение товарами с других складов.
		Для Каждого СтрокаЗаказы Из Таблица Цикл
			
			Если ЕстьОбособленныеТоварыНаДругихСкладах
				И ЗначениеЗаполнено(СтрокаЗаказы.Назначение)
				И Не СтрокаЗаказы.ЭтоРабота
				И Не ЗначениеЗаполнено(СтрокаЗаказы.РаспределительныйЦентр) Тогда
				
				ЗаполнитьЗначенияСвойств(ОтборОстатковВсехСкладов, СтрокаЗаказы);
				НайденныеСтроки = ТаблицаОстатковНаВсехСкладах.НайтиСтроки(ОтборОстатковВсехСкладов);
				Если НайденныеСтроки.Количество() > 0 Тогда
					КРезервированию = Мин(НайденныеСтроки[0].КРезервированию, СтрокаЗаказы.Требуется - СтрокаЗаказы.КРезервированию);
					НайденныеСтроки[0].КРезервированию = НайденныеСтроки[0].КРезервированию - КРезервированию;
					СтрокаЗаказы.КРезервированию = СтрокаЗаказы.КРезервированию + КРезервированию;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		Таблица.Колонки.Добавить("Отметка");
		Таблица.Колонки.Добавить("КЗаказу");
		Таблица.Колонки.Добавить("ДатаЗаказаНаступила");
		Таблица.Колонки.Добавить("ОтгрузкаВнутриПериода");
		Для Каждого СтрокаЗаказы Из Таблица Цикл
			
			РезультатРасчета = КоличествоКЗаказуДляОбеспеченияЗаказов(СтрокаЗаказы);
			ЗаполнитьЗначенияСвойств(СтрокаЗаказы, РезультатРасчета);
		КонецЦикла;
		//++ НЕ УТКА
		РассчитатьДатыПоставокДляПроизводства(Таблица);
		//-- НЕ УТКА
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Таблица, АдресРезультата);

КонецПроцедуры

&Вместо("РассчитатьДатыПоставокДляПроизводства")
Процедура Рин1_РассчитатьДатыПоставокДляПроизводства(Таблица)
	
	ТаблицаДляРасчета = Таблица.СкопироватьКолонки("ДатаОтгрузки, ДатаВозможнойПоставки, Номенклатура, Характеристика, СпособОбеспечения, ТипОбеспечения");
	ТаблицаДляРасчета.Колонки.Добавить("Индекс", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0));
	ВсегоСтрок = Таблица.Количество() - 1;
	ТипПроизводство = Перечисления.ТипыОбеспечения.Производство;
	Для Индекс = 0 По ВсегоСтрок Цикл
		
		СтрокаТаблицы = Таблица[Индекс];
		
		//bercut130420
		Если не СтрокаТаблицы.ДатаПоставкиРассчитанаПоДатеОтгрузки = null Тогда
			Если СтрокаТаблицы.ДатаПоставкиРассчитанаПоДатеОтгрузки И СтрокаТаблицы.ТипОбеспечения = ТипПроизводство Тогда
				НоваяСтрока = ТаблицаДляРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Индекс = Индекс;
			КонецЕсли;
		Иначе
			Если СтрокаТаблицы.ТипОбеспечения = ТипПроизводство Тогда
				НоваяСтрока = ТаблицаДляРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Индекс = Индекс;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таблица", ТаблицаДляРасчета);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Индекс                  КАК Индекс,
		|	Таблица.ДатаОтгрузки            КАК ДатаОтгрузки,
		|	Таблица.ДатаВозможнойПоставки   КАК ДатаВозможнойПоставки,
		|
		|	// для получения спецификации.
		|	Таблица.Номенклатура            КАК Номенклатура,
		|	Таблица.Характеристика          КАК Характеристика,
		|	Таблица.СпособОбеспечения       КАК СпособОбеспечения
		|ПОМЕСТИТЬ ВтТаблицаБезПодразделений
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Индекс                  КАК Индекс,
		|	Таблица.ДатаОтгрузки            КАК ДатаОтгрузки,
		|	Таблица.ДатаВозможнойПоставки   КАК ДатаВозможнойПоставки,
		|
		|	// для получения спецификации.
		|	Таблица.ДатаОтгрузки            КАК НачалоПроизводства,
		|	Таблица.Номенклатура            КАК Номенклатура,
		|	Таблица.Характеристика          КАК Характеристика,
		|	ЕСТЬNULL(СпрСпособ.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
		|ПОМЕСТИТЬ ВтТаблица
		|ИЗ
		|	ВтТаблицаБезПодразделений КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО СпрСпособ.Ссылка = Таблица.СпособОбеспечения
		|;
		|
		|//////////////////////////////////////////////////
		|" + УправлениеДаннымиОбИзделиях.ТекстЗапросаСоздатьВТСпецификацииНоменклатурыПоУмолчанию("ВтТаблица") + "
		|ВЫБРАТЬ
		|	Таблица.Индекс                               КАК Индекс,
		|	Таблица.ДатаОтгрузки                         КАК ДатаОтгрузки,
		|	ЕСТЬNULL(Таблица.ДатаВозможнойПоставки, ДАТАВРЕМЯ(1, 1, 1))   КАК ДатаВозможнойПоставки,
		|	СпрСпецификации.МаксимальныйСрокПролеживанияВыходныхИзделий   КАК СрокПролеживания,
		|	СпрСпецификации.ОграниченСрокПролеживанияВыходныхИзделий      КАК ОграниченСрокПролеживанияВыходныхИзделий
		|ПОМЕСТИТЬ ВтСрокиПролеживания
		|ИЗ
		|	ВтТаблица КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпецификацииНоменклатурыПоУмолчанию КАК ТаблицаСпецификаций
		|		ПО ТаблицаСпецификаций.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСпецификаций.Характеристика = Таблица.Характеристика
		|		 И ТаблицаСпецификаций.Подразделение  = Таблица.Подразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК СпрСпецификации
		|		ПО СпрСпецификации.Ссылка = ТаблицаСпецификаций.Спецификация
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновнойКалендарь.Значение КАК Календарь,
		|	Таблица.СрокПролеживания   КАК ЧислоДней,
		|	Таблица.ДатаОтгрузки       КАК ДатаОтсчета
		|
		|ПОМЕСТИТЬ ВтПараметрыПоиска
		|ИЗ
		|	ВтСрокиПролеживания КАК Таблица,
		|	Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|ГДЕ
		|	ОсновнойКалендарь.Значение <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|	И Таблица.СрокПролеживания > 0
		|	И Таблица.ОграниченСрокПролеживанияВыходныхИзделий
		|;
		|/////////////////////////////////////////////////
		|" + ОбеспечениеСервер.ТекстЗапросаДатГрафика(Неопределено, Ложь) + "
		|ВЫБРАТЬ
		|	Набор.Индекс           КАК Индекс,
		|	Набор.ДатаПоставкиМакс КАК ДатаПоставкиМакс,
		|	Набор.ДатаПоставкиМин  КАК ДатаПоставкиМин
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.Индекс                  КАК Индекс,
		|		ВЫБОР КОГДА Таблица.ДатаВозможнойПоставки < Таблица.ДатаОтгрузки ТОГДА
		|						Таблица.ДатаОтгрузки
		|				ИНАЧЕ
		|						Таблица.ДатаВозможнойПоставки
		|			КОНЕЦ                       КАК ДатаПоставкиМакс,
		|		ВЫБОР КОГДА Таблица.ОграниченСрокПролеживанияВыходныхИзделий И ДатыГрафика.Дата > Таблица.ДатаВозможнойПоставки ТОГДА
		|						ДатыГрафика.Дата
		|				КОГДА Таблица.ОграниченСрокПролеживанияВыходныхИзделий И ДатыГрафика.Дата ЕСТЬ NULL И Таблица.ДатаОтгрузки > ДАТАВРЕМЯ(1, 1, 1)
		|							И ДОБАВИТЬКДАТЕ(Таблица.ДатаОтгрузки, ДЕНЬ, -Таблица.СрокПролеживания) > Таблица.ДатаВозможнойПоставки ТОГДА
		|						ДОБАВИТЬКДАТЕ(Таблица.ДатаОтгрузки, ДЕНЬ, -Таблица.СрокПролеживания)
		|				ИНАЧЕ
		|						Таблица.ДатаВозможнойПоставки
		|			КОНЕЦ                       КАК ДатаПоставкиМин
		|	ИЗ
		|		ВтСрокиПролеживания КАК Таблица
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыГрафика КАК ДатыГрафика
		|			ПО ДатыГрафика.ЧислоДней   = Таблица.СрокПролеживания
		|			 И ДатыГрафика.ДатаОтсчета = Таблица.ДатаОтгрузки) КАК Набор
		|УПОРЯДОЧИТЬ ПО
		|	Набор.ДатаПоставкиМакс";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Пока Результат.Количество() > 0 Цикл
		
		ДатаПоставки = Результат[0].ДатаПоставкиМакс;
		ВГраница = Результат.Количество() - 1;
		Для Счетчик = 0 По ВГраница Цикл
			
			СтрокаТаблицы = Результат[ВГраница - Счетчик];
			Если СтрокаТаблицы.ДатаПоставкиМин <= ДатаПоставки Тогда
				
				Таблица[СтрокаТаблицы.Индекс].ДатаПоставки = ДатаПоставки;
				Результат.Удалить(СтрокаТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры
Функция ВременнаяТаблицаОтборПоСегментамИНоменклатураБезСегмента()
Возврат	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Номенклатура.Ссылка КАК НоменклСсылка,
				|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНом
				|ПОМЕСТИТЬ СпрНоменклатура
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|	   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				|	   ПО (Номенклатура.ХарактеристикаМногооборотнаяТара = ХарактеристикиНоменклатуры.Ссылка)
				|ГДЕ
				|	&ИспользуетсяОтборПоСегментуНоменклатуры
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НоменклатураСегментаИВнеСегмента.НоменклСсылка КАК Номенклатура,
				|	НоменклатураСегментаИВнеСегмента.Характеристика КАК Характеристика
				|ПОМЕСТИТЬ ОтборПоСегментам
				|ИЗ
				|	(ВЫБРАТЬ
				|		СпрНоменклатура.НоменклСсылка КАК НоменклСсылка,
				|		СпрНоменклатура.ХарактеристикаНом КАК Характеристика
				|	ИЗ
				|		СпрНоменклатура КАК СпрНоменклатура
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
				|			ПО СпрНоменклатура.НоменклСсылка = НоменклатураСегмента.Номенклатура
				|	ГДЕ
				|		ЕСТЬNULL(НоменклатураСегмента.Номенклатура, 0) = 0
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		НоменклатураСегмента.Номенклатура,
				|		НоменклатураСегмента.Характеристика
				|	ИЗ
				|		РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
				|		{ГДЕ
				|			НоменклатураСегмента.Номенклатура.*    КАК Номенклатура,
				|			НоменклатураСегмента.Характеристика.*  КАК Характеристика,
				|			НоменклатураСегмента.Сегмент.*         КАК СегментНоменклатуры}
				|	ГДЕ
				|		&ИспользуетсяОтборПоСегментуНоменклатуры
				|		{ГДЕ
				|			НоменклатураСегмента.Номенклатура.*    КАК Номенклатура,
				|			НоменклатураСегмента.Характеристика.*  КАК Характеристика,
				|			НоменклатураСегмента.Сегмент.*         КАК СегментНоменклатуры}) КАК НоменклатураСегментаИВнеСегмента
				|
				|СГРУППИРОВАТЬ ПО
				|	НоменклатураСегментаИВнеСегмента.НоменклСсылка,
				|	НоменклатураСегментаИВнеСегмента.Характеристика
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура";
	
КонецФункции
//--Шерстюк Ю.Ю.
