
&НаКлиенте
Процедура Рин1_ОперацииОтборПоВРЦВместо(Команда)
	
	ОтборПоВРЦ = НЕ ОтборПоВРЦ;
	
	Элементы.ОперацииОтборПоВРЦ.Пометка = ОтборПоВРЦ;

	//НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОтборПоУчастку");
	
	СохранитьНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
&Вместо("ЗагрузитьНастройки")
Процедура Рин1_ЗагрузитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"Обработка.ФормированиеСменныхЗаданий.НастройкиРабочегоМеста",
	Неопределено);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("Подразделение",   Подразделение);
		Настройки.Свойство("Участок",         Участок);
		Настройки.Свойство("РежимНазначения", РежимНазначения);
		Настройки.Свойство("РежимПросмотра",  РежимПросмотра);
		Настройки.Свойство("ОтборПоУчастку",  ОтборПоУчастку);
		//
		Настройки.Свойство("ОтборПоВРЦ",  ОтборПоВРЦ);
		//
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
&Вместо("СохранитьНастройки")
Процедура Рин1_СохранитьНастройки(Форма)
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("Подразделение",   Форма.Подразделение);
	Настройки.Вставить("Участок",         Форма.Участок);
	Настройки.Вставить("РежимНазначения", Форма.РежимНазначения);
	Настройки.Вставить("РежимПросмотра",  Форма.РежимПросмотра);
	Настройки.Вставить("ОтборПоУчастку",  Форма.ОтборПоУчастку);
	//
	Настройки.Вставить("ОтборПоВРЦ",  Форма.ОтборПоВРЦ);
	//
	ЗаписатьНастройкиВХранилище(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура Рин1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Элементы.ОперацииОтборПоВРЦ.Видимость  = ?(РежимНазначения = 1,Истина,Ложь);
	
КонецПроцедуры

&НаКлиенте
&После("ПриИзмененииРежимаНазначения")
Процедура Рин1_ПриИзмененииРежимаНазначения()
	
	Элементы.ОперацииОтборПоВРЦ.Видимость  = ?(РежимНазначения = 1,Истина,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПриОткрытииПосле(Отказ)
	Элементы.ОперацииОтборПоВРЦ.Пометка = ОтборПоВРЦ;
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьСмены")
Процедура Рин1_ЗаполнитьСмены()
	
	АктивизироватьСтроку = Элементы.Смены.ТекущаяСтрока = Неопределено;
	
	Смены.ПолучитьЭлементы().Очистить();
	
	Если Подразделение.Пустая() ИЛИ СоставСмен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("Смены");
	
	НесколькоСменВПодразделении = ПроизводствоСервер.ГрафикиРаботыПодразделений(Подразделение).Количество() > 1;
	
	// Чтение состава смен
	Запрос = Новый Запрос(ТекстЗапросаСмены());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Задания", СоставСмен.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("НазначатьИсполнителям", РежимНазначения = РежимНазначенияИсполнителям());
	Запрос.УстановитьПараметр("НазначатьРабочимЦентрам", РежимНазначения = РежимНазначенияРабочимЦентрам());
	Запрос.УстановитьПараметр("НазначатьВидамРЦ", РежимНазначения = РежимНазначенияВидамРЦ());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если НЕ ВыборкаИтоги.Следующий() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаСЗ = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаСмены = РезультатЗапроса.Выгрузить();
	
	// Чтение расписания
	ВсеГрафики = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСмены.ВыгрузитьКолонку("Смена"));
	ВсеСсылки = Неопределено;
	ГрафикиРЦ = Неопределено;
	Если РежимНазначения <> РежимНазначенияИсполнителям() Тогда
		ВсеСсылки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСмены.ВыгрузитьКолонку("ОбъектНазначения"));
		ГрафикиРЦ = ПроизводствоСервер.ГрафикиРаботыРЦ(ВсеСсылки, РежимНазначения = РежимНазначенияРабочимЦентрам());
		ГрафикиРЦ.Индексы.Добавить("Ссылка, ГрафикРаботы");
		ГрафикиРЦ.Индексы.Добавить("Ссылка");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеГрафики, ГрафикиРЦ.ВыгрузитьКолонку("ГрафикРаботы"), Истина);
	КонецЕсли;
	
	Расписание = ПланированиеПроизводства.РасписаниеРаботыПоГрафику(
	ВсеГрафики,
	НачалоДня(ВыборкаИтоги.ДатаМин),
	КонецДня(ВыборкаИтоги.Дата));
	Расписание.Индексы.Добавить("ДатаГрафика, ГрафикРаботы");
	СтруктураПоиска1 = Новый Структура("ДатаГрафика, ГрафикРаботы");
	
	СоставВРЦ = Неопределено;
	СтруктураПоиска2 = Неопределено;
	Если РежимНазначения = РежимНазначенияВидамРЦ() Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыРабочихЦентров.Ссылка КАК ОбъектНазначения,
		|	РабочиеЦентры.Участок     КАК Участок,
		|	ЕСТЬNULL(РабочиеЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)) КАК РабочийЦентр
		|ИЗ
		|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|		ПО ВидыРабочихЦентров.Ссылка = РабочиеЦентры.ВидРабочегоЦентра
		|			И (РабочиеЦентры.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	ВидыРабочихЦентров.Ссылка В(&Ссылки)");
		Запрос.УстановитьПараметр("Ссылки", ВсеСсылки);
		СоставВРЦ = Запрос.Выполнить().Выгрузить();
		СоставВРЦ.Индексы.Добавить("ОбъектНазначения, Участок");
		СтруктураПоиска2 = Новый Структура("ОбъектНазначения, Участок");
	КонецЕсли;
	
	// Заполнение дерева
	Пока ВыборкаСЗ.Следующий() Цикл
		
		// Строка - смена
		СтрокаСмена = Дерево.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаСмена, ВыборкаСЗ, "СменноеЗадание, Дата, Участок, КоличествоОпераций");
		
		СтрокаСмена.ТипСтроки = ТипСтрокиСмена();
		СтрокаСмена.ОбъектНазначения = ВыборкаСЗ.СменноеЗадание;
		
		СтрокаСмена.ПредставлениеОбъекта = УправлениеПроизводствомКлиентСервер.ПредставлениеСменногоЗадания(
		ВыборкаСЗ.Смена, ВыборкаСЗ.Дата, ВыборкаСЗ.Участок, НесколькоСменВПодразделении);
		
		// Длительность
		СтруктураПоиска1.ДатаГрафика = НачалоДня(ВыборкаСЗ.Дата);
		СтруктураПоиска1.ГрафикРаботы = ВыборкаСЗ.Смена;
		РасписаниеСмены = Расписание.НайтиСтроки(СтруктураПоиска1);
		
		СуммаСекунды = 0;
		Для каждого Строка Из РасписаниеСмены Цикл
			СуммаСекунды = СуммаСекунды + Строка.Длительность;
		КонецЦикла;
		
		СтрокаСмена.Длительность = Окр(
		ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
		СуммаСекунды,
		Перечисления.ЕдиницыИзмеренияВремени.Час),
		1);
		
		// Представление
		ЗаполнитьПредставлениеСтрокиСмены(СтрокаСмена);
		
		Выборка = ВыборкаСЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.КоличествоОпераций = 0 И Выборка.ОбъектНазначения.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			// Строка - объект назначения
			СтрокаОбъект = СтрокаСмена.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаОбъект, Выборка, "СменноеЗадание, Дата, Участок, ОбъектНазначения, ВидРабочегоЦентра, КоличествоОпераций");
			
			Если Выборка.ОбъектНазначения.Пустая() Тогда
				СтрокаОбъект.ТипСтроки = ТипСтрокиОбъектНеНазначен();
				СтрокаОбъект.ПредставлениеОбъекта = ?(РежимНазначения = РежимНазначенияИсполнителям(),
				НСтр("ru = '<исполнитель не назначен>';
				|en = '<no assignee>'"),
				?(РежимНазначения = РежимНазначенияРабочимЦентрам(),
				НСтр("ru = '<рабочий центр не назначен>';
				|en = '<work center is not specified>'"),
				НСтр("ru = '<вид РЦ не назначен>';
				|en = '<work center kind not specified>'")));
			Иначе
				СтрокаОбъект.ТипСтроки = ТипСтрокиОбъект();
				
				//СтрокаОбъект.ПредставлениеОбъекта = Выборка.ПредставлениеОбъекта;
				ВРЦ_ДляВставки = ?(ПолучитьВРЦПоФизЛицу(Выборка.ОбъектНазначения, Выборка.Дата) = Справочники.ВидыРабочихЦентров.ПустаяСсылка(),
				                  Выборка.ПредставлениеОбъекта,
				                  Выборка.ПредставлениеОбъекта + " (" + ПолучитьВРЦПоФизЛицу(Выборка.ОбъектНазначения, Выборка.Дата) + ")");
				СтрокаОбъект.ПредставлениеОбъекта = ?(ТипЗнч(Выборка.ОбъектНазначения) = Тип("СправочникСсылка.ФизическиеЛица"),ВРЦ_ДляВставки,Выборка.ПредставлениеОбъекта);
				//
				Если РежимНазначения = РежимНазначенияИсполнителям() Тогда
					СтрокаОбъект.Длительность = СтрокаСмена.Длительность;
				Иначе
					
					Если РежимНазначения = РежимНазначенияВидамРЦ() Тогда
						
						ЗаполнитьЗначенияСвойств(СтруктураПоиска2, Выборка, "ОбъектНазначения, Участок");
						СтрокиСостава = СоставВРЦ.НайтиСтроки(СтруктураПоиска2);
						Для каждого Строка Из СтрокиСостава Цикл
							СтрокаОбъект.Длительность = СтрокаОбъект.Длительность
							+ РассчитатьДлительность(
							Строка.РабочийЦентр,
							ГрафикиРЦ,
							Расписание,
							ВыборкаСЗ.Смена,
							СтрокаСмена.Длительность,
							НачалоДня(ВыборкаСЗ.Дата),
							РасписаниеСмены);
						КонецЦикла;
						
					Иначе
						
						СтрокаОбъект.Длительность = РассчитатьДлительность(
						Выборка.ОбъектНазначения,
						ГрафикиРЦ,
						Расписание,
						ВыборкаСЗ.Смена,
						СтрокаСмена.Длительность,
						НачалоДня(ВыборкаСЗ.Дата),
						РасписаниеСмены);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаОбъект.Загрузка = Окр(
			ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
			Выборка.ЗагрузкаСекунды,
			Перечисления.ЕдиницыИзмеренияВремени.Час),
			1);
			
			//подменим длительность по тз из регистра
			Если РежимНазначения = 3 и СтрокаОбъект.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ Тогда	
	
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоВидуРЦОборот / 3600 КАК Длительность
				|ИЗ
				|	РегистрНакопления.ДоступностьВидовРабочихЦентров.Обороты(
				|			&Дата,
				|			&Дата,
				|			Авто,
				|			ВидРабочегоЦентра = &ВидРабочегоЦентра
				|				И ДатаИнтервала = &Дата) КАК ДоступностьВидовРабочихЦентровОбороты";
				
				Запрос.УстановитьПараметр("ВидРабочегоЦентра", СтрокаОбъект.ВидРабочегоЦентра);
				Запрос.УстановитьПараметр("Дата", НачалоДня(СтрокаОбъект.Дата));
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если не РезультатЗапроса.Пустой() Тогда
					СтрокаОбъект.Длительность = РезультатЗапроса.Выгрузить()[0].Длительность;
				КонецЕсли;
				
			КонецЕсли;
			//
			
			СтрокаОбъект.Свободно = ?(СтрокаОбъект.Длительность > СтрокаОбъект.Загрузка,
			СтрокаОбъект.Длительность - СтрокаОбъект.Загрузка, 0);
			
			СтрокаСмена.Загрузка = СтрокаСмена.Загрузка + СтрокаОбъект.Загрузка;
			СтрокаСмена.Свободно = СтрокаСмена.Свободно + СтрокаОбъект.Свободно;
			
			ЗаполнитьПредставлениеСтрокиСмены(СтрокаОбъект)
			
		КонецЦикла;
		
		// Строка - добавить исполнителей
		Если РежимНазначения = РежимНазначенияИсполнителям() Тогда
			
			СтрокаКоманда = СтрокаСмена.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаКоманда, ВыборкаСЗ, "СменноеЗадание, Дата, Участок");
			
			СтрокаКоманда.ТипСтроки = ТипСтрокиНовыйИсполнитель();
			СтрокаКоманда.Действие = НСтр("ru = '<добавить исполнителей>';
			|en = '<add assignees>'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "Смены");
	
	Если АктивизироватьСтроку И Дерево.Строки.Количество() <> 0 Тогда
		Элементы.Смены.ТекущаяСтрока = Смены.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&После("НастроитьОтборОпераций")
Процедура Рин1_НастроитьОтборОпераций()
	
	Источник = Элементы.Смены.ТекущиеДанные;
	
	Если не Источник = Неопределено и ТипЗнч(Источник.ОбъектНазначения) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции,
		"ВидРабочегоЦентра",
		ПолучитьВРЦПоФизЛицу(Источник.ОбъектНазначения,Источник.Дата),
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВРЦПоФизЛицу(ФизЛицо, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Рин1_НазначенияСотрудниковВРЦСрезПоследних.ВРЦ КАК ВРЦ
		|ИЗ
		|	РегистрСведений.Рин1_НазначенияСотрудниковВРЦ.СрезПоследних(
		|			,
		|			Сотрудник.ФизическоеЛицо = &ФизЛицо
		|				И НЕ ОсвободитьОтНазначений
		|				И Период <= &Дата) КАК Рин1_НазначенияСотрудниковВРЦСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Рин1_НазначенияСотрудниковВРЦСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].ВРЦ; 			
	КонецЕсли;
		
	Возврат Справочники.ВидыРабочихЦентров.ПустаяСсылка();	
	
КонецФункции

&НаСервере
&Вместо("ДобавитьИсполнителей")
Процедура Рин1_ДобавитьИсполнителей(СменноеЗадание, Ссылки)
	
	КешТекСтроки = ЗакешироватьТекСтрокуДерева();
	
	Дерево = РеквизитФормыВЗначение("Смены");
	
	СтрокаСмена = Дерево.Строки.Найти(СменноеЗадание, "СменноеЗадание");
	Если СтрокаСмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеИсполнители = Новый Массив;
	Для каждого Ссылка Из Ссылки Цикл
		Если СтрокаСмена.Строки.Найти(Ссылка, "ОбъектНазначения") = Неопределено Тогда
			НовыеИсполнители.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	Если НовыеИсполнители.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Документы.СменноеЗадание.ДобавитьИсполнителей(СменноеЗадание, НовыеИсполнители);
	
	Для каждого Ссылка Из НовыеИсполнители Цикл
		
		СтрокаОбъект = СтрокаСмена.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаОбъект, СтрокаСмена, "СменноеЗадание, Дата, Участок, Длительность");
		
		//по тз нужно изменить длительность если есть отклонения у работника
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеСостоянийСотрудников.Сотрудник КАК Сотрудник
			|ИЗ
			|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
			|ГДЕ
			|	НЕ ДанныеСостоянийСотрудников.Состояние = &Состояние
			|	И ДанныеСостоянийСотрудников.Начало <= &Дата
			|	И ДанныеСостоянийСотрудников.Окончание >= &Дата
			|	И ДанныеСостоянийСотрудников.Сотрудник.ФизическоеЛицо = &ФизическоеЛицо";
			
			Запрос.УстановитьПараметр("Дата", НачалоДня(СтрокаСмена.Дата));
			Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияСотрудника.Работа);
			Запрос.УстановитьПараметр("ФизическоеЛицо", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если не РезультатЗапроса.Пустой() Тогда
				СтрокаОбъект.Длительность = 0;
			КонецЕсли;
			
		КонецЕсли;
		//
		
		СтрокаОбъект.ТипСтроки = ТипСтрокиОбъект();
		СтрокаОбъект.ОбъектНазначения = Ссылка;
		СтрокаОбъект.ПредставлениеОбъекта = ?(ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФизическиеЛица"),Строка(Ссылка) + " (" + ПолучитьВРЦПоФизЛицу(Ссылка, СтрокаСмена.Дата) + ")",Ссылка);
		СтрокаОбъект.Свободно = СтрокаОбъект.Длительность;
		
		СтрокаСмена.Свободно = СтрокаСмена.Свободно + СтрокаОбъект.Свободно;
		
		ЗаполнитьПредставлениеСтрокиСмены(СтрокаОбъект);
		
	КонецЦикла;
	
	СтрокаСмена.Строки.Сортировать("ТипСтроки, ПредставлениеОбъекта");
	
	ЗначениеВРеквизитФормы(Дерево, "Смены");
	
	УстановитьТекСтрокуДереваИзКеша(КешТекСтроки, Дерево);
	
КонецПроцедуры
