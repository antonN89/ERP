#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//{{20201127 ГлазуновДВ Проверка на запуск из Документа
	Если Параметры.Ссылка = Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.';
								|en = 'Data processor is not intended for direct usage.'");
	КонецЕсли;
	//}}20201127 ГлазуновДВ
	//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409 запомним Статус документа
	 Объект.Статус = Параметры.Ссылка.Статус;
	 Если Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт или Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Тогда 
		 Элементы.ТоварыРин1_ПлановаяДатаОтгрузки.Видимость = Ложь;
		 Элементы.ТоварыРин1_ПлановаяДатаПоступления.Видимость = Ложь;
		 Элементы.РезультатРин1_ПлановаяДатаОтгрузки.Видимость = Ложь;
		 Элементы.РезультатРин1_ПлановаяДатаПоступления.Видимость = Ложь;
	 КонецЕсли;
	//--Шерстюк Ю.Ю.
	//получаем тч из документа
	АдресТоварыДокументаВоВременномХранилище = Параметры.ТоварыДокумента;
	ТоварыДокумента.Загрузить(ПолучитьИзВременногоХранилища(АдресТоварыДокументаВоВременномХранилище));		
	//
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПравоДоступаЧтениеСправочникаНоменклатураПоставщиков = ПравоДоступа("Чтение", Метаданные.Справочники.НоменклатураКонтрагентов);
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьНоменклатуруПоставщиков    = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров");
	
	ЗагружатьКоличество = ?(Параметры.Свойство("ЗагружатьКоличество"), Параметры.ЗагружатьКоличество, Истина);
	ПроверятьЗаполнениеХарактеристик =
	Параметры.Свойство("ПроверятьЗаполнениеХарактеристик") И Параметры.ПроверятьЗаполнениеХарактеристик;
	
	ЗагружатьЦены                         = Параметры.ЗагружатьЦены;
	ЗагружатьСуммы                        = Параметры.ЗагружатьСуммы;
	ЦенаВключаетНДС                       = Параметры.ЦенаВключаетНДС;
	ИмяТЧ                                 = Параметры.ИмяТЧ;
	Партнер                               = Параметры.Партнер;
	
	Если Параметры.Свойство("Заголовок") И ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
		
	КонецЕсли;
	
	СопоставлятьПоНоменклатуреПоставщиков = Параметры.СопоставлятьПоНоменклатуреПоставщиков
	И ИспользоватьНоменклатуруПоставщиков
	И ЗначениеЗаполнено(Партнер);
	
	ВалютаДокумента     = Параметры.ВалютаДокумента;
	Дата       = Параметры.Дата;
	Соглашение = Параметры.Соглашение;
	
	Если НЕ ЗначениеЗаполнено(Параметры.НалогообложениеНДС) Тогда
		НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		НалогообложениеНДС = Параметры.НалогообложениеНДС;
	КонецЕсли;
	
	ИспользоватьТару = ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	
	Если ЗначениеЗаполнено(Параметры.ОтборПоТипуНоменклатуры) Тогда
		ОтборПоТипуНоменклатуры = Параметры.ОтборПоТипуНоменклатуры;
		
		ТекстОтбора = НСтр("ru='Для выбора доступна номенклатура с типом: %Тип%.'");
		Тип = "";
		Для каждого ТипНоменклатурыОтбор Из Параметры.ОтборПоТипуНоменклатуры Цикл
			
			Если НЕ ИспользоватьТару И ТипНоменклатурыОтбор = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				Продолжить;
			КонецЕсли;
			
			Тип = Тип + ТипНоменклатурыОтбор + ", ";
			
		КонецЦикла;
		ТекстОтбора = СтрЗаменить(ТекстОтбора, "%Тип%", Лев(Тип, СтрДлина(Тип)-2));
		
		Элементы.ОтборНадпись.Заголовок = ТекстОтбора;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Параметры.ОтборПоТипуНоменклатуры));
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ТоварыНоменклатураПоставщика.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
	ИнициализироватьТабличныйДокумент();
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьДоступностьКолонок();
	
	НДС_в_Цене = ЦенаВключаетНДС;
	
	Владелец = Параметры.Ссылка;
	
	Элементы.ДекорацияВалютаДокумента.Заголовок = "Валюта документа - " + Строка(ВалютаДокумента) + " ";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Ссылка,
		|	Валюты.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Валюты КАК Валюты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокВалют = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.ВалютаПоставщика.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	// + [Rineco], [Киселев А.Н.] [11.10.2021] 
	// Задача: [№ 19697], [# Изменение условий поставки]
	
	// Было:
	//ВалютаПоставщика = Элементы.ВалютаПоставщика.СписокВыбора[0].Значение;
	// Стало:
	ВалютаПоставщика = ВалютаДокумента; 
	// - [Rineco], [Киселев А.Н.] [11.10.2021]
	
	
	ТекущийКурс = 1;
	//++Шерстюк Ю.Ю. 12.07.2021 Задача 9171 убираем действие
	//ОтменятьНеНайденные = Истина;
	ОтменятьНеНайденные = Ложь;
	//--Шерстюк Ю.Ю.
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Партнер);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	СтруктураДействий = Новый Структура;
    //СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	Если ЕстьПравоДоступаЧтениеСправочникаНоменклатураПоставщиков И СопоставлятьПоНоменклатуреПоставщиков Тогда
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
		СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		СтруктураПараметровСопоставленнияНоменклатуры);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Партнер);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	Если ЕстьПравоДоступаЧтениеСправочникаНоменклатураПоставщиков И СопоставлятьПоНоменклатуреПоставщиков Тогда
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
		СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		СтруктураПараметровСопоставленнияНоменклатуры);
	КонецЕсли;		
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Партнер);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить(
	"ПроверитьСопоставленнуюНоменклатуруПоставщика",
	СтруктураПараметровСопоставленнияНоменклатуры);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, Ложь);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", 
	ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(
	Объект, 
	Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыХарактеристика" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияОчистка(Элемент, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.ЗагружаемаяСтранаПроисхождения = "";
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Дата));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, Ложь);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
	МассивЭлементов,
	"Доступность", 
	НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискИСопоставлениеНоменклатуры

&НаСервере
Процедура ДобавитьПодобраннуюНоменклатуру(КодСтроки, НайденнаяНоменклатура, НайденныйПроизводитель, НайденнаяХарактеристика = Неопределено, НайденнаяНоменклатураПоставщика = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", НайденнаяНоменклатура);
	СтруктураОтбора.Вставить("Производитель", НайденныйПроизводитель);
	Если Не НайденнаяХарактеристика = Неопределено Тогда
		СтруктураОтбора.Вставить("Характеристика", НайденнаяХарактеристика);
	КонецЕсли;	
	СтруктураОтбора.Вставить("КодСтроки", КодСтроки);
	
	ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(СтруктураОтбора);
	Если ПодобранныеРанееТовары.Количество() = 0 Тогда
		ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
		ПодобраннаяСтрока.КодСтроки = КодСтроки;
		ПодобраннаяСтрока.Номенклатура  = НайденнаяНоменклатура;
		ПодобраннаяСтрока.Производитель = НайденныйПроизводитель;
		Если Не НайденнаяНоменклатураПоставщика = Неопределено Тогда
			ПодобраннаяСтрока.НоменклатураПартнера = НайденнаяНоменклатураПоставщика;
		КонецЕсли;	
		Если Не НайденнаяХарактеристика = Неопределено Тогда
			ПодобраннаяСтрока.Характеристика = НайденнаяХарактеристика;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоискПоСвязаннойТаблице(МассивНайденныхРанее, СвязаннаяТаблица, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата)
	
	Результат = Новый ТаблицаЗначений;
	Для каждого ПолеДляРезультата из ПоляНайденныхРанееДляРезультата Цикл
		Результат.Колонки.Добавить(ПолеДляРезультата.Значение);
	КонецЦикла;	
	Для каждого ПолеДляРезультата из ПоляСвязаннойТаблицыДляРезультата Цикл
		Результат.Колонки.Добавить(ПолеДляРезультата.Значение);
	КонецЦикла;	
	
	Если МассивНайденныхРанее.Количество() > 0 Тогда
		Для каждого СтрокаПоКлючу из МассивНайденныхРанее Цикл
			ОтборДляПоиска = Новый Структура;
			Для каждого Связь из Связи Цикл
				ОтборДляПоиска.Вставить(Связь.Значение, СтрокаПоКлючу[Связь.Ключ]);
			КонецЦикла;
			Для каждого ЭлементОтбора из ОтборПоСвязаннойТаблице Цикл
				ОтборДляПоиска.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла;
			НайденныеПоОтбору = СвязаннаяТаблица.НайтиСтроки(ОтборДляПоиска);
			Для каждого СтрокаНайденнаяПоОтбору из НайденныеПоОтбору Цикл
				НоваяСтрокаРезультата = Результат.Добавить();
				Для каждого ПолеДляРезультата из ПоляНайденныхРанееДляРезультата Цикл
					НоваяСтрокаРезультата[ПолеДляРезультата.Значение] = СтрокаПоКлючу[ПолеДляРезультата.Ключ];
				КонецЦикла;	
				Для каждого ПолеДляРезультата из ПоляСвязаннойТаблицыДляРезультата Цикл
					НоваяСтрокаРезультата[ПолеДляРезультата.Значение] = СтрокаНайденнаяПоОтбору[ПолеДляРезультата.Ключ];
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409
	Если Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт или Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Тогда 
		пИзменятьПлановыеДаты = Ложь;
	Иначе
		пИзменятьПлановыеДаты = Истина;
	КонецЕсли;
	//--Шерстюк Ю.Ю.
	УточнениеНоменклатуры.Очистить();
	ПодобраннаяНоменклатура.Очистить();
	НайденныеСтроки = ПодобраннаяНоменклатура.Выгрузить();
	
	Объект.Товары.Очистить();
	
	ДанныеИБ = ПолучитьДанныеИБпоНоменклатуреИхарактеристикам();
	ТаблицаНоменклатуры = ДанныеИБ.ТаблицаНоменклатуры;
	ТаблицаХарактеристик = ДанныеИБ.ТаблицаХарактеристик;
	ТаблицаНоменклатурыПоставщиков = ДанныеИБ.ТаблицаНоменклатурыПоставщиков;
	
	НомераКолонок = Новый Соответствие;
	НомерКолонки = 1;
	
	НомераКолонок.Вставить("КолонкаАртикул", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	
	НомераКолонок.Вставить("КолонкаНоменклатура", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	
	НомераКолонок.Вставить("КолонкаПроизводитель", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;

	НомераКолонок.Вставить("КолонкаКоличество", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	
	НомераКолонок.Вставить("КолонкаЦена", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	
	НомераКолонок.Вставить("КолонкаСумма", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	
	НомераКолонок.Вставить("КолонкаДатаПоступления", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	
	Если НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		НомераКолонок.Вставить("КолонкаСуммаНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		Если НЕ ЦенаВключаетНДС Тогда
			НомераКолонок.Вставить("КолонкаСуммаСНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
			НомерКолонки = НомерКолонки +1;
		КонецЕсли;
	КонецЕсли;
	
	
	ВысотаШапки = 1;
	НомерСтроки = ВысотаШапки + 1 ;
	
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
	ЕстьОшибкиРаспознавания = Ложь;
	
	Пока ЗаполненыНоменклатураКодАртикулШтрихкод Цикл
		
		НоваяСтрока = УточнениеНоменклатуры.Добавить();
		Количество = 0;
		НоваяСтрока.КодСтроки = НомерСтроки;
		
		Попытка
			НоваяСтрока.Штрихкод = "";
			НоваяСтрока.Код = "";
			НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст;
			НоваяСтрока.НоменклатураНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст;
			Если ЗагружатьКоличество Тогда
				Количество = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКоличество")).Текст;
			КонецЕсли;
			НоваяСтрока.Производитель = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаПроизводитель")).Текст;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЗагружатьКоличество Тогда
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.Количество, Количество, НомерСтроки, "Количество", ВысотаШапки);
		КонецЕсли;
		
		Если ЗагружатьЦены Тогда
			Цена = 0;
			Попытка
				Цена = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаЦена")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.Цена, Цена, НомерСтроки, "Цена", ВысотаШапки);
			
		КонецЕсли;
		
		Если ЗагружатьСуммы Тогда
			Сумма               = 0;
			СуммаНДС            = 0;
			СуммаСНДС           = 0;
			
			Попытка
				Если НомераКолонок.Получить("КолонкаСумма") <>  Неопределено Тогда
					Сумма     = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСумма")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаНДС") <>  Неопределено Тогда
					СуммаНДС  = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаНДС")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаСНДС") <>  Неопределено Тогда
					СуммаСНДС = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаСНДС")).Текст;
				КонецЕсли;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.Сумма, Сумма, НомерСтроки, "Сумма", ВысотаШапки);
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.СуммаНДС, СуммаНДС, НомерСтроки, "СуммаНДС", ВысотаШапки);
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.СуммаСНДС, СуммаСНДС, НомерСтроки, "СуммаСНДС", ВысотаШапки);
			
		КонецЕсли;
		
		Попытка
			Если НомераКолонок.Получить("КолонкаДатаПоступления") <>  Неопределено Тогда
				ДатаПоступления = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаДатаПоступления")).Текст;	
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Если не ДатаПоступления = "" Тогда
			ПрисвоитьДатуПриЗаполненииТЧ(НоваяСтрока.ДатаПоступления, ДатаПоступления, НомерСтроки, "ДатаПоступления", ВысотаШапки);
		КонецЕсли;
		
		СтрокаПоискаАртикул        = ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", "")); 
		СтрокаПоискаНоменклатура   = ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""));
		СтрокаПоискаПроизводитель  = ВРег(СтрЗаменить(НоваяСтрока.Производитель, " ", ""));
		
		//По производителю всегда ищем
		//поиск по артикулу и номенклатуре
		НашлиМягко = Ложь;
		Если ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			НашлиНоменклатуруПоставщиков = Ложь;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Производитель) Тогда
				Отбор = Новый Структура("АртикулПоиск, ПроизводительПоиск, НаименованиеПоиск",СтрокаПоискаАртикул, СтрокаПоискаПроизводитель, СтрокаПоискаНоменклатура);
			Иначе 
				Отбор = Новый Структура("АртикулПоиск, НаименованиеПоиск", СтрокаПоискаАртикул,	СтрокаПоискаНоменклатура);
			КонецЕсли;			
			
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Отбор);
			
			Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск",	СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
				Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", СтрокаПоискаАртикул));
					
					//bercut250120 выравниваем поиск
					Если не НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда	
						КолвоЭлементовКоллекции = НайденнаяНоменклатураПоКлючу.Количество(); 
						Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
							ЭлементКоллекции = НайденнаяНоменклатураПоКлючу[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
							Если не ЭлементКоллекции.ПроизводительПоиск = СтрокаПоискаПроизводитель Тогда 
								НайденнаяНоменклатураПоКлючу.Удалить(НайденнаяНоменклатураПоКлючу.Найти(ЭлементКоллекции)); 
							КонецЕсли; 	
						КонецЦикла; 
					КонецЕсли;
					//
					
					Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
						НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск, НоменклатураПоставщикаПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
						НашлиНоменклатуруПоставщиков = (НайденнаяНоменклатураПоКлючу.Количество()>0);
						Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
							НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", СтрокаПоискаАртикул));
							НашлиНоменклатуруПоставщиков = (НайденнаяНоменклатураПоКлючу.Количество()>0);
							
							//bercut250120 добавим мягкий поиск
							Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
								НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ПроизводительПоиск, НаименованиеПоиск",	СтрокаПоискаПроизводитель, СтрокаПоискаНоменклатура));
								Если не НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
									Для каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
										Если не СтрНайти(НоменклатураПоКлючу.АртикулПоиск,СтрокаПоискаАртикул) = 0 Тогда
											ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Производитель);
											НашлиМягко = Истина;
											Прервать;
										КонецЕсли;
									КонецЦикла;
								иначе
									НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ПроизводительПоиск",СтрокаПоискаПроизводитель));
									Если не НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
										Для каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
											Позиция = СтрДлина(СтрокаПоискаНоменклатура)-1;
											СтрокаПоискаНоменклатура = ?(СтрНайти(СтрокаПоискаНоменклатура,",",,Позиция) = 0,СтрокаПоискаНоменклатура,Лев(СтрокаПоискаНоменклатура,СтрДлина(СтрокаПоискаНоменклатура)-1));
											Если не СтрНайти(НоменклатураПоКлючу.НаименованиеПоиск,СтрокаПоискаНоменклатура) = 0 Тогда
												ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Производитель);
												НашлиМягко = Истина;
												Прервать;
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
								НайденнаяНоменклатураПоКлючу.Очистить();
							КонецЕсли;
							Если не НашлиМягко Тогда
								НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ПроизводительПоиск",СтрокаПоискаПроизводитель));
								Если не НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
									Для каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
										Если не СтрНайти(НоменклатураПоКлючу.АртикулПоиск,СтрокаПоискаАртикул) = 0 Тогда
											ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Производитель);
											НашлиМягко = Истина;
											Прервать;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
								НайденнаяНоменклатураПоКлючу.Очистить();
							КонецЕсли;
							//
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
				Если НашлиНоменклатуруПоставщиков Тогда
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Производитель, НоменклатураПоКлючу.Характеристика, НоменклатураПоКлючу.НоменклатураПартнера);
				Иначе
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Производитель);
				КонецЕсли;	
			КонецЦикла;	
			
		//поиск только по артикулу
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) Тогда
			
			НашлиНоменклатуруПоставщиков = Ложь;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Производитель) Тогда
				Отбор = Новый Структура("АртикулПоиск, ПроизводительПоиск",СтрокаПоискаАртикул, СтрокаПоискаПроизводитель);
			Иначе 
				Отбор = Новый Структура("АртикулПоиск",	СтрокаПоискаАртикул);
			КонецЕсли;
			
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Отбор);
			
			Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", СтрокаПоискаАртикул));
				НашлиНоменклатуруПоставщиков = (НайденнаяНоменклатураПоКлючу.Количество()>0);
			КонецЕсли;
			Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
				Если НашлиНоменклатуруПоставщиков Тогда
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Производитель, НоменклатураПоКлючу.Характеристика, НоменклатураПоКлючу.НоменклатураПартнера);
				Иначе
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Производитель);
				КонецЕсли;	
			КонецЦикла;
			
		//поиск по номенклатуре		
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			НашлиНоменклатуруПоставщиков = Ложь;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Производитель) Тогда
				Отбор = Новый Структура("НаименованиеПоиск, ПроизводительПоиск",СтрокаПоискаНоменклатура, СтрокаПоискаПроизводитель);
			Иначе 
				Отбор = Новый Структура("НаименованиеПоиск", СтрокаПоискаНоменклатура);
			КонецЕсли;
			
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Отбор);
			
			Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура));
				Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("НоменклатураПоставщикаПоиск", СтрокаПоискаНоменклатура));
					НашлиНоменклатуруПоставщиков = (НайденнаяНоменклатураПоКлючу.Количество()>0);
				КонецЕсли;
			КонецЕсли;
			Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
				Если НашлиНоменклатуруПоставщиков Тогда
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Производитель, НоменклатураПоКлючу.Характеристика, НоменклатураПоКлючу.НоменклатураПартнера);
				Иначе
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Производитель);
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение тч Товары.		
		МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", НомерСтроки));		
		Ошибка = Ложь;
		
		Для Индекс = 0 По МассивПодобраннойНоменклатуры.Количество() - 1 Цикл
			
			НоваяСтрокаТовары = Объект.Товары.Добавить();
			НоваяСтрокаТовары.Отметка = Истина;
			НоваяСтрокаТовары.ЗагружаемаяНоменклатура    = НоваяСтрока.НоменклатураНаименование;
			НоваяСтрокаТовары.ЗагружаемыйАртикул         = НоваяСтрока.Артикул;
			НоваяСтрокаТовары.Производитель              = НоваяСтрока.Производитель; /// это строка а надо найти справочник из МассивПодобраннойНоменклатуры
			НоваяСтрокаТовары.ДатаПоступления            = ДатаПоступления;
			Если ЗагружатьКоличество Тогда
				НоваяСтрокаТовары.КоличествоУпаковок        = НоваяСтрока.Количество;
			КонецЕсли;
			НоваяСтрокаТовары.КодСтроки                  = НомерСтроки;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрока,,"Артикул");
			//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409
			Если пИзменятьПлановыеДаты Тогда  
				НоваяСтрокаТовары.Рин1_ПлановаяДатаОтгрузки = НоваяСтрокаТовары.ДатаПоступления;
				НоваяСтрокаТовары.Рин1_ПлановаяДатаПоступления = НоваяСтрокаТовары.ДатаПоступления;
			КонецЕсли;
			//--Шерстюк Ю.Ю.

			Если МассивПодобраннойНоменклатуры.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, МассивПодобраннойНоменклатуры.Получить(0));
			ИначеЕсли МассивПодобраннойНоменклатуры.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru='По данным для поиска в строке %НомерСтроки% совпадений не найдено.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки-ВысотаШапки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Иначе
				Если не Ошибка Тогда
					ТекстОшибки = НСтр("ru='По данным для поиска в строке %НомерСтроки% найдено несколько совпадений.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки-ВысотаШапки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					Ошибка = Истина;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, МассивПодобраннойНоменклатуры.Получить(Индекс));
				
			КонецЕсли;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Дата));
			НоваяСтрокаТовары.СтавкаНДС = НоваяСтрокаТовары.Номенклатура.СтавкаНДС;		
			
			Если ЗагружатьКоличество Тогда
				
				Если НоваяСтрокаТовары.Количество > 0 Тогда
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				КонецЕсли;
				
			КонецЕсли;
						
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
			
			ЕстьСкидки = Ложь;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаНДС) ИЛИ ЕстьСкидки Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаСНДС)  ИЛИ ЕстьСкидки Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сумма) ИЛИ ЕстьСкидки Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, Неопределено);
			
			//для валютного пересчета
			НоваяСтрокаТовары.ЦенаБуферная  = НоваяСтрокаТовары.Цена;
			
			Попытка
				ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
						
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Если МассивПодобраннойНоменклатуры.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	УточнениеНоменклатуры.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеИБпоНоменклатуреИхарактеристикам()
	
	ЕстьПравоДоступаЧтениеСправочникаНоменклатураПоставщиков = ПравоДоступа("Чтение", Метаданные.Справочники.НоменклатураКонтрагентов);
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаНоменклатуры", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаХарактеристик", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаНоменклатурыПоставщиков", Новый ТаблицаЗначений);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	НЕОПРЕДЕЛЕНО КАК ЗначениеДляОтбораХарактеристик,
	|	Номенклатура.Производитель КАК Производитель
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка)
	|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ВариантыКомплектацииНоменклатуры.Основной)
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
//	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|	И &ТекстУсловияОтбор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул,
	|	Номенклатура.Наименование,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.ИспользованиеХарактеристик,
	|	ВЫБОР
	|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Номенклатура.Ссылка
	|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА Номенклатура.ВладелецХарактеристик
	|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ТОГДА Номенклатура.ВидНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	NULL
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА Номенклатура.Ссылка
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА Номенклатура.ВладелецХарактеристик
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА Номенклатура.ВидНоменклатуры
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка)
	|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	|			И (ВариантыКомплектацииНоменклатуры.Основной)
	|ГДЕ
	|	Номенклатура.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
//	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И &ТекстУсловияОтбор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	ТаблицаНоменклатуры.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
	|ПОМЕСТИТЬ ПараметрыОтбораХарактеристик
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыОтбора.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатуры.НаименованиеПолное КАК НаименованиеПолное
	|ПОМЕСТИТЬ ТаблицаХарактеристик
	|ИЗ
	|	ПараметрыОтбораХарактеристик КАК ПараметрыОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ПараметрыОтбора.ЗначениеДляОтбораХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ ПараметрыОтбора.ЗначениеДляОтбораХарактеристик = НЕОПРЕДЕЛЕНО
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗначениеДляОтбораХарактеристик,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хар.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Хар.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
	|	Хар.Характеристика КАК Характеристика,
	|	Хар.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
	|ИЗ
	|	ТаблицаХарактеристик КАК Хар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ном.Код КАК Код,
	|	Ном.Артикул КАК Артикул,
	|	Ном.Наименование КАК Наименование,
	|	Ном.НаименованиеПолное КАК НаименованиеПолное,
	|	Ном.Номенклатура КАК Номенклатура,
	|	Ном.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	Ном.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик,
	|	Ном.Производитель КАК Производитель
	|ИЗ
	|	ТаблицаНоменклатуры КАК Ном";
	
	Если ЕстьПравоДоступаЧтениеСправочникаНоменклатураПоставщиков Тогда
		ТекстЗапроса = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ном.Номенклатура КАК Номенклатура,
		|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураПартнера,
		|	НоменклатураКонтрагентов.Артикул КАК АртикулПоставщика,
		|	НоменклатураКонтрагентов.Характеристика КАК Характеристика
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК Ном
		|		ПО (Ном.Номенклатура = НоменклатураКонтрагентов.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаХарактеристик КАК Хар
		|		ПО (Хар.ЗначениеДляОтбораХарактеристик = Ном.ЗначениеДляОтбораХарактеристик)
		|			И (Хар.Характеристика = НоменклатураКонтрагентов.Характеристика)
		|ГДЕ
		//|	НЕ НоменклатураПоставщиков.ПометкаУдаления
		//|	И &СопоставлятьПоНоменклатуреПоставщиков
		|	&СопоставлятьПоНоменклатуреПоставщиков
		|	И НоменклатураКонтрагентов.Владелец = &Партнер";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СопоставлятьПоНоменклатуреПоставщиков", СопоставлятьПоНоменклатуреПоставщиков);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	ТекстУсловияОтбор = "ИСТИНА";
	
	Если ЗначениеЗаполнено(ОтборПоТипуНоменклатуры) Тогда
		
		СодержитНабор = Ложь;
		ОтборыПоТипуНоменклатурыБезНаборов = Новый СписокЗначений;
		Для Каждого ЭлементМассива Из ОтборПоТипуНоменклатуры Цикл
			ОтборыПоТипуНоменклатурыБезНаборов.Добавить(ЭлементМассива);
		КонецЦикла;
		Если ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор) <> Неопределено Тогда
			СодержитНабор = Истина;
			ОтборыПоТипуНоменклатурыБезНаборов.Удалить(ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор));
		КонецЕсли;
		
		Если Не СодержитНабор Тогда
			
			ТекстУсловияОтбор = "Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)";
			Запрос.УстановитьПараметр("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
			
		Иначе
			
			ОграничиватьНаборыПоУслугам = ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Услуга) <> Неопределено
			ИЛИ ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Работа) <> Неопределено;
			ОграничиватьНаборыПоТоварам = ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.МногооборотнаяТара) <> Неопределено
			ИЛИ ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Товар) <> Неопределено;
			
			Если Не ОграничиватьНаборыПоУслугам И ОграничиватьНаборыПоТоварам Тогда
				
				ТекстУсловияОтбор = "Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)
				|И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитУслуги, Ложь)";
			КонецЕсли;
			
			Если ОграничиватьНаборыПоУслугам И Не ОграничиватьНаборыПоТоварам Тогда
				
				ТекстУсловияОтбор = "Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)
				|И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитТовары, Ложь)";
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТекстУсловияОтбор", ТекстУсловияОтбор);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Для Каждого КолонкаРезультата Из РезультатЗапроса[3].Колонки Цикл
		Результат.ТаблицаХарактеристик.Колонки.Добавить(КолонкаРезультата.Имя);
	КонецЦикла;
	Результат.ТаблицаХарактеристик.Колонки.Добавить("НаименованиеХарактеристикиПоиск");
	Результат.ТаблицаХарактеристик.Колонки.Добавить("НаименованиеХарактеристикиПолноеПоиск");
	ВыборкаТаблицыХарактеристик = РезультатЗапроса[3].Выбрать();
	Пока ВыборкаТаблицыХарактеристик.Следующий() Цикл
		НоваяСтрокаТаблицыХарактеристик = Результат.ТаблицаХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств( НоваяСтрокаТаблицыХарактеристик, ВыборкаТаблицыХарактеристик);
		
		НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристикиПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристики, " ", ""));
		НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристикиПолноеПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристикиПолное, " ", ""));
	КонецЦикла;
	
	Для Каждого КолонкаРезультата Из РезультатЗапроса[4].Колонки Цикл
		Результат.ТаблицаНоменклатуры.Колонки.Добавить(КолонкаРезультата.Имя);
	КонецЦикла;
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("АртикулПоиск");
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПоиск");
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПолноеПоиск");
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("ПроизводительПоиск");
		
	ВыборкаТаблицыНоменклатуры = РезультатЗапроса[4].Выбрать();
	Пока ВыборкаТаблицыНоменклатуры.Следующий() Цикл
		НоваяСтрокаТаблицыНоменклатуры = Результат.ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств( НоваяСтрокаТаблицыНоменклатуры, ВыборкаТаблицыНоменклатуры);
		
		НоваяСтрокаТаблицыНоменклатуры.Код = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Код, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.АртикулПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Артикул, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.НаименованиеПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Наименование, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.НаименованиеПолноеПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.НаименованиеПолное, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.ПроизводительПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Производитель, " ", ""));

	КонецЦикла;
	
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("Номенклатура");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("НоменклатураПартнера");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("АртикулПоставщика");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("Характеристика");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("НоменклатураПоставщикаПоиск");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("АртикулПоставщикаПоиск");

	Если ЕстьПравоДоступаЧтениеСправочникаНоменклатураПоставщиков Тогда
		ВыборкаТаблицыНоменклатурыПоставщиков = РезультатЗапроса[5].Выбрать();
		Пока ВыборкаТаблицыНоменклатурыПоставщиков.Следующий() Цикл
			НоваяСтрокаТаблицыНоменклатурыПоставщиков = Результат.ТаблицаНоменклатурыПоставщиков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыНоменклатурыПоставщиков, ВыборкаТаблицыНоменклатурыПоставщиков);
			
			НоваяСтрокаТаблицыНоменклатурыПоставщиков.НоменклатураПоставщикаПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатурыПоставщиков.НоменклатураПартнера, " ", ""));
			НоваяСтрокаТаблицыНоменклатурыПоставщиков.АртикулПоставщикаПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатурыПоставщиков.АртикулПоставщика, " ", ""));
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДополнитьТоварыНомерамиГТД()
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.Рин1_ЗагрузкаИзмененийУсловийПоставки.ПолучитьМакет("МакетЗагрузкиДанных");
	ТабличныйДокумент.Очистить();
		
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Артикул");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Номенклатура");
	ОбластьТовары.Параметры.ЗаголовокТоварноеМесто = НСтр("ru='Номенклатура'");

	ТабличныйДокумент.Присоединить(ОбластьТовары);
	
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Производитель");
	ТабличныйДокумент.Присоединить(ОбластьТовары);

	Если ЗагружатьКоличество Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьЦены Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Цена");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьСуммы Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Сумма");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ДатаПоступления");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область("R2C1");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели)
	
	СтруктураПересчетаСуммы = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
	Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
	Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНоменклатурыХарактеристик(КодТекущейСтроки, СписокХарактеристик = Ложь)
	
	Если СписокХарактеристик Тогда
		СписокВыбораХарактеристка = Элементы.ТоварыХарактеристика.СписокВыбора;
		СписокВыбораХарактеристка.Очистить();
	Иначе
		СписокВыбораНоменклатура  = Элементы.ТоварыНоменклатура.СписокВыбора;
		СписокВыбораНоменклатура.Очистить();
	КонецЕсли;
	
	МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	Для каждого ЭлементМассива Из МассивПодобраннойНоменклатуры Цикл
		Если СписокХарактеристик Тогда
			Если СписокВыбораХарактеристка.НайтиПоЗначению(ЭлементМассива.Характеристика) = Неопределено Тогда
				СписокВыбораХарактеристка.Добавить(ЭлементМассива.Характеристика);
			КонецЕсли;
		Иначе
			Если СписокВыбораНоменклатура.НайтиПоЗначению(ЭлементМассива.Номенклатура) = Неопределено Тогда
				СписокВыбораНоменклатура.Добавить(ЭлементМассива.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Отбор = Новый Структура("ОтметкаСтроки",истина);  //только с отметкой по строке
	Товары = РезультатСравнения.Выгрузить(Отбор);
	ОтобраннаяТЗ_РезультатСравнения = ДанныеФормыВЗначение(ТоварыДокумента,Тип("ТаблицаЗначений")).СкопироватьКолонки();
	ОтобраннаяТЗ_РезультатСравнения.Колонки.Добавить("ЦенаВключаетНДС", Новый ОписаниеТипов("Булево"));
    ОтобраннаяТЗ_РезультатСравнения.Колонки.Добавить("ПричинаОтмены", Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовПоставщикам"));

	Для каждого Стр Из Товары Цикл
		
		НовСтр = ОтобраннаяТЗ_РезультатСравнения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Стр);
		
		Если Стр.ОтметкаКоличество Тогда
			НовСтр.Количество = Стр.КоличествоОтвет;
		Иначе 
			НовСтр.Количество = Стр.КоличествоДокумент;
		КонецЕсли;
		Если Стр.ОтметкаЦена Тогда
			НовСтр.Цена = Стр.ЦенаОтвет;
		Иначе 
			НовСтр.Цена = Стр.ЦенаДокумента;
		КонецЕсли;
		Если Стр.ОтметкаДатаПоставки Тогда
			НовСтр.ДатаПоступления = Стр.ДатаПоставкиОтвет;
		Иначе 
			НовСтр.ДатаПоступления = Стр.ДатаПоставкиДокумент;
		КонецЕсли;
		
		НовСтр.КоличествоУпаковок = НовСтр.Количество; 
		НовСтр.Сумма = НовСтр.Цена * НовСтр.Количество;
		НовСтр.ТипНоменклатуры = Стр.ТипНоменклатуры;
		НовСтр.ЦенаВключаетНДС = ЦенаВключаетНДС;
		//++Шерстюк Ю.Ю. 21.05.2021 9171
		НовСтр.ПеренесенаСтрокаВТЧ = Ложь;
		//--Шерстюк Ю.Ю.

	КонецЦикла;	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Для каждого Стр Из ОтобраннаяТЗ_РезультатСравнения Цикл
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Стр, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	ТоварыДляПереноса = ОтобраннаяТЗ_РезультатСравнения.СкопироватьКолонки();  //ДанныеФормыВЗначение(ТоварыДокумента,Тип("ТаблицаЗначений")).СкопироватьКолонки();
	
	ТоварыДляПереноса.Колонки.Добавить("НоменклатураНабора", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	ТоварыДляПереноса.Колонки.Добавить("ИндексНабора", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10,0));
		
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТЧ Из ОтобраннаяТЗ_РезультатСравнения Цикл
		
		Если СтрокаТЧ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
			НоваяСтрока = ТоварыДляПереноса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			//250320 задача 62п1
			Если не ОтменятьНеНайденные и НоваяСтрока.Отменено Тогда
				НоваяСтрока.Отменено = Ложь;
			КонецЕсли;
			//
		Иначе			
			
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, СтрокаТЧ);
			ПараметрыКомплектующих.НоменклатураНабора   = СтрокаТЧ.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = СтрокаТЧ.Характеристика;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Дата",       Дата);
			ДополнительныеПараметры.Вставить("Соглашение", Соглашение);
			ДополнительныеПараметры.Вставить("Валюта",     ВалютаДокумента);
			ДополнительныеПараметры.Вставить("Цена",       СтрокаТЧ.Цена);
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			
		КонецЕсли;
		 
		
	КонецЦикла;
	
	//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409 и 9171 добавила признакобработки строки (нужен при переносе в заказ поставщику, изменилось условие работы обработки: меняем только то, что отмечено остальное не трогаем)
	
	////20200820 ГлазуновДВ Добавили Обработку ТЗ "ТоварыДляПереноса"
	//ТоварыДляПереноса.Свернуть("Артикул, ВидЦеныПоставщика, ДатаПоступления, ИндексНабора, Назначение, Номенклатура, НоменклатураНабора, НоменклатураПоставщика
	//| ,НоменклатураПроизводителей, Отменено, ПричинаОтмены, Производитель, СтавкаНДС, ТипНоменклатуры, Упаковка, Цена, ЦенаВключаетНДС
	//| ", "Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС");
	ТоварыДляПереноса.Свернуть("Артикул, Рин1_ПлановаяДатаПоступления, Рин1_ПлановаяДатаОтгрузки, ВидЦеныПоставщика, ДатаПоступления, ИндексНабора, Назначение, Номенклатура, НоменклатураНабора, НоменклатураПартнера
	| ,НоменклатураПроизводителей, Отменено, ПричинаОтмены, Производитель, СтавкаНДС, ТипНоменклатуры, Упаковка, Цена, ЦенаВключаетНДС,НомерСтроки,ПеренесенаСтрокаВТЧ
	| ", "Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС");
	//--Шерстюк Ю.Ю.	
	Возврат ПоместитьВоВременноеХранилище(ТоварыДляПереноса);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНомерГТД(НомерГТД, СтранаПроисхождения)
	
КонецФункции

&НаСервере
Процедура СоздатьНомераГТД()
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКолонок()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
	"ТоварыЗагружаемаяХарактеристика", 
	"Видимость", 
	ИспользоватьХарактеристикиНоменклатуры);
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ТоварыАртикулПоставщика");
	МассивЭлементов.Добавить("ТоварыНоменклатураПоставщика");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
	МассивЭлементов, 
	"Видимость", 
	СопоставлятьПоНоменклатуреПоставщиков);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	//
	ЗаполненыНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст);
	
	Если Не ЗаполненыНоменклатураАртикул Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать колонки Артикул или Номенклатура в таблицу из внешнего файла.'"));
		Возврат;
	КонецЕсли;
	//
//	ЗаполненыКоличествоЦена = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C4").Текст)
//	И ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C5").Текст);
//{{20201126 ГлазуновДВ Убрали обязательность заполнения Цены
	ЗаполненыКоличествоЦена = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C4").Текст);
	Если Не ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C5").Текст) Тогда
		ВалютаПоставщика = ВалютаДокумента;
	КонецЕсли;
//}}20201126 ГлазуновДВ	
	
	Если Не ЗаполненыКоличествоЦена Тогда
//20201126 ГлазуновДВ Убрали обязательность заполнения Цены
//		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать обязательные колонки Количество и Цена в таблицу из внешнего файла.'"));
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать обязательные колонку Количество в таблицу из внешнего файла.'"));
		Возврат;
	КонецЕсли;
	//
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	СопоставитьДанныеТабличногоДокументаСДаннымиИБ();
	
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ОчиститьСообщения();
	ПеренестиТоварыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Отмена" Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;
	ПеренестиТоварыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыФрагмент()
	
	Перем СтруктураВыбора;
	
	Если ПроверитьЗаполнение() Тогда
		Закрыть();
		СтруктураВыбора = Новый Структура();
		СтруктураВыбора.Вставить("АдресТоваровВХранилище", ПоместитьТоварыВХранилище());
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			СтруктураВыбора.Вставить("ИмяТЧ", ИмяТЧ);
		КонецЕсли;
		ОповеститьОВыборе(СтруктураВыбора);
	КонецЕсли;
	
	//++Шерстюк Ю.Ю. 12.07.2021 Задача 9171 убрать создание задачи, этим никто не пользуется
	////Формируем задачу пользователю
	//Если не Сообщение = "" и ЗадачиИспользуются Тогда
	//	
	//	Задача = ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ФормаЗадачи",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
	//	//Задача = ПолучитьФорму("Задача.ЗадачаИсполнителя.Форма.ФормаЗадачи");
	//	
	//	Задача.Объект.Наименование = "Расхождение цен в " + Строка(Владелец);
	//	Задача.Объект.Описание = Сообщение;
	//	Задача.Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	//	Задача.Объект.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
	//	Задача.Объект.Предмет = Владелец;
	//	Задача.Элементы.Исполнитель.ТолькоПросмотр = Ложь;
	//	
	//	//Задача.Записать();
	//	
	//	СообщениеПользователю = Новый СообщениеПользователю;
	//	СообщениеПользователю.Текст = "Укажите исполнителя и запишите задачу!";
	//	СообщениеПользователю.Сообщить();
	//	
	//КонецЕсли;	
	//--Шерсттюк Ю.Ю.
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//УсловноеОформление.Элементы.Очистить();
	
	Если Параметры.Свойство("ПроверятьЗаполнениеХарактеристик") И Параметры.ПроверятьЗаполнениеХарактеристик Тогда
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	КонецЕсли;
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);
	
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦенаВключаетНДС");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтавкаНДС.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаНДС.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Скрытие количества упаковок
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(Приемник, СтрокаИсточникЧисловогоЗначения, АбсолютныйНомерСтроки, НазваниеКолонки, ВысотаШапки = 0)
	Успех = Истина;
	
	ЗначениеДляПриведения = СтрЗаменить(СтрокаИсточникЧисловогоЗначения, " ", "");
	
	
	Если ЗначениеЗаполнено(ЗначениеДляПриведения) Тогда
		
		//исправим такие комбинации чисел в строке - 10.252,16 и 10,252.16 - для правильного привидения
		Точка = 0;
		Запятая = 0;		
		Для Сч = 1 по СтрДлина(ЗначениеДляПриведения) Цикл 
			Символ  = Сред(ЗначениеДляПриведения, Сч, 1);
			Если СтрНайти(".", Символ) Тогда
				Точка = Сч;
			ИначеЕсли СтрНайти(",", Символ) Тогда 
				Запятая = Сч;
			КонецЕсли;
		КонецЦикла; 
		Если Точка > Запятая Тогда
			ЗначениеДляПриведения = СтрЗаменить(ЗначениеДляПриведения,",","");
		Иначе 
			ЗначениеДляПриведения = СтрЗаменить(ЗначениеДляПриведения,".","");				
		КонецЕсли;
		
		мТипов = Новый Массив;
		мТипов.Добавить(Тип("Число"));
		мТипов.Добавить(Тип("ОписаниеТипов"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(мТипов);
		ПриведенноеЗначение = ОписаниеТиповЧ.ПривестиЗначение(ЗначениеДляПриведения);
		Если Не ПриведенноеЗначение = Неопределено Тогда
			Приемник = ПриведенноеЗначение;			
		Иначе
			Успех = Ложь;
			ТекстОшибки = НСтр("ru='В строке %НомерСтроки%, колонке ""%Колонка%"" введено значение ""%Значение%"", не являющееся числом.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", АбсолютныйНомерСтроки-ВысотаШапки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Колонка%", НазваниеКолонки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Значение%", СтрокаИсточникЧисловогоЗначения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;	
	Иначе
		Приемник = 0;
	КонецЕсли;
	
	Возврат Успех;
КонецФункции

&НаСервере
Функция ПрисвоитьДатуПриЗаполненииТЧ(Приемник, СтрокаИсточникДаты, АбсолютныйНомерСтроки, НазваниеКолонки, ВысотаШапки = 0) 
	
	Успех = Истина;	
	
	//уберем возможные пробелы
	ЗначениеДляПриведения = СтрЗаменить(СтрокаИсточникДаты, " ", "");
	
	//заменим запятые на точки т.к. хбз что попадет в ячейки
	ЗначениеДляПриведения = СтрЗаменить(ЗначениеДляПриведения, ",", ".");
	
	Если ЗначениеЗаполнено(ЗначениеДляПриведения) Тогда
		
		//опредилим какую форматную строку использовать
		//11.04.19 -8 символов	
		//11.04.2019 -10 символов
		//11 апр 2019 проверка на кириллицу и преобразование в дату
		
		ДлинаСтроки = СтрДлина(ЗначениеДляПриведения);	
		
		Если не ЕстьКириллица(ЗначениеДляПриведения) Тогда 
			
			Если ДлинаСтроки = 8 Тогда
				
				ФорматДаты = "dd.MM.yy";
				
			ИначеЕсли ДлинаСтроки = 10 Тогда
				
				ФорматДаты = "dd.MM.yyyy";
				
			Иначе 
				
				Успех = Ложь;
				
			КонецЕсли;
			
		Иначе 	
			
			Для Месяц = 1 По 12 Цикл 
				ЗначениеДляПриведения = СтрЗаменить(ЗначениеДляПриведения, СтрЗаменить(Формат(Дата(2019, Месяц, 1), "ДФ=MMМ"),".",""), "." + Формат(Месяц, "ЧЦ=2; ЧВН=") + ".");  
			КонецЦикла; 
			
			Если ЕстьКириллица(ЗначениеДляПриведения) Тогда  // не смогли привести к дате
				
				Успех = Ложь;
				
			КонецЕсли;
			
			ФорматДаты = "dd.MM.yyyy";
			
		КонецЕсли;
		
		
		Если Успех Тогда 
			
			РазрядДаты = Новый Соответствие; 
			Для Элемент = 1 По СтрДлина(ФорматДаты) + 7 Цикл 
				РазрядДаты[Сред(ФорматДаты + "dMyHhms", Элемент, 1)] = 0    // - инициализация частей даты 
			КонецЦикла;  
			
			Для Элемент = 1 По СтрДлина(ФорматДаты) Цикл 
				РазрядДаты[Сред(ФорматДаты, Элемент, 1)] = 10 * РазрядДаты[Сред(ФорматДаты, Элемент, 1)] + Найти("123456789", Сред(ЗначениеДляПриведения, Элемент, 1)); // - накопление частей даты 
			КонецЦикла; 
			
			РазрядДаты["y"] = РазрядДаты["y"] + ?(РазрядДаты["y"] < 50, 2000, ?(РазрядДаты["y"] < 100, 1900, 0)); // - дополнение двух цифр года до четырех 
			
			Попытка 
				Приемник = Дата(РазрядДаты["y"], РазрядДаты["M"], РазрядДаты["d"], РазрядДаты["H"] + РазрядДаты["h"], РазрядДаты["m"], РазрядДаты["s"]); 
			Исключение 
				Успех = Ложь; 
			КонецПопытки; 
			
		КонецЕсли;
		
	Иначе 
		
		Успех = Ложь; 
		
	КонецЕсли;
	
	Если не Успех Тогда
		
		ТекстОшибки = НСтр("ru='В строке %НомерСтроки%, колонке ""%Колонка%"" введено значение ""%Значение%"", не являющееся датой.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", АбсолютныйНомерСтроки-ВысотаШапки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Колонка%", НазваниеКолонки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Значение%", СтрокаИсточникДаты);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
		Приемник = Дата(1,1,1);
		
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаСервере
Функция ЕстьКириллица(ИсходнаяСтрока) 
	
	Кириллица = Ложь; 	
	
	Для Сч = 1 по СтрДлина(ИсходнаяСтрока) Цикл 
		Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1)); 
		Если СтрНайти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда 
			Кириллица = Истина; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Кириллица;
	
КонецФункции

&НаКлиенте
Процедура Справка(Команда)
	
	Форма = ПолучитьФорму("Обработка.Рин1_ЗагрузкаИзмененийУсловийПоставки.Форма.ФормаСправки");
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для каждого Элемент Из Элементы.Товары.ВыделенныеСтроки Цикл
		Стр = Объект.Товары.НайтиПоИдентификатору(Элемент);
		Стр.Отметка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для каждого Элемент Из Элементы.Товары.ВыделенныеСтроки Цикл
		Стр = Объект.Товары.НайтиПоИдентификатору(Элемент);
		Стр.Отметка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее1(Команда)
	
	Если не ЗначениеЗаполнено(ВалютаПоставщика) Тогда
		ОчиститьСообщения();
		Сообщить("Не выбрана вылюта поставщика!");
		Возврат;	
	КонецЕсли;
	
	Отбор = Новый Структура("Отметка",Истина);
	НайденныеОтметки = Объект.Товары.НайтиСтроки(Отбор);
	
	Если НайденныеОтметки.Количество() = 0 Тогда
		ОчиститьСообщения();
		Сообщить("Не выбрана ни одна строка для сопоставления!");
		Возврат;
	КонецЕсли;	
	
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
//	СопоставитьДанныеТабличногоДокументаСДаннымиИБ_2();
//20200820 ГлазуновДВ Переделали механизм анализа после ответа от Поставщиков
	//СопоставитьДанныеТабличногоДокументаСДаннымиИБ_2_1();
	
	//{{20201127 ГлазуновДВ Проверка на запуск из Документа
	//++Шертстюк Ю.Ю. 13.07.2021 Задача 9171 изменилась логика загрузки, можем обновлять данные лишь по отдельным строкам, поэтому переписано сопоставление
	СопоставитьДанныеТабличногоДокументаСДаннымиИБ_3();
	//--Шерстюк Ю.Ю.
	Для Каждого СтрокаРезультат Из РезультатСравнения Цикл
		Если СтрокаРезультат.ЦенаОтвет = 0 Тогда
			СтрокаРезультат.ОтметкаЦена = Ложь;
		КонецЕсли;
		Если СтрокаРезультат.ДатаПоставкиОтвет = Дата('00010101') Тогда
			СтрокаРезультат.ОтметкаДатаПоставки = Ложь;
		КонецЕсли;
	КонецЦикла;
	//}}20201127 ГлазуновДВ
	
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
		
КонецПроцедуры

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ_2()
	
	//надо бы переделать с нуля - кучу раз меняли условия!!!
	
	//дозаполним производителя из номенклатуры что бы при сравнении не выпадало расхождение по производителю
	Для каждого СтрокаДокумента Из ТоварыДокумента Цикл
		
		СтрокаДокумента.Производитель = СтрокаДокумента.Номенклатура.Производитель;
		
	КонецЦикла;	
			
	ЗадачиИспользуются = Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить();
	Сообщение = "";
	
	//
	
	Отбор = Новый Структура("Отметка",Истина);
	ТЗ_ОбъектТовары = Объект.Товары.Выгрузить(Отбор);	
	
	//Статус 2-Удаленный, 1-Новый, 0 имеющийся, относительно таблицы ТоварыДокумента и ОбъектТовары

	НеобходимоеКоличество = 0;
	ОбрабатываемаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ОсталосьКоличество = 0;
	НомерСтроки = 0;
	ПодобранноеКоличествоПоДокументу = 0;
	
	ТЗ_ОбъектТовары.Сортировать("Номенклатура,ДатаПоступления");
	
	Для каждого Строка Из ТЗ_ОбъектТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если не ОбрабатываемаяНоменклатура = Строка.Номенклатура Тогда
			НеобходимоеКоличество = 0;
			ОсталосьКоличество = 0;
			ОбрабатываемаяНоменклатура = Строка.Номенклатура;
			ПодобранноеКоличествоПоДокументу = 0;
			РаспределяемоеКоличество = Строка.Количество;
		КонецЕсли;
		
		Отбор = Новый Структура("Номенклатура",Строка.Номенклатура);
		Массив = ТоварыДокумента.НайтиСтроки(Отбор);
		
		КоличествоСтрокПодНазначение = 0;
		Для каждого Элемент Из Массив Цикл
			Если не Элемент.Назначение = Справочники.Назначения.ПустаяСсылка() Тогда
				КоличествоСтрокПодНазначение = КоличествоСтрокПодНазначение + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если не КоличествоСтрокПодНазначение = 0 Тогда
			
			Если не Массив.Количество() = 0 Тогда
				Для каждого Элемент Из Массив Цикл
					Если ЗначениеЗаполнено(Элемент.Назначение) Тогда //нашли назначения
						Назначение = Элемент.Назначение;
						НеобходимоеКоличество = Элемент.Количество;
						Цена = Элемент.Цена;
						Количество = Элемент.Количество; 
						ДатаПоступления = Элемент.ДатаПоступления;
					иначе
						ДатаПоступления = Элемент.ДатаПоступления;
					КонецЕсли;
					//
					Если ЗначениеЗаполнено(Назначение) Тогда
						Если РаспределяемоеКоличество < НеобходимоеКоличество Тогда
							НовСтр = РезультатСравнения.Добавить();
							НовСтр.НомерСтроки = НомерСтроки; 
							НовСтр.Артикул = Строка.Артикул;
							НовСтр.ВидЦеныПоставщика = Элемент.ВидЦеныПоставщика;
							НовСтр.Номенклатура = Строка.Номенклатура; 
							НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
							НовСтр.Назначение = Назначение;
							НовСтр.КоличествоДокумент = Строка.Количество;
							ПодобранноеКоличествоПоДокументу = ПодобранноеКоличествоПоДокументу + Строка.Количество;
							НовСтр.КоличествоОтвет    = Строка.Количество;
							НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
							НовСтр.ЦенаДокумента = Цена;
							НовСтр.ЦенаОтвет = Строка.Цена;
							НовСтр.ДатаПоставкиДокумент = ДатаПоступления;
							НовСтр.ДатаПоставкиОтвет = Строка.ДатаПоступления;
							НовСтр.ОтметкаСтроки = Истина;
							НовСтр.ОтметкаКоличество = Истина;
							НовСтр.ОтметкаЦена = Истина;
							НовСтр.ОтметкаДатаПоставки = Истина;
							НовСтр.СтавкаНДС = Строка.СтавкаНДС;
							НеобходимоеКоличество = НеобходимоеКоличество - Строка.Количество;
							//ВывестиСообщениеОРазницеВКоличестве(Строка.Количество, Строка.Количество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);//хрень конечно
							ВывестиСообщениеОРазницеВЦенах(Цена, Строка.Цена, Строка.Номенклатура);
							ВывестиСообщениеОРазницеВДатахПоставки(ДатаПоступления, Строка.ДатаПоступления, Строка.Номенклатура);
							КоличествоСтрокПодНазначение = КоличествоСтрокПодНазначение - 1;
							РаспределяемоеКоличество = 0; 
						Иначе
							НовСтр = РезультатСравнения.Добавить();
							НовСтр.НомерСтроки = НомерСтроки; 
							НовСтр.Артикул = Строка.Артикул; 
							НовСтр.Номенклатура = Строка.Номенклатура;
							НовСтр.ВидЦеныПоставщика = Элемент.ВидЦеныПоставщика;
							НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
							НовСтр.Назначение = Назначение;
							НовСтр.КоличествоДокумент = НеобходимоеКоличество;
							ПодобранноеКоличествоПоДокументу = ПодобранноеКоличествоПоДокументу + НеобходимоеКоличество;
							НовСтр.КоличествоОтвет    = НеобходимоеКоличество;
							НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
							НовСтр.ЦенаДокумента = Цена;
							НовСтр.ЦенаОтвет = Строка.Цена;
							НовСтр.ДатаПоставкиДокумент = ДатаПоступления;
							НовСтр.ДатаПоставкиОтвет = Строка.ДатаПоступления;
							Назначение = Справочники.Назначения.ПустаяСсылка();  //закончили размещение в назначении
							НовСтр.Статус = 0;
							НовСтр.ОтметкаСтроки = Истина;
							НовСтр.ОтметкаКоличество = Истина;
							НовСтр.ОтметкаЦена = Истина;
							НовСтр.ОтметкаДатаПоставки = Истина;
							НовСтр.СтавкаНДС = Строка.СтавкаНДС;
							РаспределяемоеКоличество = РаспределяемоеКоличество - НеобходимоеКоличество;
							ОсталосьКоличество = РаспределяемоеКоличество;//?(РаспределяемоеКоличество - НеобходимоеКоличество > 0, РаспределяемоеКоличество - НеобходимоеКоличество, 0);
							НеобходимоеКоличество = 0;
							//ВывестиСообщениеОРазницеВКоличестве(НеобходимоеКоличество, НеобходимоеКоличество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);//хрень конечно
							ВывестиСообщениеОРазницеВЦенах(Цена, Строка.Цена, Строка.Номенклатура);
							ВывестиСообщениеОРазницеВДатахПоставки(ДатаПоступления, Строка.ДатаПоступления, Строка.Номенклатура);
							КоличествоСтрокПодНазначение = КоличествоСтрокПодНазначение - 1;
						КонецЕсли;
						//
						Если КоличествоСтрокПодНазначение <= 0 и не ОсталосьКоличество = 0 Тогда                //дописываем остатки
							НомерСтроки = НомерСтроки + 1;
							НовСтр = РезультатСравнения.Добавить();
							НовСтр.НомерСтроки = НомерСтроки; 
							НовСтр.Артикул = Строка.Артикул; 
							НовСтр.ВидЦеныПоставщика = Элемент.ВидЦеныПоставщика;
							НовСтр.Номенклатура = Строка.Номенклатура;
							НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
							НовСтр.КоличествоДокумент = ОсталосьКоличество;
							ПодобранноеКоличествоПоДокументу = ПодобранноеКоличествоПоДокументу + ОсталосьКоличество;
							НовСтр.КоличествоОтвет = ОсталосьКоличество;
							НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
							НовСтр.ЦенаДокумента = Цена;
							НовСтр.ЦенаОтвет = Строка.Цена;
							НовСтр.ДатаПоставкиДокумент = ДатаПоступления;
							НовСтр.ДатаПоставкиОтвет = Строка.ДатаПоступления;
							НовСтр.ОтметкаСтроки = Истина;
							НовСтр.ОтметкаКоличество = Истина;
							НовСтр.ОтметкаЦена = Истина;
							НовСтр.ОтметкаДатаПоставки = Истина;
							НовСтр.СтавкаНДС = Строка.СтавкаНДС;
							//ВывестиСообщениеОРазницеВКоличестве(ОсталосьКоличество, ОсталосьКоличество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);//хрень конечно
							ВывестиСообщениеОРазницеВЦенах(Цена, Строка.Цена, Строка.Номенклатура);
							ВывестиСообщениеОРазницеВДатахПоставки(ДатаПоступления, Строка.ДатаПоступления, Строка.Номенклатура);
						КонецЕсли;
						НовСтр.Статус = 0;
					Иначе 
						//найдем общее кол-во по номенклатуре
						Отбор =  Новый Структура("Номенклатура,Назначение",Строка.Номенклатура,Справочники.Назначения.ПустаяСсылка());
						Отбор2 =  Новый Структура("Номенклатура",Строка.Номенклатура);
						
						Массив = ТоварыДокумента.НайтиСтроки(Отбор);	
						Массив2 = ТЗ_ОбъектТовары.НайтиСтроки(Отбор2);
						
						ИтогКоличествоПоДокументу = 0;
						Для каждого Элемент Из Массив Цикл
							ИтогКоличествоПоДокументу = ИтогКоличествоПоДокументу + Элемент.Количество;
							Цена = Элемент.Цена;
						КонецЦикла;
						
						НовСтр = РезультатСравнения.Добавить(); //остальные строки без назначения
						НовСтр.НомерСтроки = НомерСтроки; 
						НовСтр.Артикул = Строка.Артикул;
						НовСтр.ВидЦеныПоставщика = Элемент.ВидЦеныПоставщика;
						НовСтр.Номенклатура = Строка.Номенклатура;
						НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
						Если ПодобранноеКоличествоПоДокументу = 0 Тогда
							Если Массив2.Количество() > 1 Тогда
								НовСтр.КоличествоДокумент = РаспределяемоеКоличество;
								ПодобранноеКоличествоПоДокументу = Строка.Количество;
							Иначе 
								НовСтр.КоличествоДокумент = ИтогКоличествоПоДокументу;
							КонецЕсли;
						Иначе 
							НовСтр.КоличествоДокумент = ИтогКоличествоПоДокументу - ПодобранноеКоличествоПоДокументу;
						КонецЕсли;
						
						Если НовСтр.КоличествоДокумент = 0 Тогда
							РезультатСравнения.Удалить(НовСтр);
							Продолжить;
						КонецЕсли;
						
						РаспределяемоеКоличество = РаспределяемоеКоличество - НовСтр.КоличествоДокумент;
						
						НовСтр.КоличествоОтвет  = ?(Строка.Количество > НовСтр.КоличествоДокумент, НовСтр.КоличествоДокумент,Строка.Количество);
						НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
						НовСтр.ЦенаДокумента = Цена;
						НовСтр.ЦенаОтвет = Строка.Цена;
						НовСтр.ДатаПоставкиДокумент = ДатаПоступления;
						НовСтр.ДатаПоставкиОтвет = Строка.ДатаПоступления;
						НовСтр.ОтметкаСтроки = Истина;
						НовСтр.ОтметкаКоличество = Истина;
						НовСтр.ОтметкаЦена = Истина;
						НовСтр.ОтметкаДатаПоставки = Истина;
						НовСтр.СтавкаНДС = Строка.СтавкаНДС;
						ВывестиСообщениеОРазницеВКоличестве(НовСтр.КоличествоДокумент, Строка.Количество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);
						ВывестиСообщениеОРазницеВЦенах(Цена, Строка.Цена, Строка.Номенклатура);
						ВывестиСообщениеОРазницеВДатахПоставки(ДатаПоступления, Строка.ДатаПоступления, Строка.Номенклатура);
					КонецЕсли;
					НовСтр.Статус = 0;
				КонецЦикла;
			Иначе 
				//новая строка которой нет в документе
				НовСтр = РезультатСравнения.Добавить(); 
				НовСтр.НомерСтроки = НомерСтроки; 
				НовСтр.Артикул = Строка.Артикул; 
				НовСтр.ВидЦеныПоставщика = Строка.ВидЦеныПоставщика;
				НовСтр.Номенклатура = Строка.Номенклатура;
				НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
				НовСтр.КоличествоДокумент = 0;
				НовСтр.КоличествоОтвет    = Строка.Количество;
				НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
				НовСтр.ЦенаДокумента = 0;                                                 
				НовСтр.ЦенаОтвет = Строка.Цена;
				НовСтр.ДатаПоставкиДокумент = Дата(1,1,1);
				НовСтр.ДатаПоставкиОтвет = Строка.ДатаПоступления;
				НовСтр.Статус = 1;
				НовСтр.ОтметкаСтроки = Истина;
				НовСтр.ОтметкаКоличество = Истина;
				НовСтр.ОтметкаЦена = Истина;
				НовСтр.ОтметкаДатаПоставки = Истина;
				НовСтр.СтавкаНДС = Строка.СтавкаНДС;
				ВывестиСообщениеОНовойСтроке(Строка.Количество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);
			КонецЕсли;
			
		Иначе 	
			
			Если не Массив.Количество() = 0 Тогда
				Для каждого Элемент Из Массив Цикл
					
					//найдем общее кол-во по номенклатуре
					Отбор =  Новый Структура("Номенклатура,Назначение",Строка.Номенклатура,Справочники.Назначения.ПустаяСсылка());
					Отбор2 =  Новый Структура("Номенклатура",Строка.Номенклатура);
					
					Массив = ТоварыДокумента.НайтиСтроки(Отбор);	
					Массив2 = ТЗ_ОбъектТовары.НайтиСтроки(Отбор2);
					
					ИтогКоличествоПоДокументу = 0;
					Для каждого ЭлементН Из Массив Цикл
						ИтогКоличествоПоДокументу = ИтогКоличествоПоДокументу + ЭлементН.Количество;
						Цена = ЭлементН.Цена;
					КонецЦикла;
					
					НовСтр = РезультатСравнения.Добавить(); //остальные строки без назначения
					НовСтр.НомерСтроки = НомерСтроки; 
					НовСтр.Артикул = Строка.Артикул; 
					НовСтр.Номенклатура = Строка.Номенклатура;
					НовСтр.ВидЦеныПоставщика = Строка.ВидЦеныПоставщика;
					НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
					Если ПодобранноеКоличествоПоДокументу = 0 Тогда
						Если Массив2.Количество() > 1 Тогда
							НовСтр.КоличествоДокумент = РаспределяемоеКоличество;
							ПодобранноеКоличествоПоДокументу = Строка.Количество;
						Иначе 
							НовСтр.КоличествоДокумент = Элемент.Количество;//ИтогКоличествоПоДокументу;
						КонецЕсли;
					Иначе 
						НовСтр.КоличествоДокумент = ИтогКоличествоПоДокументу - ПодобранноеКоличествоПоДокументу;
					КонецЕсли;
					
					Если НовСтр.КоличествоДокумент = 0 Тогда
						РезультатСравнения.Удалить(НовСтр);
						Продолжить;
					КонецЕсли;
					
					РаспределяемоеКоличество = РаспределяемоеКоличество - НовСтр.КоличествоДокумент;
					
					НовСтр.КоличествоОтвет  = Строка.Количество;//?(Строка.Количество > НовСтр.КоличествоДокумент, НовСтр.КоличествоДокумент,Строка.Количество);
					НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
					НовСтр.ЦенаДокумента = Цена;
					НовСтр.ЦенаОтвет = Строка.Цена;
					НовСтр.ДатаПоставкиДокумент = ДатаПоступления;
					НовСтр.ДатаПоставкиОтвет = Строка.ДатаПоступления;
					НовСтр.ОтметкаСтроки = Истина;
					НовСтр.ОтметкаКоличество = Истина;
					НовСтр.ОтметкаЦена = Истина;
					НовСтр.ОтметкаДатаПоставки = Истина;
					НовСтр.СтавкаНДС = Строка.СтавкаНДС;
					ВывестиСообщениеОРазницеВКоличестве(НовСтр.КоличествоДокумент, Строка.Количество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);
					ВывестиСообщениеОРазницеВЦенах(Цена, Строка.Цена, Строка.Номенклатура);
					ВывестиСообщениеОРазницеВДатахПоставки(ДатаПоступления, Строка.ДатаПоступления, Строка.Номенклатура);
					
					НовСтр.Статус = 0;
					
				КонецЦикла;
			Иначе 
				//новая строка которой нет в документе
				НовСтр = РезультатСравнения.Добавить(); 
				НовСтр.НомерСтроки = НомерСтроки; 
				НовСтр.Артикул = Строка.Артикул; 
				НовСтр.ВидЦеныПоставщика = Строка.ВидЦеныПоставщика;
				НовСтр.Номенклатура = Строка.Номенклатура;
				НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
				НовСтр.КоличествоДокумент = 0;
				НовСтр.КоличествоОтвет    = Строка.Количество;
				НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
				НовСтр.ЦенаДокумента = 0;                                                 
				НовСтр.ЦенаОтвет = Строка.Цена;
				НовСтр.ДатаПоставкиДокумент = Дата(1,1,1);
				НовСтр.ДатаПоставкиОтвет = Строка.ДатаПоступления;
				НовСтр.Статус = 1;
				НовСтр.ОтметкаСтроки = Истина;
				НовСтр.ОтметкаКоличество = Истина;
				НовСтр.ОтметкаЦена = Истина;
				НовСтр.ОтметкаДатаПоставки = Истина;
				НовСтр.СтавкаНДС = Строка.СтавкаНДС;
				ВывестиСообщениеОНовойСтроке(Строка.Количество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//найдем и обработаем номенклатуру которая есть в ТоварыДокумента но нет в ОбъектТовары
	Для каждого Строка Из ТоварыДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Отбор = Новый Структура("Номенклатура",Строка.Номенклатура);
		Массив = ТЗ_ОбъектТовары.НайтиСтроки(Отбор);
		Если Массив.Количество() = 0 Тогда
			НовСтр = РезультатСравнения.Добавить(); 
			НовСтр.НомерСтроки = НомерСтроки; 
			НовСтр.Артикул = Строка.Артикул;
			НовСтр.ВидЦеныПоставщика = Строка.ВидЦеныПоставщика;
			НовСтр.Номенклатура = Строка.Номенклатура;
			НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
			НовСтр.Назначение = Строка.Назначение;
			НовСтр.КоличествоДокумент = Строка.Количество;
			НовСтр.КоличествоОтвет    = 0;
			НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
			НовСтр.ЦенаДокумента = Строка.Цена;                                                 
			НовСтр.ЦенаОтвет = 0;
			НовСтр.ДатаПоставкиДокумент = Строка.ДатаПоступления;
			НовСтр.ДатаПоставкиОтвет = Дата(1,1,1);
			НовСтр.Статус = 2;
			НовСтр.ОтметкаСтроки = Истина;
			НовСтр.ОтметкаКоличество = Ложь;
			НовСтр.ОтметкаЦена = Ложь;
			НовСтр.ОтметкаДатаПоставки = Ложь;
			НовСтр.СтавкаНДС = Строка.СтавкаНДС;
			НовСтр.Отменено = Истина;
			ВывестиСообщениеОУдаленнойСтроке(Строка.Количество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры


&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ_3()
//++Шерстюк Ю.Ю. 12.07.2021 Задача 9171 можем загружать изменения по строке поэтому перепишу сопоставление СопоставитьДанныеТабличногоДокументаСДаннымиИБ_2_1
	//++Шерстюк Ю.Ю. 21.05.2021
	Если Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт или Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Тогда
		пЗаполнятьПлановыеДаты = Ложь;
	Иначе
		пЗаполнятьПлановыеДаты = Истина;
	КонецЕсли;
	//--Шерстюк Ю.Ю.
	//дозаполним производителя из номенклатуры что бы при сравнении не выпадало расхождение по производителю
	Для каждого СтрокаДокумента Из ТоварыДокумента Цикл
		СтрокаДокумента.Производитель = СтрокаДокумента.Номенклатура.Производитель;
	КонецЦикла;	
			
	ЗадачиИспользуются = Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить();
	Сообщение = "";
	
	Отбор = Новый Структура("Отметка",Истина);
	ТЗ_ОбъектТовары = Объект.Товары.Выгрузить(Отбор);

	ТЗ_ОбъектТовары.Сортировать("Артикул, ДатаПоступления");
	ТоварыДокумента.Сортировать("Артикул, Назначение Убыв, ДатаПоступления");

	//Восстановим количество после заполнения, чтобы при возврате назад заново отработало распределение
	Для Каждого СтрокаДокумента Из ТоварыДокумента Цикл
       СтрокаДокумента.КоличествоУпаковокИсходное =  СтрокаДокумента.КоличествоУпаковок;
   	КонецЦикла;
	Для Каждого Строка Из ТЗ_ОбъектТовары  Цикл
       Строка.КоличествоУпаковокИсходное =  Строка.КоличествоУпаковок;
   	КонецЦикла;

	
	
	Для Каждого СтрокаДокумента Из ТоварыДокумента Цикл
		Если СтрокаДокумента.Отменено Тогда
			Продолжить;
		КонецЕсли;
		Отбор = Новый Структура("Номенклатура",СтрокаДокумента.Номенклатура);
		Массив = ТЗ_ОбъектТовары.НайтиСтроки(Отбор);
		Для Каждого ЭлементМассива из Массив Цикл 
			Если ЭлементМассива.КоличествоУпаковок = 0 Тогда
				Продолжить;
			КонецЕсли;
			//разбаваем в соответствии с количеством в документе и ответе поставщика
			НовСтр = РезультатСравнения.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрокаДокумента);
			НовСтр.Артикул = СтрокаДокумента.Артикул;
			НовСтр.ТипНоменклатуры = СтрокаДокумента.Номенклатура.ТипНоменклатуры; 
			НовСтр.ЕдиницаИзмерения = СтрокаДокумента.Номенклатура.ЕдиницаИзмерения;
			НовСтр.ЦенаДокумента = СтрокаДокумента.Цена;
			НовСтр.ЦенаОтвет = ЭлементМассива.Цена;
			НовСтр.ДатаПоставкиОтвет = ЭлементМассива.ДатаПоступления;
			НовСтр.ДатаПоставкиДокумент = СтрокаДокумента.ДатаПоступления;
			НовСтр.ОтметкаСтроки = Истина;
			НовСтр.ОтметкаКоличество = Истина;
			НовСтр.ОтметкаЦена = Истина;
			НовСтр.ОтметкаДатаПоставки = Истина;
			НовСтр.СтавкаНДС = ЭлементМассива.СтавкаНДС;
			//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409
			Если пЗаполнятьПлановыеДаты Тогда 
				НовСтр.Рин1_ПлановаяДатаПоступления = ЭлементМассива.Рин1_ПлановаяДатаПоступления;
				НовСтр.Рин1_ПлановаяДатаОтгрузки = ЭлементМассива.Рин1_ПлановаяДатаОтгрузки;
			//++Шерстюк Ю.Ю. 25.08.2021 если не заполняем, то оставляем даты без изменения	
			//Иначе
			//	НовСтр.Рин1_ПлановаяДатаПоступления = ЭлементМассива.Рин1_ПлановаяДатаПоступления;
			//	НовСтр.Рин1_ПлановаяДатаОтгрузки = ЭлементМассива.Рин1_ПлановаяДатаОтгрузки;
			//--Шерстюк Ю.Ю.
			КонецЕсли;
			//--Шерстюк Ю.Ю.
			
			Если СтрокаДокумента.КоличествоУпаковок <= ЭлементМассива.КоличествоУпаковок Тогда 
				НовСтр.КоличествоДокумент = СтрокаДокумента.КоличествоУпаковок;
				НовСтр.КоличествоОтвет    = СтрокаДокумента.КоличествоУпаковок;
				ЭлементМассива.КоличествоУпаковок = ЭлементМассива.КоличествоУпаковок - СтрокаДокумента.КоличествоУпаковок;
				СтрокаДокумента.КоличествоУпаковок = 0;
			Иначе
				НовСтр.КоличествоДокумент = ЭлементМассива.КоличествоУпаковок;
				НовСтр.КоличествоОтвет    = ЭлементМассива.КоличествоУпаковок;
				СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.КоличествоУпаковок - НовСтр.КоличествоДокумент;
				ЭлементМассива.КоличествоУпаковок = 0;
				
			КонецЕсли;
		КонецЦикла;
		//Если в ответе меньше, чем в документе, то заполняем данными из документа
		Если СтрокаДокумента.КоличествоУпаковок > 0 Тогда 
			НовСтр = РезультатСравнения.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрокаДокумента);
			НовСтр.Артикул = СтрокаДокумента.Артикул;
			НовСтр.ТипНоменклатуры = СтрокаДокумента.Номенклатура.ТипНоменклатуры; 
			НовСтр.КоличествоДокумент = СтрокаДокумента.КоличествоУпаковок;
			НовСтр.КоличествоОтвет    = 0;
			НовСтр.ЕдиницаИзмерения = СтрокаДокумента.Номенклатура.ЕдиницаИзмерения;
			НовСтр.ЦенаДокумента = СтрокаДокумента.Цена;
			НовСтр.ДатаПоставкиОтвет = СтрокаДокумента.ДатаПоступления;
			НовСтр.ДатаПоставкиДокумент = СтрокаДокумента.ДатаПоступления;
			
			пКоличествоНайденныхСтрок = Массив.Количество();
			НовСтр.ОтметкаСтроки = ?(пКоличествоНайденныхСтрок,Истина,Ложь); //если в ответе были данные по номенклатуре, то отмечаем все строки, чтобы не изменить количество в докумете Заказ поставщику
			НовСтр.ОтметкаКоличество = Ложь;
			НовСтр.ОтметкаЦена = Ложь;
			НовСтр.ОтметкаДатаПоставки = Ложь;
			Если пКоличествоНайденныхСтрок > 0 Тогда 
				Сообщить (НовСтр.Артикул + " количество в документе больше количества в ответе поставщика, все строки по этому артикулу должны быть перенесены в заказ поставщику, иначе изменится итоговое количество по номенклатуре в заказе!!!")
			КонецЕсли;	
		КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	пНомерСтрокиДляНовыхПозиций = РезультатСравнения.Количество() + 1;
	Для Каждого СтрТзОтвет из ТЗ_ОбъектТовары Цикл
		Если СтрТзОтвет.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = РезультатСравнения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,СтрТзОтвет);
		НовСтр.НомерСтроки = пНомерСтрокиДляНовыхПозиций;
		пНомерСтрокиДляНовыхПозиций = пНомерСтрокиДляНовыхПозиций + 1;
		НовСтр.Артикул = СтрТзОтвет.Артикул;
		НовСтр.ТипНоменклатуры = СтрТзОтвет.Номенклатура.ТипНоменклатуры; 
		НовСтр.КоличествоДокумент = 0;
		НовСтр.КоличествоОтвет    = СтрТзОтвет.КоличествоУпаковок;
		НовСтр.ЕдиницаИзмерения = СтрТзОтвет.Номенклатура.ЕдиницаИзмерения;
		НовСтр.ЦенаОтвет = СтрТзОтвет.Цена;
		НовСтр.ДатаПоставкиОтвет = СтрТзОтвет.ДатаПоступления;
		
		НовСтр.ОтметкаСтроки = Истина;
		НовСтр.ОтметкаКоличество = Истина;
		НовСтр.ОтметкаЦена = Истина;
		НовСтр.ОтметкаДатаПоставки = Истина;	
		Сообщить (НовСтр.Артикул + " количество в ответе поставщика меньше количества в документе, все строки по этому артикулу должны быть перенесены в заказ поставщику, иначе изменится итоговое количество по номенклатуре в заказе!!!")
	КонецЦикла;
	
	//Восстановим количество после заполнения, чтобы при возврате назад заново отработало распределение
	Для Каждого СтрокаДокумента Из ТоварыДокумента Цикл
       СтрокаДокумента.КоличествоУпаковок =  СтрокаДокумента.КоличествоУпаковокИсходное;
   	КонецЦикла;
	Для Каждого Строка Из ТЗ_ОбъектТовары  Цикл
       Строка.КоличествоУпаковок =  Строка.КоличествоУпаковокИсходное;
   	КонецЦикла;
	//--Шерстюк Ю.Ю.
КонецПроцедуры

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ_2_1()
	//++Шерстюк Ю.Ю. 21.05.2021
	Если Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт или Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Тогда
		пЗаполнятьПлановыеДаты = Ложь;
	Иначе
		пЗаполнятьПлановыеДаты = Истина;
	КонецЕсли;
	//--Шерстюк Ю.Ю.
	//дозаполним производителя из номенклатуры что бы при сравнении не выпадало расхождение по производителю
	Для каждого СтрокаДокумента Из ТоварыДокумента Цикл
		
		СтрокаДокумента.Производитель = СтрокаДокумента.Номенклатура.Производитель;
		
	КонецЦикла;	
			
	ЗадачиИспользуются = Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить();
	Сообщение = "";
	
	//
	
	Отбор = Новый Структура("Отметка",Истина);
	ТЗ_ОбъектТовары = Объект.Товары.Выгрузить(Отбор);
	ТЗ_ОбъектТовары.Колонки.Добавить("КоличествоОстаток", Новый ОписаниеТипов("Число"));
	Для каждого Строка из ТЗ_ОбъектТовары Цикл
		Строка.КоличествоОстаток = Строка.Количество;
	КонецЦикла;
	
	//Статус 2-Удаленный, 1-Новый, 0 имеющийся, относительно таблицы ТоварыДокумента и ОбъектТовары

	НеобходимоеКоличество = 0;
	ОбрабатываемаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ОсталосьКоличествоОбработать = 0;
	НомерСтроки = 0;
	ПодобранноеКоличествоПоДокументу = 0;
	ДобавитьСверхЗаказа = Ложь;
	ДобавитьСверхОтвета = Ложь;
	
	//ТЗ_ОбъектТовары.Сортировать("Номенклатура, ДатаПоступления");
	//ТоварыДокумента.Сортировать("Номенклатура, Назначение Убыв, ДатаПоступления");
	ТЗ_ОбъектТовары.Сортировать("Артикул, ДатаПоступления");
	ТоварыДокумента.Сортировать("Артикул, Назначение Убыв, ДатаПоступления");
		
	Для Каждого СтрокаДокумента Из ТоварыДокумента Цикл
			
		Отбор = Новый Структура("Номенклатура",СтрокаДокумента.Номенклатура);
		Массив = ТЗ_ОбъектТовары.НайтиСтроки(Отбор);
		
		Если СтрокаДокумента.Номенклатура <> ОбрабатываемаяНоменклатура Тогда
			Отбор = Новый Структура("Номенклатура",СтрокаДокумента.Номенклатура);
			МассивДокументов = ТоварыДокумента.НайтиСтроки(Отбор);
			ОсталосьКоличествоОбработать = 0;
			Для каждого Строка из МассивДокументов Цикл
		    	ОсталосьКоличествоОбработать = ОсталосьКоличествоОбработать + Строка.Количество;
				РезультатОсталосьКоличествоОбработать = ОсталосьКоличествоОбработать;
			КонецЦикла;
			ПодобранноеКоличествоПоДокументу = 0;
		КонецЕсли;
		ПодобранноеКоличествоПоДокументу = 	ПодобранноеКоличествоПоДокументу + 1;
		
		//ОсталосьКоличествоОбработать = ОсталосьКоличествоОбработать - СтрокаДокумента.Количество;
		ОбрабатываемаяНоменклатура = СтрокаДокумента.Номенклатура;
		НеобходимоеКоличество = СтрокаДокумента.Количество;
		НомерСтроки = НомерСтроки + 1;
		
		ОбработаноСтрок = 0;
		ОсталосьКоличествоРаспределить = 0;
		Для Каждого СтрокаМассива Из Массив Цикл
			ОсталосьКоличествоРаспределить = ОсталосьКоличествоРаспределить + СтрокаМассива.КоличествоОстаток;
		КонецЦикла;
		Для Каждого СтрокаМассива Из Массив Цикл
			
			Если НеобходимоеКоличество > 0 Тогда
				РезультатКоличествоОтветОстаток = 0;
				ОбработаноСтрок = ОбработаноСтрок + 1;
				Если ОсталосьКоличествоРаспределить = 0 И ПодобранноеКоличествоПоДокументу = МассивДокументов.Количество() И ОбработаноСтрок = Массив.Количество() Тогда
					ДобавитьСверхОтвета = Истина;
				КонецЕсли;					
				Если СтрокаМассива.КоличествоОстаток > 0 Тогда
					//Если СтрокаДокумента.Количество > СтрокаМассива.Количество Или СтрокаДокумента.Количество = СтрокаМассива.Количество Тогда
					Если СтрокаДокумента.Количество > СтрокаМассива.КоличествоОстаток Или СтрокаДокумента.Количество = СтрокаМассива.КоличествоОстаток Тогда
						ОсталосьКоличествоОбработать = ОсталосьКоличествоОбработать - СтрокаМассива.КоличествоОстаток;
						ОсталосьКоличествоРаспределить = ОсталосьКоличествоРаспределить - СтрокаМассива.КоличествоОстаток;
						//РезультатКоличество = СтрокаДокумента.Количество;
						РезультатКоличество = СтрокаМассива.КоличествоОстаток;
						НеобходимоеКоличество = НеобходимоеКоличество - СтрокаМассива.КоличествоОстаток;
						РезультатКоличествоОтвет = СтрокаМассива.КоличествоОстаток;
						СтрокаМассива.КоличествоОстаток = 0;
						//СтрокаМассива.КоличествоУпаковок = 0;
					Иначе
						ОсталосьКоличествоОбработать = ОсталосьКоличествоОбработать - НеобходимоеКоличество;
						ОсталосьКоличествоРаспределить = ОсталосьКоличествоРаспределить - НеобходимоеКоличество;
						//РезультатКоличество = СтрокаДокумента.Количество;
						РезультатКоличество = НеобходимоеКоличество;
						//РезультатКоличествоОтвет = СтрокаДокумента.Количество;
						РезультатКоличествоОтвет = НеобходимоеКоличество;
						//СтрокаМассива.КоличествоОстаток = СтрокаМассива.КоличествоОстаток - СтрокаДокумента.Количество;
						СтрокаМассива.КоличествоОстаток = СтрокаМассива.КоличествоОстаток - НеобходимоеКоличество;
						//СтрокаМассива.КоличествоУпаковок = СтрокаМассива.Количество - СтрокаДокумента.Количество;
						НеобходимоеКоличество = 0;
					КонецЕсли;
					Если Не ОсталосьКоличествоОбработать > 0 И Не СтрокаМассива.КоличествоОстаток < 0 Тогда
						РезультатКоличество = РезультатКоличество + НеобходимоеКоличество;
						Если СтрокаДокумента.Назначение = Справочники.Назначения.ПустаяСсылка() Тогда
							//РезультатКоличествоОтвет = СтрокаМассива.Количество - РезультатОсталосьКоличествоОбработать + СтрокаДокумента.Количество;
							//РезультатКоличествоОтвет = СтрокаМассива.КоличествоОстаток + СтрокаДокумента.Количество + НеобходимоеКоличество;
							//РезультатКоличествоОтвет = СтрокаМассива.КоличествоОстаток + РезультатКоличествоОтвет + НеобходимоеКоличество;
							РезультатКоличествоОтвет = СтрокаМассива.КоличествоОстаток + РезультатКоличествоОтвет;
						Иначе
							Если СтрокаМассива.КоличествоОстаток > 0 Тогда
								ДобавитьСверхЗаказа = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ОсталосьКоличествоОбработать > 0 И НЕ ОсталосьКоличествоРаспределить > 0 Тогда
						Если НеобходимоеКоличество > 0 Тогда
							ДобавитьСверхОтвета = Истина;
						КонецЕсли;
					КонецЕсли;
					
		//Создаем Строки в ТЧ "Результат"			
					НовСтр = РезультатСравнения.Добавить();
					НовСтр.НомерСтроки = НомерСтроки; 
					НовСтр.Артикул = СтрокаМассива.Артикул;
					НовСтр.ВидЦеныПоставщика = СтрокаДокумента.ВидЦеныПоставщика;
					НовСтр.Номенклатура = СтрокаМассива.Номенклатура; 
					НовСтр.ТипНоменклатуры = СтрокаМассива.Номенклатура.ТипНоменклатуры; 
					НовСтр.Назначение = СтрокаДокумента.Назначение;
	//				НовСтр.КоличествоДокумент = СтрокаДокумента.Количество;
					НовСтр.КоличествоДокумент = РезультатКоличество;
					НовСтр.КоличествоОтвет    = РезультатКоличествоОтвет;
					НовСтр.ЕдиницаИзмерения = СтрокаМассива.Номенклатура.ЕдиницаИзмерения;
					НовСтр.ЦенаДокумента = СтрокаДокумента.Цена;
					НовСтр.ЦенаОтвет = СтрокаМассива.Цена;
					НовСтр.ДатаПоставкиДокумент = СтрокаДокумента.ДатаПоступления;
					НовСтр.ДатаПоставкиОтвет = СтрокаМассива.ДатаПоступления;
					НовСтр.ОтметкаСтроки = Истина;
					НовСтр.ОтметкаКоличество = Истина;
					НовСтр.ОтметкаЦена = Истина;
					НовСтр.ОтметкаДатаПоставки = Истина;
					НовСтр.СтавкаНДС = СтрокаМассива.СтавкаНДС;
					//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409
					Если пЗаполнятьПлановыеДаты Тогда 
						НовСтр.Рин1_ПлановаяДатаПоступления = СтрокаМассива.Рин1_ПлановаяДатаПоступления;
						НовСтр.Рин1_ПлановаяДатаОтгрузки = СтрокаМассива.Рин1_ПлановаяДатаОтгрузки;
					Иначе
						НовСтр.Рин1_ПлановаяДатаПоступления = СтрокаДокумента.Рин1_ПлановаяДатаПоступления;
						НовСтр.Рин1_ПлановаяДатаОтгрузки = СтрокаДокумента.Рин1_ПлановаяДатаОтгрузки;
					КонецЕсли;
					//--Шерстюк Ю.Ю.			
			        //Статус
			        //СуммаНДС
			        //СуммаСНДС
			        //Сумма
			        //Отменено
			        //ПричиныОтмены
				КонецЕсли;
			Иначе
				//РезультатКоличествоОтветОстаток = РезультатКоличествоОтветОстаток + СтрокаМассива.КоличествоОстаток;
				Если ПодобранноеКоличествоПоДокументу = МассивДокументов.Количество() Тогда
					ДобавитьСверхЗаказа = Истина;
					РезультатКоличествоОтвет = СтрокаМассива.КоличествоОстаток;
				КонецЕсли;
			КонецЕсли;
	//Добавляем строку, когда поставщик добавил сверх заказа, а у нас последняя строка с "НАЗНАЧЕНИЕМ"
			Если ДобавитьСверхЗаказа Тогда
				//РезультатКоличествоОтвет = СтрокаМассива.Количество - РезультатОсталосьКоличествоОбработать;
				РезультатКоличествоОтвет = СтрокаМассива.КоличествоОстаток;
				ДобавитьСверхЗаказа = Ложь;
				НомерСтроки = НомерСтроки + 1;
				НовСтр = РезультатСравнения.Добавить(); 
				НовСтр.НомерСтроки = НомерСтроки; 
				НовСтр.Артикул = СтрокаМассива.Артикул;
				НовСтр.ВидЦеныПоставщика = СтрокаДокумента.ВидЦеныПоставщика;
				НовСтр.Номенклатура = СтрокаМассива.Номенклатура;
				НовСтр.ТипНоменклатуры = СтрокаМассива.Номенклатура.ТипНоменклатуры; 
				НовСтр.Назначение = Справочники.Назначения.ПустаяСсылка();
				НовСтр.КоличествоДокумент = 0;
				НовСтр.КоличествоОтвет    = РезультатКоличествоОтвет;
				НовСтр.ЕдиницаИзмерения = СтрокаМассива.Номенклатура.ЕдиницаИзмерения;
				НовСтр.ЦенаДокумента = СтрокаДокумента.Цена;                                                 
				НовСтр.ЦенаОтвет = СтрокаМассива.Цена;
				НовСтр.ДатаПоставкиДокумент = СтрокаДокумента.ДатаПоступления;
				НовСтр.ДатаПоставкиОтвет = СтрокаМассива.ДатаПоступления;
				НовСтр.ОтметкаСтроки = Истина;
				НовСтр.ОтметкаКоличество = Истина;
				НовСтр.ОтметкаЦена = Истина;
				НовСтр.ОтметкаДатаПоставки = Истина;
				НовСтр.СтавкаНДС = СтрокаМассива.СтавкаНДС;
				//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409
				Если пЗаполнятьПлановыеДаты Тогда 
					НовСтр.Рин1_ПлановаяДатаПоступления = СтрокаМассива.Рин1_ПлановаяДатаПоступления;
					НовСтр.Рин1_ПлановаяДатаОтгрузки = СтрокаМассива.Рин1_ПлановаяДатаОтгрузки;
				КонецЕсли;
				//--Шерстюк Ю.Ю.			

			КонецЕсли;
	//Добавляем строку, когда поставщик добавил сверх заказа, а у нас последняя строка с "НАЗНАЧЕНИЕМ"
			Если ДобавитьСверхОтвета Тогда
				//РезультатКоличество = НеобходимоеКоличество;
				РезультатКоличество = ОсталосьКоличествоОбработать;
				ДобавитьСверхОтвета = Ложь;
				НомерСтроки = НомерСтроки + 1;
				НовСтр = РезультатСравнения.Добавить(); 
				НовСтр.НомерСтроки = НомерСтроки; 
				НовСтр.Артикул = СтрокаМассива.Артикул;
				НовСтр.ВидЦеныПоставщика = СтрокаДокумента.ВидЦеныПоставщика;
				НовСтр.Номенклатура = СтрокаМассива.Номенклатура;
				НовСтр.ТипНоменклатуры = СтрокаМассива.Номенклатура.ТипНоменклатуры; 
				НовСтр.Назначение = Справочники.Назначения.ПустаяСсылка();
				НовСтр.КоличествоДокумент = РезультатКоличество;
				НовСтр.КоличествоОтвет    = 0;
				НовСтр.ЕдиницаИзмерения = СтрокаМассива.Номенклатура.ЕдиницаИзмерения;
				НовСтр.ЦенаДокумента = СтрокаДокумента.Цена;                                                 
				НовСтр.ЦенаОтвет = СтрокаМассива.Цена;
				НовСтр.ДатаПоставкиДокумент = СтрокаДокумента.ДатаПоступления;
				НовСтр.ДатаПоставкиОтвет = СтрокаМассива.ДатаПоступления;
				НовСтр.ОтметкаСтроки = Истина;
				НовСтр.ОтметкаКоличество = Истина;
				НовСтр.ОтметкаЦена = Истина;
				НовСтр.ОтметкаДатаПоставки = Истина;
				НовСтр.СтавкаНДС = СтрокаМассива.СтавкаНДС;
				//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409
				Если пЗаполнятьПлановыеДаты Тогда 
					НовСтр.Рин1_ПлановаяДатаПоступления = СтрокаМассива.Рин1_ПлановаяДатаПоступления;
					НовСтр.Рин1_ПлановаяДатаОтгрузки = СтрокаМассива.Рин1_ПлановаяДатаОтгрузки;
				КонецЕсли;
				//--Шерстюк Ю.Ю.			

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//найдем и обработаем номенклатуру которая есть в ТоварыДокумента но нет в ОбъектТовары
	Для Каждого Строка Из ТоварыДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Отбор = Новый Структура("Номенклатура",Строка.Номенклатура);
		Массив = ТЗ_ОбъектТовары.НайтиСтроки(Отбор);
		Если Массив.Количество() = 0 Тогда
			НовСтр = РезультатСравнения.Добавить(); 
			НовСтр.НомерСтроки = НомерСтроки; 
			НовСтр.Артикул = Строка.Артикул;
			НовСтр.ВидЦеныПоставщика = Строка.ВидЦеныПоставщика;
			НовСтр.Номенклатура = Строка.Номенклатура;
			НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
			НовСтр.Назначение = Строка.Назначение;
			НовСтр.КоличествоДокумент = Строка.Количество;
			НовСтр.КоличествоОтвет    = 0;
			НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
			НовСтр.ЦенаДокумента = Строка.Цена;                                                 
			НовСтр.ЦенаОтвет = 0;
			НовСтр.ДатаПоставкиДокумент = Строка.ДатаПоступления;
			НовСтр.ДатаПоставкиОтвет = Дата(1,1,1);
			НовСтр.Статус = 2;
			НовСтр.ОтметкаСтроки = Истина;
			НовСтр.ОтметкаКоличество = Ложь;
			НовСтр.ОтметкаЦена = Ложь;
			НовСтр.ОтметкаДатаПоставки = Ложь;
			НовСтр.СтавкаНДС = Строка.СтавкаНДС;
			НовСтр.Отменено = Истина;
			//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409
			Если пЗаполнятьПлановыеДаты Тогда 
				НовСтр.Рин1_ПлановаяДатаПоступления = СтрокаМассива.Рин1_ПлановаяДатаПоступления;
				НовСтр.Рин1_ПлановаяДатаОтгрузки = СтрокаМассива.Рин1_ПлановаяДатаОтгрузки;
			КонецЕсли;
			//--Шерстюк Ю.Ю.			
			ВывестиСообщениеОУдаленнойСтроке(Строка.Количество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;	
	
	//найдем и обработаем номенклатуру которая есть в ОбъектТовары но нет в ТоварыДокумента
	Для Каждого Строка Из ТЗ_ОбъектТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Отбор = Новый Структура("Номенклатура",Строка.Номенклатура);
		Массив = ТоварыДокумента.НайтиСтроки(Отбор);
		Если Массив.Количество() = 0 Тогда
			НовСтр = РезультатСравнения.Добавить(); 
			НовСтр.НомерСтроки = НомерСтроки; 
			НовСтр.Артикул = Строка.Артикул;
			НовСтр.ВидЦеныПоставщика = Строка.ВидЦеныПоставщика;
			НовСтр.Номенклатура = Строка.Номенклатура;
			НовСтр.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры; 
//			НовСтр.Назначение = Строка.Назначение;
			НовСтр.КоличествоДокумент = 0;
			НовСтр.КоличествоОтвет    = Строка.Количество;
			НовСтр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
			НовСтр.ЦенаДокумента = 0;
			НовСтр.ЦенаОтвет = Строка.Цена;
			НовСтр.ДатаПоставкиДокумент = Дата(1,1,1);
			НовСтр.ДатаПоставкиОтвет = Строка.ДатаПоступления;
			НовСтр.Статус = 2;
			НовСтр.ОтметкаСтроки = Истина;
			НовСтр.ОтметкаКоличество = Ложь;
			НовСтр.ОтметкаЦена = Ложь;
			НовСтр.ОтметкаДатаПоставки = Ложь;
			НовСтр.СтавкаНДС = Строка.СтавкаНДС;
			НовСтр.Отменено = Истина;
			//++Шерстюк Ю.Ю. 21.05.2021 Задача 8409
			Если пЗаполнятьПлановыеДаты Тогда 
				НовСтр.Рин1_ПлановаяДатаПоступления = СтрокаМассива.Рин1_ПлановаяДатаПоступления;
				НовСтр.Рин1_ПлановаяДатаОтгрузки = СтрокаМассива.Рин1_ПлановаяДатаОтгрузки;
			КонецЕсли;
			//--Шерстюк Ю.Ю.					
			ВывестиСообщениеОУдаленнойСтроке(Строка.Количество, Строка.Номенклатура, Строка.Номенклатура.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;	
	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСообщениеОНовойСтроке(КоличествоОтвет, Номенклатура, Единица)
	
	Сообщение = Сообщение +  " В " + Строка(Владелец) + " добавлена новая номенклатура " + Строка(Номенклатура) + 
	" от поставщика!" + " (Заказ поставщику - " + Номенклатура + " в количестве " + КоличествоОтвет + " " +  Строка(Единица) + 
	")" + Символы.ПС + "";	
	
КонецПроцедуры 

&НаСервере
Процедура ВывестиСообщениеОУдаленнойСтроке(КоличествоДокумент, Номенклатура, Единица)
	
	Сообщение = Сообщение +  " В " + Строка(Владелец) + " удалена номенклатура " + Строка(Номенклатура) + 
	" поставщиком!" + " (Заказ поставщику - " + Номенклатура + " в количестве " + КоличествоДокумент + " " +  Строка(Единица) + 
	")" + Символы.ПС + "";	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСообщениеОРазницеВКоличестве(КоличествоДокумент, КоличествоОтвет, Номенклатура, Единица)
	
	Если не КоличествоДокумент = КоличествоОтвет Тогда
		Сообщение = Сообщение +  " Количество в " + Строка(Владелец) + " на номенклатуру " + Строка(Номенклатура) + 
		" отличается от нового количества поставщика!" + " (Заказ поставщику - " + КоличествоДокумент + " " +  Строка(Единица) + 
		", Ответ поставщика - " + КоличествоОтвет + " " +  Строка(Единица) + ")" + Символы.ПС + "";
	КонецЕсли;		
	
КонецПроцедуры 

&НаСервере
Процедура ВывестиСообщениеОРазницеВЦенах(ЦенаДокумента, ЦенаОтвет, Номенклатура)
	
	Если не ЦенаДокумента = ЦенаОтвет Тогда
		Сообщение = Сообщение +  " Цена в " + Строка(Владелец) + " на номенклатуру " + Строка(Номенклатура) + 
		" отличается от новой цены поставщика!" + " (Заказ поставщику - " + ЦенаДокумента + " " +  Строка(ВалютаДокумента) + 
		", Ответ поставщика - " + ЦенаОтвет + " " +  Строка(ВалютаДокумента) + ")" + Символы.ПС + "";
	КонецЕсли;		
	
КонецПроцедуры 

&НаСервере
Процедура ВывестиСообщениеОРазницеВДатахПоставки(ДатаПоставкиДокумент, ДатаПоставкиОтвет, Номенклатура)
	
	Если не ДатаПоставкиДокумент = ДатаПоставкиОтвет Тогда
		Сообщение = Сообщение +  " Дата поставки в " + Строка(Владелец) + " на номенклатуру " + Строка(Номенклатура) + 
		" отличается от новой даты поставки поставщика!" + " (Заказ поставщику - " + Формат(ДатаПоставкиДокумент,"ДФ=dd.MM.yyyy") + 
		", Ответ поставщика - " + Формат(ДатаПоставкиОтвет,"ДФ=dd.MM.yyyy") + ")" + Символы.ПС + "";
	КонецЕсли;		
	
КонецПроцедуры 

&НаКлиенте
Процедура Назад1(Команда)
	
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	РезультатСравнения.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтметкаСтрокиПриИзменении(Элемент)
	
	Для каждого Стр Из РезультатСравнения Цикл
		Если Стр.НомерСтроки =  Элемент.Родитель.ТекущиеДанные.НомерСтроки Тогда 
			Если Элемент.Родитель.ТекущиеДанные.ОтметкаСтроки = Ложь Тогда
				Стр.ОтметкаКоличество = Ложь;
				Стр.ОтметкаЦена = Ложь;
				Стр.ОтметкаДатаПоставки = Ложь;
			Иначе 
				Стр.ОтметкаКоличество = Истина;
				Стр.ОтметкаЦена = Истина;
				Стр.ОтметкаДатаПоставки = Истина;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтметкаКоличествоПриИзменении(Элемент)
	
	Для каждого Стр Из РезультатСравнения Цикл
		Если Стр.НомерСтроки =  Элемент.Родитель.ТекущиеДанные.НомерСтроки Тогда 
			Если Элемент.Родитель.ТекущиеДанные.ОтметкаСтроки = Ложь Тогда
				Стр.ОтметкаКоличество = Ложь;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтметкаЦенаПриИзменении(Элемент)
	
	Для каждого Стр Из РезультатСравнения Цикл
		Если Стр.НомерСтроки =  Элемент.Родитель.ТекущиеДанные.НомерСтроки Тогда 
			Если Элемент.Родитель.ТекущиеДанные.ОтметкаСтроки = Ложь Тогда
				Стр.ОтметкаЦена = Ложь;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтметкаДатаПоставкиПриИзменении(Элемент)
	
	Для каждого Стр Из РезультатСравнения Цикл
		Если Стр.НомерСтроки =  Элемент.Родитель.ТекущиеДанные.НомерСтроки Тогда 
			Если Элемент.Родитель.ТекущиеДанные.ОтметкаСтроки = Ложь Тогда
				Стр.ОтметкаДатаПоставки = Ложь;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НДС_в_ЦенеПриИзменении(Элемент)
	
	Если не ЦенаВключаетНДС и Элемент.ВыделенныйТекст = "Цена включает НДС" Тогда
		ОбработатьТовары(Истина);
	ИначеЕсли ЦенаВключаетНДС и Элемент.ВыделенныйТекст = "Цена не включает НДС" Тогда 
		ОбработатьТовары(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТовары(Режим)
	
	ЦенаВключаетНДС = Режим;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Для каждого Строка Из Объект.Товары Цикл
		
		СтруктураПересчетаСуммы = Новый Структура;
		
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПоставщикаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВалютаПоставщика) Тогда
		ДатаКурса = ?(ДатаКурса = Дата(1,1,1),ТекущаяДата(),ДатаКурса);
		ТекущийКурс = ПолучитьКурс();
		Если не ВалютаДокумента = ВалютаПоставщика Тогда
			Элементы.ДатаКурса.Видимость = Истина;			
		Иначе 
			Элементы.ДатаКурса.Видимость = Ложь;
		КонецЕсли;
		ПересчитатьТЧПоВалюте();
	Иначе 
		Элементы.ДатаКурса.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКурс()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс КАК Курс
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("Валюта", ВалютаПоставщика);
	Запрос.УстановитьПараметр("Период", ДатаКурса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 1;
	Иначе
		Результат = РезультатЗапроса.Выгрузить();
		Возврат Результат[0].Курс; 
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПересчитатьТЧПоВалюте()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Для каждого Строка Из Объект.Товары Цикл
		
		// + [Rineco], [Киселев А.Н.] [11.10.2021] 
		// Задача: [№ 19697], [#Цена условий поставки]
		
		// Было:
		//Строка.Цена = Строка.ЦенаБуферная / ТекущийКурс;
		// Стало:
	    ДатаКурса = ?(ДатаКурса = Дата(1,1,1),ТекущаяДата(),ДатаКурса);
		Строка.Цена = РаботаСКурсамиВалют.ПересчитатьВВалюту(Строка.ЦенаБуферная,ВалютаДокумента,ВалютаПоставщика,ДатаКурса);
		
		Если РИНЭКОСтандартныйРасчет Тогда
			Строка.Цена = Строка.ЦенаБуферная / ТекущийКурс;
		КонецЕсли;
		
		// - [Rineco], [Киселев А.Н.] [11.10.2021]
		
		СтруктураПересчетаСуммы = Новый Структура;
		
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКурсаПриИзменении(Элемент)
	ТекущийКурс = ПолучитьКурс();
	ПересчитатьТЧПоВалюте();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки1(Команда)
	
	Для Каждого Элемент Из Элементы.Результат.ВыделенныеСтроки Цикл
		Стр = РезультатСравнения.НайтиПоИдентификатору(Элемент);
		Стр.ОтметкаСтроки = Истина;
		Стр.ОтметкаКоличество = Истина;
		Стр.ОтметкаЦена = Истина;
		Стр.ОтметкаДатаПоставки = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки1(Команда)
	
	Для Каждого Элемент Из Элементы.Результат.ВыделенныеСтроки Цикл
		Стр = РезультатСравнения.НайтиПоИдентификатору(Элемент);
		Стр.ОтметкаСтроки = Ложь;
		Стр.ОтметкаКоличество = Ложь;
		Стр.ОтметкаЦена = Ложь;
		Стр.ОтметкаДатаПоставки = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки2(Команда)
	
	Для Каждого Элемент Из Элементы.Результат.ВыделенныеСтроки Цикл
		Стр = РезультатСравнения.НайтиПоИдентификатору(Элемент);
		Если Элементы.Результат.ТекущийЭлемент.Имя = "РезультатКоличествоДокумент"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатОтметкаКоличество"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатКоличествоОтвет"
			Тогда
			Стр.ОтметкаКоличество = Истина;
		КонецЕсли;
		Если Элементы.Результат.ТекущийЭлемент.Имя = "РезультатЦенаДокумента"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатОтметкаЦена"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатЦенаОтвет"
			Тогда
			Стр.ОтметкаЦена = Истина;
		КонецЕсли;
		Если Элементы.Результат.ТекущийЭлемент.Имя = "РезультатДатаПоставкиДокумент"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатОтметкаДатаПоставки"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатДатаПоставкиОтвет"
			Тогда
			Стр.ОтметкаДатаПоставки = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки2(Команда)
	
	Для каждого Элемент Из Элементы.Результат.ВыделенныеСтроки Цикл
		Стр = РезультатСравнения.НайтиПоИдентификатору(Элемент);
		Если Элементы.Результат.ТекущийЭлемент.Имя = "РезультатКоличествоДокумент"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатОтметкаКоличество"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатКоличествоОтвет"
			Тогда
			Стр.ОтметкаКоличество = Ложь;
		КонецЕсли;
		Если Элементы.Результат.ТекущийЭлемент.Имя = "РезультатЦенаДокумента"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатОтметкаЦена"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатЦенаОтвет"
			Тогда
			Стр.ОтметкаЦена = Ложь;
		КонецЕсли;
		Если Элементы.Результат.ТекущийЭлемент.Имя = "РезультатДатаПоставкиДокумент"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатОтметкаДатаПоставки"
			Или Элементы.Результат.ТекущийЭлемент.Имя = "РезультатДатаПоставкиОтвет"
			Тогда
			Стр.ОтметкаДатаПоставки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПричинуОтмены(Команда)
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОтменитьСтрокиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПричинаОтмены = Результат;
	Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьСтрокиНаСервере(ПричинаОтмены);

КонецПроцедуры

&НаСервере
Процедура ОтменитьСтрокиНаСервере(ПричинаОтмены)
	
	Для каждого Стр Из РезультатСравнения Цикл
		Если Стр.Отменено Тогда
			Стр.ПричинаОтмены = ПричинаОтмены;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКДатеПоступления(Команда)
	//++Шерстюк Ю.Ю. 2021 Задача 8409
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") 
		или   Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден") Тогда 
		пИзменятьПлановыеДаты = Ложь;
	Иначе
		пИзменятьПлановыеДаты = Истина;
	КонецЕсли;	
	//--Шерстюк Ю.Ю.
	Если ДобавитьКоличествоРабочихДней = 0 Тогда
		Сообщить("Укажите количество дней для расчета!");
		Возврат;
	КонецЕсли;
	
	Дельта = ДобавитьКоличествоРабочихДней * 86400;
	
	Для каждого Элемент Из Элементы.Товары.ВыделенныеСтроки Цикл
		Стр = Объект.Товары.НайтиПоИдентификатору(Элемент);
		ДатаПоступленияСтарая = Стр.ДатаПоступления;
		ДатаПоступленияНовая = Стр.ДатаПоступления + Дельта;
		Стр.ДатаПоступления = ДатаПоступленияНовая + КоличествоНеРабочихДней(ДатаПоступленияСтарая,ДатаПоступленияНовая);
		//++Шерстюк Ю.Ю. 2021 Задача 8409
		Если пИзменятьПлановыеДаты Тогда 
			Стр.Рин1_ПлановаяДатаПоступления = Стр.ДатаПоступления;
		КонецЕсли;
		//--Шерстюк Ю.Ю.
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КоличествоНеРабочихДней(НачалоПериода,КонецПериода)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.Дата) * 86400 КАК НеРабочихДней
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		|			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Нерабочий))";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].НеРабочихДней;
	КонецЕсли;
	
КонецФункции // КоличествоНеРабочихДней()



#КонецОбласти
