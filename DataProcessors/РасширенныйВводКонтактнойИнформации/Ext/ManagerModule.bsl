
&Вместо("ОшибкиЗаполненияАдресаXDTO")
Функция Рин1_ОшибкиЗаполненияАдресаXDTO(Знач Адрес, ВидИнформации)
	Если ТипЗнч(Адрес) = Тип("ОбъектXDTO") Тогда
		АдресXML = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Адрес);
		Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(АдресXML);
	КонецЕсли;
	
	Если ТипЗнч(Адрес) = Тип("Строка") Тогда
		Адрес = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	КонецЕсли;
	
	СписокОшибок = Новый Массив;
	
	// Флаги проверки
	Если ТипЗнч(ВидИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ФлагиПроверки = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(ВидИнформации);
	Иначе
		ФлагиПроверки = ВидИнформации;
	КонецЕсли;
	
	Если ФлагиПроверки.МеждународныйФорматАдреса Тогда
		
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(Адрес.addressType) Тогда
			
			ПредставлениеАдреса = Адрес.value;
			Если ВидИнформации.ВключатьСтрануВПредставление Тогда
				ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, Адрес.country, "");
			КонецЕсли;
			ТолькоЛатиницаВСтроке(ПредставлениеАдреса, СписокОшибок);
			
		Иначе
		
			ИменаУровней = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(Адрес.addressType, Истина);
		
			Для каждого ИмяУровня Из ИменаУровней Цикл
				
				ТолькоЛатиницаВСтроке(Адрес[ИмяУровня], СписокОшибок);
				Если СписокОшибок.Количество() > 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат СписокОшибок;
	КонецЕсли;
	//++Шерстюк Ю.Ю.  при обновлении 2.4.9.82 без автора закомментирована проверка
	//Если НЕ УправлениеКонтактнойИнформациейСлужебный.ЭтоНациональныйАдрес(Адрес) Тогда
	//	
	//	// Адрес за пределами РФ
	//	Если ФлагиПроверки.ТолькоНациональныйАдрес Тогда
	//		ТекстОшибки = НСтр("ru = 'Адрес должен быть только российским.';
	//							|en = 'Only Russian addresses are allowed.'");
	//		СписокОшибок.Добавить(ПоляОшибки(ТекстОшибки, Ложь));
	//	КонецЕсли;
	//	
	//	Возврат СписокОшибок;
	//КонецЕсли;
	//--Шерстюк Ю.Ю.
	// Адрес пустой
	Если Не УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияЗаполнена(Адрес) Тогда
		
		Если ФлагиПроверки.ОбязательноеЗаполнение Тогда
			// Но должен быть заполнен
			ТекстОшибки = НСтр("ru = 'Адрес не заполнен.';
								|en = 'Address is required.'");
			СписокОшибок.Добавить(ПоляОшибки(ТекстОшибки, Ложь));
		КонецЕсли;
		
		Возврат СписокОшибок;
	КонецЕсли;
	
	ВсеОшибки = ОбщиеГруппыОшибокЗаполненияАдреса(Адрес, ФлагиПроверки);
	
	Если ВсеОшибки.Количество() > 0 Тогда
		Для Каждого Группа Из ВсеОшибки Цикл
			Для Каждого Поле Из Группа.Поля Цикл
				СписокОшибок.Добавить(ПоляОшибки( Поле.Сообщение, Истина, Поле.ИмяПоля));
			КонецЦикла;
		КонецЦикла;
		Возврат СписокОшибок;
	КонецЕсли;
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		
		ОшибкиКлассификатора = Новый СписокЗначений;
		ЗаполнитьОшибкиАдресаПоКлассификатору(Адрес, ФлагиПроверки, ОшибкиКлассификатора);
		Для Каждого ЭлементСписка Из ОшибкиКлассификатора Цикл
			ДанныеОшибки = ЭлементСписка.Значение;
			СписокОшибок.Добавить(ПоляОшибки(ЭлементСписка.Представление, ДанныеОшибки.АдресПроверен, ДанныеОшибки.ПутьXPath, ДанныеОшибки.Варианты));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокОшибок;
	
	//Если ТипЗнч(Адрес) = Тип("Строка") Тогда
	//	Адрес = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	//КонецЕсли;
	//
	//Если ТипЗнч(Адрес) = Тип("ОбъектXDTO") Тогда
	//	АдресXML = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Адрес);
	//	Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(АдресXML);
	//КонецЕсли;
	//
	//Результат = ?(РезультатГруппами, Новый Массив, Новый СписокЗначений);
	//
	//// Флаги проверки
	//Если ТипЗнч(ВидИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
	//	ФлагиПроверки = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(ВидИнформации);
	//Иначе
	//	ФлагиПроверки = ВидИнформации;
	//КонецЕсли;
	//
	//Если ФлагиПроверки.МеждународныйФорматАдреса Тогда
	//	
	//	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(Адрес.addressType) Тогда
	//		
	//		ПредставлениеАдреса = Адрес.value;
	//		Если ВидИнформации.ВключатьСтрануВПредставление Тогда
	//			ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, Адрес.country, "");
	//		КонецЕсли;
	//		ТолькоЛатиницаВСтроке(ПредставлениеАдреса, Результат, РезультатГруппами);
	//		
	//	Иначе
	//	
	//		ИменаУровней = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(Адрес.addressType, Истина);
	//	
	//		Для каждого ИмяУровня Из ИменаУровней Цикл
	//			
	//			ТолькоЛатиницаВСтроке(Адрес[ИмяУровня], Результат, РезультатГруппами);
	//			Если Результат.Количество() > 0 Тогда
	//				Прервать;
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//	Возврат Результат;
	//КонецЕсли;
	//
	////Если НЕ УправлениеКонтактнойИнформациейСлужебный.ЭтоНациональныйАдрес(Адрес) Тогда
	////	
	////	// Адрес за пределами РФ
	////	Если ФлагиПроверки.ТолькоНациональныйАдрес Тогда
	////		ТекстОшибки = НСтр("ru = 'Адрес должен быть только российским.';
	////							|en = 'Only Russian addresses can be used.'");
	////		Если РезультатГруппами Тогда
	////			Результат.Добавить(Новый Структура("Поля, ТипОшибки, Сообщение", Новый Массив,
	////				"НеЗаполненыОбязательныеПоля", ТекстОшибки));
	////		Иначе
	////			Результат.Добавить("/", ТекстОшибки);
	////		КонецЕсли;
	////	КонецЕсли;
	////	
	////	Возврат Результат;
	////КонецЕсли;
	//
	//// Отдельно проверяем пустой адрес, если необходимо его заполнение.
	//Если Не УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияЗаполнена(Адрес) Тогда
	//	// Адрес пуст
	//	Если ФлагиПроверки.ОбязательноеЗаполнение Тогда
	//		// Но должен быть заполнен
	//		ТекстОшибки = НСтр("ru = 'Адрес не заполнен.';
	//							|en = 'Address is not filled in.'");
	//		
	//		Если РезультатГруппами Тогда
	//			Результат = Новый Массив;
	//			Результат.Добавить(Новый Структура("Поля, ТипОшибки, Сообщение", Новый Массив,
	//				"НеЗаполненыОбязательныеПоля", ТекстОшибки));
	//		Иначе
	//			Результат = Новый СписокЗначений;
	//			Результат.Добавить("/", ТекстОшибки);
	//		КонецЕсли;
	//		
	//		Возврат Результат
	//	КонецЕсли;
	//	
	//	// Адрес пуст и не должен быть заполнен - считаем его корректным.
	//	Возврат ?(РезультатГруппами, Новый Массив, Новый СписокЗначений);
	//КонецЕсли;
	//
	//ВсеОшибки = ОбщиеГруппыОшибокЗаполненияАдреса(Адрес, ФлагиПроверки);
	//ПроверятьКлассификатор = ВсеОшибки.Количество() = 0;
	//
	//ОшибкиКлассификатора = Новый СписокЗначений;
	//Если ПроверятьКлассификатор И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
	//	ЗаполнитьОшибкиАдресаПоКлассификатору(Адрес, ФлагиПроверки, ОшибкиКлассификатора);
	//КонецЕсли;
	//	
	//Если РезультатГруппами Тогда
	//	НаименованиеГруппыОшибки = "ОшибкиПоКлассификатору";
	//	КоличествоОшибок = ОшибкиКлассификатора.Количество();
	//	
	//	Если КоличествоОшибок = 1 И ОшибкиКлассификатора[0].Значение <> Неопределено
	//		И ОшибкиКлассификатора[0].Значение.ПутьXPath = Неопределено Тогда
	//		ВсеОшибки.Добавить(ГруппаОшибокАдреса(НаименованиеГруппыОшибки, ОшибкиКлассификатора[0].Представление));
	//		
	//	ИначеЕсли КоличествоОшибок > 0 Тогда
	//		// Подробное описание ошибок
	//		ВсеОшибки.Добавить(ГруппаОшибокАдреса(НаименованиеГруппыОшибки,
	//			НСтр("ru = 'Части адреса не соответствуют адресному классификатору:';
	//				|en = 'Parts of the address do not correspond to the address classifier: '")));
	//			
	//		ГруппаОшибокКлассификатора = ВсеОшибки[ВсеОшибки.ВГраница()];
	//		
	//		СписокСущностей = "";
	//		Для Каждого Элемент Из ОшибкиКлассификатора Цикл
	//			ЭлементОшибки = Элемент.Значение;
	//			Если ЭлементОшибки = Неопределено Тогда
	//				// Абстрактная ошибка
	//				ДобавитьОшибкуЗаполненияАдреса(ГруппаОшибокКлассификатора, "", Элемент.Представление);
	//			Иначе
	//				ДобавитьОшибкуЗаполненияАдреса(ГруппаОшибокКлассификатора, ЭлементОшибки.ПутьXPath, Элемент.Представление);
	//				СписокСущностей = СписокСущностей + ", " + ЭлементОшибки.СущностьПоля;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		ГруппаОшибокКлассификатора.Сообщение = ГруппаОшибокКлассификатора.Сообщение + Сред(СписокСущностей, 2);
	//	КонецЕсли;
	//	
	//	Возврат ВсеОшибки;
	//КонецЕсли;
	//
	//// Объединяем все в список
	//Результат = Новый СписокЗначений;
	//Для Каждого Группа Из ВсеОшибки Цикл
	//	Для Каждого Поле Из Группа.Поля Цикл
	//		Результат.Добавить(Поле.ИмяПоля, Поле.Сообщение, Истина);
	//	КонецЦикла;
	//КонецЦикла;
	//Для Каждого ЭлементСписка Из ОшибкиКлассификатора Цикл
	//	Результат.Добавить(ЭлементСписка.Значение.ПутьXPath, ЭлементСписка.Представление, ЭлементСписка.Значение.АдресПроверен);
	//КонецЦикла;
	//
	//Возврат Результат;

КонецФункции
