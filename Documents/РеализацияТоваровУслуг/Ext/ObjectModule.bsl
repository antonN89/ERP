
&Перед("ОбработкаПроведения")
Процедура Рин1_ОбработкаПроведения(Отказ, РежимПроведения)
	
		ГИГ_КонтрольПороговОграничения.ВыполнитьПроверкуПоПорогамЦеновыхГрупп(Отказ,ЭтотОбъект,РежимПроведения);			
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ЗаполнитьЭтапыГрафикаОплаты")
Процедура Рин1_ЗаполнитьЭтапыГрафикаОплаты()
	// Вставить содержимое метода.
//	ПродолжитьВызов();
	
	ЭтапыГрафикаОплаты.Очистить();
	
//{{20200814 ГлазуновДВ добавили расчет этапов оплаты от Даты Перехода права собственности	
	ДатаРасчетаЖелаемойДаты = ?(ДатаПереходаПраваСобственности = Дата("00010101"), Дата, ДатаПереходаПраваСобственности);
//}}20200814 ГлазуновДВ
	СуммаДокумента   = ПолучитьСуммуДокумента();
	СуммаТары        = ПолучитьСуммуДокументаПоТаре();
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьГрафикиОплаты        = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	Если СуммаДокумента + СуммаТары > 0 Тогда
		
		Если ЗначениеЗаполнено(Договор) Тогда
			ГрафикИсполненияДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ГрафикИсполненияДоговора");
		Иначе
			ГрафикИсполненияДоговора = Документы.ГрафикИсполненияДоговора.ПустаяСсылка();
		КонецЕсли;
		
//Исходное		Если НЕ РеализацияПоЗаказам
//Исходное			ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
//Исходное			ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов И ЗначениеЗаполнено(ГрафикИсполненияДоговора) Тогда
			
			ГрафикСоглашенияЗаполнен = Ложь;
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Соглашение) Тогда
				ГрафикСоглашенияЗаполнен = ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);
			КонецЕсли;
			
//Исходное			Если ИспользоватьГрафикиОплаты Тогда
//Исходное				ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Соглашение, "ГрафикОплаты");
//Исходное			Иначе
//Исходное				ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
//Исходное			КонецЕсли;
		//{{20200604 ГлазуновДВ добавили для исправления недочета (выбор Графика оплаты только по Соглашению не подходит)
			ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
			Если ИспользоватьГрафикиОплаты Тогда
				ГрафикОплаты = Договор.ГрафикОплаты;
				Если ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка() Тогда
					ГрафикОплаты = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Соглашение, "ГрафикОплаты");
				КонецЕсли;
			КонецЕсли;
		//}}20200604 ГлазуновДВ
			
			СуммаПредоплаты = 0;
			СуммаПредоплатыЗаТару = 0;
			
			Если ЗначениеЗаполнено(ГрафикИсполненияДоговора) Тогда
			//	ЖелаемаяДата = ЭтапыОплатыСервер.ДатаПервогоНеоплаченногоЭтапаГрафика(ГрафикИсполненияДоговора,Дата)
			//20200814 ГлазуновДВ добавили расчет этапов оплаты от Даты Перехода права собственности				
				ЖелаемаяДата = ЭтапыОплатыСервер.ДатаПервогоНеоплаченногоЭтапаГрафика(ГрафикИсполненияДоговора,ДатаРасчетаЖелаемойДаты)
			Иначе
				//ЖелаемаяДата =  ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(
				//	Дата,
			//20200814 ГлазуновДВ добавили расчет этапов оплаты от Даты Перехода права собственности				
				ЖелаемаяДата =  ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(
					ДатаРасчетаЖелаемойДаты,
					ГрафикОплаты,
					Соглашение);
			КонецЕсли;
			
		//{{20200604 ГлазуновДВ Перенесли для исправления недочета (Заполнение Этапов оплат)
		Если НЕ РеализацияПоЗаказам
			ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
			ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов И ЗначениеЗаполнено(ГрафикИсполненияДоговора) Тогда
		//}}20200604 ГлазуновДВ
			
			Если (ЗначениеЗаполнено(ГрафикОплаты) ИЛИ ГрафикСоглашенияЗаполнен) И Не РеализацияПоЗаказам Тогда
				
				СтруктураПредоплаты = ПродажиСервер.СуммаПредоплатыПоСоглашению(
					ЭтотОбъект,
					ЭтапыГрафикаОплаты,
					СуммаДокумента - СуммаТары,
					СуммаТары);
				СуммаПредоплаты = СтруктураПредоплаты.СуммаПредоплаты;
				СуммаПредоплатыЗаТару = СтруктураПредоплаты.СуммаПредоплатыЗаТару;
				
				Если СуммаПредоплаты <> 0 ИЛИ СуммаПредоплатыЗаТару <> 0 Тогда
					
					ПараметрыДляДобавления = ЭтапыОплатыКлиентСервер.ПараметрыДляДобавленияЭтапаПоУмолчанию();
					ПараметрыДляДобавления.Объект = ЭтотОбъект;
					ПараметрыДляДобавления.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки;
					ПараметрыДляДобавления.ЖелаемаяДата = Дата;
					ПараметрыДляДобавления.ДатаСеанса = ТекущаяДатаСеанса();
					ПараметрыДляДобавления.СуммаОплатыПоДокументу = СуммаПредоплаты;
					ПараметрыДляДобавления.СуммаЗалогаПоДокументу = СуммаПредоплатыЗаТару;
					
					ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ПараметрыДляДобавления);
					
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаДокумента - СуммаТары - СуммаПредоплаты <> 0 ИЛИ СуммаТары - СуммаПредоплатыЗаТару <> 0 Тогда
				ПараметрыДляДобавления = ЭтапыОплатыКлиентСервер.ПараметрыДляДобавленияЭтапаПоУмолчанию();
				ПараметрыДляДобавления.Объект = ЭтотОбъект;
				ПараметрыДляДобавления.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
				ПараметрыДляДобавления.ЖелаемаяДата = ЖелаемаяДата;
				ПараметрыДляДобавления.ДатаСеанса = ТекущаяДатаСеанса();
				ПараметрыДляДобавления.СуммаОплатыПоДокументу = СуммаДокумента - СуммаТары - СуммаПредоплаты;
				ПараметрыДляДобавления.СуммаЗалогаПоДокументу = СуммаТары - СуммаПредоплатыЗаТару;
				
				ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ПараметрыДляДобавления);
			КонецЕсли;
			
			ЭтапыОплатыСервер.ЗаполнитьПроцентыПоСуммам(Новый Структура("ЭтапыГрафикаОплаты,ЕстьТара", ЭтотОбъект.ЭтапыГрафикаОплаты,СуммаТары > 0));
			
		Иначе
			
			ПараметрыЗаполненияЭтапов = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплатыПоЗаказам();
			ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияЭтапов,ЭтотОбъект);
		//{{20200814 ГлазуновДВ добавили расчет этапов оплаты от Даты Перехода права собственности
			ПараметрыЗаполненияЭтапов.Дата = ДатаРасчетаЖелаемойДаты;
		//}}20200814 ГлазуновДВ
			ПараметрыЗаполненияЭтапов.ТабличнаяЧасть = Товары.Выгрузить(,"КодСтроки, ЗаказКлиента, Номенклатура, СуммаСНДС, СуммаВзаиморасчетов");
			ПараметрыЗаполненияЭтапов.ИмяПоляЗаказ   = "ЗаказКлиента";
			ПараметрыЗаполненияЭтапов.ЕстьТара       = Истина;
			ПараметрыЗаполненияЭтапов.ПоЗаказам      = РеализацияПоЗаказам;
			ПараметрыЗаполненияЭтапов.УпрощеннаяСхема= ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
			ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПоЗаказам(ПараметрыЗаполненияЭтапов);
		//{{20200604 ГлазуновДВ добавили для исправления недочета (выбор Графика оплаты только по Соглашению не подходит)
			ЭтапыОплатыСервер.РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(ПараметрыЗаполненияЭтапов);
		//}}20200604 ГлазуновДВ
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ЗаполнитьДокументНаОснованииЗаказаКлиента")
Процедура Рин1_ЗаполнитьДокументНаОснованииЗаказаКлиента(Знач ДокументОснование, Знач СкладОтгрузки, ВариантОформления, РеквизитыЗаказа, ПараметрыОформления)
	// Вставить содержимое метода.
	//ПродолжитьВызов(ДокументОснование, СкладОтгрузки, ВариантОформления, РеквизитыЗаказа, ПараметрыОформления);
	ТипОснования = ТипЗнч(ДокументОснование);
	ЗаполнятьПоОстаткам = Ложь;
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказКлиента") Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка                КАК ЗаказКлиента,
		|	ЗаказКлиента.Партнер               КАК Партнер,
		|	ЗаказКлиента.Контрагент            КАК Контрагент,
		|	ЗаказКлиента.КонтактноеЛицо        КАК КонтактноеЛицо,
		|	ЗаказКлиента.Договор               КАК Договор,
		//++Шерстюк Ю.Ю. 24.03.2021 Задача № 5465 вывод на печать в соответствии с правилами Диадок
		|	ЗаказКлиента.Рин1_ПечатьОснованияКакВДиадок  КАК Рин1_ПечатьОснованияКакВДиадок,
		//--Шерстюк Ю.Ю.
		|	ЗаказКлиента.Организация           КАК Организация,
		|	ЗаказКлиента.ФормаОплаты           КАК ФормаОплаты,
		|	ЗаказКлиента.Соглашение            КАК Соглашение,
		|	ЗаказКлиента.КартаЛояльности       КАК КартаЛояльности,
		|	ЗаказКлиента.Сделка                КАК Сделка,
		|	ЗаказКлиента.Валюта                КАК Валюта,
		|	ЗаказКлиента.Валюта                КАК ВалютаВзаиморасчетов,
		|	ЗаказКлиента.ГрафикОплаты          КАК ГрафикОплаты,
		|	ЗаказКлиента.Подразделение         КАК Подразделение,
		|	ЗаказКлиента.ДатаОтгрузки          КАК ДатаОтгрузки,
		|	ВЫБОР
		|		КОГДА
		|			ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ
		|			ЗаказКлиента.Склад
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР
		|		КОГДА
		|			ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ЗаказКлиента.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
		|	ВЫБОР 
		|		КОГДА
		|			ЗаказКлиента.НалогообложениеНДС В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров))
		|		ТОГДА 
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
		|		ИНАЧЕ 
		|			ЗаказКлиента.НалогообложениеНДС
		|	КОНЕЦ КАК НалогообложениеНДС,
		|	ЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ЗаказКлиента.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
		|	ЗаказКлиента.АдресДоставки         КАК АдресДоставки,
		|	ЗаказКлиента.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке   КАК ОрдернаяСхемаПриОтгрузке,
		|
		|	ЗаказКлиента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ЗаказКлиента.Статус                КАК СтатусДокумента,
		|	НЕ ЗаказКлиента.Проведен           КАК ЕстьОшибкиПроведен,
		|	ИСТИНА                             КАК ЕстьОшибкиСтатус,
		|
		|	ЗаказКлиента.БанковскийСчет                 КАК БанковскийСчетОрганизации,
		|	ЗаказКлиента.БанковскийСчетКонтрагента      КАК БанковскийСчетКонтрагента,
		|	ЗаказКлиента.Грузоотправитель               КАК Грузоотправитель,
		|	ЗаказКлиента.Грузополучатель                КАК Грузополучатель,
		|	ЗаказКлиента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	ЗаказКлиента.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
		|	ЗаказКлиента.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
		|	ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ЗаказКлиента.ТребуетсяЗалогЗаТару           КАК ТребуетсяЗалогЗаТару,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСоглашенияСКлиентами 
		|			ТОГДА ЗаказКлиента.Соглашение.КалендарьВозвратаТары
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|	КОНЕЦ                                       КАК КалендарьВозвратаТары,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСоглашенияСКлиентами 
		|			ТОГДА ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|
		|	ЗаказКлиента.СкидкиНаценки.(
		|		КлючСвязи,
		|		СкидкаНаценка,
		|		Сумма
		|	) КАК СкидкиНаценки,
		|	ЗаказКлиента.АдресДоставкиЗначенияПолей     КАК АдресДоставкиЗначенияПолей,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) 
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.СпособДоставки
		|	КОНЕЦ                                       КАК СпособДоставки,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) 
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ЗонаДоставки
		|	КОНЕЦ                                       КАК ЗонаДоставки,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ПеревозчикПартнер
		|	КОНЕЦ                                       КАК ПеревозчикПартнер,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) 
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ВремяДоставкиС
		|	КОНЕЦ                                       КАК ВремяДоставкиС,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) 
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ВремяДоставкиПо
		|	КОНЕЦ                                       КАК ВремяДоставкиПо,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ДополнительнаяИнформацияПоДоставке
		|	КОНЕЦ                                       КАК ДополнительнаяИнформацияПоДоставке,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ОсобыеУсловияПеревозки
		|	КОНЕЦ                                       КАК ОсобыеУсловияПеревозки,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ОсобыеУсловияПеревозкиОписание
		|	КОНЕЦ                                       КАК ОсобыеУсловияПеревозкиОписание,
		|
		|	
		|	ЗаказКлиента.ПорядокРасчетов                КАК ПорядокРасчетов,
		|	ЗаказКлиента.НаправлениеДеятельности        КАК НаправлениеДеятельности,
		|	ЗаказКлиента.ПорядокОплаты                  КАК ПорядокОплаты
		|
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаказКлиента
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыОстатки.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|		,
		|		ЗаказКлиента = &ЗаказКлиента
		|) КАК ЗаказыОстатки
		|");
	
		Запрос.УстановитьПараметр("ЗаказКлиента", ДокументОснование);
		Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
		Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииПоОперации(ДокументОснование,
										"РеализацияТоваровУслуг",
										РеквизитыЗаказа.ХозяйственнаяОперация,
										ВариантОформления);
		
		Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа.ЗаказКлиента,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен);
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			Если НЕ ЗначениеЗаполнено(Дата) Тогда
				Дата = ТекущаяДатаСеанса();
			КонецЕсли;
		КонецЕсли;
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ЭтотОбъект,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю,
			РеквизитыЗаказа.КалендарьВозвратаТары);
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаНаВозврат.Ссылка                КАК ЗаказКлиента,
		|	ЗаявкаНаВозврат.Партнер               КАК Партнер,
		|	ЗаявкаНаВозврат.Контрагент            КАК Контрагент,
		|	ЗаявкаНаВозврат.КонтактноеЛицо        КАК КонтактноеЛицо,
		|	ЗаявкаНаВозврат.Договор               КАК Договор,
		|	ЗаявкаНаВозврат.Организация           КАК Организация,
		|	ЗаявкаНаВозврат.ФормаОплаты           КАК ФормаОплаты,
		|	ЗаявкаНаВозврат.Соглашение            КАК Соглашение,
		|	ЗаявкаНаВозврат.Сделка                КАК Сделка,
		|	ЗаявкаНаВозврат.Валюта                КАК Валюта,
		|	ЗаявкаНаВозврат.Валюта                КАК ВалютаВзаиморасчетов,
		|	ЗаявкаНаВозврат.ГрафикОплаты          КАК ГрафикОплаты,
		|	ЗаявкаНаВозврат.ДатаОтгрузки          КАК ДатаОтгрузки,
		|	ВЫБОР КОГДА ЗаявкаНаВозврат.Склад.ЭтоГруппа 
		|		И ЗаявкаНаВозврат.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ ЗаявкаНаВозврат.Склад
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР КОГДА ЗаявкаНаВозврат.Склад.ЭтоГруппа
		|		И ЗаявкаНаВозврат.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ЗаявкаНаВозврат.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
		|	ЗаявкаНаВозврат.НалогообложениеНДС    КАК НалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|				ИЛИ ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|		КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|	КОНЕЦ КАК ХозяйственнаяОперация,
		|	ЗаявкаНаВозврат.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
		|	ЗаявкаНаВозврат.АдресДоставки         КАК АдресДоставки,
		|	ЗаявкаНаВозврат.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ОрдернаяСхемаПриОтгрузке,
		|	ЗаявкаНаВозврат.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
		|	ЗаявкаНаВозврат.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ЗаявкаНаВозврат.ТребуетсяЗалогЗаТару           КАК ТребуетсяЗалогЗаТару,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСоглашенияСКлиентами 
		|			ТОГДА ЗаявкаНаВозврат.Соглашение.КалендарьВозвратаТары
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|	КОНЕЦ КАК КалендарьВозвратаТары,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСоглашенияСКлиентами 
		|			ТОГДА ЗаявкаНаВозврат.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ЗаявкаНаВозврат.Статус               КАК СтатусДокумента,
		|	НЕ ЗаявкаНаВозврат.Проведен          КАК ЕстьОшибкиПроведен,
		|
		|	ЗаявкаНаВозврат.БанковскийСчет                 КАК БанковскийСчетОрганизации,
		|	ЗаявкаНаВозврат.БанковскийСчетКонтрагента      КАК БанковскийСчетКонтрагента,
		|	ЗаявкаНаВозврат.Грузоотправитель               КАК Грузоотправитель,
		|	ЗаявкаНаВозврат.Грузополучатель                КАК Грузополучатель,
		|	ЗаявкаНаВозврат.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	ЗаявкаНаВозврат.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
		|
		|	ЗаявкаНаВозврат.СкидкиНаценки.(
		|		КлючСвязи,
		|		СкидкаНаценка,
		|		Сумма
		|	) КАК СкидкиНаценки,
		|	ЗаявкаНаВозврат.АдресДоставкиЗначенияПолей     КАК АдресДоставкиЗначенияПолей,
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаявкаНаВозврат.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		|		ЗаявкаНаВозврат.СпособДоставки
		|	КОНЕЦ                                          КАК СпособДоставки,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаявкаНаВозврат.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		|		ЗаявкаНаВозврат.ПеревозчикПартнер
		|	КОНЕЦ                                          КАК ПеревозчикПартнер,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаявкаНаВозврат.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		|		ЗаявкаНаВозврат.ДополнительнаяИнформацияПоДоставке
		|	КОНЕЦ                                          КАК ДополнительнаяИнформацияПоДоставке,
		|
		|	ЗаявкаНаВозврат.ПорядокРасчетов                КАК ПорядокРасчетов,
		|	ЗаявкаНаВозврат.НаправлениеДеятельности        КАК НаправлениеДеятельности
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
		|ГДЕ
		|	ЗаявкаНаВозврат.Ссылка = &ДокументОснование
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыОстатки.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|		,
		|		ЗаказКлиента = &ДокументОснование
		|) КАК ЗаказыОстатки
		|";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
		Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
			
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииПоОперации(ДокументОснование,
										"РеализацияТоваровУслуг",
										РеквизитыЗаказа.ХозяйственнаяОперация,
										ВариантОформления);
		
		Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа.ЗаказКлиента,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен);
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			Если НЕ ЗначениеЗаполнено(Дата) Тогда
				Дата = ТекущаяДатаСеанса();
			КонецЕсли;
		КонецЕсли;
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ЭтотОбъект,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю,
			РеквизитыЗаказа.КалендарьВозвратаТары);
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("Массив") Тогда
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		Валюта = ВалютаВзаиморасчетов;
	//{{20200805 ГлазуновДВ Меняем ВалютуВзаиморасчетов на валюту Договора //20200929 ГлазуновДВ Ввели Условие для заполнения Заказов Без ДОговоров.
		Если Соглашение.ИспользуютсяДоговорыКонтрагентов И Договор <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			Валюта = Договор.ВалютаВзаиморасчетов;
			//++Шерстюк Ю.Ю 24.03.2021 задача 5465
			РеквизитыЗаказа.Вставить("Рин1_ПечатьОснованияКакВДиадок", Договор.Рин1_ПечатьОснованияКакВДиадок);
			//--Шерстюк Ю.Ю.
		КонецЕсли;
	//}}20200805 ГлазуновДВ
		БанковскийСчетОрганизации = РеквизитыЗаказа.БанковскийСчет;
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ЭтотОбъект,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю,
			РеквизитыЗаказа.КалендарьВозвратаТары);
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация    		= Организация;
			СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		КонецЕсли;
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказыОстатки.Склад КАК Склад
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(
			|		,
			|		ЗаказКлиента В (&МассивДокументов)
			|) КАК ЗаказыОстатки
			|";
			
			РезультатЗапросаПоСкладам = Запрос.Выполнить();
			МассивСкладов = РезультатЗапросаПоСкладам.Выгрузить().ВыгрузитьКолонку("Склад");
			Склад = РеквизитыЗаказа.СкладОтгрузки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РеализацияПоЗаказам = Истина;
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Соглашение) Тогда
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
			ФормаОплаты   = УсловияПродаж.ФормаОплаты;
			
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация    			= Организация;
			СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;
			СтруктураПараметров.ФормаОплаты				= ФормаОплаты;

			Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение т.ч. товары.
	Если Не ЗначениеЗаполнено(СкладОтгрузки) Тогда
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			// Только услуги
			Если МассивСкладов.Количество() = 0 Тогда
				ЗаполнятьПоОстаткам = Истина;
			// Услуги или товары
			ИначеЕсли МассивСкладов.Количество() = 1 Тогда
				СкладОтгрузки = МассивСкладов[0];
				Склад = СкладОтгрузки;
				ЗаполнятьПоОстаткам = Истина;
			// Услуги и товары
			ИначеЕсли МассивСкладов.Количество() = 2 Тогда
				Если Не ЗначениеЗаполнено(МассивСкладов[0]) Или
					Не ЗначениеЗаполнено(МассивСкладов[1]) Тогда
					СкладОтгрузки = ?(ЗначениеЗаполнено(МассивСкладов[0]), МассивСкладов[0], МассивСкладов[1]);
					Склад = СкладОтгрузки;
					ЗаполнятьПоОстаткам = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаполнятьПоОстаткам = Истина;
			СкладОтгрузки = Склад;
		КонецЕсли;
	Иначе
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			Склад = СкладОтгрузки;
		КонецЕсли;
		ЗаполнятьПоОстаткам = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	КонецЕсли;
	
	Если ЗаполнятьПоОстаткам Тогда
		
		Если ТипОснования = Тип("Массив") Тогда
			МассивЗаказов = ДокументОснование;
		Иначе
			МассивЗаказов = Новый Массив();
			МассивЗаказов.Добавить(ЗаказКлиента);
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ВариантОформления", ВариантОформления);
		ПараметрыЗаполнения.Вставить("ПараметрыОформления", ПараметрыОформления);
		//++Шерстюк Ю.Ю. 26.05.2021 Задача 8839 определяем валюту документа по условиям договора
		Если МассивЗаказов.Количество() > 0 Тогда 
			Если МассивЗаказов[0].Договор.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях или
				 МассивЗаказов[0].Договор.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях Тогда 
				 Валюта = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
		КонецЕсли;
		//--Шерстюк Ю.Ю.
	//{{20200805 ГлазуновДВ Меняем ВалютуВзаиморасчетов на валюту Договора и устанавливаем курс пересчета
		Если Валюта <> ВалютаВзаиморасчетов Тогда
			ДатаКурса = ?(Дата = Дата('00010101'), ТекущаяДатаСеанса(), Дата);
			КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса) ;
			ПараметрыЗаполнения.Вставить("Курс", КурсНаДату.Курс);
			ПараметрыЗаполнения.Вставить("Кратность", КурсНаДату.Кратность);
		КонецЕсли;
	//}}20200805 ГлазуновДВ
		
		Документы.РеализацияТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
			ЭтотОбъект,
			Товары,
			СкидкиНаценки,
			?(СкладОтгрузки=Неопределено, Справочники.Склады.ПустаяСсылка(), СкладОтгрузки),
			МассивЗаказов,
			ПараметрыЗаполнения);
		ЭтотОбъект.ВариантОформленияПродажи = ?(ЗначениеЗаполнено(ВариантОформления), 
			ВариантОформления,
			Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказКлиента, Товары, "ЗаказКлиента");
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг);
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий, Ложь);
	//++Шерстюк Ю.Ю. 26.05.2021 Задача № 8839 валюту взаиморасчетов не нужно устанавливать принудительно в рублях, условия взаиморасчетов определяются в договоре	
	////{{20201207 ГлазуновДВ ставим ВалютаВзаиморасчетов = руб.
	//	Если ВалютаВзаиморасчетов <> Справочники.Валюты.НайтиПоКоду("643") Тогда
	//		ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");
	//		Для Каждого Строка Из ЭтотОбъект.Товары Цикл
	//			Строка.СуммаВзаиморасчетов = Строка.СуммаСНДС;
	//		КонецЦикла;
	//	КонецЕсли;
	////}}20201207 ГлазуновДВ
	//--Шерстюк Ю.Ю.
	КонецЕсли;
	
	СтруктураОснование = Документы.РеализацияТоваровУслуг.СтруктураОснованияДляПечати(ЭтотОбъект);
	//++Шерстюк Ю.Ю. 12.01.21,14.04.2021 добавлена проверка используется ли договор
	//если записть документа интерактивная, то срабатывает обработчик заполнения основания, если нет, то дозаполним его здесь
	//Если СтруктураОснование.Основание = Неопределено Тогда 
	Если Соглашение.ИспользуютсяДоговорыКонтрагентов И Договор <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		СтруктураОснование = ЗаполнитьОснование(РеквизитыЗаказа.Рин1_ПечатьОснованияКакВДиадок);
	КонецЕсли;
	//КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураОснование);
	//--Шерстюк Ю.Ю.
КонецПроцедуры

//++Шерстюк Ю.Ю. 12.01.21,24.03.2021  Рин1_ОбновитьОснованиеВместоНаСервере скопирована из модуля формы и изменена 
Функция ЗаполнитьОснование(ПечатьОснованияКакВДиадок) Экспорт 
ОснованиеИзДоговора = Новый Структура("Основание, ОснованиеДата, ОснованиеНомер,ОснованиеКакВДиадок");
	//ОснованиеИзДоговора.Вставить("Основание");
	//ОснованиеИзДоговора.Вставить("ОснованиеДата");
	//ОснованиеИзДоговора.Вставить("ОснованиеНомер");

	ТаблицаОснований = Документы.РеализацияТоваровУслуг.ТаблицаОснованийДляПечати(ЭтотОбъект);
	//ОснованиеИзДоговора = "";
	Если ЭтотОбъект.РеализацияПоЗаказам Тогда
		//один заказ клиента
		Если не ЭтотОбъект.ЗаказКлиента = Неопределено Тогда
			
			Если ЭтотОбъект.Договор.ОснованиеЗаказКлиента и ЭтотОбъект.Договор.ТолькоНомерДата Тогда
				НомерЗаказа = Сред(ЭтотОбъект.ЗаказКлиента.Номер,СтрНайти(ЭтотОбъект.ЗаказКлиента.Номер,"-")+1);
				Пока Лев(НомерЗаказа, 1) = "0" Цикл 
					НомерЗаказа = Прав(НомерЗаказа, СтрДлина(НомерЗаказа) - 1);
				КонецЦикла;
				//++Шерстюк Ю.Ю. 24.03.2021 задача 5465
				ТолькоНомерДата = "№ " + НомерЗаказа + " от " + Формат(ЭтотОбъект.ЗаказКлиента.Дата,"ДЛФ=DD");
				//ОснованиеИзДоговора.Вставить("Основание", ?(ЭтотОбъект.Договор.Основание = "",ТолькоНомерДата,ЭтотОбъект.Договор.Основание + " " + ТолькоНомерДата));
				Если ПечатьОснованияКакВДиадок Тогда 
					ТолькоНомерДата = "№ " + НомерЗаказа + " от " + Формат(ЭтотОбъект.ЗаказКлиента.Дата,"ДФ=dd.MM.yyyy");
					ОснованиеИзДоговора.Вставить("ОснованиеКакВДиадок", ?(ЭтотОбъект.Основание = "",ЭтотОбъект.Договор.Основание + " " + ТолькоНомерДата,ЭтотОбъект.Основание + ТолькоНомерДата));
					
					ОснованиеИзДоговора.Вставить("Основание", ?(ЭтотОбъект.Договор.Основание = "",ЭтотОбъект.Основание,ЭтотОбъект.Договор.Основание));
					ОснованиеИзДоговора.Вставить("Рин1_ПечатьОснованияКакВДиадок",Истина);
				Иначе
					ТолькоНомерДата = "№ " + НомерЗаказа + " от " + Формат(ЭтотОбъект.ЗаказКлиента.Дата,"ДЛФ=DD");
					ОснованиеИзДоговора.Вставить("Основание", ?(ЭтотОбъект.Договор.Основание = "",ТолькоНомерДата,ЭтотОбъект.Договор.Основание + " " + ТолькоНомерДата));
					ОснованиеИзДоговора.Вставить("ОснованиеКакВДиадок","");
				КонецЕсли;	
				//--Шерстюк Ю.Ю.

				ОснованиеИзДоговора.Вставить("ОснованиеНомер",НомерЗаказа);
				ОснованиеИзДоговора.Вставить("ОснованиеДата",ЭтотОбъект.ЗаказКлиента.Дата);
			Иначе
				Если ЭтотОбъект.Договор.ОснованиеЗаказКлиента Тогда
					Для Каждого СтрОснование из ТаблицаОснований Цикл 
						Если СтрНайти(СтрОснование.Основание,"заказ") <> 0 Или СтрНайти(СтрОснование.Основание,"Заказ") <> 0 Тогда 
							ОснованиеИзДоговора.Вставить("Основание", ?(ЭтотОбъект.Договор.Основание = "",СтрОснование.Основание,ЭтотОбъект.Договор.Основание + " " + СтрОснование.Основание));
							ОснованиеИзДоговора.Вставить("ОснованиеНомер",СтрОснование.ОснованиеНомер);
							ОснованиеИзДоговора.Вставить("ОснованиеДата",СтрОснование.ОснованиеДата);
							//++Шерстюк Ю.Ю. 24.03.2021 задача 5465
							Если ПечатьОснованияКакВДиадок Тогда  							
								ТолькоНомерДата = " № " + СтрОснование.ОснованиеНомер + " от " + Формат(ЭтотОбъект.ЗаказКлиента.Дата,"ДФ=dd.MM.yyyy");
								ОснованиеИзДоговора.Вставить("ОснованиеКакВДиадок",?(ЭтотОбъект.Основание = "",ЭтотОбъект.Договор.Основание,СтрОснование.Основание)+ТолькоНомерДата);
								ОснованиеИзДоговора.Вставить("Рин1_ПечатьОснованияКакВДиадок",Истина);
							КонецЕсли;	
							//--Шерстюк Ю.Ю.

							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					ОснованиеИзДоговора.Вставить("Основание",ЭтотОбъект.Договор.Основание);
					ОснованиеИзДоговора.Вставить("ОснованиеНомер",ЭтотОбъект.Договор.Номер);
					ОснованиеИзДоговора.Вставить("ОснованиеДата",ЭтотОбъект.Договор.Дата);
                    //++Шерстюк Ю.Ю. 24.03.2021 задача 5465
					Если ПечатьОснованияКакВДиадок Тогда 
						ТолькоНомерДата = " № " + ЭтотОбъект.Договор.Номер + " от " + Формат(ЭтотОбъект.ЗаказКлиента.Дата,"ДФ=dd.MM.yyyy");
						ОснованиеИзДоговора.Вставить("Основание",?(ОснованиеИзДоговора.Основание = "", " ",ОснованиеИзДоговора.Основание));
						ОснованиеИзДоговора.Вставить("ОснованиеКакВДиадок",?(ЭтотОбъект.Основание = "",ЭтотОбъект.Договор.Основание + ТолькоНомерДата,ЭтотОбъект.Основание+ТолькоНомерДата));
						ОснованиеИзДоговора.Вставить("Рин1_ПечатьОснованияКакВДиадок",Истина);
					КонецЕсли;	
					//--Шерстюк Ю.Ю.

				КонецЕсли;
			КонецЕсли;
		Иначе
			//много									
			Если ЭтотОбъект.Договор.ОснованиеЗаказКлиента и ЭтотОбъект.Договор.ТолькоНомерДата Тогда
				//заказы могут дублироваться				
				СЗ_ЗаказовКлиента = Новый СписокЗначений;
				Для каждого Строка Из ЭтотОбъект.Товары Цикл
					Если СЗ_ЗаказовКлиента.НайтиПоЗначению(Строка.ЗаказКлиента) = Неопределено Тогда
						СЗ_ЗаказовКлиента.Добавить(Строка.ЗаказКлиента);
					КонецЕсли;
				КонецЦикла;
				СписокЗаказовТолькоНомерДата = "";
				Для каждого Значение Из СЗ_ЗаказовКлиента Цикл
					Если не Значение.Значение = Неопределено Тогда
						СписокЗаказовТолькоНомерДата = СписокЗаказовТолькоНомерДата + "№ " + Сред(Значение.Значение.Номер,СтрНайти(Значение.Значение.Номер,"-")+1) + " от " + Формат(Значение.Значение.Дата,"ДЛФ=DD") + ", ";
					КонецЕсли;
				КонецЦикла;
				ОснованиеИзДоговора.Вставить("Основание",  ?(ЭтотОбъект.Договор.Основание = "",Лев(СписокЗаказовТолькоНомерДата,СтрДлина(СписокЗаказовТолькоНомерДата)-2),ЭтотОбъект.Договор.Основание + " " + Лев(СписокЗаказовТолькоНомерДата,СтрДлина(СписокЗаказовТолькоНомерДата)-2)));
				//++Шерстюк Ю.Ю. 24.03.2021 задача 5465
				//Если ПечатьОснованияКакВДиадок Тогда 
				//	ОснованиеИзДоговора.Вставить("ОснованиеКакВДиадок",?(ЭтотОбъект.Договор.Основание = "",Лев(СписокЗаказовТолькоНомерДата,СтрДлина(СписокЗаказовТолькоНомерДата)-2),ЭтотОбъект.Договор.Основание + " " + Лев(СписокЗаказовТолькоНомерДата,СтрДлина(СписокЗаказовТолькоНомерДата)-2)));
				//КонецЕсли;	
				//--Шерстюк Ю.Ю.
			Иначе 
				Если ЭтотОбъект.Договор.ОснованиеЗаказКлиента Тогда
					Для Каждого СтрОснование из ТаблицаОснований Цикл 
						Если СтрНайти(СтрОснование.Основание,"заказ") <> 0 Или СтрНайти(СтрОснование.Основание,"Заказ") <> 0 Тогда 
							ОснованиеИзДоговора.Вставить("Основание", ?(ЭтотОбъект.Договор.Основание = "",СтрОснование.Основание,ЭтотОбъект.Договор.Основание + " " + СтрОснование.Основание));
							ОснованиеИзДоговора.Вставить("ОснованиеНомер",СтрОснование.ОснованиеНомер);
							ОснованиеИзДоговора.Вставить("ОснованиеДата",СтрОснование.ОснованиеДата);
							//++Шерстюк Ю.Ю. 24.03.2021 задача 5465
							Если ПечатьОснованияКакВДиадок Тогда
								ТолькоНомерДата = " № " + СтрОснование.ОснованиеНомер + " от " + Формат(ЭтотОбъект.ЗаказКлиента.Дата,"ДФ=dd.MM.yyyy");
								ОснованиеИзДоговора.Вставить("ОснованиеКакВДиадок", ?(ЭтотОбъект.Договор.Основание = "",СтрОснование.Основание,ЭтотОбъект.Договор.Основание + " " + СтрОснование.Основание)+ТолькоНомерДата);
								ОснованиеИзДоговора.Вставить("Рин1_ПечатьОснованияКакВДиадок",Истина);
							КонецЕсли;	
							//--Шерстюк Ю.Ю.

							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ОснованиеИзДоговора.Вставить("Основание",ЭтотОбъект.Договор.Основание);
					ОснованиеИзДоговора.Вставить("ОснованиеНомер",ЭтотОбъект.Номер);
					ОснованиеИзДоговора.Вставить("ОснованиеДата",ЭтотОбъект.Дата);
                    //++Шерстюк Ю.Ю. 24.03.2021 задача 5465
					Если ПечатьОснованияКакВДиадок и ЭтотОбъект.ЗаказКлиента <> Неопределено Тогда
						ТолькоНомерДата = " № " + ЭтотОбъект.Номер + " от " + Формат(ЭтотОбъект.ЗаказКлиента.Дата,"ДФ=dd.MM.yyyy");
						ОснованиеИзДоговора.Вставить("ОснованиеКакВДиадок", ЭтотОбъект.Договор.Основание+ТолькоНомерДата);
						ОснованиеИзДоговора.Вставить("Рин1_ПечатьОснованияКакВДиадок",Истина);
					КонецЕсли;	
					//--Шерстюк Ю.Ю.

				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОснованиеИзДоговора.Основание = "" и не ПечатьОснованияКакВДиадок и не ЭтотОбъект.Договор.ТолькоНомерДата Тогда 
		Для Каждого СтрОснование из ТаблицаОснований Цикл 
					Если СтрНайти(СтрОснование.Основание,"заказ") <> 0 Или СтрНайти(СтрОснование.Основание,"Заказ") <> 0 Тогда 
						ОснованиеИзДоговора.Вставить("Основание",СтрОснование.Основание);
						ОснованиеИзДоговора.Вставить("ОснованиеНомер",СтрОснование.ОснованиеНомер);
						ОснованиеИзДоговора.Вставить("ОснованиеДата",СтрОснование.ОснованиеДата);
						//++Шерстюк Ю.Ю. 24.03.2021 задача 5465
						Если ПечатьОснованияКакВДиадок Тогда 
							ТолькоНомерДата = " № " + СтрОснование.ОснованиеНомер + " от " + Формат(ЭтотОбъект.ЗаказКлиента.Дата,"ДФ=dd.MM.yyyy");
							ОснованиеИзДоговора.Вставить("ОснованиеКакВДиадок", СтрОснование.Основание+ТолькоНомерДата);
							ОснованиеИзДоговора.Вставить("Рин1_ПечатьОснованияКакВДиадок",Истина);
						КонецЕсли;	
						//--Шерстюк Ю.Ю.

						Прервать;
					КонецЕсли;
				КонецЦикла;
	КонецЕсли;
	
	Возврат ОснованиеИзДоговора;
	
КонецФункции

&После("ИнициализироватьДокумент")
Процедура Рин1_ИнициализироватьДокумент(ДанныеЗаполнения)  //задача 7625
	Если ЗначениеЗаполнено(Договор) Тогда 
		Менеджер = Договор.Менеджер;
		
		Если ЗначениеЗаполнено(Договор.Подразделение) Тогда 
			Подразделение = Договор.Подразделение;
		Иначе 
			Подразделение = Менеджер.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры


// + [Rineco], [Киселев А.Н.] [19.08.2021] 
// Задача: [№ 14441], [#Учет продажи не ликвидов]
&После("ОбработкаПроведения")
Процедура Рин1_ОбработкаПроведения1(Отказ, РежимПроведения)
	
	Если Не Отказ Тогда
		РегистрыНакопления.Рин1_НеЛиквидныеТовары.ОтразитьНеЛиквидныеТоварыРасход(ЭтотОбъект,Движения,ЭтотОбъект.Товары);	
	КонецЕсли;
	
КонецПроцедуры
// - [Rineco], [Киселев А.Н.] [19.08.2021]

//--Шерстюк Ю.Ю.



