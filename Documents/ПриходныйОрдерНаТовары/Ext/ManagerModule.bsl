
&Вместо("ПечатьПриходногоОрдераНаТовары")
Функция Рин1_ПечатьПриходногоОрдераНаТовары(МассивОбъектов, ОбъектыПечати)
	// Вставить содержимое метода.
	//Результат = ПродолжитьВызов(МассивОбъектов, ОбъектыПечати);
	//Возврат Результат;
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_ПриходныйОрдерНаТовары";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru = 'Приходный ордер на товары';
							|en = 'Goods receipt note'");
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.ЗонаПриемки) КАК ПредставлениеЗоныПриемки,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Отправитель) КАК ПредставлениеПартнера,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение) КАК РаспоряжениеПредставление,
//{{20200827 ГлазуновДВ Для вывода на печать
	|	ЕСТЬNULL(ПриходныйОрдерНаТовары.Распоряжение.Рин1_ДатаТН, """""""") КАК РаспоряжениеДатаТН,
	|	ЕСТЬNULL(ПриходныйОрдерНаТовары.Распоряжение.Рин1_НомерТН, """""""") КАК РаспоряжениеНомерТН,
//}}20200827 ГлазуновДВ	
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Номер
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.НомерДокументаИБ, """""""")
	|	КОНЕЦ КАК РаспоряжениеНомер,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Дата
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК РаспоряжениеДата,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Организация.Префикс
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.Организация.Префикс, """""""")
	|	КОНЕЦ КАК РаспоряжениеПрефикс,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ПриходныйОрдерНаТовары.Исполнитель.ФизическоеЛицо КАК Исполнитель,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Помещение КАК Помещение,
	|	ПриходныйОрдерНаТовары.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ПриходныйОрдерНаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПриходныйОрдерНаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО (НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись)
	|			И ПриходныйОрдерНаТовары.Распоряжение = РеквизитыРаспоряжения.Ссылка
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул
	|		КОГДА &КолонкаКодов = ""Код""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Артикул,
	|	ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист) КАК УпаковочныйЛист,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Серия КАК Серия,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Серия) КАК ПредставлениеСерии,
	|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПриходныйОрдерНаТоварыТовары.Количество КАК Количество,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Упаковка)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	NULL КАК НастройкаИспользованияСерий
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатЗапроса[0].Выбрать();
	ВыборкаПоТабличнымЧастям = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
		ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение, ВыборкаПоДокументам.Дата);
		
		ВыводитьУпаковки = ИспользоватьУпаковкиНоменклатуры Или ИспользуетсяАдресноеХранение;
		
		// Макет получаем в цикле,т.к. ширина колонок зависит от склада и помещения в документе.
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходныйОрдерНаТовары.ПФ_MXL_ПриходныйОрдерНаТовары");
		
		ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");
		
		ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
		ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
		ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
		
		ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		
		ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
		
		ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
		ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
		
		ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
		
		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		Если НЕ ВыводитьУпаковки Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
			+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки; 		
		КонецЕсли;
		
		ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
		ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
		ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
		
		ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
		ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
		ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ИспользуетсяАдресноеХранение Тогда
			
			ТекстЗоны = НСтр("ru = 'Зона приемки:';
							|en = 'Receiving area:'");
			ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныПриемки;
			
		Иначе
			
			ТекстЗоны = "";
			ЗонаПредставление = "";
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
			// если не перемещение или оприходование
			ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьПоставщик);
		КонецЕсли;
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("ПредставлениеСклада",
		СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,ВыборкаПоДокументам.ПредставлениеПомещения));
		ПараметрыШапки.Вставить("ТекстЗоны", ТекстЗоны);
		ПараметрыШапки.Вставить("ПредставлениеЗоныПриемки", ЗонаПредставление);
		ПредставлениеВходящегоДокумента = ?(ПустаяСтрока(ВыборкаПоДокументам.НомерВходящегоДокумента),"","№ " + СокрЛП(ВыборкаПоДокументам.НомерВходящегоДокумента))
		+ ?(Не ЗначениеЗаполнено(ВыборкаПоДокументам.ДатаВходящегоДокумента),""," от " + Формат(ВыборкаПоДокументам.ДатаВходящегоДокумента,"ДЛФ=D"));
		ПараметрыШапки.Вставить("ПредставлениеВходящегоДокумента", ПредставлениеВходящегоДокумента);
//{{20200827 ГлазуновДВ Для вывода на печать
		ПредставлениеВходящегоДокументаТН = ?(ПустаяСтрока(ВыборкаПоДокументам.РаспоряжениеНомерТН),"","№ " + СокрЛП(ВыборкаПоДокументам.РаспоряжениеНомерТН))
		+ ?(Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДатаТН),""," от " + Формат(ВыборкаПоДокументам.РаспоряжениеДатаТН,"ДЛФ=D"));
		ПараметрыШапки.Вставить("ПредставлениеВходящегоДокументаТН", ПредставлениеВходящегоДокументаТН);
			//ПараметрыШапки.Вставить("РаспоряжениеДатаТН", "");
			//ПараметрыШапки.Вставить("РаспоряжениеНомерТН", "");
//}}20200827 ГлазуновДВ	
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
		
		Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДата)
			Или Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеНомер) Тогда
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ВыборкаПоДокументам.РаспоряжениеПредставление;
		Иначе
			РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
			РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
			РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
			РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;
			
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		ВсегоНаименований = 0;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ПерваяСтрока = Истина;
		СтрокаУпаковок = "";
		СтрокаКоличесткаУпаковок = "";
		СтрокаЕдиницИзмерений = "";
		СтрокаКоличества = "";
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = ВсегоНаименований + 1;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
			
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ВыборкаПоСтрокамТЧ.УпаковочныйЛист;
			Иначе
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
				ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
				, // Упаковка
				ВыборкаПоСтрокамТЧ.ПредставлениеСерии);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
			Если ВыводитьУпаковки Тогда
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
					ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.ПредставлениеЕдининицыИзмеренияУпаковки = НСтр("ru = 'место';
																												|en = 'place'");
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКонец.Параметры.ПредставлениеБазовойЕдиницыИзмерения = НСтр("ru = 'место';
																								|en = 'place'");
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%';
									|en = 'Total items %ВсегоНаименований%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		
		ОбластьПодписей.Параметры.ПредставлениеОтветственного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.Дата);
		ОбластьПодписей.Параметры.ПредставлениеИсполнителя = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Исполнитель, ВыборкаПоДокументам.Дата);
		
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	
	
КонецФункции

&Вместо("ПечатьБланкаПриемкиТоваров")
Функция Рин1_ПечатьБланкаПриемкиТоваров(МассивОбъектов, ОбъектыПечати)
	// Вставить содержимое метода.
	//Результат = ПродолжитьВызов(МассивОбъектов, ОбъектыПечати);
	//Возврат Результат;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_БланкПриемкиТоваров";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru = 'Бланк приемки товаров';
							|en = 'Goods receiving form'");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.ЗонаПриемки) КАК ПредставлениеЗоныПриемки,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Отправитель) КАК ПредставлениеПартнера,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение) КАК РаспоряжениеПредставление,
//{{20200827 ГлазуновДВ Для вывода на печать
	|	ЕСТЬNULL(ПриходныйОрдерНаТовары.Распоряжение.Рин1_ДатаТН, """""""") КАК РаспоряжениеДатаТН,
	|	ЕСТЬNULL(ПриходныйОрдерНаТовары.Распоряжение.Рин1_НомерТН, """""""") КАК РаспоряжениеНомерТН,
//}}20200827 ГлазуновДВ	
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Номер
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.НомерДокументаИБ, """""""")
	|	КОНЕЦ КАК РаспоряжениеНомер,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Дата
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК РаспоряжениеДата,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Организация.Префикс
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.Организация.Префикс, """""""")
	|	КОНЕЦ КАК РаспоряжениеПрефикс,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ПриходныйОрдерНаТовары.Исполнитель.ФизическоеЛицо КАК Исполнитель,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Помещение КАК Помещение,
	|	ПриходныйОрдерНаТовары.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ПриходныйОрдерНаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПриходныйОрдерНаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО (НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись)
	|			И ПриходныйОрдерНаТовары.Распоряжение = РеквизитыРаспоряжения.Ссылка
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист) КАК УпаковочныйЛист,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул
	|		КОГДА &КолонкаКодов = ""Код""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Артикул,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения.Представление
	|		ИНАЧЕ ПриходныйОрдерНаТоварыТовары.Упаковка.Представление
	|	КОНЕЦ КАК ЕдиницаИзмеренияПредставление,
	|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК Количество,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ПриходныйОрдерНаТоварыТовары.СтатусУказанияСерий,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии КАК ИспользоватьНомерСерии,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии КАК ИспользоватьСрокГодностиСерии
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результат[0].Выбрать();	
	ВыборкаПоТабличнымЧастям = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходныйОрдерНаТовары.ПФ_MXL_БланкПриемкиТоваров1");
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьСтрокаСерийНачало    = Макет.ПолучитьОбласть("СтрокаСерий|НачалоСтрокиСерий");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьСтрокаСерийКолонкаКодов      = Макет.ПолучитьОбласть("СтрокаСерий|КолонкаКодовСерий");
	ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	ОбластьСерийКонец     = Макет.Область("КонецСтрокиСерий");
	
	ШиринаКолонкиКодов = Макет.Область("КолонкаКодов").ШиринаКолонки;
	
	Если НЕ ВыводитьКоды Тогда
		ОбластьКолонкаТоваров.ШиринаКолонки   = ОбластьКолонкаТоваров.ШиринаКолонки + ШиринаКолонкиКодов;
		ОбластьСерийКонец.ШиринаКолонки       = ОбластьСерийКонец.ШиринаКолонки + ШиринаКолонкиКодов;
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьСтрокаСерийКонец     = Макет.ПолучитьОбласть("СтрокаСерий|КонецСтрокиСерий");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если Не ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
			ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение, ВыборкаПоДокументам.Дата);
		
		Если ИспользуетсяАдресноеХранение Тогда
			
			ТекстЗоны = НСтр("ru = 'Зона приемки:';
							|en = 'Receiving area:'");
			ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныПриемки;
			
		Иначе
			
			ТекстЗоны = "";
			ЗонаПредставление = "";
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
			// если не перемещение или оприходование
			ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьПоставщик);
		КонецЕсли;
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("ПредставлениеСклада", СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,
																								ВыборкаПоДокументам.ПредставлениеПомещения));
		
		ПараметрыШапки.Вставить("ТекстЗоны", ТекстЗоны);
		ПараметрыШапки.Вставить("ПредставлениеЗоныПриемки", ЗонаПредставление);
		ПараметрыШапки.Вставить("НомерВходящегоДокумента",СокрЛП(ВыборкаПоДокументам.НомерВходящегоДокумента));
		ПараметрыШапки.Вставить("ДатаВходящегоДокумента", Формат(ВыборкаПоДокументам.ДатаВходящегоДокумента,"ДЛФ=D"));
//{{20200827 ГлазуновДВ Для вывода на печать
		ПредставлениеВходящегоДокументаТН = ?(ПустаяСтрока(ВыборкаПоДокументам.РаспоряжениеНомерТН),"","№ " + СокрЛП(ВыборкаПоДокументам.РаспоряжениеНомерТН))
		+ ?(Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДатаТН),""," от " + Формат(ВыборкаПоДокументам.РаспоряжениеДатаТН,"ДЛФ=D"));
		ПараметрыШапки.Вставить("ПредставлениеВходящегоДокументаТН", ПредставлениеВходящегоДокументаТН);
		//Если ВыборкаПоДокументам.РаспоряжениеНомерТН = "" Тогда
		//	ПараметрыШапки.Вставить("РаспоряжениеДатаТН", "");
		//	ПараметрыШапки.Вставить("РаспоряжениеНомерТН", "");
		//Иначе			
		//	ПараметрыШапки.Вставить("РаспоряжениеДатаТН", ВыборкаПоДокументам.РаспоряжениеДатаТН);
		//	ПараметрыШапки.Вставить("РаспоряжениеНомерТН", ВыборкаПоДокументам.РаспоряжениеНомерТН);
		//КонецЕсли;
//}}20200827 ГлазуновДВ	
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
		
		Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДата)
			Или Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеНомер) Тогда
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ВыборкаПоДокументам.РаспоряжениеПредставление;
		Иначе
			РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
			РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
			РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
			РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;
			
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		ВсегоНаименований = 0;
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = ВсегоНаименований + 1;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ВыборкаПоСтрокамТЧ.УпаковочныйЛист;
			Иначе
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
				ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКонец.Параметры.ЕдиницаИзмеренияПредставление = НСтр("ru = 'место';
																						|en = 'place'");
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
		//20200828 ГлазуновДВ отключили указание серий через бланк
			
			СерииПечатать = Ложь;
			Если ВыборкаПоСтрокамТЧ.СтатусУказанияСерий <> 0 Тогда
				СерииПечатать = Истина;
				//
				//НадписьСерии = "";
				//
				//Если ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров Тогда
				//	Если ВыборкаПоСтрокамТЧ.ИспользоватьНомерСерии
				//		И ВыборкаПоСтрокамТЧ.ИспользоватьСрокГодностиСерии Тогда
				//		НадписьСерии = НСтр("ru = 'Серии (номер, годен до, количество):';
				//							|en = 'Series (number, expiration date, quantity):'");
				//	ИначеЕсли ВыборкаПоСтрокамТЧ.ИспользоватьНомерСерии Тогда
				//		НадписьСерии = НСтр("ru = 'Серии (номер, количество):';
				//							|en = 'Series (number, quantity):'");
				//	Иначе
				//		НадписьСерии = НСтр("ru = 'Серии (годен до, количество):';
				//							|en = 'Series (expiration date, quantity):'");
				//	КонецЕсли;
				//ИначеЕсли ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
				//	НадписьСерии = НСтр("ru = 'Серийные номера:';
				//						|en = 'Serial numbers:'");	
				//КонецЕсли;
				//
				//ОбластьСтрокаСерийНачало.Параметры.НадписьСерии = НадписьСерии;
				//
				//ТабличныйДокумент.Вывести(ОбластьСтрокаСерийНачало);
				//
				//Если ВыводитьКоды Тогда
				//	ТабличныйДокумент.Присоединить(ОбластьСтрокаСерийКолонкаКодов);
				//КонецЕсли;
				//
				//ТабличныйДокумент.Присоединить(ОбластьСтрокаСерийКонец);
				//
			КонецЕсли;
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%';
									|en = 'Total items %ВсегоНаименований%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		
		ОбластьПодписей.Параметры.ПредставлениеОтветственного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.Дата);
		ОбластьПодписей.Параметры.ПредставлениеИсполнителя = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Исполнитель, ВыборкаПоДокументам.Дата);
		
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
//{{20200827 ГлазуновДВ Для вывода на печать бланка СерийныхНомеров
//////Вывод на печать бланка по сериям "ПФ_MXL_ПриложениеПриемкиТоваров"
	Если СерииПечатать Тогда
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаПоДокументам = Результат[0].Выбрать();	
		ВыборкаПоТабличнымЧастям = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ПервыйДокумент = Истина;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходныйОрдерНаТовары.ПФ_MXL_ПриложениеПриемкиТоваров");
		ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");
		
		ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
		ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
		//ОбластьСтрокаСерийНачало    = Макет.ПолучитьОбласть("СтрокаСерий|НачалоСтрокиСерий");
		ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
		
		ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		//ОбластьСтрокаСерийКолонкаКодов      = Макет.ПолучитьОбласть("СтрокаСерий|КолонкаКодовСерий");
		ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		
		ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
		
		ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
		//ОбластьСерийКонец     = Макет.Область("КонецСтрокиСерий");
		
		ШиринаКолонкиКодов = Макет.Область("КолонкаКодов").ШиринаКолонки;
		
		//Если НЕ ВыводитьКоды Тогда
		//	ОбластьКолонкаТоваров.ШиринаКолонки   = ОбластьКолонкаТоваров.ШиринаКолонки + ШиринаКолонкиКодов;
		//	ОбластьСерийКонец.ШиринаКолонки       = ОбластьСерийКонец.ШиринаКолонки + ШиринаКолонкиКодов;
		//КонецЕсли;
		
		ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
		ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
		ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
		
		ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
		ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
		//ОбластьСтрокаСерийКонец     = Макет.ПолучитьОбласть("СтрокаСерий|КонецСтрокиСерий");
		ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
		
	//{{20200828 ГлазуновДВ 	
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		ОбластьШтрихКода 	= Макет.ПолучитьОбласть("ОбластьШтрихкода");
		ОбластьСтрокаСерий = Макет.ПолучитьОбласть("СтрокаСерий");
		ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	//}}20200828 ГлазуновДВ 	
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			Если Не ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
				Продолжить;
			КонецЕсли;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
			
			ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
				ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение, ВыборкаПоДокументам.Дата);
			
			Если ИспользуетсяАдресноеХранение Тогда
				
				ТекстЗоны = НСтр("ru = 'Зона приемки:';
								|en = 'Receiving area:'");
				ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныПриемки;
				
			Иначе
				
				ТекстЗоны = "";
				ЗонаПредставление = "";
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
			
	//{{20200828 ГлазуновДВ
			СинонимДокумента = "Приложение к бланку Серийные номера" + Символы.ПС + СинонимДокумента;
	//}}20200828
			
			ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			
			Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
				// если не перемещение или оприходование
				ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
				ТабличныйДокумент.Вывести(ОбластьПоставщик);
			КонецЕсли;
			
			ПараметрыШапки = Новый Структура;
			ПараметрыШапки.Вставить("ПредставлениеСклада", СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,
																									ВыборкаПоДокументам.ПредставлениеПомещения));
			
			ПараметрыШапки.Вставить("ТекстЗоны", ТекстЗоны);
			ПараметрыШапки.Вставить("ПредставлениеЗоныПриемки", ЗонаПредставление);
			ПараметрыШапки.Вставить("НомерВходящегоДокумента",СокрЛП(ВыборкаПоДокументам.НомерВходящегоДокумента));
			ПараметрыШапки.Вставить("ДатаВходящегоДокумента", Формат(ВыборкаПоДокументам.ДатаВходящегоДокумента,"ДЛФ=D"));
	//{{20200827 ГлазуновДВ Для вывода на печать
			//ПредставлениеВходящегоДокументаТН = ?(ПустаяСтрока(ВыборкаПоДокументам.РаспоряжениеНомерТН),"","№ " + СокрЛП(ВыборкаПоДокументам.РаспоряжениеНомерТН))
			//+ ?(Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДатаТН),""," от " + Формат(ВыборкаПоДокументам.РаспоряжениеДатаТН,"ДЛФ=D"));
			//ПараметрыШапки.Вставить("ПредставлениеВходящегоДокументаТН", ПредставлениеВходящегоДокументаТН);
			//ПараметрыШапки.Вставить("РаспоряжениеДатаТН", ВыборкаПоДокументам.РаспоряжениеДатаТН);
			//ПараметрыШапки.Вставить("РаспоряжениеНомерТН", ВыборкаПоДокументам.РаспоряжениеНомерТН);
	//}}20200827 ГлазуновДВ	
			
			ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
			
			Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДата)
				Или Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеНомер) Тогда
				ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ВыборкаПоДокументам.РаспоряжениеПредставление;
			Иначе
				РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
				РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
				РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
				РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;
				
				ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
			
			ВсегоНаименований = 0;
			
			МассивВыводимыхОбластей.Очистить();
	//		МассивВыводимыхОбластей.Добавить(ОбластьШтрихКода);
	//		МассивВыводимыхОбластей.Добавить(ОбластьЗаголовок);
	//		МассивВыводимыхОбластей.Добавить(ОбластьПоставщик);
	//		МассивВыводимыхОбластей.Добавить(ОбластьШапка);
	//		МассивВыводимыхОбластей.Добавить(ОбластьШапкаТаблицыНачало);
			//МассивВыводимыхОбластей.Добавить(ОбластьШапкаТаблицыКолонкаКодов);
			//МассивВыводимыхОбластей.Добавить(ОбластьШапкаТаблицыКолонкаТоваров);
			//МассивВыводимыхОбластей.Добавить(ОбластьШапкаТаблицыКонец);
			
			Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
				
				Если ВыборкаПоСтрокамТЧ.СтатусУказанияСерий <> 0 Тогда
					
					//НадписьСерии = "";
					//
					//Если ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров Тогда
					//	Если ВыборкаПоСтрокамТЧ.ИспользоватьНомерСерии
					//		И ВыборкаПоСтрокамТЧ.ИспользоватьСрокГодностиСерии Тогда
					//		НадписьСерии = НСтр("ru = 'Серии (номер, годен до, количество):';
					//							|en = 'Series (number, expiration date, quantity):'");
					//	ИначеЕсли ВыборкаПоСтрокамТЧ.ИспользоватьНомерСерии Тогда
					//		НадписьСерии = НСтр("ru = 'Серии (номер, количество):';
					//							|en = 'Series (number, quantity):'");
					//	Иначе
					//		НадписьСерии = НСтр("ru = 'Серии (годен до, количество):';
					//							|en = 'Series (expiration date, quantity):'");
					//	КонецЕсли;
					//ИначеЕсли ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
					//	НадписьСерии = НСтр("ru = 'Серийные номера:';
					//						|en = 'Serial numbers:'");	
					//КонецЕсли;
					//
					//ОбластьСтрокаСерийНачало.Параметры.НадписьСерии = НадписьСерии;
					//
					//ТабличныйДокумент.Вывести(ОбластьСтрокаСерийНачало);
					//
					//Если ВыводитьКоды Тогда
					//	ТабличныйДокумент.Присоединить(ОбластьСтрокаСерийКолонкаКодов);
					//КонецЕсли;
					
					//ТабличныйДокумент.Присоединить(ОбластьСтрокаСерийКонец);
		////////////////////////////////////			
					ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
					ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = ВсегоНаименований + 1;
					
					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
					
					Если ВыводитьКоды Тогда
						ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
						ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
					КонецЕсли;
					
					ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
					
					Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
						ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ВыборкаПоСтрокамТЧ.УпаковочныйЛист;
					Иначе
						ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
						ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
						ВыборкаПоСтрокамТЧ
						.ПредставлениеХарактеристики);
					КонецЕсли;
					
					ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
					
					ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
					Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
						ОбластьСтрокаТаблицыКонец.Параметры.ЕдиницаИзмеренияПредставление = НСтр("ru = 'место';
																								|en = 'place'");
					КонецЕсли;
					ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
					ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
					
			//20200828 ГлазуновДВ вывод блока для записи Серийных номеров
		//Вывод переноса страницы		
	//			МассивВыводимыхОбластей.Добавить(ОбластьСтрокаТаблицыНачало);
				//МассивВыводимыхОбластей.Добавить(ОбластьСтрокаТаблицыКолонкаКодов);
				//МассивВыводимыхОбластей.Добавить(ОбластьСтрокаТаблицыКолонкаТоваров);
				//МассивВыводимыхОбластей.Добавить(ОбластьСтрокаТаблицыКонец);
				//МассивВыводимыхОбластей.Добавить(ОбластьПодвалТаблицы);
					
					Номер = 0;
					Пока Номер < Окр(ВыборкаПоСтрокамТЧ.Количество / 2) Цикл
						
	//Можно оставить только эту строку					МассивВыводимыхОбластей.Добавить(ОбластьСтрокаСерий);
						//МассивВыводимыхОбластей.Добавить(ОбластьПодвалТаблицы);
						
						Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
							МассивВыводимыхОбластей.Очистить();
							ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
							Если ВыводитьКоды Тогда
								ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
								ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
							КонецЕсли;
							ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
							ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
							ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
							
							//МассивВыводимыхОбластей.Добавить(ОбластьСтрокаТаблицыНачало);
							//МассивВыводимыхОбластей.Добавить(ОбластьПодвалТаблицы);
						КонецЕсли;
				
						Номер = Номер + 1;
						ТабличныйДокумент.Вывести(ОбластьСтрокаСерий);
						
					КонецЦикла;
					ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
				КонецЕсли;
				
				ВсегоНаименований = ВсегоНаименований + 1;
				
			КонецЦикла;		
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
			
			ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%';
										|en = 'Total items %ВсегоНаименований%'");
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
			ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
			
			ОбластьПодписей.Параметры.ПредставлениеОтветственного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.Дата);
			ОбластьПодписей.Параметры.ПредставлениеИсполнителя = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Исполнитель, ВыборкаПоДокументам.Дата);
			
			ТабличныйДокумент.Вывести(ОбластьПодписей);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
			
		КонецЦикла;
		
		ТабличныйДокумент.АвтоМасштаб = Истина;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;	
	
КонецФункции
