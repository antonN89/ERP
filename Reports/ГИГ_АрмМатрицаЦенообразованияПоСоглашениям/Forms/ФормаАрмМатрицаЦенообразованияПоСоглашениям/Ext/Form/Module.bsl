&НаКлиенте
Перем ЗакрытиеРазрешено;

 &НаСервере
Процедура УстановитьПараметрыКомпоновки()
	// очистим отборы
	Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Порог_Скидка");
	
	Если МассивСкидокПоСоглашению.Количество() >0  Тогда
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.ПравоеЗначение   = МассивСкидокПоСоглашению;
	Иначе
		ЭлементОтбора.Использование = Ложь;
	КонецЕсли;

	ЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Производитель");
	
	Если ЗначениеЗаполнено(Производитель)  Тогда
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.равно;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.ПравоеЗначение   = Производитель;
	Иначе
		ЭлементОтбора.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере(ПризнакФормирования) Экспорт 
	
	Если ПризнакФормирования = "Формирование" Тогда
		
		УстановитьПараметрыКомпоновки();

		ТаблицаДанныхРезультата.Очистить();	
		ТаблицаИзменныхДанныхДляЗаписи.Очистить();
		
		СхемаКомпоновкиДанныхДляТаблицы = Отчеты.ГИГ_АрмМатрицаЦенообразованияПоСоглашениям.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		Запрос = Новый Запрос;
		Запрос.Текст = СхемаКомпоновкиДанныхДляТаблицы.НаборыДанных.НаборДанных1.Запрос;
		Запрос.УстановитьПараметр("ДатаОкончания",ТекущаяДата());
		Запрос.УстановитьПараметр("ПометкаУдаления",Истина);
		Запрос.УстановитьПараметр("ЭтоГруппа",Ложь);
		Запрос.УстановитьПараметр("Соглашение",Соглашение);
		
		ДанныеРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ТаблицаДанныхРезультата.Загрузить(ДанныеРезультата);
	иначе
		
		УстановитьПараметрыКомпоновки();
		ДанныеРезультата = ТаблицаДанныхРезультата.Выгрузить();
		
	КонецЕсли;
	
	
	Результат.Очистить();
	
	НДанныеРасшифровки = Неопределено;
	
	СхемаКомпоновкиДанных = Отчеты.ГИГ_АрмМатрицаЦенообразованияПоСоглашениям.ПолучитьМакет("МакетВыводаДанныхПоСоглашению");
	
	НаборыДанных = Новый Структура;
	НаборыДанных.Вставить("ТаблицаДанныхПоСоглашению",ДанныеРезультата);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Отчет.КомпоновщикНастроек.Настройки, НДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,НаборыДанных,НДанныеРасшифровки);
	
 	ДанныеРасшифровкиСоглашение = ПоместитьВоВременноеХранилище(НДанныеРасшифровки,ЭтаФорма.УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ПризнакФормирования = "Формирование" Тогда
		СтрокаРасшифровкиНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Соглашение = Параметры.Соглашение;
	Партнер = Параметры.Партнер;
	ВыборкаСписков = Справочники.ГИГ_ПорогиОграничений.Выбрать();
	Пока ВыборкаСписков.Следующий() цикл
		Если НЕ ВыборкаСписков.ЭтоГруппа Тогда 
			МассивСкидокПоСоглашению.Добавить(ВыборкаСписков.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	Для Каждого СтрокаМассива из Параметры.МассивСкидок цикл
		МассивСкидокПоСоглашению.Добавить(СтрокаМассива.ссылка);
		МассивСкидокПоСоглашениюБезПорога.Добавить(СтрокаМассива.ссылка);
	КонецЦикла;
	Если ЗначениеЗаполнено(Соглашение) Тогда 
		МассивСкидокПоСоглашению.Добавить(Соглашение);
	КонецЕсли;
	ПризнакФормирования = "Формирование";
	СформироватьНаСервере(ПризнакФормирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уберем состояние отчета
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
	Заголовок = "Матрица ценообразования по соглашению: " + Соглашение+". Партнер: "+Партнер;
	 
КонецПроцедуры

&НаСервере
Процедура СтрокаРасшифровкиНаСервере()
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиСоглашение);
	СтруктураЗначенийРасшифровкиЯчейки = ЗначениеВСтрокуВнутр(Данные);  
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	ПризнакФормирования = "Формирование";
	СформироватьНаСервере(ПризнакФормирования);
	ПризнакФормирования = "Обновление";
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	// уберем состояние отчета
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
	Если ТаблицаИзменныхДанныхДляЗаписи.Количество() <> 0 Тогда 
		СтрокаВопроса = "Внимание! "+Символы.ПС+  
						"При заполнении таблицы все внесенные изменения будут утеряны"+Символы.ПС+
						"Продолжить?";
		ТекстВопроса = Новый ФорматированнаяСтрока(СтрокаВопроса, Новый Шрифт(,10,Истина), Новый Цвет(255, 0, 0));
		
		СтруктураРеквизитов = новый Структура; 
		Оповещение = Новый ОписаниеОповещения("РучноеФормированиеДанныхЗавершение", ЭтотОбъект, СтруктураРеквизитов); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПризнакФормирования = "Формирование";
		СформироватьНаСервере(ПризнакФормирования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура  РучноеФормированиеДанныхЗавершение(Ответ, СтруктураРеквизитов) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПризнакФормирования = "Формирование";
	СформироватьНаСервере(ПризнакФормирования);
	
	// уберем состояние отчета
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
КонецПроцедуры	

// изменение и запись данных

&НаСервере
Функция ВозвратПризнакаЧисла(ЗначениеЭлемента)
	ПроверкаЧисла = Истина;
	Если ЗначениеЭлемента = "" тогда
		ЧисловоеЗначение = 0;
	иначе
		Попытка 			
			ЧисловоеЗначение = Число(ЗначениеЭлемента);
		Исключение
			ПроверкаЧисла = Ложь;
			Если ВыводитьСообщения Тогда 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Введите числовое значение!";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	Возврат ПроверкаЧисла;
КонецФункции

&НаСервере
Функция ПолучитьВсеЗначенияРасшифровкиЯчейки(Расшифровка,СтрокаДанныхРасшифровки)
	
	ЗначенияРасшифровки = Новый Структура("ЦеноваяГруппа,ИерархияЦеновойГруппы,Производитель,Порог_Скидка,ЗначениеПоказателя");
	Если  Расшифровка <> Неопределено      Тогда 
		Данные = ЗначениеИзСтрокиВнутр(СтруктураЗначенийРасшифровкиЯчейки); //ПолучитьИзВременногоХранилища(ДанныеРасшифровкиСоглашение);
		
		ПоляРасшифровки = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля();
		Для Каждого ПолеРасш из ПоляРасшифровки цикл
			ЗначенияРасшифровки.Вставить(""+ПолеРасш.Поле,ПолеРасш.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначенияРасшифровки; 
КонецФункции

&НаСервере
Процедура ОбработатьЯчейкуРезультата(Расшифровка,СтруктураЗначенийРасшифровкиЯчейки,ИмяОбласти)
	ПризнакСсылки = Ложь;
	ЗначенияРасшифровки = Новый Структура("ЦеноваяГруппа,ИерархияЦеновойГруппы,Производитель,Порог_Скидка,ЗначениеПоказателя");
	Если  Расшифровка <> Неопределено      Тогда 
		Данные = ЗначениеИзСтрокиВнутр(СтруктураЗначенийРасшифровкиЯчейки); //ПолучитьИзВременногоХранилища(ДанныеРасшифровкиСоглашение);
		
		Если Данные.Элементы.Получить(Расшифровка).ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение тогда
			ПризнакСсылки = Истина;
		КонецЕсли;	
		
		ПоляРасшифровки = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля();
		Для Каждого ПолеРасш из ПоляРасшифровки цикл
			ЗначенияРасшифровки.Вставить(""+ПолеРасш.Поле,ПолеРасш.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	Область = Результат.Область(ИмяОбласти);
	Если ТипЗнч(ЗначенияРасшифровки.Порог_Скидка) = тип("СправочникСсылка.СоглашенияСКлиентами") или ЗначенияРасшифровки.Порог_Скидка = Неопределено Тогда
		Если  ПризнакСсылки Тогда 
			ПризнакСнятияЗащиты = Истина;
		Иначе	
			ПризнакСнятияЗащиты = Ложь;
		КонецЕсли;
		Область.Защита = ПризнакСнятияЗащиты;
	иначе
		Если НЕ ПризнакСсылки Тогда 
			Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	Расшифровка = Элемент.ТекущаяОбласть.Расшифровка;
	ОбработатьЯчейкуРезультата(Расшифровка,СтруктураЗначенийРасшифровкиЯчейки,Область.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ТекущееЗначениеЭлемента = Элемент.ТекущаяОбласть.Текст;
	Если ВозвратПризнакаЧисла(ТекущееЗначениеЭлемента) Тогда 
		Расшифровка = Элемент.ТекущаяОбласть.Расшифровка;
		Если НЕ Расшифровка = Неопределено Тогда 
			ЗначенияРасшифровки = ПолучитьВсеЗначенияРасшифровкиЯчейки(Расшифровка, СтруктураЗначенийРасшифровкиЯчейки);
			Если  ЗначенияРасшифровки.Свойство("ЗначениеПоказателя") тогда
				
				Если ЗначениеЗаполнено(ЗначенияРасшифровки.Производитель)  тогда 
					ТекстВопроса =  "При изменении значения по производителю значение будет установленно всем подчиненным элементам."+Символы.ПС+
									"Продолжить?";
					СтруктураРеквизитов = Новый Структура("ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка,ОбластьДокумента",ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка,Элемент.ТекущаяОбласть);
					Оповещение = Новый ОписаниеОповещения("ИзмененияПоПроизводителюЗавершение", ЭтотОбъект, СтруктураРеквизитов); 
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначенияРасшифровки.ИерархияЦеновойГруппы) Тогда 
					ТекстВопроса =  "При изменении значения по иерархии ценовой группы значение будет установленно всем подчиненным элементам."+Символы.ПС+
									"Продолжить?";
					СтруктураРеквизитов = Новый Структура("ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка,ОбластьДокумента",ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка,Элемент.ТекущаяОбласть);
					Оповещение = Новый ОписаниеОповещения("ИзмененияПоИерархииЦеновойЗавершение", ЭтотОбъект, СтруктураРеквизитов); 
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначенияРасшифровки.ЦеноваяГруппа) Тогда 	
					ОбработатьГруппировкиЯчейкиИЗаписатьИзмененныеДанные(ЗначенияРасшифровки,ТекущееЗначениеЭлемента,Расшифровка);
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтароезначениеИзРасшифровки(СтруктураРеквизитов)
	СтруктураРеквизитов.ОбластьДокумента.Текст = СтруктураРеквизитов.ЗначенияРасшифровки.ЗначениеПоказателя; 
КонецПроцедуры	

&НаКлиенте
Процедура ИзмененияПоПроизводителюЗавершение(Ответ, СтруктураРеквизитов) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		УстановитьСтароезначениеИзРасшифровки(СтруктураРеквизитов);
		Возврат;
	КонецЕсли;
	
	ОбработатьГруппировкиЯчейкиИЗаписатьИзмененныеДанные(СтруктураРеквизитов.ЗначенияРасшифровки,СтруктураРеквизитов.ТекущееЗначениеЭлемента,СтруктураРеквизитов.Расшифровка);
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияПоИерархииЦеновойЗавершение(Ответ, СтруктураРеквизитов) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		УстановитьСтароезначениеИзРасшифровки(СтруктураРеквизитов);
		Возврат;
	КонецЕсли;
	
	ОбработатьГруппировкиЯчейкиИЗаписатьИзмененныеДанные(СтруктураРеквизитов.ЗначенияРасшифровки,СтруктураРеквизитов.ТекущееЗначениеЭлемента,СтруктураРеквизитов.Расшифровка);
КонецПроцедуры

&НаСервере
Процедура ОбработатьГруппировкиЯчейкиИЗаписатьИзмененныеДанные(СтруктураРасшифровки,ЗначениеЭлемента,Расшифровка)
	
	ПризнакФормирования = "Обновление";
	ДоступноИзменение = Истина;  ПроверкаЧисла = Истина;
	ЧисловоеЗначение = 0;
	
	КопияТаб = ТаблицаДанныхРезультата;
	
	//1. Если в структуре есть производитель и ограничениеСкидка, то изменяются все элементы по производителю!
	Если ЗначениеЗаполнено(СтруктураРасшифровки.Производитель) Тогда 
		ЧисловоеЗначение = ?(ЗначениеЭлемента = "",0,Число(ЗначениеЭлемента));
		Если ЧисловоеЗначение =  СтруктураРасшифровки.ЗначениеПоказателя Тогда Возврат КонецЕсли;
		СтруктураКорректировки = Новый Структура("Производитель,Порог_Скидка",СтруктураРасшифровки.Производитель,Соглашение);
		МассивДанных = КопияТаб.НайтиСтроки(СтруктураКорректировки);
		Если МассивДанных.Количество() > 0 Тогда 
			Для Каждого СтрокаМассива из МассивДанных цикл
				// тут проверка на возможное максимальное значение по строке с ценовой группой.... но только по строкам скидок!!!
					Если ПроверкаЧисла Тогда 		
						МаксимальноеЗначениеВозможнойСкидки = РасчитатьМаксимумПоЦеновой(СтруктураРасшифровки,ЗначениеЭлемента,СтрокаМассива.ЦеноваяГруппа);
						
						// Найдем сумму всех скидок
						Если  МассивСкидокПоСоглашениюБезПорога.Количество() <> 0  Тогда 
							Если МассивСкидокПоСоглашениюБезПорога.Количество() > 1  тогда
								СтруктураСкидок = Новый Структура("Производитель,ЦеноваяГруппа,ПризнакКолонок",СтрокаМассива.Производитель,СтрокаМассива.ЦеноваяГруппа,2);
								МассивСкидокПоЦГ =  КопияТаб.НайтиСтроки(СтруктураСкидок);
								ОбщаяСуммаВведенныхСкидок = 0;
								Для Каждого СтрокаМассиваСкидок из МассивСкидокПоЦГ цикл
									Если МассивСкидокПоСоглашению.НайтиПоЗначению(СтрокаМассиваСкидок.Порог_Скидка) <> Неопределено  тогда
										ОбщаяСуммаВведенныхСкидок = ОбщаяСуммаВведенныхСкидок + СтрокаМассиваСкидок.ЗначениеПоказателя;
									КонецЕсли;
								КонецЦикла;	
							Иначе
								СтруктураСкидок = Новый Структура("Производитель,ЦеноваяГруппа,Порог_Скидка",СтрокаМассива.Производитель,СтрокаМассива.ЦеноваяГруппа,МассивСкидокПоСоглашениюБезПорога[0].Значение);
								МассивСкидокПоЦГ =  КопияТаб.НайтиСтроки(СтруктураСкидок);
								ОбщаяСуммаВведенныхСкидок = 0;
								ОбщаяСуммаВведенныхСкидок = МассивСкидокПоЦГ[0].ЗначениеПоказателя;
							КонецЕсли;
						КонецЕсли;
						
						ДопустимаяСкидка = МаксимальноеЗначениеВозможнойСкидки - ОбщаяСуммаВведенныхСкидок;
						Если СтруктураРасшифровки.Порог_Скидка = Неопределено Тогда // корректировка итога...
							ЧислоКВводу = ЧисловоеЗначение - ОбщаяСуммаВведенныхСкидок;
						Иначе
							ЧислоКВводу = ЧисловоеЗначение;
						КонецЕсли;	
						// сумма по строкам скидки и индивидуальной скидки не должно превышать значение максимума
						Если ЧислоКВводу > ДопустимаяСкидка Тогда 
							ДоступноИзменение = Ложь;
							Если ВыводитьСообщения Тогда 
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст =   "По ценовой группе "+СтрокаМассива.ЦеноваяГруппа+" превышено максимально допустимое значение скидки!"+Символы.ПС+
													"Значение скидки не должно превышать: "+ДопустимаяСкидка+"%"+Символы.ПС+ 	
													"Ввод значения отменен.";
								Сообщение.Сообщить();
							КонецЕсли;
							ДоступноИзменение = Ложь;
						иначе
							ДоступноИзменение = Истина;
						КонецЕсли;	
						
						Если ДоступноИзменение Тогда 		
							СтрокаМассива.ЗначениеПоказателя = ЧислоКВводу;
							СтрокаМассива.ПризнакИзменения = Истина;
							ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЧисловоеЗначение);
						КонецЕсли;
					КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//2. Если в структуре есть Иерархия ценовойГруппы и ограничениеСкидка, то изменяются все элементы подчиненные элементу иерархии!
	Если ЗначениеЗаполнено(СтруктураРасшифровки.ИерархияЦеновойГруппы) Тогда 
		ЧисловоеЗначение = ?(ЗначениеЭлемента = "",0,Число(ЗначениеЭлемента));
		Если ЧисловоеЗначение =  СтруктураРасшифровки.ЗначениеПоказателя Тогда Возврат КонецЕсли;
		
		// по иерархии ценовой учитываем ценовые группы по всем уровням.
		СписокВложенныхИерархий = ПолучитьИерахиюПоИерархииЦГ(СтруктураРасшифровки.ИерархияЦеновойГруппы);
		Для Каждого СтрокаСпискаИерархий из СписокВложенныхИерархий цикл 
			СтруктураКорректировки = Новый Структура("ИерархияЦеновойГруппы,Порог_Скидка",СтрокаСпискаИерархий.Ссылка,Соглашение);
			МассивДанных = КопияТаб.НайтиСтроки(СтруктураКорректировки);
			Если МассивДанных.Количество() > 0 Тогда 
				Для Каждого СтрокаМассива из МассивДанных цикл
					// тут проверка на возможное максимальное значение по строке с ценовой группой.... но только по строкам скидок!!!
					Если ПроверкаЧисла Тогда 		
						МаксимальноеЗначениеВозможнойСкидки = РасчитатьМаксимумПоЦеновой(СтруктураРасшифровки,ЗначениеЭлемента,СтрокаМассива.ЦеноваяГруппа);
						
						// Найдем сумму всех скидок
						Если  МассивСкидокПоСоглашениюБезПорога.Количество() <> 0  Тогда 
							Если МассивСкидокПоСоглашениюБезПорога.Количество() > 1  тогда
								СтруктураСкидок = Новый Структура("ИерархияЦеновойГруппы,ЦеноваяГруппа,ПризнакКолонок",СтрокаМассива.ИерархияЦеновойГруппы,СтрокаМассива.ЦеноваяГруппа,2);
								МассивСкидокПоЦГ =  КопияТаб.НайтиСтроки(СтруктураСкидок);
								ОбщаяСуммаВведенныхСкидок = 0;
								Для Каждого СтрокаМассиваСкидок из МассивСкидокПоЦГ цикл
									Если МассивСкидокПоСоглашению.НайтиПоЗначению(СтрокаМассиваСкидок.Порог_Скидка) <> Неопределено  тогда
										ОбщаяСуммаВведенныхСкидок = ОбщаяСуммаВведенныхСкидок + СтрокаМассиваСкидок.ЗначениеПоказателя;
									КонецЕсли;
								КонецЦикла;	
							Иначе
								СтруктураСкидок = Новый Структура("ИерархияЦеновойГруппы,ЦеноваяГруппа,Порог_Скидка",СтрокаМассива.ИерархияЦеновойГруппы,СтрокаМассива.ЦеноваяГруппа,МассивСкидокПоСоглашениюБезПорога[0].Значение);
								МассивСкидокПоЦГ =  КопияТаб.НайтиСтроки(СтруктураСкидок);
								ОбщаяСуммаВведенныхСкидок = 0;
								ОбщаяСуммаВведенныхСкидок = МассивСкидокПоЦГ[0].ЗначениеПоказателя;
							КонецЕсли;
						КонецЕсли;
							
						ДопустимаяСкидка = МаксимальноеЗначениеВозможнойСкидки - ОбщаяСуммаВведенныхСкидок;
						Если СтруктураРасшифровки.Порог_Скидка = Неопределено Тогда // корректировка итога...
							ЧислоКВводу = ЧисловоеЗначение - ОбщаяСуммаВведенныхСкидок;
						Иначе
							ЧислоКВводу = ЧисловоеЗначение;
						КонецЕсли;	
						// сумма по строкам скидки и индивидуальной скидки не должно превышать значение максимума
						Если ЧислоКВводу > ДопустимаяСкидка Тогда 
							ДоступноИзменение = Ложь;
							Если ВыводитьСообщения Тогда 
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст =   "По ценовой группе "+СтрокаМассива.ЦеноваяГруппа+" превышено максимально допустимое значение скидки!"+Символы.ПС+
													"Значение скидки не должно превышать: "+ДопустимаяСкидка+"%"+Символы.ПС+ 	
													"Ввод значения отменен.";
								Сообщение.Сообщить();
							КонецЕсли;
							ДоступноИзменение = Ложь;
						иначе
							ДоступноИзменение = Истина;
						КонецЕсли;	
						
						Если ДоступноИзменение Тогда 		
							СтрокаМассива.ЗначениеПоказателя = ЧислоКВводу;
							СтрокаМассива.ПризнакИзменения = Истина;
							ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЧисловоеЗначение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//3. Если в структуре есть ЦеноваяГруппа и ограничениеСкидка, то изменяется элемент ценовой группы!
	Если ЗначениеЗаполнено(СтруктураРасшифровки.ЦеноваяГруппа) Тогда 
		ЧисловоеЗначение = ?(ЗначениеЭлемента = "",0,Число(ЗначениеЭлемента));
		Если ЧисловоеЗначение =  СтруктураРасшифровки.ЗначениеПоказателя Тогда Возврат КонецЕсли;
		СтруктураКорректировки = Новый Структура("ЦеноваяГруппа,Порог_Скидка",СтруктураРасшифровки.ЦеноваяГруппа,Соглашение);
		МассивДанных = КопияТаб.НайтиСтроки(СтруктураКорректировки);
		Если МассивДанных.Количество() > 0 Тогда 
			Для Каждого СтрокаМассива из МассивДанных цикл
					Если ПроверкаЧисла Тогда 		
							МаксимальноеЗначениеВозможнойСкидки = РасчитатьМаксимумПоЦеновой(СтруктураРасшифровки,ЗначениеЭлемента,СтрокаМассива.ЦеноваяГруппа);
							
							// Найдем сумму всех скидок
							Если  МассивСкидокПоСоглашениюБезПорога.Количество() <> 0  Тогда 
								Если МассивСкидокПоСоглашениюБезПорога.Количество() > 1  тогда
									СтруктураСкидок = Новый Структура("ЦеноваяГруппа,ПризнакКолонок",СтруктураРасшифровки.ЦеноваяГруппа,2);
									МассивСкидокПоЦГ =  КопияТаб.НайтиСтроки(СтруктураСкидок);
									ОбщаяСуммаВведенныхСкидок = 0;
									Для Каждого СтрокаМассиваСкидок из МассивСкидокПоЦГ цикл
										Если МассивСкидокПоСоглашению.НайтиПоЗначению(СтрокаМассиваСкидок.Порог_Скидка) <> Неопределено  тогда
											ОбщаяСуммаВведенныхСкидок = ОбщаяСуммаВведенныхСкидок + СтрокаМассиваСкидок.ЗначениеПоказателя;
										КонецЕсли;
									КонецЦикла;	
								Иначе
									СтруктураСкидок = Новый Структура("ЦеноваяГруппа,Порог_Скидка",СтруктураРасшифровки.ЦеноваяГруппа,МассивСкидокПоСоглашениюБезПорога[0].Значение);
									МассивСкидокПоЦГ =  КопияТаб.НайтиСтроки(СтруктураСкидок);
									ОбщаяСуммаВведенныхСкидок = 0;
									ОбщаяСуммаВведенныхСкидок = МассивСкидокПоЦГ[0].ЗначениеПоказателя;
								КонецЕсли;
							КонецЕсли;
							
							ДопустимаяСкидка = МаксимальноеЗначениеВозможнойСкидки - ОбщаяСуммаВведенныхСкидок;
							Если СтруктураРасшифровки.Порог_Скидка = Неопределено Тогда // корректировка итога...
								ЧислоКВводу = ЧисловоеЗначение - ОбщаяСуммаВведенныхСкидок;
							Иначе
								ЧислоКВводу = ЧисловоеЗначение;
							КонецЕсли;	
							// сумма по строкам скидки и индивидуальной скидки не должно превышать значение максимума
							Если ЧислоКВводу > ДопустимаяСкидка Тогда 
								ДоступноИзменение = Ложь;
								Если ВыводитьСообщения Тогда 
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст =   "По ценовой группе "+СтрокаМассива.ЦеноваяГруппа+" превышено максимально допустимое значение скидки!"+Символы.ПС+
														"Значение скидки не должно превышать: "+ДопустимаяСкидка+"%"+Символы.ПС+ 	
														"Ввод значения отменен.";
									Сообщение.Сообщить();
								КонецЕсли;
								ДоступноИзменение = Ложь;
							иначе
								ДоступноИзменение = Истина;
							КонецЕсли;	
							
							Если ДоступноИзменение Тогда 		
								СтрокаМассива.ЗначениеПоказателя = ЧислоКВводу;
								СтрокаМассива.ПризнакИзменения = Истина;
								ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЧисловоеЗначение);
							КонецЕсли;
					КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// обновить форму отчета...
	СформироватьНаСервере(ПризнакФормирования);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияВТаблицуИзменений(СтрокаМассива,ЗначениеЭлемента)
	// запись изменных данных в таб имз объектов....
	// проверка на то, есть ли уже такая запись... 
	СтруктураТабличкиИзмененых = Новый Структура("Порог_Скидка,ЦеноваяГруппа",
								 СтрокаМассива.Порог_Скидка, СтрокаМассива.ЦеноваяГруппа);
	
	Если ТаблицаИзменныхДанныхДляЗаписи.Количество() <> 0 тогда
		МассивОбъектовТаблицыИзменения = ТаблицаИзменныхДанныхДляЗаписи.НайтиСтроки(СтруктураТабличкиИзмененых);
		Если МассивОбъектовТаблицыИзменения.Количество() > 0 тогда
			Для Каждого СтрокаМассиваОбъектовТаблицыИзменения из МассивОбъектовТаблицыИзменения цикл
				СтрокаМассиваОбъектовТаблицыИзменения.ЗначениеПоказателя = ЗначениеЭлемента;
			КонецЦикла;	
		Иначе	
			СтрокаТаб = ТаблицаИзменныхДанныхДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаб,СтрокаМассива);
			СтрокаТаб.ЗначениеПоказателя = ЗначениеЭлемента;
		КонецЕсли;
	Иначе
		СтрокаТаб = ТаблицаИзменныхДанныхДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб,СтрокаМассива);
		СтрокаТаб.ЗначениеПоказателя = ЗначениеЭлемента;
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Функция РасчитатьМаксимумПоЦеновой(СтруктураРасшифровки,ЗначениеЭлемента,ЦеноваяГруппа)
	МаксимумПоЗначению = 0; МинимальноеЗначение = 0;
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Порог");
	ТЗ.Колонки.Добавить("Значение");
	СтруктураОтбораПоДаннымОграничений = Новый Структура("ЦеноваяГруппа,ПризнакКолонок",
														ЦеноваяГруппа,1);
	МассивЗначений = ТаблицаДанныхРезультата.НайтиСтроки(СтруктураОтбораПоДаннымОграничений);
	Если МассивЗначений.Количество() <> 0 Тогда 
		Для Каждого СтрокаМассиваЗначений из МассивЗначений цикл
			Если СтрокаМассиваЗначений.Порог_Скидка = Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа тогда
				ПределОснование = СтрокаМассиваЗначений.ЗначениеПоказателя;
			Иначе
				Если СтрокаМассиваЗначений.ЗначениеПоказателя <> 0 и СтрокаМассиваЗначений.Порог_Скидка.ИспользоватьОграничение Тогда  
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.Порог = СтрокаМассиваЗначений.Порог_Скидка;
				СтрокаТЗ.Значение = СтрокаМассиваЗначений.ЗначениеПоказателя; 
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Если ТЗ.Количество() <> 0 Тогда  		
		ТЗ.Сортировать("Значение Убыв");
		МинимальноеЗначение = ТЗ[0].Значение;
	КонецЕсли;
    МаксимумПоЗначению =  ПределОснование - МинимальноеЗначение;

	Возврат  МаксимумПоЗначению;
КонецФункции	

&НаСервере
Функция ПолучитьИерахиюПоИерархииЦГ(ИерархияЦГ)
	МассивЗначенийИерархии = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГИГ_ИерархияЦеновыхГрупп.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГИГ_ИерархияЦеновыхГрупп КАК ГИГ_ИерархияЦеновыхГрупп
	|ГДЕ
	|	ГИГ_ИерархияЦеновыхГрупп.Ссылка В ИЕРАРХИИ(&Ссылка)";
	//++Гольм А.А. (Гигабайт) 13.11.2018 17:12:45
	// рефакторинг кода, исправление ошибки, когда меняется значение в пустой группе
	//|ИТОГИ ПО
	//|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	//--Гольм А.А. (Гигабайт) 13.11.2018 17:13:12
	Запрос.УстановитьПараметр("Ссылка",ИерархияЦГ);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	//РезультатЗапроса.Свернуть("Ссылка");
	Для Каждого СтрокаРезультат из РезультатЗапроса цикл  
		МассивЗначенийИерархии.Добавить(СтрокаРезультат.Ссылка);
	КонецЦикла;	
	Возврат МассивЗначенийИерархии;
КонецФункции	



// запись результата изменений

&НаСервере
Процедура ЗаписатьРезультатНаСервере()
	// запись измененных данных...	
	Для Каждого СтрокаТаблицыДанных из ТаблицаИзменныхДанныхДляЗаписи цикл
		
		ТекстСообщения = "Запись данных при выполнении обработки АРМ Матрица ценообразования по соглашению с клиентом";
		
		Если ТипЗнч(СтрокаТаблицыДанных.Порог_Скидка) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
			МетаданныеОбъекта = Метаданные.Справочники.СоглашенияСКлиентами;
			
			// запись изменений в таблицу ценовые группы!
			
			ЭлементСоглашения = Соглашение.ПолучитьОбъект();
			СтруктураЦГ = Новый Структура("ЦеноваяГруппа",СтрокаТаблицыДанных.ЦеноваяГруппа);
			МассивЦГ = ЭлементСоглашения.ЦеновыеГруппы.НайтиСтроки(СтруктураЦГ);
			Если МассивЦГ.количество() <> 0 Тогда 
				СтрокаЦГ = МассивЦГ[0];
				СтрокаЦГ.ПроцентИндивидуальнойСкидкиНаценки = СтрокаТаблицыДанных.ЗначениеПоказателя;
			иначе
				СтрокаЦГ = ЭлементСоглашения.ЦеновыеГруппы.Добавить();
				СтрокаЦГ.ЦеноваяГруппа = СтрокаТаблицыДанных.ЦеноваяГруппа;
				СтрокаЦГ.ПроцентИндивидуальнойСкидкиНаценки = СтрокаТаблицыДанных.ЗначениеПоказателя;
				СтрокаЦГ.ВидЦен = Соглашение.ВидЦен;
			КонецЕсли; 
			ЭлементСоглашения.Записать();
			
			// формируем запись в регистр истории изменения ЦГ по соглашениям
			Запись = РегистрыСведений.ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашений.СоздатьМенеджерЗаписи();
			Запись.Активность 		= Истина;
			Запись.Деактивирован 	= СтрокаЦГ.Деактивирован;
			Запись.Период 			= ТекущаяДата();
			Запись.Пользователь		= Пользователи.ТекущийПользователь();
			Запись.Соглашение 		= ЭлементСоглашения.Ссылка;
			Запись.ЦеноваяГруппа    = СтрокаЦГ.ЦеноваяГруппа; 
			Запись.ЗначениеСкидки_Наценки = СтрокаТаблицыДанных.ЗначениеПоказателя;
			Запись.Записать(); 
			
			// запись в журнал регистрации
			ЗаписьЖурналаРегистрации("Данные.Изменение",
									УровеньЖурналаРегистрации.Информация,
									МетаданныеОбъекта,
									Соглашение,
									ТекстСообщения);
			
		КонецЕсли;	
	КонецЦикла;
	ПризнакФормирования = "Формирование";
	СформироватьНаСервере(ПризнакФормирования);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультат(Команда)
	Если ТаблицаИзменныхДанныхДляЗаписи.Количество() > 0 Тогда 
		ТекстВопроса =  "Внимание! "+Символы.ПС+  
						"Внесенные изменения коснутся "+ТаблицаИзменныхДанныхДляЗаписи.Количество()+" элементов справочника Скидки/наценки и Пороги ограничений"+Символы.ПС+
						"Продолжить?";
	
		СтруктураРеквизитов = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ИзменениеДанныхЗавершение", ЭтотОбъект, СтруктураРеквизитов); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ВыводитьСообщения Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нет изменений для записи.";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеДанныхЗавершение(Ответ, СтруктураРеквизитов) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЗаписатьРезультатНаСервере();
	Сообщить("Запись изменений завершена.");
	ТаблицаИзменныхДанныхДляЗаписи.Очистить();
КонецПроцедуры



// Процедуры закрытия

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ТаблицаДанныхРезультата.Очистить();
	ТаблицаИзменныхДанныхДляЗаписи.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = "Работа в данном окне не завершена! Необходимо корректное зактрытие обработки!";
		Отказ = Истина;
	ИначеЕсли ЗакрытиеРазрешено = Неопределено Тогда
		ПриЗакрытии(ЗавершениеРаботы);
	КонецЕсли;
КонецПроцедуры



// Журнал регистрации

&НаКлиенте
Процедура ОткрытьЖРОбъектов(Команда)
	МассивСобытий = Новый Массив;
	МассивСобытий.Добавить("Данные.Изменение");
	МассивСобытий.Добавить("Данные.Добавление");
	
	ПараметрыФормы = Новый Структура("СобытиеЖурналаРегистрации,ДатаНачала, ДатаОкончания,Комменарий",
			                         МассивСобытий,НачалоДня(ТекущаяДата()) , ТекущаяДата(), "Запись данных при выполнении обработки АРМ Матрица ценообразования по соглашению с клиентом");
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьЗаголовки(Команда)
	Элементы.Результат.ОтображатьЗаголовки = Показатьзаголовки;
КонецПроцедуры



/// обработка данных дополнительной расшифровки

&НаКлиенте
Функция ПолучитьСписокДопДействий(Расшифровка)
 
 ДопМеню = Новый СписокЗначений;
 Допменю.Добавить("ПоказатьИсториюИзменения","Показать историю изменения",,БиблиотекаКартинок.ИсторияИзменений);
 
 Возврат  ДопМеню;
 
КонецФункции

&НаКлиенте
Процедура ПоказатьИсторию(СтруктураРасшифровки)
	
	Если СтруктураРасшифровки.Свойство("Порог_Скидка") и СтруктураРасшифровки.Свойство("ЦеноваяГруппа")	Тогда 
		Если ЗначениеЗаполнено(СтруктураРасшифровки.Порог_Скидка) и ЗначениеЗаполнено(СтруктураРасшифровки.ЦеноваяГруппа)  Тогда 
			Если ТипЗнч(СтруктураРасшифровки.Порог_Скидка) <> тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
				
				СтруктураОтбораРегистра = Новый Структура("Порог_Скидка,ЦеноваяГруппа",СтруктураРасшифровки.Порог_Скидка,СтруктураРасшифровки.ЦеноваяГруппа);
				ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбораРегистра);
				
				ОткрытьФорму("РегистрСведений.ГИГ_ИсторияИзмененийЗначениейПороговИСкидок.ФормаСписка",ПараметрыОткрытия,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				СтруктураОтбораРегистра = Новый Структура("Соглашение,ЦеноваяГруппа",этотОбъект.Соглашение,СтруктураРасшифровки.ЦеноваяГруппа);
				ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбораРегистра);
				
				ОткрытьФорму("РегистрСведений.ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашений.ФормаСписка",ПараметрыОткрытия,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	Перем ВыполненноеДействие;
	СтандартнаяОбработка = Ложь;
	ОбработкаРасшифровкиКД = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровкиСоглашение, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));            
	ПараметрДействия = Неопределено;    
	
	МассивДоступныхДействий =  Новый Массив;
    МассивДоступныхДействий.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
    
    ЗначенияРасшифровки = ПолучитьВсеЗначенияРасшифровкиЯчейки(Расшифровка, СтруктураЗначенийРасшифровкиЯчейки);

	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураРасшифровки",ЗначенияРасшифровки);
	ДополнительныеПараметры.Вставить("ЗначениеРасш",Расшифровка);
	ДополнительныеПараметры.Вставить("АдресСхемы", ДанныеРасшифровкиСоглашение);
	ДополнительныеПараметры.Вставить("ПараметрыОбработчика", Неопределено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиГИГ_МатрицаЗавершение",ЭтаФорма,ДополнительныеПараметры);
	
	ОбработкаРасшифровкиКД.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, МассивДоступныхДействий,ПолучитьСписокДопДействий(Расшифровка));
			
	Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда                        
		Если  ВыполненноеДействие = "ПоказатьИсториюИзменения" Тогда
			ПоказатьИсторию(Расшифровка);
		КонецЕсли;                   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиГИГ_МатрицаЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт 
	
	Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		
			Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
				ПоказатьЗначение(,ПараметрВыполненногоДействия);
			КонецЕсли;
			Если  ВыполненноеДействие = "ПоказатьИсториюИзменения" Тогда
				ПоказатьИсторию(ДополнительныеПараметры.СтруктураРасшифровки);
			КонецЕсли;                   
		КонецЕсли;
	
КонецПроцедуры

