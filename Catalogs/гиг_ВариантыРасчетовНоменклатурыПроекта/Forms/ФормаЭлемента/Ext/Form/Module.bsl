&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаСервере
Процедура ОбновитьДеревоТоварыНаСервере(ИсточникЗаписан = Истина)
	
	ДеревоТовары.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Если ИсточникЗаписан Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Товары.Ссылка, ГруппыНоменклатуры.Ссылка) КАК Ссылка,
		|	ЕСТЬNULL(ГруппыНоменклатуры.Группа, """") КАК ГруппаАналитики,
		|	ЕСТЬNULL(ГруппыНоменклатуры.НомерСтроки, 0) КАК НомерГруппыАналитики,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Номенклатура.Артикул КАК Артикул,
		|	Товары.Номенклатура.Производитель КАК Производитель,
		|	Товары.Количество КАК Количество,
		|	Товары.ВариантРасчета КАК ВариантРасчета,
		|	Товары.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения,
		|	Товары.ГИГ_СрокПоставки КАК ГИГ_СрокПоставки,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	Товары.ВалютаЦены КАК ВалютаЦены,
		|	Товары.ЦенаВВалюте КАК ЦенаВВалюте,
		|	Товары.ЦенаВходная КАК ЦенаВходная,
		|	Товары.ЦенаВходнаяРасчетная КАК ЦенаВходнаяРасчетная,
		|	Товары.ДатаТарифа КАК ДатаТарифа,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ЦеноваяГруппа
		|		КОГДА Товары.Номенклатура ССЫЛКА Справочник.ГИГ_НоменклатураПроизводителей
		|			ТОГДА ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.ГИГ_НоменклатураПроизводителей).ЦеноваяКатегория
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
		|	КОНЕЦ КАК ЦеноваяГруппа,
		|	Товары.СкидкаНаценкаПоставщика КАК СкидкаНаценкаПоставщика,
		|	Товары.Примечание КАК Примечание,
		|	Товары.Вес КАК Вес,
		|	Товары.Объем КАК Объем,
		|	Товары.КлючСтроки КАК КлючСтроки,
		|	Товары.Курс КАК Курс,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Товары.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ Товары.Номенклатура.БазоваяЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	Товары.ЭтапПроизводства КАК ЭтапПроизводства,
		|	Товары.ВыводитьВКП КАК ВыводитьВКП
		|ИЗ
		|	Справочник.гиг_ВариантыРасчетовНоменклатурыПроекта.ГруппыНоменклатуры КАК ГруппыНоменклатуры
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.гиг_ВариантыРасчетовНоменклатурыПроекта.Товары КАК Товары
		|		ПО ГруппыНоменклатуры.Ссылка = Товары.Ссылка
		|			И ГруппыНоменклатуры.НомерСтроки = Товары.ГруппаАналитики
		|ГДЕ
		|	ЕСТЬNULL(Товары.Ссылка, ГруппыНоменклатуры.Ссылка) = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки,
		|	ГруппаАналитики
		|ИТОГИ
		|	МАКСИМУМ(НомерГруппыАналитики)
		|ПО
		|	ГруппаАналитики";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.ГруппаАналитики КАК ГруппаАналитики,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Количество КАК Количество,
		|	Товары.ВариантРасчета КАК ВариантРасчета,
		|	Товары.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения,
		|	Товары.ГИГ_СрокПоставки КАК ГИГ_СрокПоставки,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	Товары.ВалютаЦены КАК ВалютаЦены,
		|	Товары.ЦенаВВалюте КАК ЦенаВВалюте,
		|	Товары.ЦенаВходная КАК ЦенаВходная,
		|	Товары.ЦенаВходнаяРасчетная КАК ЦенаВходнаяРасчетная,
		|	Товары.ДатаТарифа КАК ДатаТарифа,
		|	ВЫБОР КОГДА Товары.Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ЦеноваяГруппа
		|		КОГДА Товары.Номенклатура ССЫЛКА Справочник.ГИГ_НоменклатураПроизводителей ТОГДА ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.ГИГ_НоменклатураПроизводителей).ЦеноваяКатегория
		|	    ИНАЧЕ Значение(Справочник.ЦеновыеГруппы.ПустаяСсылка) КОНЕЦ КАК ЦеноваяГруппа,
		|	Товары.СкидкаНаценкаПоставщика КАК СкидкаНаценкаПоставщика,
		|	Товары.Примечание КАК Примечание,
		|	Товары.Вес КАК Вес,
		|	Товары.Объем КАК Объем,
		|	Товары.КлючСтроки КАК КлючСтроки,
		|	Товары.Курс КАК Курс,
		|	Товары.ЭтапПроизводства КАК ЭтапПроизводства,
		|	Товары.ВыводитьВКП КАК ВыводитьВКП
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыНоменклатуры.НомерСтроки КАК НомерСтроки,
		|	ГруппыНоменклатуры.Группа КАК Группа
		|ПОМЕСТИТЬ ВТ_Группы
		|ИЗ
		|	&Группы КАК ГруппыНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Группы.Группа, """") КАК ГруппаАналитики,
		|	ЕСТЬNULL(ВТ_Группы.НомерСтроки, 0) КАК НомерГруппыАналитики,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Характеристика КАК Характеристика,
		|	ВТ_Товары.Номенклатура.Артикул КАК Артикул,
		|	ВТ_Товары.Номенклатура.Производитель КАК Производитель,
		|	ВТ_Товары.Количество КАК Количество,
		|	ВТ_Товары.ВариантРасчета КАК ВариантРасчета,
		|	ВТ_Товары.ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения,
		|	ВТ_Товары.ГИГ_СрокПоставки КАК ГИГ_СрокПоставки,
		|	ВТ_Товары.Цена КАК Цена,
		|	ВТ_Товары.Сумма КАК Сумма,
		|	ВТ_Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ВТ_Товары.ВалютаЦены КАК ВалютаЦены,
		|	ВТ_Товары.ЦенаВВалюте КАК ЦенаВВалюте,
		|	ВТ_Товары.ЦенаВходная КАК ЦенаВходная,
		|	ВТ_Товары.ЦенаВходнаяРасчетная КАК ЦенаВходнаяРасчетная,
		|	ВТ_Товары.ДатаТарифа КАК ДатаТарифа,
		|	ВТ_Товары.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ВТ_Товары.СкидкаНаценкаПоставщика КАК СкидкаНаценкаПоставщика,
		|	ВТ_Товары.Примечание КАК Примечание,
		|	ВТ_Товары.Вес КАК Вес,
		|	ВТ_Товары.Объем КАК Объем,
		|	ВТ_Товары.КлючСтроки КАК КлючСтроки,
		|	ВТ_Товары.Курс КАК Курс,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_Товары.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ВТ_Товары.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ВТ_Товары.Номенклатура.БазоваяЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВТ_Товары.ЭтапПроизводства КАК ЭтапПроизводства,
		|	ВТ_Товары.ВыводитьВКП КАК ВыводитьВКП
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Группы КАК ВТ_Группы
		|		ПО ВТ_Товары.ГруппаАналитики = ВТ_Группы.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Товары.НомерСтроки,
		|	ГруппаАналитики
		|ИТОГИ
		|	МАКСИМУМ(НомерГруппыАналитики)
		|ПО
		|	ГруппаАналитики";
		
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("Группы", Объект.ГруппыНоменклатуры.Выгрузить());
	КонецЕсли;
	
	ВыборкаГруппаАналитики = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Запрос.Выполнить().Выгрузить()
	Пока ВыборкаГруппаАналитики.Следующий() Цикл
		
		НоваяГруппаАналитики = ДеревоТовары.ПолучитьЭлементы().Добавить();
		НоваяГруппаАналитики.ГруппаАналитики = ВыборкаГруппаАналитики.ГруппаАналитики;
		НоваяГруппаАналитики.НомерГруппыАналитики = ВыборкаГруппаАналитики.НомерГруппыАналитики;
		НоваяГруппаАналитики.НомерСтроки = НоваяГруппаАналитики.ГруппаАналитики;
		НоваяГруппаАналитики.ЭтоГруппа = Истина;
		
		Отбор = Новый Структура("НомерСтроки",ВыборкаГруппаАналитики.НомерГруппыАналитики);
		Массив = Объект.ГруппыНоменклатуры.НайтиСтроки(Отбор);
		Если Массив.Количество() > 0 Тогда
			
			НоваяГруппаАналитики.Количество = Массив[0].Количество;
			НоваяГруппаАналитики.ЕдиницаИзмерения = Массив[0].ЕдиницаИзмерения;
			НоваяГруппаАналитики.ВыводитьВКП = Массив[0].ВыводитьВКП;
			
		КонецЕсли;
		
		Выборка = ВыборкаГруппаАналитики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Мин = 100;
		Макс = -100;
		НомерСтроки = 1;
		Пока Выборка.Следующий() Цикл
			Если Выборка.Номенклатура = Null Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = НоваяГруппаАналитики.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.НомерСтроки = Строка(НомерСтроки);
			НоваяСтрока.ПроцентРучнойСкидкиСтрокой = ?(НоваяСтрока.ПроцентРучнойСкидки = 0, "", Строка(НоваяСтрока.ПроцентРучнойСкидки));
			НоваяСтрока.ВесОбъем = Строка(Выборка.Вес) + " / " + Строка(Выборка.Объем);
			НоваяСтрока.ЦеноваяГруппа = ПолучитьЦеновуюГруппуНаСервере(Выборка.Номенклатура);
			//bercut28.10.19
			НоваяСтрока.ХарактеристикиИспользуются = ПолучитьИспользованиеХарактеристикНаСервере(Выборка.Номенклатура);
			//
			НоваяГруппаАналитики.Сумма = НоваяГруппаАналитики.Сумма + НоваяСтрока.Сумма;
			Если НоваяСтрока.ПроцентРучнойСкидки > Макс Тогда
				Макс = НоваяСтрока.ПроцентРучнойСкидки;
			КонецЕсли;
			Если НоваяСтрока.ПроцентРучнойСкидки < Мин Тогда
				Мин = НоваяСтрока.ПроцентРучнойСкидки;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла; 
		Мин = ?(Мин = 100, 0, Мин);
		НоваяГруппаАналитики.ПроцентРучнойСкидки = Мин;
		НоваяГруппаАналитики.ПроцентРучнойСкидкиСтрокой = ?(Мин = Макс, ?(Мин=0, "", "("+Строка(Мин)+")"), "("+Строка(Мин)+")" + "-" + "("+Строка(Макс)+")");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоТоварыНаКлиенте()
	ОбновитьДеревоТоварыНаСервере(Не Модифицированность);
	СтрокиДерева = ДеревоТовары.ПолучитьЭлементы();
	Для Каждого Строка Из СтрокиДерева Цикл
		Элементы.ДеревоТовары.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуТоварыНаСервере()
	
	Объект.ГруппыНоменклатуры.Очистить();
	
	//перенумеруем группы и обновим номера групп в подчиненных строках
	ГруппыНоменклатуры = ДеревоТовары.ПолучитьЭлементы();
	НомерГруппы = 1;
	Для Каждого ГруппаНоменклатуры Из ГруппыНоменклатуры Цикл
		ГруппаНоменклатуры.НомерГруппыАналитики = Строка(НомерГруппы);
		Строки = ГруппаНоменклатуры.ПолучитьЭлементы();
		Для Каждого Строка Из Строки Цикл
			Строка.НомерГруппыАналитики = ГруппаНоменклатуры.НомерГруппыАналитики;
		КонецЦикла;
		НоваяСтрока = Объект.ГруппыНоменклатуры.Добавить();
		НоваяСтрока.Группа = ГруппаНоменклатуры.ГруппаАналитики;
		НоваяСтрока.ЕдиницаИзмерения = ГруппаНоменклатуры.ЕдиницаИзмерения;
		НоваяСтрока.Количество = ГруппаНоменклатуры.Количество;
		НоваяСтрока.ВыводитьВКП = ГруппаНоменклатуры.ВыводитьВКП;
		НомерГруппы = НомерГруппы + 1;
	КонецЦикла;
	
	
	Объект.Товары.Очистить();
	
	СтрокиПервогоУровня = ДеревоТовары.ПолучитьЭлементы();
	Для Каждого СтрокаГруппы Из СтрокиПервогоУровня Цикл
		СтрокиВторогоУровня = СтрокаГруппы.ПолучитьЭлементы();
		Для Каждого Строка Из СтрокиВторогоУровня Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,"ГруппаАналитики");
			НоваяСтрока.ГруппаАналитики = Строка.НомерГруппыАналитики;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьГруппуАналитикиНаСервере(НомерГруппыАналитики, ГруппаАналитики)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерСтроки", НомерГруппыАналитики);
	МассивСтрок = Объект.ГруппыНоменклатуры.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		НоваяСтрока = Объект.ГруппыНоменклатуры.Добавить();
	Иначе
		НоваяСтрока = МассивСтрок[0];
	КонецЕсли;
	НоваяСтрока.Группа = ГруппаАналитики;
	
	Возврат НоваяСтрока.НомерСтроки;
	
КонецФункции

&НаСервере
Процедура СформироватьСписокВыбораЭтаповПроизводства()
	
	Элементы.ДеревоТоварыЭтапПроизводства.СписокВыбора.Очистить();
	Элементы.ТрудозатратыЭтапПроизводства.СписокВыбора.Очистить();
	Для Каждого Этап Из Объект.ЭтапыПроизводства Цикл
		ПредставлениеЭтапа = Строка(Этап.НомерСтроки) + ". " + Этап.Наименование;
		Элементы.ДеревоТоварыЭтапПроизводства.СписокВыбора.Добавить(Этап.НомерСтроки, ПредставлениеЭтапа);
		Элементы.ТрудозатратыЭтапПроизводства.СписокВыбора.Добавить(Этап.НомерСтроки, ПредставлениеЭтапа);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьНаименованияЭтаповПроизводстваДляТрудозатрат()
	Для Каждого ТекСтрока Из Объект.Трудозатраты Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НомерСтроки", ТекСтрока.ЭтапПроизводства);
		МассивСтрок = Объект.ЭтапыПроизводства.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			ТекСтрока.НаименованиеЭтапаПроизводства = МассивСтрок[0].Наименование;
		Иначе
			ТекСтрока.НаименованиеЭтапаПроизводства = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ХарактеристикиИспользуются = ПолучитьИспользованиеХарактеристикНаСервере(Объект.Номенклатура);
	//УстановитьУсловноеОформление();
	НастроитьЭлементыФормы();
	
	ОБ = РеквизитФормыВЗначение("Объект");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ТекущаяДата();
		Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
			Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		Объект.Ответственный = Пользователи.ТекущийПользователь();
		ПолучитьКурсВалютыНаСервере();
		Если Объект.ГруппыНоменклатуры.Количество() = 0 Или Объект.ЭтапыПроизводства.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(Объект.НоменклатураПроекта) И ЗначениеЗаполнено(Объект.НоменклатураПроекта.ЗадачаПроекта) Тогда
				Если ЗначениеЗаполнено(Объект.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета) Тогда
					Если Объект.ЭтапыПроизводства.Количество() = 0 Тогда
						Объект.ЭтапыПроизводства.Загрузить(Объект.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета.ЭтапыПроизводства.Выгрузить());
					КонецЕсли;
					Если Объект.ГруппыНоменклатуры.Количество() = 0 Тогда
						Объект.ГруппыНоменклатуры.Загрузить(Объект.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета.ГруппыНоменклатуры.Выгрузить());
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСписокВыбораЭтаповПроизводства();
	ПеречитатьНаименованияЭтаповПроизводстваДляТрудозатрат();
	СформироватьНадписьКурсВалютыНаСервере();
	ОбновитьДеревоТоварыНаСервере(ЗначениеЗаполнено(Объект.Ссылка));
	
	КаталогХраненияКартинок = Константы.Рин1_ПутьДляХраненияКартинок.Получить();
	
	Если не Прав(КаталогХраненияКартинок,1) = "\" Тогда
		КаталогХраненияКартинок = КаталогХраненияКартинок + "\";
	КонецЕсли;
	
	КаталогКартинок = КаталогХраненияКартинок + Объект.Ссылка.Метаданные().Имя;
	Файл = Новый Файл(КаталогКартинок);
	Если не Файл.Существует() Тогда
		Попытка
			СоздатьКаталог(КаталогКартинок);
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Возможность создать каталог отсутствует. Обратитесь в поддержку! " + ОписаниеОшибки());			
		КонецПопытки;
	КонецЕсли;
	
	//Объект.ЗначенияПараметров.Очистить();
	Если Объект.ЗначенияПараметров.Количество() = 0 Тогда	
		ОбновитьЗначенияПараметровНаСервере();
	КонецЕсли;
	
	ОбновитьДеревоЗначенийНаСервере();
	
	ЭтаФорма.Заголовок = "Вариант расчетов № " + Объект.Код + " от " + Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
	
	Объект.КоэффициентУпаковки = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьНадписиЗаполненияКурсовВалют();
	ДополнительныеЗатратыПроцентомПриИзменении(Неопределено);
	РассчитатьИтогиВПодвале(Истина);
	
	Элементы.ПолеHTMLОписание.Документ.Body.innerHTML  = Объект.ОписаниеТовара;
	Элементы.ПолеHTMLОписание2.Документ.Body.innerHTML = Объект.ОписаниеТовара2;
	
	РассчитатьИтогиВПодвалеПриИзмененииДереваТовары();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПредопределенныеГруппыНаСервере()
	Если ЗначениеЗаполнено(Объект.НоменклатураПроекта.ЗадачаПроекта) Тогда
		Если ЗначениеЗаполнено(Объект.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета) Тогда
			ПредопределенныеГруппы = Объект.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета.ГруппыНоменклатуры.Выгрузить();
			Для Каждого Группа Из ПредопределенныеГруппы Цикл
				НоваяГруппа = Объект.ГруппыНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяГруппа, Группа);
			КонецЦикла;
			ОбновитьДеревоТоварыНаСервере(Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредопределенныеГруппы(Команда)
	Если ЗначениеЗаполнено(Объект.НоменклатураПроекта) Тогда
		ДобавитьПредопределенныеГруппыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПредопределенныеЭтапыНаСервере()
	Если ЗначениеЗаполнено(Объект.НоменклатураПроекта.ЗадачаПроекта) Тогда
		Если ЗначениеЗаполнено(Объект.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета) Тогда
			ПредопределенныеЭтапы = Объект.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета.ЭтапыПроизводства.Выгрузить();
			Для Каждого Этап Из ПредопределенныеЭтапы Цикл
				НовыйЭтап = Объект.ЭтапыПроизводства.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЭтап, Этап);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	СформироватьСписокВыбораЭтаповПроизводства();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредопределенныеЭтапы(Команда)
	//++Шерстюк Ю.Ю. 29.01.21 тч очищаем и заполняем тч
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПредопределенныеЭтапыЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, "Перезаполнить этапы, при перезаполнении этапов будут очищены этапы в таблице ""Трудозатраты"". Продолжить?", РежимДиалогаВопрос.ДаНет);	

	//Если ЗначениеЗаполнено(Объект.НоменклатураПроекта) Тогда
	//	ДобавитьПредопределенныеЭтапыНаСервере();
	//КонецЕсли;
	//--Шерстюк Ю.Ю.
КонецПроцедуры

//++Шерстюк Ю.Ю. 29.01.21
&НаКлиенте
Процедура ДобавитьПредопределенныеЭтапыЗавершение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтрока Из Объект.Трудозатраты Цикл
			ТекСтрока.ЭтапПроизводства = 0;
	КонецЦикла;
	
	Объект.ЭтапыПроизводства.Очистить();
	Если ЗначениеЗаполнено(Объект.НоменклатураПроекта) Тогда
		ДобавитьПредопределенныеЭтапыНаСервере();
	КонецЕсли;

	Модифицированность = Истина;
	
	СформироватьСписокВыбораЭтаповПроизводства();
	ПеречитатьНаименованияЭтаповПроизводстваДляТрудозатрат();	
КонецПроцедуры
//--Шерстюк Ю.Ю. 29.01.21

&НаСервере
Процедура ДобавитьПредопределенныеТрудозатратыНаСервере()
	Если ЗначениеЗаполнено(Объект.НоменклатураПроекта.ЗадачаПроекта) Тогда
		Если ЗначениеЗаполнено(Объект.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета) Тогда
			ПредопределенныеТрудозатраты = Объект.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета.Трудозатраты.Выгрузить();
			Для Каждого Трудозатрата Из ПредопределенныеТрудозатраты Цикл
				НоваяТрудозатрата = Объект.Трудозатраты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяТрудозатрата, Трудозатрата);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредопределенныеТрудозатраты(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПредопределенныеТрудозатратыЗавершение", ЭтаФорма);
	//++Шерстюк Ю.Ю. 29.01.21 тч Этапы очущать не будем
	//ПоказатьВопрос(ОписаниеОповещения, "При добавлении трудозатрат будет очищена и перезаполнена таб. часть ""Этапы производства""! Продолжить?", РежимДиалогаВопрос.ДаНет);
	ПоказатьВопрос(ОписаниеОповещения, "Перезаполнить трудозатраты?", РежимДиалогаВопрос.ДаНет);	
	//--Шерстюк Ю.Ю.
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредопределенныеТрудозатратыЗавершение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Трудозатраты.Очистить();
	//++Шерстюк Ю.Ю. 29.01.21
	//Объект.ЭтапыПроизводства.Очистить();
	//--Шерстюк Ю.Ю.
	Если ЗначениеЗаполнено(Объект.НоменклатураПроекта) Тогда
		//++Шерстюк Ю.Ю. 29.01.21
		//ДобавитьПредопределенныеЭтапыНаСервере();
		//--Шерстюк Ю.Ю.
		ДобавитьПредопределенныеТрудозатратыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНадписиЗаполненияКурсовВалют()
	
	Элементы.ДеревоТоварыПересчитатьКурсыНаДатуРасчета.Заголовок = "Пересчитать на " + Формат(Объект.Дата, "ДФ=dd.MM.yy");
	Элементы.ДеревоТоварыПересчитатьКурсыНаТекущуюДату.Заголовок = "Пересчитать на " + Формат(ТекущаяДата(), "ДФ=dd.MM.yy");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКодПередЗаписьюНаСервере()
	ОБ = РеквизитФормыВЗначение("Объект");
	ОБ.УстановитьНовыйКод();
	ЗначениеВРеквизитФормы(ОБ, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СформироватьКодПередЗаписьюНаСервере();
	КонецЕсли;
	Объект.Наименование = "Вариант расчетов № " + Объект.Код + " от " + Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
	//ОбновитьТаблицуТоварыНаСервере();
	РассчитатьИтогиВПодвале();
	
	//Парсим HTML
	
	Если не Объект.Ссылка.Пустая() Тогда
		
		УИД = Объект.Ссылка.УникальныйИдентификатор();
		
		СтрокаHTML  = Элементы.ПолеHTMLОписание.Документ.body.innerHTML;
		СтрокаHTML2 = Элементы.ПолеHTMLОписание2.Документ.body.innerHTML;
		
		#Область ПолеHTMLОписание
		
		Если НЕ СтрокаHTML = "" Тогда 
			
			ЧислоВхождений = СтрЧислоВхождений(СтрокаHTML,"<img");
			
			Начало = 1;
			
			Для А = 1 По ЧислоВхождений Цикл
				
				Начало = СтрНайти(СтрокаHTML,"<img",,Начало,);
				СтрокаНачало = Сред(СтрокаHTML,Начало);
				КоличествоНачало = СтрДлина(СтрокаНачало);
				
				Конец = СтрНайти(СтрокаHTML,">",,Начало,) + 1;
				СтрокаКонец = Сред(СтрокаHTML,Конец);
				КоличествоКонец = СтрДлина(СтрокаКонец);
				
				КоличествоВыбираемыхСимволов = КоличествоНачало - КоличествоКонец;
				
				ИтоговаяСтрока = Сред(СтрокаHTML,Начало,КоличествоВыбираемыхСимволов);
				
				Если СтрНайти(ИтоговаяСтрока,УИД) = 0 и СтрНайти(ИтоговаяСтрока,"//download") = 0 Тогда  
					
					Расширение = "";
					ВременныйФайл = "";
					
					Если СтрНайти(ИтоговаяСтрока,"src=""https") > 0 или СтрНайти(ИтоговаяСтрока,"src=""http") > 0 Тогда
						
						ВременныйФайл = ?(СтрНайти(ИтоговаяСтрока,"https:") > 0,Сред(ИтоговаяСтрока,СтрНайти(ИтоговаяСтрока,"https:")),Сред(ИтоговаяСтрока,СтрНайти(ИтоговаяСтрока,"http:")));
						
						Если СтрНайти(ИтоговаяСтрока,".gif") > 0 Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".gif") + 3); //добавим число что бы получить расширение	
							Расширение = ".gif";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".jpg") > 0  Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".jpg") + 3); 
							Расширение = ".jpg";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".jpeg") > 0 Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".jpeg") + 4); 
							Расширение = ".jpg";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".png") > 0 Тогда 
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".png") + 3);
							Расширение = ".png";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".svg") > 0 Тогда 
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".svg") + 3);
							Расширение = ".svg";
							
						КонецЕсли;	
						
					ИначеЕсли СтрНайти(ИтоговаяСтрока,"src=""file") > 0 или СтрНайти(ИтоговаяСтрока,"src=") > 0 Тогда 
						
						ВременныйФайл = Сред(ИтоговаяСтрока,СтрНайти(ИтоговаяСтрока,"src="));
						
						Если СтрНайти(ИтоговаяСтрока,".gif") > 0 Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".gif") + 3); //добавим число что бы получить расширение
							Расширение = ".gif";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".jpg") > 0 Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".jpg") + 3); 
							Расширение = ".jpg";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".png") > 0 Тогда 
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".png") + 3);
							ВременныйФайл = Сред(ВременныйФайл,6);
							Расширение = ".png";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".svg") > 0 Тогда 
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".svg") + 3);
							Расширение = ".svg";
							
						КонецЕсли;
						
						ВременныйФайл = СтрЗаменить(ВременныйФайл,"src=","");
						ВременныйФайл = СтрЗаменить(ВременныйФайл,"""","");
						
					КонецЕсли;
					
					Если не Расширение = "" Тогда
						
						ДатаВФайл = СтрЗаменить(Строка(ТекущаяДата()),":","");//нужна уникальность картинок
						ДатаВФайл = СтрЗаменить(ДатаВФайл," ","-");
						
						КаталогКартинокСУИД = КаталогКартинок+"\"+Строка(УИД);
						Файл = Новый Файл(КаталогКартинокСУИД);
						Если не Файл.Существует() Тогда
							Попытка
								СоздатьКаталог(КаталогКартинокСУИД);
							Исключение
								Сообщить("Возможность создать каталог отсутствует. Обратитесь в поддержку! " + ОписаниеОшибки());
								Отказ = Истина;
							КонецПопытки;
						КонецЕсли;
						
						//НовыйФайл = КаталогКартинок + Строка(УИД) + "\" + ДатаВФайл + "_" + А + Расширение;
						НовыйФайл = КаталогКартинокСУИД + "\" + ДатаВФайл + "_" + А + Расширение;
						КопироватьФайл(ВременныйФайл,НовыйФайл); //из временного хранилища пользователя перепиши файл в общее хранилище
						
						//поменяем в HTML ссылку на файл
						Если СтрНайти(Лев(КаталогКартинок,2),"\\") > 0 Тогда 
							ЗаписатьОписание(СтрЗаменить(Объект.ОписаниеТовара,ВременныйФайл,"file:\\" + НовыйФайл));
							//Объект.ОписаниеТовара = СтрЗаменить(Объект.ОписаниеТовара,ВременныйФайл,"file:\\" + НовыйФайл); 	
						Иначе
							ЗаписатьОписание(СтрЗаменить(Объект.ОписаниеТовара,ВременныйФайл,"file:" + НовыйФайл));
							//Объект.ОписаниеТовара = СтрЗаменить(Объект.ОписаниеТовара,ВременныйФайл,"file:" + НовыйФайл); 
						КонецЕсли;						
												
					Иначе 
						
						Сообщить("Ошибка создания файла описания - обратитесь к разработчику!");
						
					КонецЕсли;		
					
				КонецЕсли;
				
				Начало = Конец;
				
			КонецЦикла;
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ПолеHTMLОписание2
		
		Если НЕ СтрокаHTML2 = "" Тогда 
			
			ЧислоВхождений = СтрЧислоВхождений(СтрокаHTML2,"<img");
			
			Начало = 1;
			
			Для А = 1 По ЧислоВхождений Цикл
				
				Начало = СтрНайти(СтрокаHTML2,"<img",,Начало,);
				СтрокаНачало = Сред(СтрокаHTML2,Начало);
				КоличествоНачало = СтрДлина(СтрокаНачало);
				
				Конец = СтрНайти(СтрокаHTML2,">",,Начало,) + 1;
				СтрокаКонец = Сред(СтрокаHTML2,Конец);
				КоличествоКонец = СтрДлина(СтрокаКонец);
				
				КоличествоВыбираемыхСимволов = КоличествоНачало - КоличествоКонец;
				
				ИтоговаяСтрока = Сред(СтрокаHTML2,Начало,КоличествоВыбираемыхСимволов);
				
				Если СтрНайти(ИтоговаяСтрока,УИД) = 0 Тогда
					
					Расширение = "";
					ВременныйФайл = "";
					
					Если СтрНайти(ИтоговаяСтрока,"src=""https") > 0 или СтрНайти(ИтоговаяСтрока,"src=""http") > 0 Тогда
						
						ВременныйФайл = ?(СтрНайти(ИтоговаяСтрока,"https:") > 0,Сред(ИтоговаяСтрока,СтрНайти(ИтоговаяСтрока,"https:")),Сред(ИтоговаяСтрока,СтрНайти(ИтоговаяСтрока,"http:")));
						
						Если СтрНайти(ИтоговаяСтрока,".gif") > 0 Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".gif") + 3); //добавим число что бы получить расширение	
							Расширение = ".gif";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".jpg") > 0  Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".jpg") + 3); 
							Расширение = ".jpg";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".jpeg") > 0 Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".jpeg") + 4); 
							Расширение = ".jpg";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".png") > 0 Тогда 
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".png") + 3);
							Расширение = ".png";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".svg") > 0 Тогда 
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".svg") + 3);
							Расширение = ".svg";
							
						КонецЕсли;	
						
					ИначеЕсли СтрНайти(ИтоговаяСтрока,"src=""file") > 0 или СтрНайти(ИтоговаяСтрока,"src=") > 0 Тогда 
						
						ВременныйФайл = Сред(ИтоговаяСтрока,СтрНайти(ИтоговаяСтрока,"src="));
						
						Если СтрНайти(ИтоговаяСтрока,".gif") > 0 Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".gif") + 3); //добавим число что бы получить расширение
							Расширение = ".gif";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".jpg") > 0 Тогда
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".jpg") + 3); 
							Расширение = ".jpg";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".png") > 0 Тогда 
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".png") + 3);
							ВременныйФайл = Сред(ВременныйФайл,6);
							Расширение = ".png";
							
						ИначеЕсли СтрНайти(ИтоговаяСтрока,".svg") > 0 Тогда 
							
							ВременныйФайл = Сред(ВременныйФайл,1,СтрНайти(ВременныйФайл,".svg") + 3);
							Расширение = ".svg";
							
						КонецЕсли;
						
						ВременныйФайл = СтрЗаменить(ВременныйФайл,"src=","");
						ВременныйФайл = СтрЗаменить(ВременныйФайл,"""","");
						
					КонецЕсли;
					
					Попытка
						
						Если не Расширение = "" Тогда
							
							ДатаВФайл = СтрЗаменить(Строка(ТекущаяДата()),":","");//нужна уникальность картинок
							ДатаВФайл = СтрЗаменить(ДатаВФайл," ","-");
							
							КаталогКартинокСУИД = КаталогКартинок+"\"+Строка(УИД);
							Файл = Новый Файл(КаталогКартинокСУИД);
							Если не Файл.Существует() Тогда
								Попытка
									СоздатьКаталог(КаталогКартинокСУИД);
								Исключение
									Сообщить("Возможность создать каталог отсутствует. Обратитесь в поддержку! " + ОписаниеОшибки());
									Отказ = Истина;
								КонецПопытки;
							КонецЕсли;
							
							//НовыйФайл = КаталогКартинок + Строка(УИД) + "\" + ДатаВФайл + "_" + А + Расширение;
							НовыйФайл = КаталогКартинокСУИД + "\" + ДатаВФайл + "_" + А + Расширение;
							
							КопироватьФайл(ВременныйФайл,НовыйФайл); //из временного хранилища пользователя перепиши файл в общее хранилище
							
							//поменяем в HTML ссылку на файл
							Если СтрНайти(Лев(КаталогКартинок,2),"\\") > 0 Тогда
								ЗаписатьОписание2(СтрЗаменить(Объект.ОписаниеТовара2,ВременныйФайл,"file:\\" + НовыйФайл));
								//Объект.ОписаниеТовара2 = СтрЗаменить(Объект.ОписаниеТовара2,ВременныйФайл,"file:\\" + НовыйФайл); 	
							Иначе
								ЗаписатьОписание2(СтрЗаменить(Объект.ОписаниеТовара2,ВременныйФайл,"file:" + НовыйФайл));
								//Объект.ОписаниеТовара2 = СтрЗаменить(Объект.ОписаниеТовара2,ВременныйФайл,"file:" + НовыйФайл); 
							КонецЕсли;
														
						Иначе 
							
							Сообщить("Ошибка создания файла описания - обратитесь к разработчику!");
							
						КонецЕсли;	
						
					Исключение
						Сообщить("Ошибка создания файла описания - обратитесь к разработчику!");
					КонецПопытки;
					
					
				КонецЕсли;
				
				Начало = Конец;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		#КонецОбласти
		
		//Почистим каталог картинок от устаревших файлов
		УдалитьНенужныеКартинки(КаталогКартинокСУИД,НовыйФайл,СтрокаHTML + СтрокаHTML2)
		
	Иначе 
		Если не  ЗначениеЗаполнено(Объект.ВариантПараметров) Тогда
			
			Отказ = Истина;
			Сообщить("Вариант параметров на вкладке ОСНОВНОЕ, не может быть не заполненным!");
			
		КонецЕсли;
	КонецЕсли;	
	//
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНенужныеКартинки(КаталогКартинокСУИД,НовыйФайл,СтрокаHTMLОбщая)
	
	МассивФайлов = НайтиФайлы(КаталогКартинокСУИД,"*");
	Если не МассивФайлов.Количество() = 0 Тогда
		Для каждого Файл Из МассивФайлов Цикл
			Если СтрНайти(СтрокаHTMLОбщая,Файл.ИмяБезРасширения) = 0 Тогда
				Если не НовыйФайл = Файл.ПолноеИмя Тогда
					УдалитьФайлы(Файл.ПолноеИмя);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры // УдалитьНенужныеКартинки()


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//проверка этапов производства
	МассивОшибок = гиг_РасчетИзделий.ПроверитьКорректностьЭтаповПроизводства(ТекущийОбъект, Отказ);
	Для Каждого СтрокаОшибки Из МассивОшибок Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрокаОшибки.СообщениеОбОшибке;
		Сообщение.Поле = "Объект.ЭтапыПроизводства["+СтрокаОшибки.НомерСтроки+"].НомерСледующегоЭтапа";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуСтрокиТрудозатратПриИзменении(ТекущаяСтрока)
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасценкуРаботыСотрудниковНаСервере(Знач ВидРабот, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасценкиРаботСотрудниковСрезПоследних.Расценка КАК Расценка
	|ИЗ
	|	РегистрСведений.РасценкиРаботСотрудников.СрезПоследних(&Дата, ВидРабот = &ВидРабот) КАК РасценкиРаботСотрудниковСрезПоследних";
	Запрос.УстановитьПараметр("ВидРабот", ВидРабот);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Расценка;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ТрудозатратыВидРаботПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Трудозатраты.ТекущиеДанные;
	ТекущаяСтрока.Цена = ПолучитьРасценкуРаботыСотрудниковНаСервере(ТекущаяСтрока.ВидРабот, Объект.Дата);
	РасчитатьСуммуСтрокиТрудозатратПриИзменении(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЭтапПроизводстваПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерСтроки", ТекущиеДанные.ЭтапПроизводства);
	МассивСтрок = Объект.ЭтапыПроизводства.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 Тогда
		ТекущиеДанные.НаименованиеЭтапаПроизводства = МассивСтрок[0].Наименование;
	Иначе
		ТекущиеДанные.НаименованиеЭтапаПроизводства = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыКоличествоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Трудозатраты.ТекущиеДанные;
	РасчитатьСуммуСтрокиТрудозатратПриИзменении(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Трудозатраты.ТекущиеДанные;
	РасчитатьСуммуСтрокиТрудозатратПриИзменении(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦену(Команда)
	ОбновитьТаблицуТоварыНаСервере();
	Объект.Цена = Объект.Товары.Итог("Сумма") + Объект.Трудозатраты.Итог("Сумма");	
КонецПроцедуры

&НаСервере
Функция СоздатьРесурснуюСпецификациюНаСервере()
	
	Возврат гиг_РасчетИзделий.СоздатьРесурснуюСпецификацию(Объект.Номенклатура, Объект.Характеристика, Объект.Товары.Выгрузить(), Объект.Трудозатраты.Выгрузить(), Объект.ЭтапыПроизводства.Выгрузить(), Объект.Дата, Объект.Наименование, Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура СоздатьРесурснуюСпецификацию(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Создать ресурсную спецификацию можно только после записи объекта!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "На форме имеются изменения. Перед созданием ресурсной спецификации нужно записать объект!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	РесурсСпец = СоздатьРесурснуюСпецификациюНаСервере();
	Если РесурсСпец <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", РесурсСпец);
		ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "Характеристика", "ХарактеристикиИспользуются");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
	//НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	
	СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.Артикул = ПолучитьАртикулНоменклатурыНаСервере(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.Производитель = ПолучитьПроизводителяНоменклатурыНаСервере(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатурыНаСервере(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.Вес = ПолучитьВесНоменклатурыНаСервере(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.Объем = ПолучитьОбъемНоменклатурыНаСервере(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.ВесОбъем = Строка(ТекущаяСтрока.Вес) + " / " + Строка(ТекущаяСтрока.Объем);
	Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ТекущаяСтрока.ВариантРасчета = ПолучитьСпецификациюНоменклатурыНаСервере(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, Объект.Дата);
	КонецЕсли;
	ТекущаяСтрока.ЦеноваяГруппа = ПолучитьЦеновуюГруппуНаСервере(ТекущаяСтрока.Номенклатура);
	
	РеквизитыВалюты = ПолучитьРеквизитыВалютыНаСервере(ТекущаяСтрока.Номенклатура, Объект.Дата, Объект.Валюта, Объект.Курс, Объект.Кратность);
	ТекущаяСтрока.ВалютаЦены = РеквизитыВалюты.ВалютаЦены;
	ТекущаяСтрока.Курс = РеквизитыВалюты.Курс;
	
	ТекущаяСтрока.ДатаТарифа = РеквизитыВалюты.ДатаТарифа; // дата тарифа
	ТекущаяСтрока.ЦенаВВалюте = РеквизитыВалюты.ЦенаВВалюте; // тариф
	
	ТекущаяСтрока.СкидкаНаценкаПоставщика = РеквизитыВалюты.СкидкаНаценкаПоставщика; // базовая скидка от тарифа
	ТекущаяСтрока.ЦенаВходная = (ТекущаяСтрока.ЦенаВВалюте * ТекущаяСтрока.Курс) * (1 - (ТекущаяСтрока.СкидкаНаценкаПоставщика/100)); // посчитаем входную цену от тарифа и скидки
	ТекущаяСтрока.ЦенаВходнаяРасчетная = ТекущаяСтрока.ЦенаВходная;
	ТекущаяСтрока.ПроцентРучнойСкидки = СтрокаРодитель.ПроцентРучнойСкидки;
	ТекущаяСтрока.ПроцентРучнойСкидкиСтрокой = ?(ТекущаяСтрока.ПроцентРучнойСкидки = 0, "", Строка(ТекущаяСтрока.ПроцентРучнойСкидки));
	ТекущаяСтрока.Цена = ТекущаяСтрока.ЦенаВходная * (1 + (ТекущаяСтрока.ПроцентРучнойСкидки/100));
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	
	РассчитатьСуммуВГруппе(СтрокаРодитель);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВГруппе(ГруппаНоменклатуры)
	
	Если НЕ ГруппаНоменклатуры = Неопределено Тогда
		
		Мин = 100;
		Макс = -100;
		ГруппаНоменклатуры.Сумма = 0;
		ЭлементыГруппы = ГруппаНоменклатуры.ПолучитьЭлементы();
		НомерСтроки = 1;
		Для Каждого Элемент Из ЭлементыГруппы Цикл
			ГруппаНоменклатуры.Сумма = ГруппаНоменклатуры.Сумма + Элемент.Сумма;
			Элемент.НомерСтроки = НомерСтроки;
			Если Элемент.ПроцентРучнойСкидки > Макс Тогда
				Макс = Элемент.ПроцентРучнойСкидки;
			КонецЕсли;
			Если Элемент.ПроцентРучнойСкидки < Мин Тогда
				Мин = Элемент.ПроцентРучнойСкидки;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ГруппаНоменклатуры.ПроцентРучнойСкидки = Мин;
		ГруппаНоменклатуры.ПроцентРучнойСкидкиСтрокой = ?(Мин = Макс, ?(Мин=0, "", "("+Строка(Мин)+")"), "("+Строка(Мин)+")" + "-" + "("+Строка(Макс)+")");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИспользованиеХарактеристикНаСервере(Номенклатура)
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Если ИспользоватьХарактеристики Тогда
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.ГИГ_НоменклатураПроизводителей") Тогда
			Если Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура.Номенклатура) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе 	
			Если Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАртикулНоменклатурыНаСервере(Номенклатура)
	Возврат Номенклатура.Артикул;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПроизводителяНоменклатурыНаСервере(Номенклатура)
	Возврат Номенклатура.Производитель;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмеренияНоменклатурыНаСервере(Номенклатура)
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Номенклатура.ЕдиницаИзмерения;
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.ГИГ_НоменклатураПроизводителей") Тогда
		Возврат Номенклатура.БазоваяЕдиницаИзмерения;
	КонецЕсли;
	Возврат Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВесНоменклатурыНаСервере(Номенклатура)
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ЧислительЕИ = ?(ЗначениеЗаполнено(Номенклатура.ВесЕдиницаИзмерения) = Истина, Номенклатура.ВесЕдиницаИзмерения.Числитель, 0);
		ЗнаменательЕИ = ?(ЗначениеЗаполнено(Номенклатура.ВесЕдиницаИзмерения) = Истина, Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0);
		ВесБазовой = ?(Номенклатура.ВесЗнаменатель = 0, 0, Номенклатура.ВесЧислитель/Номенклатура.ВесЗнаменатель);
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.ГИГ_НоменклатураПроизводителей") Тогда
		ЧислительЕИ = ?(ЗначениеЗаполнено(Номенклатура.ЕИВеса) = Истина, Номенклатура.ЕИВеса.Числитель, 0);
		ЗнаменательЕИ = ?(ЗначениеЗаполнено(Номенклатура.ЕИВеса) = Истина, Номенклатура.ЕИВеса.Знаменатель, 0);
		ВесБазовой = Номенклатура.ВесБазовой;
	КонецЕсли;
	Если ЗнаменательЕИ = 0 Тогда
		Возврат 0;
	Иначе
		Возврат (ВесБазовой * ЧислительЕИ) / ЗнаменательЕИ;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОбъемНоменклатурыНаСервере(Номенклатура)
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ЧислительЕИ = ?(ЗначениеЗаполнено(Номенклатура.ОбъемЕдиницаИзмерения) = Истина, Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0);
		ЗнаменательЕИ = ?(ЗначениеЗаполнено(Номенклатура.ОбъемЕдиницаИзмерения) = Истина, Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0);
		ОбъемБазовой = ?(Номенклатура.ОбъемЗнаменатель = 0, 0, Номенклатура.ОбъемЧислитель/Номенклатура.ОбъемЗнаменатель);
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.ГИГ_НоменклатураПроизводителей") Тогда
		ЧислительЕИ = ?(ЗначениеЗаполнено(Номенклатура.ЕИОбъема) = Истина, Номенклатура.ЕИОбъема.Числитель, 0);
		ЗнаменательЕИ = ?(ЗначениеЗаполнено(Номенклатура.ЕИОбъема) = Истина, Номенклатура.ЕИОбъема.Знаменатель, 0);
		ОбъемБазовой = Номенклатура.ОбъемБазовой;
	КонецЕсли;
	Если ЗнаменательЕИ = 0 Тогда
		Возврат 0;
	Иначе
		Возврат (ОбъемБазовой * ЧислительЕИ) / ЗнаменательЕИ;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыВалютыНаСервере(Номенклатура, Дата, Валюта, Курс, Кратность)
	
	РеквизитыВалюты = Новый Структура;
	РеквизитыВалюты.Вставить("ДатаТарифа", Дата(1,1,1,0,0,0));
	РеквизитыВалюты.Вставить("СкидкаНаценкаПоставщика", 0);
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		РеквизитыВалюты.Вставить("ВалютаЦены", Валюта);
		РеквизитыВалюты.Вставить("Курс", Курс);
		РеквизитыВалюты.Вставить("ЦенаВВалюте", 0);
		Возврат РеквизитыВалюты;
	КонецЕсли;
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 		
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаВВалюте,
		|	ЦеныНоменклатурыСрезПоследних.Валюта КАК ВалютаТарифа,
		|	ЦеныНоменклатурыСрезПоследних.Период КАК ДатаТарифа,
		|	КурсыВалютСрезПоследних.Курс КАК Курс
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			Номенклатура = &Номенклатура
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта";
		
		Запрос.УстановитьПараметр("ВидЦены", Константы.ГИГ_ОсновнойВидЦеныТарифаНоменклатурыСНДС.Получить());
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		//РезультатЗапроса.Выгрузить();
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.ВалютаТарифа = Валюта Тогда
				РеквизитыВалюты.Вставить("ВалютаЦены", Выборка.ВалютаТарифа);
				РеквизитыВалюты.Вставить("Курс", Выборка.Курс);
				РеквизитыВалюты.Вставить("ЦенаВВалюте", Выборка.ЦенаВВалюте);
				РеквизитыВалюты.Вставить("ДатаТарифа", Выборка.ДатаТарифа);
			Иначе 
				РеквизитыВалюты.Вставить("ВалютаЦены", Выборка.ВалютаТарифа);
				РеквизитыВалюты.Вставить("Курс", Выборка.Курс);
				РеквизитыВалюты.Вставить("ЦенаВВалюте", Выборка.ЦенаВВалюте*?(ЗначениеЗаполнено(Выборка.Курс),1,Выборка.Курс));
				РеквизитыВалюты.Вставить("ДатаТарифа", Выборка.ДатаТарифа);
			КонецЕсли;
			//добавим СкидкаНаценкаПоставщика
			Запрос2 = Новый Запрос;
			Запрос2.Текст =
			"ВЫБРАТЬ
			|	ГИГ_ИсторияИзмененийЗначениейПороговИСкидокСрезПоследних.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.ГИГ_ИсторияИзмененийЗначениейПороговИСкидок.СрезПоследних(
			|			&Дата,
			|			Порог_Скидка = &Порог_Скидка
			|				И ЦеноваяГруппа = &ЦеноваяГруппа) КАК ГИГ_ИсторияИзмененийЗначениейПороговИСкидокСрезПоследних";
			Запрос2.УстановитьПараметр("Дата", Дата);
			Запрос2.УстановитьПараметр("Порог_Скидка", Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа);
			Запрос2.УстановитьПараметр("ЦеноваяГруппа", ПолучитьЦеновуюГруппуНаСервере(Номенклатура));
			
			Выборка2 = Запрос2.Выполнить().Выбрать();
			Если Выборка2.Следующий() Тогда
				РеквизитыВалюты.Вставить("СкидкаНаценкаПоставщика", Выборка2.Значение);
			КонецЕсли;
			//
		Иначе
			РеквизитыВалюты.Вставить("ВалютаЦены", Валюта);
			РеквизитыВалюты.Вставить("Курс", Курс);
			РеквизитыВалюты.Вставить("ЦенаВВалюте", 0);
		КонецЕсли;
		
	Иначе //ГИГ_НоменклатураПроизводителей
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК Порядок,
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ВалютаТарифа КАК ВалютаТарифа,
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ТарифБезНДС КАК ТарифБезНДС,
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ТарифСНДС КАК ТарифСНДС,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК Курс,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК Кратность,
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.Период КАК ДатаТарифа
		|ИЗ
		|	РегистрСведений.ГИГ_ЦеныНоменклатурыПроизводителей.СрезПоследних(
		|			&Дата,
		|			НоменклатураПроизводителя = &Номенклатура
		|				И ВалютаТарифа = &Валюта) КАК ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
		|		ПО ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ВалютаТарифа = КурсыВалютСрезПоследних.Валюта
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	1,
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ВалютаТарифа,
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ТарифБезНДС,
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ТарифСНДС,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0),
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1),
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.ГИГ_ЦеныНоменклатурыПроизводителей.СрезПоследних(
		|			&Дата,
		|			НоменклатураПроизводителя = &Номенклатура
		|				И ВалютаТарифа <> &Валюта) КАК ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|		ПО ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ВалютаТарифа = КурсыВалютСрезПоследних.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			СтавкаНДС = Номенклатура.СтавкаНДС;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		КонецЕсли;
		СтавкаНДСЧислом = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(СтавкаНДС);
		
		Выборка = Запрос.Выполнить().Выбрать();
		//Запрос.Выполнить().Выгрузить()
		Если Выборка.Следующий() Тогда
			РеквизитыВалюты.Вставить("ВалютаЦены", Выборка.ВалютаТарифа);
			РеквизитыВалюты.Вставить("ДатаТарифа", Выборка.ДатаТарифа);
			Если Выборка.ВалютаТарифа = Валюта Тогда
				РеквизитыВалюты.Вставить("Курс", 1);
			Иначе
				Если Выборка.Курс = 0 Или Кратность = 0 Тогда
					НовыйКурс = 0;
				Иначе
					НовыйКурс = Окр((1 * Выборка.Курс * Выборка.Кратность) / (Курс * Кратность), 6);
				КонецЕсли;
				РеквизитыВалюты.Вставить("Курс", НовыйКурс);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ТарифСНДС) Тогда
				РеквизитыВалюты.Вставить("ЦенаВВалюте", Выборка.ТарифСНДС);
			Иначе
				РеквизитыВалюты.Вставить("ЦенаВВалюте", Выборка.ТарифБезНДС * (1 + (СтавкаНДСЧислом/100)));
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ГИГ_ИсторияИзмененийЗначениейПороговИСкидокСрезПоследних.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.ГИГ_ИсторияИзмененийЗначениейПороговИСкидок.СрезПоследних(
			|			&Дата,
			|			Порог_Скидка = &Порог_Скидка
			|				И ЦеноваяГруппа = &ЦеноваяГруппа) КАК ГИГ_ИсторияИзмененийЗначениейПороговИСкидокСрезПоследних";
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Порог_Скидка", Справочники.ГИГ_ПорогиОграничений.СкидкаПоставщикаОтТарифа);
			Запрос.УстановитьПараметр("ЦеноваяГруппа", ПолучитьЦеновуюГруппуНаСервере(Номенклатура));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				РеквизитыВалюты.Вставить("СкидкаНаценкаПоставщика", Выборка.Значение);
			КонецЕсли;		
		Иначе
			РеквизитыВалюты.Вставить("ВалютаЦены", Валюта);
			РеквизитыВалюты.Вставить("Курс", Курс);
			РеквизитыВалюты.Вставить("ЦенаВВалюте", 0);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыВалюты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСпецификациюНоменклатурыНаСервере(Номенклатура, Характеристика, Дата)
	
	МассивДанных = Новый Массив;
	ДанныеОбИзделиях = Новый Структура; 
	ДанныеОбИзделиях.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ДанныеОбИзделиях.Вставить("Номенклатура", Номенклатура);
	ДанныеОбИзделиях.Вставить("Характеристика", Характеристика);
	ДанныеОбИзделиях.Вставить("НачалоПроизводства", Дата);
	МассивДанных.Добавить(ДанныеОбИзделиях);
	
	СписокДоступныхСпецификаций = УправлениеДаннымиОбИзделиях.СпецификацииИзделия(Номенклатура, Характеристика, Дата,, Новый Структура);
	
	Если СписокДоступныхСпецификаций.Количество() = 0 Тогда
		Возврат Справочники.РесурсныеСпецификации.ПустаяСсылка();
	Иначе
		Возврат СписокДоступныхСпецификаций[0].Спецификация;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦеновуюГруппуНаСервере(Номенклатура)
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Номенклатура.ЦеноваяГруппа;
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.ГИГ_НоменклатураПроизводителей") Тогда
		Возврат Номенклатура.ЦеноваяКатегория;
	КонецЕсли;
	
	Возврат Справочники.ЦеновыеГруппы.ПустаяСсылка();
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	//
	Элементы.СоздатьХарактеристику.Доступность = ХарактеристикиИспользуются;
	//
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	ХарактеристикиИспользуются = ПолучитьИспользованиеХарактеристикНаСервере(Объект.Номенклатура);
	//УстановитьУсловноеОформление();
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	НастроитьЭлементыФормы();
	ПеречитатьНаименованияЭтаповПроизводстваДляТрудозатрат();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПеречитатьНаименованияЭтаповПроизводстваДляТрудозатрат();
КонецПроцедуры

/// процедуры по формированию дерева значений

&НаСервере
Функция ДобавитьГруппуНаСервере()
	
	НоваяГруппаАналитики = ДеревоТовары.ПолучитьЭлементы().Добавить();
	НоваяГруппаАналитики.ЭтоГруппа = Истина;
	Возврат НоваяГруппаАналитики.ПолучитьИдентификатор();
	
КонецФункции

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	Элементы.ДеревоТовары.ТекущаяСтрока = ДобавитьГруппуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлемент(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не добавлено ни одной группы в список! Сначала создайте группу, а затем добавляйте в нее элементы";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		ЭлементыДерева = ТекущаяСтрока.ПолучитьЭлементы();
		ГруппаАналитики = ТекущаяСтрока.ГруппаАналитики;
		НомерГруппыАналитики = ТекущаяСтрока.НомерГруппыАналитики;
	Иначе
		ЭлементыДерева = СтрокаРодитель.ПолучитьЭлементы();
		ГруппаАналитики = СтрокаРодитель.ГруппаАналитики;
		НомерГруппыАналитики = СтрокаРодитель.НомерГруппыАналитики;
	КонецЕсли;
	
	НоваяСтрока = ЭлементыДерева.Добавить();
	НоваяСтрока.НомерСтроки = ЭлементыДерева.Количество();
	НоваяСтрока.ГруппаАналитики = ГруппаАналитики;
	НоваяСтрока.НомерГруппыАналитики = НомерГруппыАналитики;
	НоваяСтрока.КлючСтроки = Объект.Товары.Количество() + 1;
	
	Элементы.ДеревоТовары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыНомерСтрокиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	ТекущаяСтрока.ГруппаАналитики = СокрЛП(ТекущаяСтрока.НомерСтроки);
	Если ЗначениеЗаполнено(ТекущаяСтрока.ГруппаАналитики) Тогда
		ТекущаяСтрока.НомерГруппыАналитики = ОбновитьГруппуАналитикиНаСервере(ТекущаяСтрока.НомерГруппыАналитики, ТекущаяСтрока.ГруппаАналитики);
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
		ЭлементДерева.ГруппаАналитики = ТекущаяСтрока.ГруппаАналитики;
		ЭлементДерева.НомерГруппыАналитики = ТекущаяСтрока.НомерГруппыАналитики;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементы(Команда)
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Удалить все элементы, входящие в выбранную группу?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ЭлементыДерева = СтрокаРодитель.ПолучитьЭлементы();
		ЭлементыДерева.Удалить(ТекущаяСтрока);
		//перенумеруем оставшиеся строки
		НомерСтроки = 1;
		Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
			СтрокаДерева.НомерСтроки = Строка(НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		ОбновитьТаблицуТоварыНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
	КолСтрок = ПодчиненныеСтроки.Количество() - 1;
	Индекс = 0;
	Пока Индекс < КолСтрок Цикл
		ПодчиненныеСтроки.Удалить(Индекс);
		КолСтрок = КолСтрок - 1;
	КонецЦикла;
	ДеревоТовары.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
	ОбновитьТаблицуТоварыНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПолучитьКурсВалютыНаСервере();
	СформироватьНадписьКурсВалютыНаСервере();
	СформироватьНадписиЗаполненияКурсовВалют();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыПроцентРучнойСкидкиСтрокойПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ПроцентЧислом = ?(ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидкиСтрокой)=Истина, Число(ТекущаяСтрока.ПроцентРучнойСкидкиСтрокой), 0);
		ТекущаяСтрока.ПроцентРучнойСкидки = ПроцентЧислом;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Введены некорректные данные! В поле должно быть указано число! Например, ""2.5""";
		Сообщение.Сообщить();
		ТекущаяСтрока.ПроцентРучнойСкидкиСтрокой = ВыбранноеЗначениеНаценкиСкидки;
		Возврат;
	КонецПопытки;
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		Строки = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентРучнойСкидки;
			ТекСтрока.ПроцентРучнойСкидкиСтрокой = ТекущаяСтрока.ПроцентРучнойСкидкиСтрокой;
			ТекСтрока.Цена = ТекСтрока.ЦенаВходная * (1 + (ТекСтрока.ПроцентРучнойСкидки/100));
			ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
		КонецЦикла;
		РассчитатьСуммуВГруппе(ТекущаяСтрока);
	Иначе
		Строки = ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
		ТекущаяСтрока.Цена = ТекущаяСтрока.ЦенаВходная * (1 + (ТекущаяСтрока.ПроцентРучнойСкидки/100));
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
		Мин = 100;
		Макс = -100;
		Для Каждого ТекСтрока Из Строки Цикл
			Если ТекСтрока.ПроцентРучнойСкидки > Макс Тогда
				Макс = ТекСтрока.ПроцентРучнойСкидки;
			КонецЕсли;
			Если ТекСтрока.ПроцентРучнойСкидки < Мин Тогда
				Мин = ТекСтрока.ПроцентРучнойСкидки;
			КонецЕсли;
		КонецЦикла;
		ТекущаяСтрока.ПолучитьРодителя().ПроцентРучнойСкидки = Мин;
		ТекущаяСтрока.ПолучитьРодителя().ПроцентРучнойСкидкиСтрокой = ?(Мин = Макс, ?(Мин=0, "", "("+Строка(Мин)+")"), "("+Строка(Мин)+")" + "-" + "("+Строка(Макс)+")");
		РассчитатьСуммуВГруппе(ТекущаяСтрока.ПолучитьРодителя());
	КонецЕсли;
	ВыбранноеЗначениеНаценкиСкидки = ТекущаяСтрока.ПроцентРучнойСкидкиСтрокой;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыКоличествоПриИзменении(Элемент)
	РассчитатьСуммуСтрокиТовары();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыЦенаВходнаяПриИзменении(Элемент)
	РассчитатьСуммуСтрокиТовары();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСтрокиТовары()
	
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено или ТекущаяСтрока.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока.Цена = ТекущаяСтрока.ЦенаВходная * (1 + (ТекущаяСтрока.ПроцентРучнойСкидки/100));
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
	РассчитатьСуммуВГруппе(СтрокаРодитель);	
	Модифицированность = Истина;
	
	//Если не ТекущаяСтрока.ЦенаВходная = ТекущаяСтрока.ЦенаВходнаяРасчетная Тогда
	//	ТекущаяСтрока.ДатаТарифа = ТекущаяДата();
	//	//ТекущаяСтрока.Курс = 1;
	//	ТекущаяСтрока.ЦенаВВалюте = ТекущаяСтрока.ЦенаВходная;
	//КонецЕсли;
	
КонецПроцедуры

/// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ВАЛЮТАМИ

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВалютаПриИзмененииЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, "При изменении валюты будут пересчитаны все цены номенклатуры в табличной части ""Товары"". Продолжить?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииЗавершение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Валюта = ВыбраннаяВалюта;
		Возврат;
	КонецЕсли;
	ВалютаПриИзмененииЗавершениеНаСервере();
	РассчитатьИтогиВПодвале();
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииЗавершениеНаСервере()
	ПолучитьКурсВалютыНаСервере();
	Если Не Объект.ДополнительныеЗатратыПроцентом Тогда
		СкорректироватьСуммуДополнительныхЗатрат();
	КонецЕсли;
	СформироватьНадписьКурсВалютыНаСервере();
	ПересчитатьЦеныТоваров();	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьСуммуДополнительныхЗатрат()
	
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВыбраннаяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта,  ДатаДокумента);
	Объект.ДополнительныеЗатратыСумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
	Объект.ДополнительныеЗатратыСумма,
	ВыбраннаяВалюта,Объект.Валюта,
	СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс,
	СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТоваров()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	ТаблицаКурсов = Новый ТаблицаЗначений;
	ТаблицаКурсов = Запрос.Выполнить().Выгрузить();
	
	ГруппыДерева = ДеревоТовары.ПолучитьЭлементы();
	Для Каждого Группа Из ГруппыДерева Цикл
		Группа.Сумма = 0;
		ЭлементыДерева = Группа.ПолучитьЭлементы();
		Для Каждого Элемент Из ЭлементыДерева Цикл
			Если Не ЗначениеЗаполнено(Элемент.ВалютаЦены) Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Валюта", Элемент.ВалютаЦены); 
			МассивСтрок = ТаблицаКурсов.НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрок.Количество() > 0 Тогда
				КурсВалюты = МассивСтрок[0].Курс;
				КратностьВалюты = МассивСтрок[0].Кратность;
			Иначе
				КурсВалюты = 1;
				КратностьВалюты = 1;
			КонецЕсли;
			Если Элемент.ВалютаЦены = Объект.Валюта Тогда
				Элемент.Курс = 1;
			Иначе
				Элемент.Курс = ?(Объект.Курс * Объект.Кратность = 0, 0, Окр((1 * КурсВалюты * КратностьВалюты) / (Объект.Курс * Объект.Кратность), 6));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Элемент.ЦенаВВалюте) Тогда
				Элемент.ЦенаВходная = Элемент.ЦенаВходная * Элемент.Курс;
				Элемент.ВалютаЦены = Объект.Валюта;
			Иначе
				Элемент.ЦенаВходная = Элемент.ЦенаВВалюте * Элемент.Курс;
			КонецЕсли;
			Элемент.ЦенаВходнаяРасчетная = Элемент.ЦенаВходная;
			Элемент.Цена = Элемент.ЦенаВходная * (1 + (Элемент.ПроцентРучнойСкидки/100));
			Элемент.Сумма = Элемент.Количество * Элемент.Цена;
			
			Группа.Сумма = Группа.Сумма + Элемент.Сумма;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКурсВалютыНаСервере()
	
	Результат = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.Дата);
	Объект.Курс = Результат.Курс;
	Объект.Кратность = Результат.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьКурсВалютыНаСервере()
	
	ВыбраннаяВалюта = Объект.Валюта;
	
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.Валюта = ВалютаРегУчета Тогда
		Элементы.КурсВалюты.Заголовок = "";
	Иначе
		Элементы.КурсВалюты.Заголовок = "по курсу " + Объект.Курс;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсыНаТекущуюДату(Команда)
	ПересчитатьКурсыНаСервере(ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсыНаДатуРасчета(Команда)
	ПересчитатьКурсыНаСервере(Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсыНаПроизвольнуюДату(Команда)
	
	//Перем ВыбЗнач;
	ВыбЗнач = ТекущаяДата();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КД);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите дату пересчета", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(ВыбЗнач, Параметры) Экспорт
	Если ВыбЗнач<>Неопределено Тогда
		ПересчитатьКурсыНаСервере(ВыбЗнач);
		СформироватьНадписиЗаполненияКурсовВалют();
		СформироватьНадписьКурсВалютыНаСервере();
		МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
		Для каждого Идентификатор Из МассивСтрок Цикл
			ТекСтрока = ДеревоТовары.НайтиПоИдентификатору(Идентификатор);
			СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
			Если СтрокаРодитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РассчитатьСуммуВГруппе(СтрокаРодитель);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсыПоРучнымЗначениям(Команда)
	Перем Курс;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(12,2,ДопустимыйЗнак.Неотрицательный);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("ПересчитатьКурсыПоРучнымЗначениямПослеВводаЗначения", ЭтаФорма);
	ПоказатьВводЗначения(Оповещение, Курс, "Введите курс " + Объект.Валюта, ОписаниеТипов);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсыПоРучнымЗначениямПослеВводаЗначения(ВыбЗнач, Параметры) Экспорт
	Если ВыбЗнач<>Неопределено И ВыбЗнач <> 0 Тогда
		ПересчитатьКурсыНаСервере(Объект.Дата, ВыбЗнач);
		СформироватьНадписиЗаполненияКурсовВалют();
		СформироватьНадписьКурсВалютыНаСервере();
		МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
		Для каждого Идентификатор Из МассивСтрок Цикл
			ТекСтрока = ДеревоТовары.НайтиПоИдентификатору(Идентификатор);
			СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
			Если СтрокаРодитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РассчитатьСуммуВГруппе(СтрокаРодитель);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсыНаСервере(Дата, РучноеЗначение = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних";
	Запрос.УстановитьПараметр("Дата", Дата);
	
	КурсыВалют = Запрос.Выполнить().Выгрузить();
	Если РучноеЗначение = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Валюта", Объект.Валюта);
		МассивСтрок = КурсыВалют.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Объект.Курс = МассивСтрок[0].Курс;
			Объект.Кратность = МассивСтрок[0].Кратность;
		КонецЕсли;
	Иначе		
		Объект.Курс = РучноеЗначение;
	КонецЕсли;
	
	МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		ТекСтрока = ДеревоТовары.НайтиПоИдентификатору(Идентификатор);
		Если ТекСтрока.ПолучитьРодителя() = Неопределено или не ЗначениеЗаполнено(ТекСтрока.ЦенаВходнаяРасчетная) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РучноеЗначение = Неопределено Тогда
			
			Если ТекСтрока.ВалютаЦены = Объект.Валюта Тогда
				ТекСтрока.Курс = 1;
			Иначе
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Валюта", ТекСтрока.ВалютаЦены);
				МассивСтрок = КурсыВалют.НайтиСтроки(ПараметрыОтбора);
				Если МассивСтрок.Количество() > 0 Тогда
					Курс = МассивСтрок[0].Курс;
					Кратность = МассивСтрок[0].Кратность;
				Иначе
					Курс = 1;
					Кратность = 1;
				КонецЕсли;
				Если Объект.Кратность = 0 Тогда
					НовыйКурс = 0;
				Иначе
					НовыйКурс = ?(Объект.Курс * Объект.Кратность = 0, 0, Окр((1 * Курс * Кратность) / (Объект.Курс * Объект.Кратность), 6));
				КонецЕсли;
				ТекСтрока.Курс = НовыйКурс;
			КонецЕсли;
			ТекСтрока.ЦенаВходная = (ТекСтрока.ЦенаВВалюте * ТекСтрока.Курс) * (1 - (ТекСтрока.СкидкаНаценкаПоставщика/100)); // посчитаем входную цену от тарифа и скидки
			ТекСтрока.ЦенаВходнаяРасчетная = ТекСтрока.ЦенаВходная;
			ТекСтрока.Цена = ТекСтрока.ЦенаВходная * (1 + (ТекСтрока.ПроцентРучнойСкидки/100));
			ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;	
			
		Иначе
			
			ТекСтрока.Курс = РучноеЗначение;
			ТекСтрока.ЦенаВходная = (ТекСтрока.ЦенаВВалюте * РучноеЗначение) * (1 - (ТекСтрока.СкидкаНаценкаПоставщика/100)); // посчитаем входную цену от тарифа и скидки
			ТекСтрока.ЦенаВходнаяРасчетная = ТекСтрока.ЦенаВходная;
			ТекСтрока.Цена = ТекСтрока.ЦенаВходная * (1 + (ТекСтрока.ПроцентРучнойСкидки/100));
			ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


///ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАГРУЗКЕ ИЗ ВНЕШНЕГО ФАЙЛА

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Истина);
	//ПараметрыФормы.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС);
	ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару", Ложь);
	//ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ПараметрыФормы.Вставить("ЗагружатьНоменклатуруПроизводителей", Истина);
	
	ОткрытьФорму(
	"Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
	ПараметрыФормы,
	ЭтаФорма,
	УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.Рин1_ПодборТоваровВВариантРасчета.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	КонецЕсли;
	
	//ТекущаяСтрока = Элементы.ТаблицаВариантовПараметров.ТекущиеДанные;
	//Если ТекущаяСтрока <> Неопределено Тогда
	//	Если ТекущийЭлемент.Имя = "ТаблицаВариантовПараметров" Тогда
	//		ТекущаяСтрока[ТекущийЭлемент.ТекущийЭлемент.Имя] = ВыбранноеЗначение;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	//СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
	Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		Если Не ЗначениеЗаполнено(СтрокаТЧТовары.Номенклатура) И ЗначениеЗаполнено(СтрокаТоваров.НоменклатураПроизводителей) Тогда
			СтрокаТЧТовары.Номенклатура = СтрокаТоваров.НоменклатураПроизводителей;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧТовары.Номенклатура) Тогда			
			СтрокаТЧТовары.Вес = ПолучитьВесНоменклатурыНаСервере(СтрокаТЧТовары.Номенклатура);
			СтрокаТЧТовары.Объем = ПолучитьОбъемНоменклатурыНаСервере(СтрокаТЧТовары.Номенклатура);
			Если ТипЗнч(СтрокаТЧТовары.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				СтрокаТЧТовары.ВариантРасчета = ПолучитьСпецификациюНоменклатурыНаСервере(СтрокаТЧТовары.Номенклатура, СтрокаТЧТовары.Характеристика, Объект.Дата);
			КонецЕсли;
			
			РеквизитыВалюты = ПолучитьРеквизитыВалютыНаСервере(СтрокаТЧТовары.Номенклатура, Объект.Дата, Объект.Валюта, Объект.Курс, Объект.Кратность);
			СтрокаТЧТовары.ВалютаЦены = РеквизитыВалюты.ВалютаЦены;
			СтрокаТЧТовары.Курс = РеквизитыВалюты.Курс;
			СтрокаТЧТовары.ДатаТарифа = РеквизитыВалюты.ДатаТарифа; // дата тарифа
			СтрокаТЧТовары.ЦенаВВалюте = РеквизитыВалюты.ЦенаВВалюте; // тариф
			СтрокаТЧТовары.СкидкаНаценкаПоставщика = РеквизитыВалюты.СкидкаНаценкаПоставщика; // базовая скидка от тарифа
			СтрокаТЧТовары.ЦенаВходная = (СтрокаТЧТовары.ЦенаВВалюте * СтрокаТЧТовары.Курс) * (1 - (СтрокаТЧТовары.СкидкаНаценкаПоставщика/100)); // посчитаем входную цену от тарифа и скидки
			СтрокаТЧТовары.ЦенаВходнаяРасчетная = СтрокаТЧТовары.ЦенаВходная;
			СтрокаТЧТовары.Цена = СтрокаТЧТовары.ЦенаВходная * (1 + (СтрокаТЧТовары.ПроцентРучнойСкидки/100));
			СтрокаТЧТовары.Сумма = СтрокаТЧТовары.Количество * СтрокаТЧТовары.Цена;
		КонецЕсли;
		//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	ОбновитьДеревоТоварыНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	Если ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0 Или Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	СтрокаПриемник = ДеревоТовары.НайтиПоИдентификатору(Строка);
	ПеренестиВыделенныеСтрокиВНовуюГруппу(СтрокаПриемник);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПроизводстваПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ЭтапыПроизводства.ТекущиеДанные;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЭтапПроизводства", ТекущиеДанные.НомерСтроки);
	
	МассивСтрок = Объект.Трудозатраты.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрок", МассивСтрок);
		ДопПараметры.Вставить("ИндексСтрокиКУдалению", ТекущиеДанные.ПолучитьИдентификатор());
		ДопПараметры.Вставить("НомерСтроки", ТекущиеДанные.НомерСтроки);
		Отказ = Истина;
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередУдалениемЭтапа", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, 
		"При удалении этапа будет очищено поле ""Этап производства"" во всех строках таб. части ""Трудозатраты"" (количество строк "+МассивСтрок.Количество()+"). Продолжить?", Режим, 0);
	Иначе
		Для Каждого ТекСтрока Из Объект.Трудозатраты Цикл
			Если ТекСтрока.ЭтапПроизводства > ТекущиеДанные.НомерСтроки Тогда
				ТекСтрока.ЭтапПроизводства = ТекСтрока.ЭтапПроизводства - 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПередУдалениемЭтапа(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДопПараметры.МассивСтрок Цикл
		ТекСтрока.ЭтапПроизводства = 0;
	КонецЦикла;
	
	Объект.ЭтапыПроизводства.Удалить(ДопПараметры.ИндексСтрокиКУдалению);
	
	Для Каждого ТекСтрока Из Объект.Трудозатраты Цикл
		Если ТекСтрока.ЭтапПроизводства > ДопПараметры.НомерСтроки Тогда
			ТекСтрока.ЭтапПроизводства = ТекСтрока.ЭтапПроизводства - 1;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	СформироватьСписокВыбораЭтаповПроизводства();
	ПеречитатьНаименованияЭтаповПроизводстваДляТрудозатрат();
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПроизводстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СформироватьСписокВыбораЭтаповПроизводства();
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПроизводстваПослеУдаления(Элемент)
	СформироватьСписокВыбораЭтаповПроизводства();
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПроизводстваНаименованиеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ЭтапыПроизводства.ТекущиеДанные;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЭтапПроизводства", ТекущиеДанные.НомерСтроки);
	МассивСтрок = Объект.Трудозатраты.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТрудозатрат Из МассивСтрок Цикл
		СтрокаТрудозатрат.НаименованиеЭтапаПроизводства = ТекущиеДанные.Наименование;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыВыводитьВКППриИзменении(Элемент)
	//++Шерстюк Ю.Ю. 29.01.21 не требуется выделение группы по задаче 3131 п.4
	//ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	//Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
	//	ЭлементыДерева = ТекущаяСтрока.ПолучитьЭлементы();
	//	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
	//		ЭлементДерева.ВыводитьВКП = ТекущаяСтрока.ВыводитьВКП;
	//	КонецЦикла;
	//Иначе
	//	ЭлементыДерева = ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	//	ОтмеченыВсе = Истина;
	//	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
	//		Если ЭлементДерева.ВыводитьВКП = Ложь Тогда
	//			ОтмеченыВсе = Ложь;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	//ТекущаяСтрока.ПолучитьРодителя().ВыводитьВКП = ОтмеченыВсе;
	//КонецЕсли;
	//--Шерстюк Ю.Ю.
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГруппу(Команда)
	
	ТекСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	ТекущийРодительСтрокой = "";
	ТекущийРодительНомер = 0;
	Если Не ТекСтрока = Неопределено Тогда
		СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
		Если Не СтрокаРодитель = Неопределено Тогда
			ТекущийРодительСтрокой = СтрокаРодитель.ГруппаАналитики;
			ТекущийРодительНомер = СтрокаРодитель.НомерГруппыАналитики;
		КонецЕсли;
	КонецЕсли;
	
	ГруппыДерева = ДеревоТовары.ПолучитьЭлементы();
	СписокГрупп = Новый СписокЗначений;
	Для Каждого ГруппаДерева Из ГруппыДерева Цикл
		СписокГрупп.Добавить(ГруппаДерева.НомерГруппыАналитики, ГруппаДерева.ГруппаАналитики);
	КонецЦикла;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлементаИзменитьГруппу", ЭтаФорма);
	СписокГрупп.ПоказатьВыборЭлемента(Оповещение,"Выберите группу", СписокГрупп.НайтиПоЗначению(ТекущийРодительНомер));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыделенныеСтрокиВНовуюГруппу(СтрокаПриемник)
	
	Изменен = Ложь;
	МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
	КоличествоСтрок = МассивСтрок.Количество()-1;
	Индекс = 0;
	Пока Индекс <= КоличествоСтрок Цикл
		//Для каждого Идентификатор Из МассивСтрок Цикл
		Идентификатор = МассивСтрок[Индекс];
		ТекущаяСтрока = ДеревоТовары.НайтиПоИдентификатору(Идентификатор);
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		Если СтрокаРодитель = Неопределено Или СтрокаРодитель = СтрокаПриемник Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока.НомерСтроки = СтрокаПриемник.ПолучитьЭлементы().Количество() + 1;
		ТекущаяСтрока.ГруппаАналитики = СтрокаПриемник.ГруппаАналитики;
		ТекущаяСтрока.НомерГруппыАналитики = СтрокаПриемник.НомерГруппыАналитики;
		ПеренестиСтрокуВНовуюГруппу(ТекущаяСтрока, СтрокаПриемник);
		
		//перенумеруем оставшиеся строки
		РассчитатьСуммуВГруппе(СтрокаРодитель);
		ЭлементыДерева = СтрокаРодитель.ПолучитьЭлементы();
		НомерСтроки = 1;
		Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
			Если СтрокаДерева = ТекущаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДерева.НомерСтроки = Строка(НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		КоличествоСтрок = КоличествоСтрок - 1;
		Изменен = Истина;
	КонецЦикла;
	
	РассчитатьСуммуВГруппе(СтрокаПриемник);
	
	Если Изменен Тогда
		Модифицированность = Истина;
		ОбновитьТаблицуТоварыНаСервере();
		//ОбновитьДеревоТоварыНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуВНовуюГруппу(СтрокаДерева, ГруппаПриемник)
	НоваяСтрока = ГруппаПриемник.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева); 
	//нужно для рекурсивного перемещения строк. в нашем случае максимальный уровень вложенности - 2
	//Для каждого ПодСтрока Из СтрокаДерева.Строки Цикл
	//	ПеренестиСтрокуВНовуюГруппу(ПодСтрока, НоваяСтрока);
	//КонецЦикла;
	СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаДерева);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлементаИзменитьГруппу(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранноеЗначение = ВыбранныйЭлемент.Значение;
		ВыбранноеПредставление = ВыбранныйЭлемент.Представление;
	КонецЕсли;
	
	СтрокиГрупп = ДеревоТовары.ПолучитьЭлементы();
	Для Каждого СтрокаПриемник Из СтрокиГрупп Цикл
		Если СтрокаПриемник.НомерГруппыАналитики = ВыбранноеЗначение Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПеренестиВыделенныеСтрокиВНовуюГруппу(СтрокаПриемник);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ДеревоТовары.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ВыбранноеЗначениеНаценкиСкидки = ТекущаяСтрока.ПроцентРучнойСкидкиСтрокой;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыПриИзменении(Элемент)
	Модифицированность = Истина;
	РассчитатьИтогиВПодвалеПриИзмененииДереваТовары();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапПроизводства(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлементаЗаполнитьЭтап", ЭтаФорма);
	Элементы.ДеревоТоварыЭтапПроизводства.СписокВыбора.ПоказатьВыборЭлемента(Оповещение,"Выберите этап производства");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлементаЗаполнитьЭтап(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранноеЗначение = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Изменен = Ложь;
	МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		ТекСтрока = ДеревоТовары.НайтиПоИдентификатору(Идентификатор);
		СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
		Если СтрокаРодитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекСтрока.ЭтапПроизводства = ВыбранноеЗначение;
		Изменен = Истина;
	КонецЦикла;
	
	Если Изменен Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыПослеУдаления(Элемент)
	
	ЭлементыДерева = ДеревоТовары.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		РассчитатьСуммуВГруппе(ЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	ЭлементыДерева = ДеревоТовары.ПолучитьЭлементы();
	Для Каждого Строка Из ЭлементыДерева Цикл
		Элементы.ДеревоТовары.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	ЭлементыДерева = ДеревоТовары.ПолучитьЭлементы();
	Для Каждого Строка Из ЭлементыДерева Цикл
		Элементы.ДеревоТовары.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеЗатратыПроцентомПриИзменении(Элемент)
	Если Объект.ДополнительныеЗатратыПроцентом = Истина Тогда
		Элементы.ДополнительныеЗатратыСумма.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ДополнительныеЗатратыПроцент.Вид = ВидПоляФормы.ПолеВвода;
	Иначе
		Элементы.ДополнительныеЗатратыСумма.Вид = ВидПоляФормы.ПолеВвода;
		Элементы.ДополнительныеЗатратыПроцент.Вид = ВидПоляФормы.ПолеНадписи;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеЗатратыПроцентПриИзменении(Элемент)
	РассчитатьИтогиВПодвале();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеЗатратыСуммаПриИзменении(Элемент)
	РассчитатьИтогиВПодвале();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогиВПодвале(ОткрытиеФормы = Ложь)
	
	Если Не ОткрытиеФормы Тогда
		ОбновитьТаблицуТоварыНаСервере();
		Объект.Цена = Объект.Товары.Итог("Сумма") + Объект.Трудозатраты.Итог("Сумма");
		Если Объект.Цена = 0 Тогда
			Объект.ДополнительныеЗатратыСумма = 0;
		Иначе
			Если Объект.ДополнительныеЗатратыПроцентом = Истина Тогда
				Объект.ДополнительныеЗатратыСумма = Объект.Цена * Объект.ДополнительныеЗатратыПроцент / 100;
			Иначе
				Объект.ДополнительныеЗатратыПроцент = ?(Объект.Цена = 0, 0, Объект.ДополнительныеЗатратыСумма / Объект.Цена * 100);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.ДекорацияЗаголовокИтогоПоРасчету.Заголовок = "" + Объект.Цена + " + " + Объект.ДополнительныеЗатратыСумма + " = ";
	ИтогоПоРасчету = Объект.Цена + Объект.ДополнительныеЗатратыСумма;
	
	Элементы.ДекорацияЗаголовокИтогоТоварыТрудозатраты.Заголовок = "" + Объект.Товары.Итог("Сумма") + " + " + Объект.Трудозатраты.Итог("Сумма") + " = ";
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогиВПодвалеПриИзмененииДереваТовары()
	
	СтрокиПервогоУровня = ДеревоТовары.ПолучитьЭлементы();
	СуммаТоваров = 0;
	Для Каждого ТекСтрока Из СтрокиПервогоУровня Цикл
		СуммаТоваров = СуммаТоваров + ТекСтрока.Сумма;
	КонецЦикла;
	Объект.Цена = СуммаТоваров + Объект.Трудозатраты.Итог("Сумма");
	Если Объект.ДополнительныеЗатратыПроцентом = Истина Тогда
		Объект.ДополнительныеЗатратыСумма = Объект.Цена * Объект.ДополнительныеЗатратыПроцент / 100;
	Иначе
		Объект.ДополнительныеЗатратыПроцент = ?(Объект.Цена = 0, 0, Объект.ДополнительныеЗатратыСумма / Объект.Цена * 100);
	КонецЕсли;
	Элементы.ДекорацияЗаголовокИтогоПоРасчету.Заголовок = "" + Объект.Цена + " + " + Объект.ДополнительныеЗатратыСумма + " = ";
	ИтогоПоРасчету = Объект.Цена + Объект.ДополнительныеЗатратыСумма;
	
	Элементы.ДекорацияЗаголовокИтогоТоварыТрудозатраты.Заголовок = "" + СуммаТоваров + " + " + Объект.Трудозатраты.Итог("Сумма") + " = ";
	
	ИтогоСуммаТовары = СуммаТоваров;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполнитьВходныеЦеныНаДату(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Изменен = Ложь;
	
	МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		ТекСтрока = ДеревоТовары.НайтиПоИдентификатору(Идентификатор);
		СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
		Если СтрокаРодитель = Неопределено или не ЦеныУстановлены(ТекСтрока.Номенклатура, ВыбранныйЭлемент, Объект.Валюта) Тогда //если ручной ввод то не обрабатываем
			Продолжить;
		КонецЕсли;
		РеквизитыВалюты = ПолучитьРеквизитыВалютыНаСервере(ТекСтрока.Номенклатура, ВыбранныйЭлемент, Объект.Валюта, Объект.Курс, Объект.Кратность);
		ТекСтрока.ВалютаЦены = РеквизитыВалюты.ВалютаЦены;
		ТекСтрока.Курс = РеквизитыВалюты.Курс;
		ТекСтрока.ДатаТарифа = РеквизитыВалюты.ДатаТарифа; // дата тарифа
		ТекСтрока.ЦенаВВалюте = РеквизитыВалюты.ЦенаВВалюте; // тариф
		ТекСтрока.СкидкаНаценкаПоставщика = РеквизитыВалюты.СкидкаНаценкаПоставщика; // базовая скидка от тарифа
		ТекСтрока.ЦенаВходная = (ТекСтрока.ЦенаВВалюте * ТекСтрока.Курс) * (1 - (ТекСтрока.СкидкаНаценкаПоставщика/100)); // посчитаем входную цену от тарифа и скидки
		ТекСтрока.ЦенаВходнаяРасчетная = ТекСтрока.ЦенаВходная;
		ТекСтрока.ПроцентРучнойСкидки = СтрокаРодитель.ПроцентРучнойСкидки;
		ТекСтрока.ПроцентРучнойСкидкиСтрокой = ?(ТекСтрока.ПроцентРучнойСкидки = 0, "", Строка(ТекСтрока.ПроцентРучнойСкидки));
		ТекСтрока.Цена = ТекСтрока.ЦенаВходная * (1 + (ТекСтрока.ПроцентРучнойСкидки/100));
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
		Если ТекСтрока.Цена = 0 Тогда
			Сообщить("В строке №" + ТекСтрока.НомерСтроки + " выходная цена отсутствует!",СтатусСообщения.Важное);		
		КонецЕсли;
		РассчитатьСуммуВГруппе(СтрокаРодитель);
		Изменен = Истина;
	КонецЦикла;
	
	Если Изменен Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

//
&НаСервереБезКонтекста
Функция ЦеныУстановлены(Номенклатура, Дата, Валюта)
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 		
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаВВалюте
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			Номенклатура = &Номенклатура
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
		
		Запрос.УстановитьПараметр("ВидЦены", Константы.ГИГ_ОсновнойВидЦеныТарифаНоменклатурыСНДС.Получить());
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		//РезультатЗапроса.Выгрузить();
		Если не РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе //ГИГ_НоменклатураПроизводителей
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ТарифСНДС КАК ТарифСНДС
		|ИЗ
		|	РегистрСведений.ГИГ_ЦеныНоменклатурыПроизводителей.СрезПоследних(
		|			&Дата,
		|			НоменклатураПроизводителя = &Номенклатура
		|				И ВалютаТарифа = &Валюта) КАК ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ТарифСНДС
		|ИЗ
		|	РегистрСведений.ГИГ_ЦеныНоменклатурыПроизводителей.СрезПоследних(
		|			&Дата,
		|			НоменклатураПроизводителя = &Номенклатура
		|				И ВалютаТарифа <> &Валюта) КАК ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|		ПО ГИГ_ЦеныНоменклатурыПроизводителейСрезПоследних.ВалютаТарифа = КурсыВалютСрезПоследних.Валюта";
		
		Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		//РезультатЗапроса.Выгрузить();
		Если не РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЦеныУстановленны()

&НаКлиенте
Процедура ЗаполнитьВходныеЦеныНаДату(Команда)
	
	//Перем ВыбЗнач;
	ВыбЗнач = ТекущаяДата();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КД);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаполнитьВходныеЦеныНаДату", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите дату тарифа", ОписаниеТипов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКурсамиНаСервере(ДатаКурсов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	|	КурсыВалютСрезПоследних.Период КАК ДатаКурса
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			,
	|			Период <= &ДатаКурсов
	|				И НЕ Валюта.Код = &КодРубля) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКурсов", ДатаКурсов);
	Запрос.УстановитьПараметр("КодРубля", "643");
	
	ТаблицаКурсов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаКурсов.Количество() > 0 Тогда
		Объект.КурсыВалют.Загрузить(ТаблицаКурсов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполнитьТекущимиКурсами(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКурсамиНаСервере(ВыбранныйЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиКурсами(Команда)
	
	//Перем ВыбЗнач;
	ВыбЗнач = ТекущаяДата();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КД);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаполнитьТекущимиКурсами", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите дату курсов", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсыПоРучнымЗначениямДокумента(Команда)
	
	ПересчитатьКурсыПоРучнымЗначениямДокументаНаСервере();
	СформироватьНадписиЗаполненияКурсовВалют();
	СформироватьНадписьКурсВалютыНаСервере();
	МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		ТекСтрока = ДеревоТовары.НайтиПоИдентификатору(Идентификатор);
		СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
		Если СтрокаРодитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РассчитатьСуммуВГруппе(СтрокаРодитель);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсыПоРучнымЗначениямДокументаНаСервере()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Валюта", Объект.Валюта);
	МассивСтрок = Объект.КурсыВалют.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 Тогда
		Объект.Курс = МассивСтрок[0].Курс;
		Объект.Кратность = МассивСтрок[0].Кратность;
	КонецЕсли;
	
	МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		ТекСтрока = ДеревоТовары.НайтиПоИдентификатору(Идентификатор);
		Если ТекСтрока.ПолучитьРодителя() = Неопределено или не ЗначениеЗаполнено(ТекСтрока.ЦенаВходнаяРасчетная) Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.ВалютаЦены = Объект.Валюта Тогда
			ТекСтрока.Курс = 1;
		Иначе
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Валюта", ТекСтрока.ВалютаЦены);
			МассивСтрок = Объект.КурсыВалют.НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрок.Количество() > 0 Тогда
				Курс = МассивСтрок[0].Курс;
				Кратность = МассивСтрок[0].Кратность;
			Иначе
				Курс = 1;
				Кратность = 1;
			КонецЕсли;
			Если Объект.Кратность = 0 Тогда
				НовыйКурс = 0;
			Иначе
				//НовыйКурс = ?(Объект.Курс * Объект.Кратность = 0, 0, Окр((1 * Курс * Кратность) / (Объект.Курс * Объект.Кратность), 6));
			КонецЕсли;
			ТекСтрока.Курс = Курс;
		КонецЕсли;
		ТекСтрока.ЦенаВходная = (ТекСтрока.ЦенаВВалюте * ТекСтрока.Курс) * (1 - (ТекСтрока.СкидкаНаценкаПоставщика/100)); // посчитаем входную цену от тарифа и скидки
		ТекСтрока.ЦенаВходнаяРасчетная = ТекСтрока.ЦенаВходная;
		ТекСтрока.Цена = ТекСтрока.ЦенаВходная * (1 + (ТекСтрока.ПроцентРучнойСкидки/100));
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаценкуСкидку(Команда)
	
	//Перем ВыбЗнач;
	ВыбЗнач = ТекущаяДата();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(4,2,ДопустимыйЗнак.Любой);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , , КЧ);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаполнитьНаценкуСкидку", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите % наценки (скидки)", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполнитьНаценкуСкидку(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивСтрок Цикл
		ТекущаяСтрока = ДеревоТовары.НайтиПоИдентификатору(Идентификатор);
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		Если СтрокаРодитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока.ПроцентРучнойСкидки = ВыбранныйЭлемент;
		ТекущаяСтрока.ПроцентРучнойСкидкиСтрокой = Строка(ВыбранныйЭлемент);
		ТекущаяСтрока.Цена = ТекущаяСтрока.ЦенаВходная * (1 + (ТекущаяСтрока.ПроцентРучнойСкидки/100));
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
		РассчитатьСуммуВГруппе(СтрокаРодитель);
	КонецЦикла;		
	
	ВыбранноеЗначениеНаценкиСкидки = ВыбранныйЭлемент;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьТарифы(Команда)
	Элементы.ДеревоТоварыЦеноваяГруппа.Видимость = Не Элементы.ДеревоТоварыЦеноваяГруппа.Видимость;
	Элементы.ДеревоТоварыДатаТарифа.Видимость = Не Элементы.ДеревоТоварыДатаТарифа.Видимость;
	Элементы.ДеревоТоварыЦенаВВалюте.Видимость = Не Элементы.ДеревоТоварыЦенаВВалюте.Видимость;
	Элементы.ДеревоТоварыВалютаЦены.Видимость = Не Элементы.ДеревоТоварыВалютаЦены.Видимость;
	Элементы.ДеревоТоварыКурс.Видимость = Не Элементы.ДеревоТоварыКурс.Видимость;
	Элементы.ДеревоТоварыСкидкаНаценкаПоставщика.Видимость = Не Элементы.ДеревоТоварыСкидкаНаценкаПоставщика.Видимость;
	Элементы.ДеревоТоварыГруппаТарифВалюта.Видимость = Не Элементы.ДеревоТоварыГруппаТарифВалюта.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLОписаниеДокументСформирован(Элемент)
	
	//Файл = Новый ЧтениеТекста("C:\ImageArchive\as.txt");
	//СтрокаФайла = Файл.Прочитать();	
	//Файл.Закрыть();
	//Элемент.Документ.Body.innerHTML = СтрокаФайла;
	Элемент.Документ.Body.innerHTML = Объект.ОписаниеТовара;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLОписаниеДокументСформирован2(Элемент)
	
	Элемент.Документ.Body.innerHTML = Объект.ОписаниеТовара2;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактироватьОписание(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("Рин1_ПослеЗакрытияВопроса2", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для редактирования описания необходимо записать справочник. Продолжить выполнение операции?';"
		+ " en = 'Do you want to continue?'"), Режим, 0);	
		
	Иначе 
		
		Документ = Элементы.ПолеHTMLОписание.Документ;
		ТекстДляРедактирования = Документ.body.innerHTML;
		Параметр = Новый Структура("HTML", ТекстДляРедактирования);
		
		ИмяОткрываемойФормы = "Обработка.Рин1_РедакторHTML.Форма.Форма";
		ОткрытьФорму(ИмяОткрываемойФормы,Параметр,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаКомандыЗавершение",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактироватьОписание2(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("Рин1_ПослеЗакрытияВопроса2", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для редактирования описания необходимо записать справочник. Продолжить выполнение операции?';"
		+ " en = 'Do you want to continue?'"), Режим, 0);	
		
	Иначе 
		
		Документ = Элементы.ПолеHTMLОписание2.Документ;
		ТекстДляРедактирования = Документ.body.innerHTML;
		Параметр = Новый Структура("HTML", ТекстДляРедактирования);
		
		ИмяОткрываемойФормы = "Обработка.Рин1_РедакторHTML.Форма.Форма";
		ОткрытьФорму(ИмяОткрываемойФормы,Параметр,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаКомандыЗавершение2",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		Элементы.ПолеHTMLОписание.Документ.body.innerHTML = Результат;
		//Объект.ОписаниеТовара = Результат;
		ЗаписатьОписание(Результат);
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОписание(Результат)
	Объект.ОписаниеТовара = Результат;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОписание2(Результат)
	Объект.ОписаниеТовара2 = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыЗавершение2(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		Элементы.ПолеHTMLОписание2.Документ.body.innerHTML = Результат;
		//Объект.ОписаниеТовара2 = Результат;
		ЗаписатьОписание2(Результат);
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Объект.Ссылка.Пустая() и ТекущаяСтраница.Имя = "ГруппаОписание"  Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("Рин1_ПослеЗакрытияВопроса2", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для создания описания необходимо записать справочник. Продолжить выполнение операции?';"
		+ " en = 'Do you want to continue?'"), Режим, 0);	
		
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "ГруппаВыбранныеЗначенияПараметров" и не ЗначениеЗаполнено(Объект.НоменклатураПроекта)  Тогда
		
		Сообщить("Для отображения данных на странице необходимо выбрать номенклатуру проекта (с основным вариантом параметров) и записать справочник!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПослеЗакрытияВопроса2(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе 
		ЭтотОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	//ДеревоЗначенийПараметров.ПолучитьЭлементы().Очистить();
	ОбновитьДеревоЗначенийНаСервере();
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма,"ДеревоЗначенийПараметров","*",Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияПараметровНаСервере()
	
	Объект.ЗначенияПараметров.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гиг_ПредметыРасчетаНаборПараметров.Ссылка КАК ПредметРасчета,
	|	гиг_ЗначенияПараметровПредметовРасчетаТ.Ссылка КАК ЗначениеПараметра
	|ИЗ
	|	Справочник.гиг_ПредметыРасчета.НаборПараметров КАК гиг_ПредметыРасчетаНаборПараметров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гиг_ЗначенияПараметровПредметовРасчета КАК гиг_ЗначенияПараметровПредметовРасчетаТ
	|		ПО гиг_ПредметыРасчетаНаборПараметров.Параметр = гиг_ЗначенияПараметровПредметовРасчетаТ.Владелец";
	
	//черевач сказал что не надо отбираться по предмету расчета
	//"ВЫБРАТЬ
	//|	гиг_ПредметыРасчетаНаборПараметров.Ссылка КАК ПредметРасчета,
	//|	гиг_ЗначенияПараметровПредметовРасчетаТ.Ссылка КАК ЗначениеПараметра
	//|ИЗ
	//|	Справочник.гиг_ПредметыРасчета.НаборПараметров КАК гиг_ПредметыРасчетаНаборПараметров
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гиг_ЗначенияПараметровПредметовРасчета КАК гиг_ЗначенияПараметровПредметовРасчетаТ
	//|		ПО гиг_ПредметыРасчетаНаборПараметров.Параметр = гиг_ЗначенияПараметровПредметовРасчетаТ.Владелец
	//|ГДЕ
	//|	гиг_ПредметыРасчетаНаборПараметров.Ссылка = &ПредметРасчета";
	
	//Запрос.УстановитьПараметр("ПредметРасчета", Параметры.Ключ.НоменклатураПроекта.ЗадачаПроекта.ГИГ_ПредметРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗначениеПараметра) Тогда
			
			НоваяСтрока = Объект.ЗначенияПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи, "ПредметРасчета, ЗначениеПараметра");
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьДеревоЗначенийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗначенияПараметров.ПредметРасчета КАК Справочник.гиг_ПредметыРасчета) КАК ПредметРасчета,
	|	ВЫРАЗИТЬ(ЗначенияПараметров.ЗначениеПараметра КАК Справочник.гиг_ЗначенияПараметровПредметовРасчета) КАК ЗначениеПараметра
	|ПОМЕСТИТЬ ВТ_ЗначенияПараметров
	|ИЗ
	|	&ЗначенияПараметров КАК ЗначенияПараметров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияПараметров.ПредметРасчета КАК ПредметРасчета,
	|	гиг_ПредметыРасчетаНаборПараметров.Параметр КАК Параметр
	|ПОМЕСТИТЬ ВТ_ПараметрыПредметовРасчета
	|ИЗ
	|	ВТ_ЗначенияПараметров КАК ВТ_ЗначенияПараметров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гиг_ПредметыРасчета.НаборПараметров КАК гиг_ПредметыРасчетаНаборПараметров
	|		ПО ВТ_ЗначенияПараметров.ПредметРасчета = гиг_ПредметыРасчетаНаборПараметров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПараметрыПредметовРасчета.ПредметРасчета КАК ПредметРасчета,
	|	ВТ_ПараметрыПредметовРасчета.ПредметРасчета.Представление КАК ПредметРасчетаПредставление,
	|	ВТ_ПараметрыПредметовРасчета.Параметр КАК Параметр,
	|	ВТ_ПараметрыПредметовРасчета.Параметр.Представление КАК ПараметрПредставление,
	|	ВТ_ЗначенияПараметров.ЗначениеПараметра КАК ЗначениеПараметра,
	|	ВТ_ЗначенияПараметров.ЗначениеПараметра.Представление КАК ЗначениеПараметраПредставление
	|ИЗ
	|	ВТ_ПараметрыПредметовРасчета КАК ВТ_ПараметрыПредметовРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗначенияПараметров КАК ВТ_ЗначенияПараметров
	|		ПО ВТ_ПараметрыПредметовРасчета.ПредметРасчета = ВТ_ЗначенияПараметров.ПредметРасчета
	|			И ВТ_ПараметрыПредметовРасчета.Параметр = ВТ_ЗначенияПараметров.ЗначениеПараметра.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Параметр,
	|	ЗначениеПараметра
	|ИТОГИ ПО
	|	ПредметРасчета,
	|	Параметр,
	|	ЗначениеПараметра ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ЗначенияПараметров", Объект.ЗначенияПараметров.Выгрузить());
	
	ЭлементыДерева = ЭтаФорма.ДеревоЗначенийПараметров.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	ЭтаФорма.Элементы.ДеревоЗначенийПараметров.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	ВыборкаПредметРасчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПредметРасчета.Следующий() Цикл
		
		ТекущаяВетвь = ЭлементыДерева.Добавить();
		ТекущаяВетвь.Представление  = ВыборкаПредметРасчета.ПредметРасчетаПредставление;
		ТекущаяВетвь.ПредметРасчета = ВыборкаПредметРасчета.ПредметРасчета;
		ТекущаяВетвь.Оформление     = 1;
		
		ЭлементыВетви = ТекущаяВетвь.ПолучитьЭлементы();
		
		ВыборкаПараметр = ВыборкаПредметРасчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПараметр.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаПараметр.Параметр) Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяВетвь = ЭлементыВетви.Добавить();
			ТекущаяВетвь.Представление  = ВыборкаПараметр.ПараметрПредставление;
			ТекущаяВетвь.Параметр       = ВыборкаПараметр.Параметр;
			ТекущаяВетвь.ПредметРасчета = ВыборкаПараметр.ПредметРасчета;
			ТекущаяВетвь.Оформление     = 2;
			
			//
			ЗаполнитьДеревоЗначенийРекурсивно(ВыборкаПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ЗначениеПараметра"), ТекущаяВетвь.ПолучитьЭлементы());			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоЗначенийРекурсивно(Выборка, ДеревоЗначений)
	
	Оформление = 4;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяВетвь = ДеревоЗначений.Добавить();
		ТекущаяВетвь.Представление     = Выборка.ЗначениеПараметраПредставление;
		ТекущаяВетвь.ПредметРасчета    = Выборка.ПредметРасчета;
		ТекущаяВетвь.Параметр          = Выборка.Параметр;
		ТекущаяВетвь.ЗначениеПараметра = Выборка.ЗначениеПараметра;
		
		//строку с ВЫДЕЛЕНием расцвечиваем в условном оформлении
		Отбор = Новый Структура;
		Отбор.Вставить("ЗначениеПараметра",Выборка.ЗначениеПараметра);
		Отбор.Вставить("Выделен",Истина);
		Массив = Объект.ЗначенияПараметров.НайтиСтроки(Отбор);
		Если Массив.Количество() > 0 Тогда
			ТекущаяВетвь.Выделен = Массив[0].Выделен;
		Иначе 
			ТекущаяВетвь.Выделен = Ложь;
		КонецЕсли;
		
		ТекущаяВетвь.Оформление = ЗаполнитьДеревоЗначенийРекурсивно(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ЗначениеПараметра"), ТекущаяВетвь.ПолучитьЭлементы());
		
		//удаляем лишние строки
		Если (ДеревоЗначений.количество() = 2 и не ЗначениеЗаполнено(ДеревоЗначений[0].ЗначениеПараметра.Родитель) и ЗначениеЗаполнено(ДеревоЗначений[1].ЗначениеПараметра.Родитель)) или
			(ДеревоЗначений.количество() = 2 и ДеревоЗначений[0].Оформление = 4 и ЗначениеЗаполнено(ДеревоЗначений[0].ЗначениеПараметра.Родитель)) Тогда
			
			ДеревоЗначений.Удалить(0);
			
		КонецЕсли;
		
		Оформление = 3;
		
	КонецЦикла; 
	
	Возврат Оформление;
	
КонецФункции

&НаКлиенте
Процедура ДеревоЗначенийПараметровПриАктивизацииЯчейки(Элемент)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено и  ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЗначениеПараметра) Тогда
		
		Если Элемент.ТекущиеДанные.Выделен Тогда		
			Элемент.ТекущиеДанные.Выделен = Ложь;		
		Иначе
			Элемент.ТекущиеДанные.Выделен = Истина;		
		КонецЕсли;
		
		Отбор = Новый Структура("ЗначениеПараметра",Элемент.ТекущиеДанные.ЗначениеПараметра);
		МассивСтрок = Объект.ЗначенияПараметров.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			Для каждого Строка Из МассивСтрок Цикл
				Строка.Выделен = Элемент.ТекущиеДанные.Выделен;
			КонецЦикла;
		КонецЕсли;
		
		//СтараяТекущаяСтрока = Элемент.ТекущиеДанные;
		
		ОбновитьДеревоЗначенийНаСервере();
		
		СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма,"ДеревоЗначенийПараметров","*",Истина);
		
		//КоллекцияДерева = ДеревоЗначенийПараметров.ПолучитьЭлементы();
		//Для Каждого СтрокаДерева Из КоллекцияДерева Цикл
		//	Если СтрокаДерева.ПредметРасчета = СтараяТекущаяСтрока.ПредметРасчета Тогда
		//		КоллекцияДерева2 = СтрокаДерева.ПолучитьЭлементы();
		//		Для Каждого СтрокаДерева2 Из КоллекцияДерева2 Цикл
		//			Если СтрокаДерева2.Параметр = СтараяТекущаяСтрока.Параметр Тогда
		//				КоллекцияДерева3 = СтрокаДерева2.ПолучитьЭлементы();
		//				Для Каждого СтрокаДерева3 Из КоллекцияДерева3 Цикл
		//					Если СтрокаДерева3.ЗначениеПараметра = СтараяТекущаяСтрока.ЗначениеПараметра Тогда
		//						РезультатПоиска = СтрокаДерева3;
		//					КонецЕсли;
		//				КонецЦикла;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//	Если РезультатПоиска <> Неопределено Тогда
		//		ИндексДерева = РезультатПоиска.ПолучитьИдентификатор();
		//		Элементы.ДеревоЗначенийПараметров.ТекущийЭлемент = Элементы.ДеревоЗначенийПараметров;
		//		Элементы.ДеревоЗначенийПараметров.ТекущаяСтрока = ИндексДерева;
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;
		//
		//
		////Элементы.ДеревоЗначенийПараметров.ТекущаяСтрока = СтараяТекущаяСтрока.Представление;
		////ЭтаФорма.ДеревоЗначенийПараметров[ДеревоЗначенийПараметров.Индекс(ДеревоЗначенийПараметров.НайтиПоИдентификатору(СтараяТекущаяСтрока))] 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе2(Команда)
	ЭлементыДерева = ДеревоЗначенийПараметров.ПолучитьЭлементы();
	Для Каждого Строка Из ЭлементыДерева Цикл
		Элементы.ДеревоЗначенийПараметров.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе2(Команда)
	ЭлементыДерева = ДеревоЗначенийПараметров.ПолучитьЭлементы();
	Для Каждого Строка Из ЭлементыДерева Цикл
		Элементы.ДеревоЗначенийПараметров.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоварыВариантРасчетаПриИзменении(Элемент)
	
	Если ТипЗнч(Элементы.ДеревоТовары.ТекущиеДанные.ВариантРасчета) = Тип("СправочникСсылка.гиг_ВариантыРасчетовНоменклатурыПроекта") Тогда
		Элементы.ДеревоТовары.ТекущиеДанные.ЦенаВходная = ПолучитЦенаВходнаяНаСервере(Элементы.ДеревоТовары.ТекущиеДанные.ВариантРасчета);
		РассчитатьСуммуСтрокиТовары();
		РассчитатьИтогиВПодвалеПриИзмененииДереваТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  ПолучитЦенаВходнаяНаСервере(ВариантРасчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гиг_ВариантыРасчетовНоменклатурыПроекта.Цена + гиг_ВариантыРасчетовНоменклатурыПроекта.ДополнительныеЗатратыСумма КАК ЦенаВходная
	|ИЗ
	|	Справочник.гиг_ВариантыРасчетовНоменклатурыПроекта КАК гиг_ВариантыРасчетовНоменклатурыПроекта
	|ГДЕ
	|	гиг_ВариантыРасчетовНоменклатурыПроекта.Ссылка = &ВариантРасчетов";
	
	Запрос.УстановитьПараметр("ВариантРасчетов", ВариантРасчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить();
		Возврат(Результат[0].ЦенаВходная);
	Иначе 
		Возврат(0);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	
	Если Поле.Имя = "ДеревоТоварыНомерСтроки" Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.ТекущиеДанные.ВыводитьВКП = Не Элемент.ТекущиеДанные.ВыводитьВКП;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Справочник%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Справочник%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Справочник%", НСтр("ru='вариант расчета'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Валюта",Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",Объект.Дата);
	ПараметрыФормы.Вставить("Справочник",Объект.Ссылка);
	
	ОткрытьФорму("Обработка.Рин1_ПодборТоваровВВариантРасчета.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);   	
	
КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютКурсПриИзменении(Элемент)
	
	ЭтаФорма.Элементы.КурсыВалют.ТекущиеДанные.ДатаКурса = Дата(1,1,1);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьХарактеристику(Команда)
	
	СоздатьХарактеристикуНоменклатурыПоШаблону();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьХарактеристикуНоменклатурыПоШаблону()
	
	НазваниеХарактеристикиПоШаблону = Строка(Объект.НоменклатураПроекта) + " / " + Строка(Объект.Наименование) + " / " + Строка(Объект.Владелец);
	Если Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(НазваниеХарактеристикиПоШаблону,Истина) = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
		НовыйЭлемент = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = НазваниеХарактеристикиПоШаблону;
		НовыйЭлемент.Владелец = Объект.Номенклатура;
		НовыйЭлемент.Записать();
		Объект.Характеристика = НовыйЭлемент.Ссылка;
	Иначе 
		ОбщегоНазначенияСлужебныйКлиентСервер.СообщитьПользователю("Имеется созданная ранее характеристика по шаблону. Выберите из списка!",,"Объект.Характеристика",Объект);
	КонецЕсли;
	
КонецПроцедуры

//++Шерстюк Ю.Ю. 29.01.21 
&НаКлиенте
Процедура УстановитьОтметку(Команда)
	УчтановитьСнятьОтметку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УчтановитьСнятьОтметку(Отметка)
	МассивСтрок = Элементы.ДеревоТовары.ВыделенныеСтроки;
	Для Каждого ЭлементМассива из МассивСтрок Цикл 
			пТекущаяСтрокаДерева = ДеревоТовары.НайтиПоИдентификатору(ЭлементМассива);
			пТекущаяСтрокаДерева.ВыводитьВКП = Отметка;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)
	УчтановитьСнятьОтметку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьСоСтандартнымиЭтапами(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",Объект.Ссылка);
	ПараметрыФормы.Вставить("ПроверкаПоЭтапыПроизводства",Истина);
	ПараметрыФормы.Вставить("Таблица",Объект.ЭтапыПроизводства);	
	ОткрытьФорму("Справочник.гиг_ВариантыРасчетовНоменклатурыПроекта.Форма.ФормаПроверкиЗначений",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьСоСтандТрудозатратами(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",Объект.Ссылка);
	ПараметрыФормы.Вставить("ПроверкаПоЭтапыПроизводства",Ложь);
	ПараметрыФормы.Вставить("Таблица",Объект.Трудозатраты);
	ОткрытьФорму("Справочник.гиг_ВариантыРасчетовНоменклатурыПроекта.Форма.ФормаПроверкиЗначений",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры
//--Шерстюк Ю.Ю.

