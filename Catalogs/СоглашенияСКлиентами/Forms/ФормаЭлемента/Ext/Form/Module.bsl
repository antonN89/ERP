&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "СтраницаУточнениеПоЦеновымГруппам" Тогда 
		ДействияСтраницыПриСменеСтраницыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуСкидокдляАРМ()
	МассивДействующихСкидок = Новый Массив; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",Объект.Партнер);
	Запрос.Текст =   "ВЫБРАТЬ
	|	ПартнерыСегмента.Сегмент КАК Сегмент,
	|	ПартнерыСегмента.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТ_Сегменты
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|ГДЕ
	|	ПартнерыСегмента.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценкиУсловияПредоставления.Ссылка.Ссылка КАК Скидка,
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментПартнеров КАК УсловиеПредоставленияСегментПартнеров
	|ИЗ
	|	ВТ_Сегменты КАК ВТ_Сегменты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|		ПО ВТ_Сегменты.Сегмент = СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.СегментПартнеров";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРезультата из РезультатЗапроса цикл
		МассивДействующихСкидок.Добавить(СтрокаРезультата.Скидка);
	КонецЦикла;
	Возврат МассивДействующихСкидок;
КонецФункции

&НаКлиенте
Процедура ДействияПриВыбореИстории(ЦеноваяГруппаВыбора)
	Если ТипЗнч(ЦеноваяГруппаВыбора) = Тип("СправочникСсылка.ЦеновыеГруппы") Тогда 
		СтруктураОтбораРегистра = Новый Структура("Соглашение,ЦеноваяГруппа",Объект.Ссылка,ЦеноваяГруппаВыбора);
		ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбораРегистра);
		
		ОткрытьФорму("РегистрСведений.ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашений.ФормаСписка",ПараметрыОткрытия,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ДействияСтраницыПриСменеСтраницыНаСервере()
	
	ТекТаблица = Объект.ЦеновыеГруппы.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СписокЦеновыхГруппТаблица.ЦеноваяГруппа,
	|	СписокЦеновыхГруппТаблица.ВидЦен,
	|	СписокЦеновыхГруппТаблица.СрокПоставки,
	|	СписокЦеновыхГруппТаблица.ПроцентРучнойСкидки,
	|	СписокЦеновыхГруппТаблица.ПроцентРучнойНаценки,
	|	СписокЦеновыхГруппТаблица.ПроцентИндивидуальнойСкидкиНаценки,
	|	СписокЦеновыхГруппТаблица.Деактивирован,
	|	СписокЦеновыхГруппТаблица.ИсторияИзменения,
	|	СписокЦеновыхГруппТаблица.ИсходныйНомерСтроки,
	|	СписокЦеновыхГруппТаблица.НомерСтроки
	|ПОМЕСТИТЬ ВТ_СписокЦГ
	|ИЗ
	|	&СписокЦеновыхГруппТаблица КАК СписокЦеновыхГруппТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокЦГ.ЦеноваяГруппа,
	|	ЕСТЬNULL(ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашенийСрезПоследних.Пользователь, """") КАК Пользователь,
	|	ЕСТЬNULL(ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашенийСрезПоследних.Период, """") КАК ПериодИзменения,
	|	ВТ_СписокЦГ.ВидЦен,
	|	ВТ_СписокЦГ.СрокПоставки,
	|	ВТ_СписокЦГ.ПроцентРучнойСкидки,
	|	ВТ_СписокЦГ.ПроцентРучнойНаценки,
	|	ВТ_СписокЦГ.ПроцентИндивидуальнойСкидкиНаценки,
	|	ВТ_СписокЦГ.Деактивирован,
	|	ВТ_СписокЦГ.ИсторияИзменения КАК ИсторияИзменения,
	|	ВТ_СписокЦГ.ИсходныйНомерСтроки,
	|	ВТ_СписокЦГ.НомерСтроки
	|ИЗ
	|	ВТ_СписокЦГ КАК ВТ_СписокЦГ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашений.СрезПоследних(&МоментВремени, ) КАК ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашенийСрезПоследних
	|		ПО ВТ_СписокЦГ.ЦеноваяГруппа = ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашенийСрезПоследних.ЦеноваяГруппа
	|			И (ГИГ_ИсторияИзмененияЗначенийСкидок_НаценокИндивидуальныхСоглашенийСрезПоследних.Соглашение = &Соглашение)";
	Запрос.УстановитьПараметр("СписокЦеновыхГруппТаблица",ТекТаблица);
	Запрос.УстановитьПараметр("Соглашение",Объект.Ссылка);
	Запрос.УстановитьПараметр("МоментВремени",ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРезультата из РезультатЗапроса цикл
		Если СтрокаРезультата.Пользователь = "" Тогда 
			СтрокаРезультата.ИсторияИзменения = "";
		Иначе 
			СтрокаРезультата.ИсторияИзменения = "Измененно: "+Формат(СтрокаРезультата.ПериодИзменения,"ДЛФ=Д")+", "+СтрокаРезультата.Пользователь.Наименование;
		КонецЕсли;
	КонецЦикла;
	Объект.ЦеновыеГруппы.Загрузить(РезультатЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРаботыАРМ(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ЭтаФорма.Прочитать();
КонецПроцедуры


&НаКлиенте
&Вместо("КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления")
Процедура Рин1_КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// добавлено начало ГИГ 
	Если Элемент.Имя = "ЦеновыеГруппы" тогда
		ЦеновыеГруппыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Неопределено) ;
	Иначе
		// добавлено конец ГИГ
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
		// добавлено начало ГИГ
	КонецЕсли;
	// добавлено конец ГИГ 
	
КонецПроцедуры


&НаКлиенте
&Вместо("КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения")
Процедура Рин1_КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	
	// добавлено начало ГИГ 
	Если Элемент.Имя = "ЦеновыеГруппы" тогда
	Иначе
		// добавлено конец ГИГ
		
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
		// добавлено начало ГИГ
	КонецЕсли;
	// добавлено конец ГИГ
	
КонецПроцедуры


&НаКлиенте
&Вместо("КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении")
Процедура Рин1_КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	
	Если Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Регулярное" Тогда
		РегулярноеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Период" Тогда
		ПериодПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "КоличествоПериодов" Тогда
		КоличествоПериодовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "СуммаСоглашения" Тогда
		СуммаДокументаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаНачалаДействия" Тогда
		ДатаНачалаДействияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПорядокОплаты" Тогда
		ПорядокОплатыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ОграничиватьРучныеСкидки" Тогда
		ОграничиватьРучныеСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
		ТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДоступноВнешнимПользователям" Тогда
		ДоступноВнешнимПользователямПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ИспользуютсяДоговорыКонтрагентов" Тогда
		ИспользуютсяДоговорыКонтрагентовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращатьМногооборотнуюТару" Тогда
		ВозвращатьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "РассчитыватьДатуВозвратаТарыПоКалендарю" Тогда
		РассчитыватьДатуВозвратаТарыПоКалендарюПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
		// добавлено начало ГИГ
	ИначеЕсли Элемент.Имя = "ЦеновыеГруппы" тогда
		// добавлено конец ГИГ
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервереВместо(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ТребуетсяОткрытиеПечатнойФормы Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	УстановитьВидимостьОпераций();
	
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ИспользоватьТиповыеСоглашенияСКлиентами         = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами  = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьДоговорыСКлиентами                  = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ОтклонениеОтУсловийПродаж                       = ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ЗначениеКопирования = Параметры.ЗначениеКопирования;
	СкидкиНаценкиСервер.ПриСозданииНаСервереИсточниковДействияСкидок(ЭтотОбъект,
	?(ЗначениеКопирования.Пустая(), Объект.Ссылка, ЗначениеКопирования));
	
	Элементы.Соглашение.Видимость				  = Не Объект.Типовое И ИспользоватьТиповыеСоглашенияСКлиентами 
	И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	Элементы.Соглашение.АвтоОтметкаНезаполненного = Не Объект.Типовое И ИспользоватьТиповыеСоглашенияСКлиентами 
	И ИспользоватьИндивидуальныеСоглашенияСКлиентами И НЕ ОтклонениеОтУсловийПродаж;
	
	Элементы.СегментПартнеров.Видимость = Объект.Типовое И ИспользоватьСоглашенияСКлиентами;
	Элементы.Партнер.Видимость 			= Не Объект.Типовое;
	Элементы.Контрагент.Видимость 		= Не Объект.Типовое И ИспользоватьСоглашенияСКлиентами;
	
	Элементы.Наименование.Видимость 		 = ИспользоватьСоглашенияСКлиентами;
	Элементы.ХозяйственнаяОперация.Видимость = ИспользоватьСоглашенияСКлиентами;
	Элементы.КонтактноеЛицо.Видимость 		 = ИспользоватьСоглашенияСКлиентами;
	Элементы.ГруппаПериодДействия.Видимость  = ИспользоватьСоглашенияСКлиентами;
	Элементы.СегментНоменклатуры.Видимость   = ИспользоватьСоглашенияСКлиентами;
	
	Элементы.Организация.Видимость 	  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.КонтактноеЛицо.Видимость = НЕ Объект.Типовое;
	
	// добавлено ГИГ начало
	//Элементы.ЦеновыеГруппыПроцентиндивидуальнойСкидкиНаценки.Видимость = Не Объект.Типовое;
	//Элементы.ЦеновыеГруппыДеактивирован.Видимость = Не Объект.Типовое;
	//Элементы.ЦеновыеГруппыИсторияИзменения.Видимость = Не Объект.Типовое;
	// добавлено ГИГ конец
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	"ГруппаРежимаРасчетаДатыВозврата",
	"Видимость", 
	ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару"),
	Истина);
	// добавлено начало ГИГ
	Если Объект.Типовое Тогда
		Элементы.СкидкиНаценкиРедактированиеСкидокНаценок.Видимость = Ложь;
	Иначе
		Элементы.СкидкиНаценкиРедактированиеСкидокНаценок.Видимость                        = Истина;
		Элементы.ЦеновыеГруппы.ПодчиненныеЭлементы.ЦеновыеГруппыВидЦен.ТолькоПросмотр      = Истина;
		Элементы.ЦеновыеГруппы.ПодчиненныеЭлементы.ЦеновыеГруппыНомерСтроки.ТолькоПросмотр = Истина;
		Элементы.ЦеновыеГруппы.ПодчиненныеЭлементы.ЦеновыеГруппыПроцентиндивидуальнойСкидкиНаценки.ТолькоПросмотр = Истина;		
		Элементы.ЦеновыеГруппы.ПодчиненныеЭлементы.ЦеновыеГруппыСрокПоставки.ТолькоПросмотр = Истина;
		Элементы.ЦеновыеГруппы.ПодчиненныеЭлементы.ЦеновыеГруппыЦеноваяГруппа.ТолькоПросмотр = Истина;
		Элементы.ЦеновыеГруппы.ПодчиненныеЭлементы.ЦеновыеГруппыДеактивирован.ТолькоПросмотр = Истина;
		Элементы.ЦеновыеГруппы.ПодчиненныеЭлементы.ЦеновыеГруппыИсторияИзменения.ТолькоПросмотр = Ложь;
		Элементы.ЦеновыеГруппы.ИзменятьСоставСтрок = Ложь;
	КонецЕсли;	
	
	нЭлемент = Элементы.Добавить("ГИГ_РасчетГрафикаПлатежейОтРеализации",Тип("ПолеФормы"),Элементы.ГруппаГрафикОплатыИнформационнаяНадпись);
	нЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	нЭлемент.ПутьКДанным = "Объект.ГИГ_РасчетГрафикаПлатежейОтРеализации";
	//добавлено конец ГИГ
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	ЭтоБазоваяВерсия = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	
	
	Элементы.МинимальнаяСуммаЗаказа.Видимость       = ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.МинимальнаяСуммаЗаказаВалюта.Видимость = ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	Элементы.ЧастотаЗаказа.Видимость           = ИспользоватьРасширенныеВозможностиЗаказаКлиента
	И Не ЭтоБазоваяВерсия;
	Элементы.ПериодПоставкиДекорация.Видимость = ИспользоватьРасширенныеВозможностиЗаказаКлиента
	И Не ЭтоБазоваяВерсия;
	
	УстановитьЗаголовокФлагаДоступноВнешнимПользователям();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	Если Объект.Ссылка.Пустая() Тогда
		ОбновитьДанныеПубликацииТорговыхПредложений();
		
		//bercut100220/200320 задача 132п3
		Если не Объект.Типовое Тогда
			ИспользуютсяДоговорыКонтрагентов = 1;
			РазбиватьРасходныеОрдераПоРаспоряжениямЧисло = 1;
			Объект.ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
			//+010620
			Объект.РазбиватьРасходныеОрдераПоРаспоряжениям = Истина;
			Объект.ЦенаВключаетНДС = Истина;
			Объект.ВидЦен = Константы.ГИГ_ОсновнойВидЦеныТарифаНоменклатурыСНДС.получить();
		КонецЕсли;
		//
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УстановитьВидимостьКомандВводНаОсновании();
	
	ЗаполнитьВариантыПорядкаОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеСкидкиНаценки(Команда)
	
	МассивСкидокПоСоглашению = СформироватьТаблицуСкидокдляАРМ();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Ссылка);
	ПараметрыФормы.Вставить("МассивСкидок", МассивСкидокПоСоглашению);
	ПараметрыФормы.Вставить("Партнер", Объект.Партнер);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеРаботыАРМ", ЭтотОбъект);
	ОткрытьФорму("Отчет.ГИГ_АрмМатрицаЦенообразованияПоСоглашениям.Форма.ФормаАрмМатрицаЦенообразованияПоСоглашениям", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЦеновыеГруппыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДействияПриВыбореИстории(Элемент.ТекущиеДанные.ЦеноваяГруппа);
КонецПроцедуры

&НаКлиенте
Процедура ЦеновыеГруппыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
&Вместо("ОбновитьВидимостьЭлементовОграниченияРучныхСкидок")
Процедура Рин1_ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(Форма)
	
	ОграничиватьРучныеСкидки = Форма.Объект.ОграничиватьРучныеСкидки
	И (Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")
	Или Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи"));
	
	Форма.Элементы.ПроцентРучнойСкидки.Видимость  = ОграничиватьРучныеСкидки;
	Форма.Элементы.ПроцентРучнойНаценки.Видимость = ОграничиватьРучныеСкидки;
	Форма.Элементы.ЦеновыеГруппыПроцентРучнойСкидки.Видимость = ОграничиватьРучныеСкидки;
	Форма.Элементы.ЦеновыеГруппыПроцентРучнойНаценки.Видимость = ОграничиватьРучныеСкидки;
	//++Гольм А.А. (Гигабайт) 12.03.2019 16:56:37
	Форма.Элементы.ЦеновыеГруппыПроцентИндивидуальнойСкидкиНаценки.Видимость = ОграничиватьРучныеСкидки;
	Форма.Элементы.ЦеновыеГруппыИсторияИзменения.Видимость = ОграничиватьРучныеСкидки;
	//--Гольм А.А. (Гигабайт) 12.03.2019 16:56:40
	
КонецПроцедуры




