
#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	КодФормы = "Обработка_ГИГ_ПодборЭтаповПроизводства_Форма";
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка_ГИГ_ПодборЭтаповПроизводства_Форма", "");
	Если Настройки <> Неопределено И Настройки.Свойство("ЗапрашиватьКоличество") Тогда
		ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
	КонецЕсли;
	
	ДокументСсылка = Параметры.Документ;
	Параметры.Свойство("Подразделение", Подразделение);
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("День", День);
	Параметры.Свойство("ДругиеРаботы", ДругиеРаботы);
	Элементы.ЭтапыПроизводстваДругиеРаботыКоманда.Пометка = ДругиеРаботы;
	
	Для Каждого СотрудникКПодбору Из Параметры.МассивСотрудников Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = СотрудникКПодбору;
		Если Не ЗначениеЗаполнено(СписокСотрудниковКПодбору) Тогда
			СписокСотрудниковКПодбору = Строка(СотрудникКПодбору);
		Иначе
			СписокСотрудниковКПодбору = СписокСотрудниковКПодбору + "; " + Строка(СотрудникКПодбору);
		КонецЕсли;			
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
		Команды["ПеренестиВДокумент"].Заголовок = Параметры.ЗаголовокКнопкиПеренести;
		Команды["ПеренестиВДокумент"].Подсказка = Параметры.ЗаголовокКнопкиПеренести;
	КонецЕсли;
	
	ЭтапыПроизводства.Параметры.УстановитьЗначениеПараметра("Подразделение", Подразделение);
	ЭтапыПроизводства.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Не ВыполняетсяЗакрытие И Не ПеренестиВДокумент И Объект.ПодобранныеЭтапы.Количество() > 0 Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru = 'Подобранные этапы не перенесены в документ. Перенести?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		ВыполняетсяЗакрытие = Истина;
		Закрыть(КодВозвратаДиалога.ОК);
		ВыполняетсяЗакрытие = Ложь;
		Возврат;
	КонецЕсли;
	
	ВыполняетсяЗакрытие = Истина;
	Закрыть();
	ВыполняетсяЗакрытие = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиФормыНаСервере();
	Если ПеренестиВДокумент Тогда
		АдресПодобранныхЭтаповВХранилище = ПоместитьВоВременноеХранилищеНаСервере(ЭтаФорма.ВладелецФормы.УникальныйИдентификатор);
	Иначе
		АдресПодобранныхЭтаповВХранилище = Неопределено;
	КонецЕсли;
	
	Если АдресПодобранныхЭтаповВХранилище <> Неопределено Тогда
		Структура = Новый Структура("АдресПодобранныхЭтаповВХранилище", АдресПодобранныхЭтаповВХранилище);
		ОповеститьОВыборе(Структура);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

//процедуры и функции таб части "Этапы производства" и обработки выбора в подобранные этапы
&НаСервереБезКонтекста
Процедура ЭтапыПроизводстваПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Для Каждого ТекСтрока Из Строки Цикл
		ТекСтрока.Значение.Данные.Продукция = ГИГ_ЕжедневнаяВыработкаСервер.ПолучитьСписокПродукцииПоЭтапуПроизводства(ТекСтрока.Значение.Данные.Ссылка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПроизводстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ЭтапыПроизводстваВыборЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент));
	ГИГ_ЕжедневнаяВыработкаКлиент.ПриВыбореСтрокиЭтапаПроизводства(ЭтаФорма, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПроизводстваВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	СтрокаЭтапыПроизводства = ДополнительныеПараметры.Элемент.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыЭтапа = Новый Структура;
	ПараметрыЭтапа.Вставить("Этап", СтрокаЭтапыПроизводства.Ссылка);
	ПараметрыЭтапа.Вставить("Продукция", СтрокаЭтапыПроизводства.Продукция);
	ПараметрыЭтапа.Вставить("ВидРабот", СтрокаЭтапыПроизводства.ВидРабот);
		
	ДобавитьВКорзинуПодобранныхЭтапов(ПараметрыЭтапа, ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПроизводстваНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	ГИГ_ЕжедневнаяВыработкаКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуПодобранныхЭтапов(ПараметрыЭтапа, ПараметрыФормы = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПараметрыЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьКоличество Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
			ПараметрыФормы = Новый Структура;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ВидРабот", ПараметрыЭтапа.ВидРабот);
		ПараметрыФормы.Вставить("День", День);
		
		ОткрытьФорму(
			"Обработка.ГИГ_ПодборЭтаповПроизводства.Форма.ЗапросКоличестваОтработанногоВремени", 
			ПараметрыФормы, 
			ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ДобавитьВКорзинуПодобранныхЭтаповПослеВыбораКоличества", ЭтотОбъект, ПараметрыЭтапа),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
		
	Иначе
		
		НовыеСтроки = Новый Массив;
		НовыеСтроки.Добавить(ПараметрыЭтапа);
		
	КонецЕсли;
	
	ДобавитьВКорзинуПодобранныхЭтаповЗавершение(ПараметрыЭтапа, НовыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуПодобранныхЭтаповПослеВыбораКоличества(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеСтроки = Новый Массив;
	НоваяСтрока = Новый Структура();
	НоваяСтрока.Вставить("Этап", ДополнительныеПараметры.Этап);
	НоваяСтрока.Вставить("Продукция", ДополнительныеПараметры.Продукция);
	НоваяСтрока.Вставить("ВидРабот", ДополнительныеПараметры.ВидРабот);
	НоваяСтрока.Вставить("ВидВремени", Результат.ВидВремени);
	НоваяСтрока.Вставить("ВремяНачалаРаботы", Результат.ВремяНачалаРаботы);
	НоваяСтрока.Вставить("ВремяОкончанияРаботы", Результат.ВремяОкончанияРаботы);
	НоваяСтрока.Вставить("КоличествоЧасов", Результат.КоличествоЧасов);
	НовыеСтроки.Добавить(НоваяСтрока);
	
	ДобавитьВКорзинуПодобранныхЭтаповЗавершение(ДополнительныеПараметры, НовыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуПодобранныхЭтаповЗавершение(ПараметрыЭтапа, НовыеСтроки)
	Структура = ПолучитьСтруктуруВидыВремениИСпособКомпенсацииНаСервере();
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		ТекущаяСтрока = Объект.ПодобранныеЭтапы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НоваяСтрока);
		Если ТекущаяСтрока.ВидВремени = Структура.Праздники Или ТекущаяСтрока.ВидВремени = Структура.Сверхурочные Тогда
			ТекущаяСтрока.СпособКомпенсацииПереработки = Структура.ПовышеннаяОплата;
		Иначе
			ТекущаяСтрока.СпособКомпенсацииПереработки = Структура.ПустаяКомпенсация;
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеСтроки.Количество() > 0 Тогда
		Элементы.ПодобранныеЭтапы.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруВидыВремениИСпособКомпенсацииНаСервере()
	Структура = Новый Структура;
	Структура.Вставить("Праздники", Справочники.ВидыИспользованияРабочегоВремени.Праздники);
	Структура.Вставить("Сверхурочные", Справочники.ВидыИспользованияРабочегоВремени.Сверхурочные);
	Структура.Вставить("ПовышеннаяОплата", Перечисления.СпособыКомпенсацииПереработки.ПовышеннаяОплата);
	Структура.Вставить("ПустаяКомпенсация", Перечисления.СпособыКомпенсацииПереработки.ПустаяСсылка());
	Возврат Структура;
КонецФункции

//процедуры и функции таб части "Подборанные этапы"
&НаКлиенте
Процедура ПодобранныеЭтапыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрокаТрудозатраты = Элемент.ТекущиеДанные;
		ТекСтрокаТрудозатраты.ВремяНачалаРаботы = День;
		ТекСтрокаТрудозатраты.ВремяОкончанияРаботы = День;
		ТекСтрокаТрудозатраты.КоличествоЧасов = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеЭтапыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ПеретащитьВПодобранныеЭтапыНаСервере(ПараметрыПеретаскивания.Значение);
КонецПроцедуры

&НаСервере
Процедура ПеретащитьВПодобранныеЭтапыНаСервере(Данные)
	
	НовыеСтроки = Новый Массив;
	Для Каждого ПараметрыЭтапа Из Данные Цикл
		НовыеСтроки.Добавить(ПараметрыЭтапа);
	КонецЦикла;
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		ТекущаяСтрока = Объект.ПодобранныеЭтапы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НоваяСтрока);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеЭтапыЭтапПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ПодобранныеЭтапы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока.Продукция = ПолучитьСписокПродукцииПоЭтапуПроизводстваНаСервере(ТекущаяСтрока.Этап);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПродукцииПоЭтапуПроизводстваНаСервере(ЭтапПроизводства)
	Возврат ГИГ_ЕжедневнаяВыработкаСервер.ПолучитьСписокПродукцииПоЭтапуПроизводства(ЭтапПроизводства);
КонецФункции

&НаКлиенте
Процедура ПодобранныеЭтапыВидРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ПодобранныеЭтапы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.ВидыРаботСотрудников.ФормаВыбора", , Элементы.ПодобранныеЭтапыВидРабот);
	ЭлементыПользовательскойНастройки = ФормаВыбора.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы;
	ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор());
	
	ЭлементНайден = Ложь;
	ДопРеквизитДругиеРаботы = ПолучитьДополнительныйРеквизитДругиеРаботыНаСервере();
	Если ДругиеРаботы Тогда
		Для Каждого ЭлементОтбора Из ЭлементыПользовательскойНастройки Цикл
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка") Тогда
				ЭлементОтбора.Использование = Ложь;	
			КонецЕсли;
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеРеквизиты.Свойство")
				И ЭлементОтбора.ПравоеЗначение = ДопРеквизитДругиеРаботы Тогда
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ДопРеквизитДругиеРаботы;
				ЭлементОтбора.Использование = Истина;	
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭлементНайден Тогда
			ЭлементОтбора = ЭлементыПользовательскойНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеРеквизиты.Свойство");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ДопРеквизитДругиеРаботы;
			ЭлементОтбора.Использование = Истина;	
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			ЭлементОтбора.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	Иначе
		Для Каждого ЭлементОтбора Из ЭлементыПользовательскойНастройки Цикл
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеРеквизиты.Свойство")
				И ЭлементОтбора.ПравоеЗначение = ДопРеквизитДругиеРаботы Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка") Тогда
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлементОтбора.ПравоеЗначение = ПолучитьСписокВидовРаботПоЭтапуПроизводстваНаСервере(ТекущаяСтрока.Этап);
				ЭлементОтбора.Использование = Истина;	
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭлементНайден Тогда
			ЭлементОтбора = ЭлементыПользовательскойНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = ПолучитьСписокВидовРаботПоЭтапуПроизводстваНаСервере(ТекущаяСтрока.Этап);
			ЭлементОтбора.Использование = Истина;	
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			ЭлементОтбора.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДополнительныйРеквизитДругиеРаботыНаСервере()
	Возврат ГИГ_ЕжедневнаяВыработкаСервер.ПолучитьДополнительныйРеквизитДругиеРаботы();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВидовРаботПоЭтапуПроизводстваНаСервере(ЭтапПроизводства)
	Возврат ГИГ_ЕжедневнаяВыработкаСервер.ПолучитьСписокВидовРаботПоЭтапуПроизводства(ЭтапПроизводства);
КонецФункции

&НаКлиенте
Процедура ПодобранныеЭтапыВидВремениПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ПодобранныеЭтапы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Структура = ПолучитьСтруктуруВидыВремениИСпособКомпенсацииНаСервере();
	Если ТекущаяСтрока.ВидВремени = Структура.Праздники Или ТекущаяСтрока.ВидВремени = Структура.Сверхурочные Тогда
		ТекущаяСтрока.СпособКомпенсацииПереработки = Структура.ПовышеннаяОплата;
	Иначе
		ТекущаяСтрока.СпособКомпенсацииПереработки = Структура.ПустаяКомпенсация;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеЭтапыВремяНачалаРаботыПриИзменении(Элемент)
	ИзменениеВремениРаботыСотрудника();
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеЭтапыВремяОкончанияРаботыПриИзменении(Элемент)
	ИзменениеВремениРаботыСотрудника();
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВремениРаботыСотрудника()
	ТекущаяСтрока = Элементы.ПодобранныеЭтапы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока.КоличествоЧасов = ГИГ_ЕжедневнаяВыработкаКлиент.РассчитатьКоличествоЧасовВыработки(День, ТекущаяСтрока.ВремяНачалаРаботы, ТекущаяСтрока.ВремяОкончанияРаботы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВдокумент(Команда)
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.ОК);
КонецПроцедуры

&НаКлиенте
Процедура ДругиеРаботыКоманда(Команда)
	ДругиеРаботы = Не ДругиеРаботы;
	Элементы.ЭтапыПроизводстваДругиеРаботыКоманда.Пометка = ДругиеРаботы;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере(УИД)
	
	СтруктураПодбора = Новый Структура;
	СтруктураПодбора.Вставить("ПодобранныеЭтапы", Объект.ПодобранныеЭтапы.Выгрузить());
	СтруктураПодбора.Вставить("СотрудникиКПодбору", Объект.Сотрудники.Выгрузить());
	Возврат ПоместитьВоВременноеХранилище(СтруктураПодбора, УИД);
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	ГИГ_ЕжедневнаяВыработкаСервер.СохранитьНастройкиФормыПодбора(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
