
&НаСервере
&Вместо("ПересчитатьСуммуВзаиморасчетов")
Процедура Рин1_ПересчитатьСуммуВзаиморасчетов()
//20200728 ГлазуновДВ Расчитываем по нашей схеме
	Если ПересчитыватьСуммуДокумента Тогда
		Если УчитыватьСуммыПоступлений  и ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643") Тогда
	//		СуммаДокумента = СуммаВзаиморасчетов * КурсВалютыВзаиморасчетов / КратностьВалютыВзаиморасчетов;
			Рин1_УчитыватьСуммыПоступленийПриИзмененииПослеНаСервере();
		КонецЕсли;

	Иначе // иначе расчитываем по схеме "Типовой вариант"
		Если СуммаДокумента <> 0 И ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			Если ВалютаВзаиморасчетов = ВалютаРегУчета ИЛИ ВалютаДокумента = ВалютаРегУчета Тогда
				
				ПараметрыВалютыДок = Новый Структура("Валюта, Курс, Кратность",
					ВалютаДокумента, КурсВалютыДокумента, КратностьВалютыДокумента);
				ПараметрыВалютыВР  = Новый Структура("Валюта, Курс, Кратность",
					ВалютаВзаиморасчетов, КурсВалютыВзаиморасчетов, КратностьВалютыВзаиморасчетов);
				
				СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаДокумента,
					ПараметрыВалютыДок,ПараметрыВалютыВР);
				
			Иначе
				
				СуммаВзаиморасчетов = СуммаДокумента*КурсВалютыДокумента/КратностьВалютыДокумента;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
&Вместо("ВалютаДокументаПриИзменении")
Процедура Рин1_ВалютаДокументаПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ВалютаДокументаПриОткрытии) ИЛИ НеПересчитыватьСуммуДокумента Тогда
		Возврат;
	КонецЕсли;
	
//20200728 ГлазуновДВ Расчитываем по нашей схеме
	Если ПересчитыватьСуммуДокумента Тогда
		
		Если ВалютаДокумента = ВалютаРегУчета ИЛИ ВалютаВзаиморасчетов = ВалютаДокумента Тогда
			КурсВалютыДокумента = 1;
			КратностьВалютыДокумента = 1;
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов = ВалютаДокумента Тогда
			ВалютаДокумента = ВалютаДокументаПриОткрытии;
			СуммаДокумента = СуммаДокументаПриОткрытии;
			//ПересчитатьСуммы();
			СуммаДокумента = СуммаВзаиморасчетов * КурсВалютыДокумента / КратностьВалютыДокумента;
		Иначе
			ПересчитатьСуммы();
			Рин1_УчитыватьСуммыПоступленийПриИзмененииПослеНаСервере();
		КонецЕсли;

	Иначе // иначе расчитываем по схеме "Типовой вариант"
		
		Если СуммаДокумента = 0 Тогда
			
			ПересчитатьСуммуПриИзмененииВалюты(КодВозвратаДиалога.Да, Неопределено);
			
		ИначеЕсли ВалютаДокументаПриОткрытии <> ВалютаДокумента И ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ТекстСообщения = НСтр("ru = 'Пересчитать суммы в документе в валюту ""%Валюта%""?';
									|en = 'Convert amounts in the document into currency ""%Валюта%""?'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", ВалютаДокумента);
			
			Оповещение = Новый ОписаниеОповещения("ПересчитатьСуммуПриИзмененииВалюты", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			Если ВалютаДокумента = ВалютаРегУчета ИЛИ ВалютаВзаиморасчетов = ВалютаДокумента Тогда
				КурсВалютыДокумента = 1;
				КратностьВалютыДокумента = 1;
			КонецЕсли;
			
			ВалютаДокумента = ВалютаДокументаПриОткрытии;
			СуммаДокумента = СуммаДокументаПриОткрытии;
			
			ПересчитатьСуммы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПересчитыватьСуммуДокументаПриИзмененииПосле(Элемент)
	// Вставить содержимое обработчика.
	Рин1_ПересчитыватьСуммуДокументаПриИзмененииПослеНаСервере();
	Если ПересчитыватьСуммуДокумента И УчитыватьСуммыПоступлений Тогда
		Рин1_УчитыватьСуммыПоступленийПриИзмененииПослеНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Рин1_ПересчитыватьСуммуДокументаПриИзмененииПослеНаСервере()
	// Вставить содержимое обработчика.
	Элементы.СуммаВзаиморасчетов.Доступность = Истина;
	НеобходимПересчетСуммДокумента = Ложь;
	Если ПересчитыватьСуммуДокумента Тогда
		Элементы.СуммаВзаиморасчетов.Доступность = Ложь;
		НеобходимПересчетСуммДокумента = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
&После("УстановитьВидимостьЭлементов")
Процедура Рин1_УстановитьВидимостьЭлементов()
	// Вставить содержимое метода.
	Если ПересчитыватьСуммуДокумента Тогда
		Элементы.СуммаВзаиморасчетов.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

//20200729 ГлазуновДВ создаем список поступлений на момент открытия формы
&НаСервере
&После("ПриСозданииНаСервере")
Процедура Рин1_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое метода.
	
	ДокументОснование	= ?(Параметры.Свойство("ДокументОснование"),Параметры.ДокументОснование, Неопределено);
<<<<<<< HEAD
	// + [Rineco], [Киселев А.] [13.12.2021] 
	// Задача: [№ 21557], [#Пересчет курса в ПТУ]
	
	// Было:
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента")
	// Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	// Стало:
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента")
	 Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
	// - [Rineco], [Киселев А.] [13.12.2021]
	
=======
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента")
	 Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
		
	 	Элементы.Группа1.Видимость = Истина;
	 	Элементы.Группа1.Доступность = Истина;
		УчитыватьСуммыПоступлений = Истина;
<<<<<<< HEAD
		
		// + [Rineco], [Киселев А.] [13.12.2021] 
		// Задача: [№ 21557], [#Пересчет курса в ПТУ]
		
		// Было:
		//РезультатЗапроса = ВыполнитьЗапросПоПоступлениям();
		// Стало:
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			РезультатЗапроса = ВыполнитьЗапросПоСписаниям();	
		Иначе 
			РезультатЗапроса = ВыполнитьЗапросПоПоступлениям();	
		КонецЕсли;
		// - [Rineco], [Киселев А.] [13.12.2021]
		
=======
		РезультатЗапроса = ВыполнитьЗапросПоПоступлениям();
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Ном = 1;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
			//Создаем на форме Группу полей
				Группа = Элементы.Добавить("ГруппаПоступление" + Ном,Тип("ГруппаФормы"),Элементы.ГруппаЛево);
				Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				Группа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
				Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			//Создаем на форме поля
				ДобавляемыеРеквизиты = Новый Массив;
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Регистратор" + Ном, Новый ОписаниеТипов(), , , Истина));
		//Новый ОписаниеТипов("Строка")
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Дата" + Ном, Новый ОписаниеТипов(), , , Истина));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Сумма" + Ном, Новый ОписаниеТипов(), , , Истина));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СуммаРегл" + Ном, Новый ОписаниеТипов(), , , Истина));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Валюта" + Ном, Новый ОписаниеТипов(), , , Истина));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВалютаДокумента" + Ном, Новый ОписаниеТипов(), , , Истина));
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);

				Элемент = Элементы.Добавить("Документ" + Ном,Тип("ДекорацияФормы"),Группа);
				Элемент.Вид = ВидДекорацииФормы.Надпись;
				Элемент.Заголовок = ВыборкаДетальныеЗаписи.Регистратор;
				Элемент.Ширина = 30;
				
				Элемент = Элементы.Добавить("Дата" + Ном,Тип("ДекорацияФормы"),Группа);
				Элемент.Вид = ВидДекорацииФормы.Надпись;
				Элемент.Заголовок = Формат(ВыборкаДетальныеЗаписи.Регистратор.Дата, "ДФ=dd.MM.yyyy");
				Элемент.Ширина = 10;
				
				Элемент = Элементы.Добавить("Сумма" + Ном,Тип("ДекорацияФормы"),Группа);
				Элемент.Вид = ВидДекорацииФормы.Надпись;
				Элемент.Заголовок = Формат(ВыборкаДетальныеЗаписи.Сумма, "ЧДЦ=2");
				Элемент.Ширина = 10;
				Элемент.Шрифт = ШрифтыСтиля.ЖирныйШрифтБЭД;
				
				Элемент = Элементы.Добавить("Валюта" + Ном,Тип("ДекорацияФормы"),Группа);
				Элемент.Вид = ВидДекорацииФормы.Надпись;
				Элемент.Заголовок = ВыборкаДетальныеЗаписи.Валюта;
				Элемент.Ширина = 5;
				
				Элемент = Элементы.Добавить("СуммаРегл" + Ном,Тип("ДекорацияФормы"),Группа);
				Элемент.Вид = ВидДекорацииФормы.Надпись;
				Элемент.Заголовок = Формат(ВыборкаДетальныеЗаписи.СуммаРегл, "ЧДЦ=2");
				Элемент.Ширина = 10;
				Элемент.Шрифт = ШрифтыСтиля.ЖирныйШрифтБЭД;
				
				Элемент = Элементы.Добавить("ВалютаДокумента" + Ном,Тип("ДекорацияФормы"),Группа);
				Элемент.Вид = ВидДекорацииФормы.Надпись;
				Элемент.Заголовок = ВалютаРегУчета;
				Элемент.Ширина = 5;
				
				Элемент = Элементы.Добавить("КурсВалюты" + Ном,Тип("ДекорацияФормы"),Группа);
				Элемент.Вид = ВидДекорацииФормы.Надпись;
				Элемент.Заголовок = Формат(ВыборкаДетальныеЗаписи.СуммаРегл / ВыборкаДетальныеЗаписи.Сумма, "ЧДЦ=4");
				Элемент.Ширина = 10;
				Элемент.Шрифт = ШрифтыСтиля.ЖирныйШрифтБЭД;
				
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Рин1_УчитыватьСуммыПоступленийПриИзмененииПослеНаСервере()
	// Вставить содержимое обработчика.
	Если ПересчитыватьСуммуДокумента И ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643") Тогда
		Если  УчитыватьСуммыПоступлений Тогда
			
<<<<<<< HEAD
			// + [Rineco], [Киселев А.] [13.12.2021] 
			// Задача: [№ 21557], [#Пересчет курса в ПТУ]
			
			// Было:
			//РезультатЗапроса = ВыполнитьЗапросПоПоступлениям();
			// Стало:
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				РезультатЗапроса = ВыполнитьЗапросПоСписаниям();	
			Иначе 
				РезультатЗапроса = ВыполнитьЗапросПоПоступлениям();	
			КонецЕсли;
			// - [Rineco], [Киселев А.] [13.12.2021]

=======
			РезультатЗапроса = ВыполнитьЗапросПоПоступлениям();
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
			Если РезультатЗапроса = 0 Тогда
				Возврат;
			КонецЕсли;
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ОстаточнаяСуммаВзаиморасчетов = СуммаВзаиморасчетов;
			СуммаДокументаНачальная = 0;
			
			Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ОстаточнаяСуммаВзаиморасчетов = ОстаточнаяСуммаВзаиморасчетов - ВыборкаДетальныеЗаписи.Сумма;
					СуммаДокументаНачальная = СуммаДокументаНачальная + ВыборкаДетальныеЗаписи.СуммаРегл;
				КонецЦикла;	
				// + [Rineco], [Киселев А.Н.] [20.09.2021] 
				// Задача: [№ 17035], [#Пересчитать курс учитывая дату поступления]
				
				// Было:
				//СуммаДокумента = Окр(СуммаДокументаНачальная + ОстаточнаяСуммаВзаиморасчетов * КурсВалютыВзаиморасчетов, 2);
				// Стало:
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВыборкаДетальныеЗаписи.Валюта,ВыборкаДетальныеЗаписи.Регистратор.Дата); 
				СуммаДокумента = Окр(СуммаДокументаНачальная + ОстаточнаяСуммаВзаиморасчетов * СтруктураКурса.Курс, 2);
<<<<<<< HEAD
				
				Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
					КурсВалютыВзаиморасчетов = СтруктураКурса.Курс;
				КонецЕсли;
				
=======
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
				// - [Rineco], [Киселев А.Н.] [20.09.2021]
				
			Иначе
				СуммаДокумента = СуммаВзаиморасчетов * КурсВалютыВзаиморасчетов / КратностьВалютыВзаиморасчетов;
			КонецЕсли;
		Иначе
			
			Если  ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643") Тогда
				Рин1_ПересчитыватьСуммуДокументаПриИзмененииПослеНаСервере();
				//Если ВалютаДокумента = ВалютаРегУчета ИЛИ ВалютаВзаиморасчетов = ВалютаДокумента Тогда
				//	КурсВалютыДокумента = 1;
				//	КратностьВалютыДокумента = 1;
				//КонецЕсли;
				
				//ПересчитатьСуммы();
				СуммаДокумента = СуммаВзаиморасчетов * КурсВалютыВзаиморасчетов / КратностьВалютыВзаиморасчетов;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643") Тогда
		
		Рин1_ПересчитыватьСуммуДокументаПриИзмененииПослеНаСервере();
		Если ВалютаДокумента = ВалютаРегУчета ИЛИ ВалютаВзаиморасчетов = ВалютаДокумента Тогда
			КурсВалютыДокумента = 1;
			КратностьВалютыДокумента = 1;
		КонецЕсли;
		
		ПересчитатьСуммы();
		
	Иначе
		
		Если ВалютаДокумента = ВалютаРегУчета ИЛИ ВалютаВзаиморасчетов = ВалютаДокумента Тогда
			КурсВалютыДокумента = 1;
			КратностьВалютыДокумента = 1;
		КонецЕсли;
		
		ВалютаДокумента = ВалютаДокументаПриОткрытии;
		СуммаДокумента = СуммаДокументаПриОткрытии;
		
		ПересчитатьСуммы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_УчитыватьСуммыПоступленийПриИзмененииПосле(Элемент)
	Если ПересчитыватьСуммуДокумента Тогда
		Рин1_УчитыватьСуммыПоступленийПриИзмененииПослеНаСервере();
	Иначе
		Рин1_ПересчитыватьСуммуДокументаПриИзмененииПослеНаСервере();
	КонецЕсли;
КонецПроцедуры

Функция ВыполнитьЗапросПоПоступлениям()
	
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
	Если ДокументОснование <> Неопределено Тогда
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
	//				|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	РасчетыСКлиентами.Регистратор КАК Регистратор,
			|	РасчетыСКлиентами.ВидДвижения КАК ВидДвижения,
			|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
			|	РасчетыСКлиентами.Валюта КАК Валюта,
			|	РасчетыСКлиентами.ВалютаДокумента КАК ВалютаДокумента,
			|	РасчетыСКлиентами.СуммаРегл КАК СуммаРегл,
			|	РасчетыСКлиентами.Сумма КАК Сумма
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|ГДЕ
			|	РасчетыСКлиентами.ЗаказКлиента = &ЗаказОснование
			|	И (РасчетыСКлиентами.Регистратор.Дата < &ДатаОснования ИЛИ РасчетыСКлиентами.Регистратор.Дата = &ДатаОснования)
			|   И РасчетыСКлиентами.Сумма > 0
			|	И РасчетыСКлиентами.ВидДвижения = &Расход";
		
		Запрос.УстановитьПараметр("ЗаказОснование", ДокументОснование.Ссылка);
		Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("ДатаОснования", КонецДня(ДатаДокумента));
		
		Результат = Запрос.Выполнить();
		
		Возврат Результат;
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Иначе
		Возврат 0; 
	КонецЕсли;
КонецФункции

<<<<<<< HEAD

// + [Rineco], [Киселев А.] [13.12.2021] [Log_Diff][№ 21557], [#УчетСписанийПТУ] 
Функция ВыполнитьЗапросПоСписаниям()
	
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
	Если ДокументОснование <> Неопределено Тогда
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|РасчетыСПоставщиками.Регистратор КАК Регистратор,
		|РасчетыСПоставщиками.ЗаказПоставщику КАК ЗаказКлиента,
		|РасчетыСПоставщиками.ВидДвижения КАК ВидДвижения,
		|РасчетыСПоставщиками.Валюта КАК Валюта,
		|РасчетыСПоставщиками.ВалютаДокумента КАК ВалютаДокумента,
		|РасчетыСПоставщиками.СуммаРегл КАК СуммаРегл,
		|РасчетыСПоставщиками.Сумма КАК Сумма
		|ИЗ
		|РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|РасчетыСПоставщиками.ЗаказПоставщику = &ЗаказПоставщику
		|И РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств";
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ДокументОснование.Ссылка);
		Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("ДатаОснования", КонецДня(ДатаДокумента));
		
		Результат = Запрос.Выполнить();
		
		Возврат Результат;
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Иначе
		Возврат 0; 
	КонецЕсли;
КонецФункции

=======
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
&НаКлиенте
&Вместо("ПеренестиВДокумент")
Процедура Рин1_ПеренестиВДокумент(Команда)
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураРеквизитовФормы.Вставить("Валюта",               ВалютаДокумента);
	
	Если НЕ ВалютаВзаиморасчетов = ВалютаРегУчета И ВалютаДокумента = ВалютаРегУчета Тогда
		СтруктураРеквизитовФормы.Вставить("Курс",      КурсВалютыВзаиморасчетов);
		СтруктураРеквизитовФормы.Вставить("Кратность", КратностьВалютыВзаиморасчетов);
	Иначе
		СтруктураРеквизитовФормы.Вставить("Курс",      КурсВалютыДокумента);
		СтруктураРеквизитовФормы.Вставить("Кратность", КратностьВалютыДокумента);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	СтруктураРеквизитовФормы.Вставить("НеобходимПересчетСуммДокумента", НеобходимПересчетСуммДокумента);
	//++Шерстюк Ю.Ю. изменения без автора
	Если ПересчитыватьСуммуДокумента Тогда
		СтруктураРеквизитовФормы.Вставить("СуммаДокумента", СуммаДокумента);
	КонецЕсли;
	//--Шерстюк Ю.Ю.
	Готово = Истина;
	
	Закрыть(СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаКлиенте
&После("КурсВзаиморасчетовПриИзменении")
Процедура Рин1_КурсВзаиморасчетовПриИзменении(Элемент)
	// Вставить содержимое метода.
	Если УчитыватьСуммыПоступлений Тогда
		Рин1_УчитыватьСуммыПоступленийПриИзмененииПослеНаСервере();
	Иначе
		СуммаДокумента = СуммаВзаиморасчетов * КурсВалютыВзаиморасчетов / КратностьВалютыВзаиморасчетов;
	КонецЕсли;

КонецПроцедуры
