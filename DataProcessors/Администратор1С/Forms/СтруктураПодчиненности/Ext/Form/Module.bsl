&НаСервере
Перем мКэшРеквизитовДокумента;

//////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры вывода в табличный документ.

// Выводит дерево подчиненности в табличный документ
&НаСервере
Процедура ВывестиТабличныйДокумент()

	ТаблицаОтчета.Очистить();
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбъектОбработка.ПолучитьМакет("СвязанныеДокументы");
	
	ВывестиРодительскиеЭлементыДерева(ДеревоРодительскиеДокументы.ПолучитьЭлементы(),Макет,1);
	ВывестиТекущийДокумент(Макет);
	ВывестиПодчиненныеЭлементыДерева(ДеревоПодчиненныеДокументы.ПолучитьЭлементы(),Макет,1)
	 
КонецПроцедуры

// Выводит строки дерева родительских документов
//
// Параметры
//  СтрокиДерева    - ДанныеФормыКоллекцияЭлементовДерева - строки дерева
//                 которые выводятся в табличный документ
//  Макет  			- МакетТабличногоДокумента - макет, на основании которого
//                 происходит вывод в табличный документ
//	УровеньРекурсии - Число - уровень рекурсии процедуры
//  
&НаСервере
Процедура ВывестиРодительскиеЭлементыДерева(СтрокиДерева,Макет,УровеньРекурсии)
	
	Счетчик =  СтрокиДерева.Количество();
	Пока Счетчик >0 Цикл
		
		ТекущаяСтрокаДерева = СтрокиДерева.Получить(Счетчик -1);
		ПодчиненныеЭлементыСтрокиДерева = ТекущаяСтрокаДерева.ПолучитьЭлементы();
		ВывестиРодительскиеЭлементыДерева(ПодчиненныеЭлементыСтрокиДерева,Макет,УровеньРекурсии + 1);	
				
		Для инд=1 По УровеньРекурсии Цикл
			
			Если инд = УровеньРекурсии Тогда
				
				Если СтрокиДерева.Индекс(ТекущаяСтрокаДерева) < (СтрокиДерева.Количество()-1) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхПравоНиз");
				Иначе	
					Область = Макет.ПолучитьОбласть("КоннекторПравоНиз");				
				КонецЕсли;
				
			Иначе	
				
				Если НеобходимостьВыводаВертикальногоКоннектора(УровеньРекурсии - инд + 1,ТекущаяСтрокаДерева,Ложь) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("Отступ");
					
				КонецЕсли;
				
			КонецЕсли;			
			
			Если инд = 1 Тогда
				ТаблицаОтчета.Вывести(Область);
			Иначе
				ТаблицаОтчета.Присоединить(Область);
			КонецЕсли;
			
		КонецЦикла;
		
		ВывестиДокументИКартинку(ТекущаяСтрокаДерева,Макет,Ложь,Ложь);

		Счетчик = Счетчик - 1;
		
	КонецЦикла; 
	
КонецПроцедуры 

// Выводит в табличный документ картинку, соответствующую статусу документа и его представление
//
&НаСервере
Процедура ВывестиДокументИКартинку(СтрокаДерева,Макет,ЭтоТекущийДокумент = Ложь,ЭтоПодчиненный = Неопределено)
	
	//Вывод картинки
	Если СтрокаДерева.Проведен Тогда
		Если ЭтоПодчиненный = Неопределено  Тогда
			Если ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() И ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество()  Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторВерхНиз");			 
			ИначеЕсли ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторНиз");
			ИначеЕсли ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторВерх");	
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторВерх");	
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоНиз");
			Иначе	
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		Иначе	  
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоВерх");
			Иначе	
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли СтрокаДерева.ПометкаУдаления Тогда
		Если ЭтоПодчиненный = Неопределено Тогда
			Если ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() И ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество()  Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторВерхНиз");			 
			ИначеЕсли ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУделениеКоннекторНиз");
			ИначеЕсли ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторВерх");	
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторВерх");	
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторЛевоНиз");
			Иначе	
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдаление");
			КонецЕсли;
		Иначе	  
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторЛевоВерх");
			Иначе	
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдаление");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Ссылка = ДокументСсылка Тогда
			Если ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() И ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество()  Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторВерхНиз");			 
			ИначеЕсли ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторНиз");
			ИначеЕсли ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторВерх");	
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторВерх");	
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторЛевоНиз");
			Иначе	
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписан");
			КонецЕсли;
		Иначе	  
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторЛевоВерх");
			Иначе	
			   ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписан");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
//	ОбластьКартинка.Параметры.Документ = СтрокаДерева.Ссылка;
	Если ЭтоТекущийДокумент Тогда
		ТаблицаОтчета.Вывести(ОбластьКартинка) 
	Иначе
		ТаблицаОтчета.Присоединить(ОбластьКартинка);	
	КонецЕсли;
	
	
	//Вывод документа
	ОбластьДокумент = Макет.ПолучитьОбласть(?(ЭтоТекущийДокумент,"ТекущийДокумент","Документ"));
	ОбластьДокумент.Параметры.ПредставлениеДокумента = ПолучитьПредставлениеДокументаДляПечати(СтрокаДерева);
	ОбластьДокумент.Параметры.Документ = СтрокаДерева.Ссылка;
	ТаблицаОтчета.Присоединить(ОбластьДокумент); 
	
КонецПроцедуры 

// Определяет необходимость вывода вертикального коннектора в  табличный документ
//
// Параметры
//  УровеньВверх  - Число - на каком количестве уровней выше находится 
//                 родитель от которого будет рисоваться вертикальный коннектор
//  СтрокаДерева  - ДанныеФормыЭлементДерева - исходная строка дерева значений
//					от которой ведется отсчет.
// Возвращаемое значение:
//   Булево   - необходимость вывода в области вертиркального коннекотора
//
&НаСервере
Функция НеобходимостьВыводаВертикальногоКоннектора(УровеньВверх,СтрокаДерева,ИщемСредиПодчиненных = Истина)

	ТекущаяСтрока = СтрокаДерева;
	
	Для инд=1 По УровеньВверх Цикл
		 
		 ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		 Если инд = УровеньВверх Тогда
			 ИскомыйРодитель = ТекущаяСтрока;
		 ИначеЕсли инд = (УровеньВверх-1) Тогда	
			 ИскомаяСтрока = ТекущаяСтрока;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 Если ИскомыйРодитель = Неопределено Тогда
		Если ИщемСредиПодчиненных Тогда
		     ПодчиненныеЭлементыРодителя  =  ДеревоПодчиненныеДокументы.ПолучитьЭлементы(); 
		 Иначе
			 ПодчиненныеЭлементыРодителя  =  ДеревоРодительскиеДокументы.ПолучитьЭлементы();		
		КонецЕсли;	    
	 Иначе
	     ПодчиненныеЭлементыРодителя =  ИскомыйРодитель.ПолучитьЭлементы();	 
	 КонецЕсли;
	 
	 Возврат ПодчиненныеЭлементыРодителя.Индекс(ИскомаяСтрока) < (ПодчиненныеЭлементыРодителя.Количество()-1);		

КонецФункции 

// Выводит в табличный документ строку с документом, для которого формируется структура подчиненности
//
// Параметры
//  Макет		 - МакетТабличногоДокумента - макет, на основании которого формирутеся табличный документ.
&НаСервере
Процедура ВывестиТекущийДокумент(Макет)
	
	
	Выборка = ПолучитьВыборкуПоРеквизитамДокумента(ДокументСсылка);
	Если Выборка.Следующий() Тогда
		
		ВывестиДокументИКартинку(Выборка,Макет,Истина);
		
	КонецЕсли; 	 
	
КонецПроцедуры 

// Формирует представление документа для вывода в табличный документ
//
// Параметры
//  Выборка  - ВыборкаИзРезульататаЗапроса или ДанныеФормыЭлементДерева - набор данных
//             на основании которого формируется представление
//
// Возвращаемое значение:
//   Строка   - сформированное представление
//
&НаСервере
Функция ПолучитьПредставлениеДокументаДляПечати(Выборка)
	
	ПредставлениеДокумента = Выборка.Представление;
	Если (Выборка.СуммаДокумента <> 0) И (Выборка.СуммаДокумента <> NULL) Тогда
		ПредставлениеДокумента = ПредставлениеДокумента + НСтр("ru=' на сумму '") + Выборка.СуммаДокумента + " " + Выборка.Валюта + ".";
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции
 
// Выводит строки дерева подчиненных документов
//
// Параметры
//  СтрокиДерева    - ДанныеФормыКоллекцияЭлементовДерева - строки дерева
//                 которые выводятся в табличный документ
//  Макет  			- МакетТабличногоДокумента - макет, на основании которого
//                 происходит вывод в табличный документ
//	УровеньРекурсии - Число - уровень рекурсии процедуры
//
&НаСервере
Процедура ВывестиПодчиненныеЭлементыДерева(СтрокиДерева,Макет,УровеньРекурсии)

	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ЭтоТекущийДокумент 	= (СтрокаДерева.Ссылка = ДокументСсылка);
		ЭтоИсходныйДокумент = (СтрокаДерева.Ссылка = ИсходныйДокумент);
		ПодчиненныеЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();		
		
		//Вывод коннекторов
		Для инд = 1 По УровеньРекурсии Цикл
			Если УровеньРекурсии > инд Тогда
				
				Если НеобходимостьВыводаВертикальногоКоннектора(УровеньРекурсии - инд + 1,СтрокаДерева) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("Отступ");
					
				КонецЕсли;
			Иначе 
				
				Если СтрокиДерева.Количество() > 1 И (СтрокиДерева.Индекс(СтрокаДерева)<> (СтрокиДерева.Количество()-1)) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхПравоНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("КоннекторВерхПраво");
				КонецЕсли;
				
			КонецЕсли;	
			
			Область.Параметры.Документ = ?(ЭтоИсходныйДокумент,Неопределено,СтрокаДерева.Ссылка);
			
			Если инд = 1 Тогда
				ТаблицаОтчета.Вывести(Область);
			Иначе
				ТаблицаОтчета.Присоединить(Область);
			КонецЕсли;
			
		КонецЦикла;		
		
		ВывестиДокументИКартинку(СтрокаДерева,Макет,Ложь,Истина);
		
		//Вывод подчиненных элементов дерева
		ВывестиПодчиненныеЭлементыДерева(ПодчиненныеЭлементыДерева,Макет,УровеньРекурсии + 1);
		
	КонецЦикла; 		
	
КонецПроцедуры

//Инициирует вывод в табличный документ и отображает его по окончанию формирования.
&НаКлиенте
Процедура ВывестиСтруктуруПодчиненности()

	ОбновитьДеревоСтруктурыПодчиненности();
	//ТаблицаОтчета.Показать();	// 8.3.7.1949. Ошибка: Недопустимая операция для реквизита формы.

КонецПроцедуры
 
//////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры построения дерева подчиненности документов.

&НаСервере
Процедура ОбновитьДеревоСтруктурыПодчиненности()

	Если ОсновнойДокументДоступен() Тогда
		СформироватьДеревьяДокументов();
		ВывестиТабличныйДокумент();
	Иначе
		СообщитьПользователю(
			Нстр("ru = 'Документ, для которого сформирован отчет о структуре подчиненности, стал недоступен.'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьДеревьяДокументов()

	ДеревоРодительскиеДокументы.ПолучитьЭлементы().Очистить();
	ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Очистить();	

	мКэшРеквизитовДокумента = Новый Соответствие;

	ВывестиРодительскиеДокументы(ДокументСсылка,ДеревоРодительскиеДокументы);
	ВывестиПодчиненныеДокументы(ДокументСсылка,ДеревоПодчиненныеДокументы);

КонецПроцедуры

&НаСервере
Функция ОсновнойДокументДоступен()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1
	|ИЗ
	|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК Таб
	|ГДЕ
	|	Таб.Ссылка = &ТекущийДокумент
	|");
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Получает выборку по реквзитам документа
//
// Параметры
//  ДокументСсылка  - ДокументСсылка - документ, значения реквзитов которого получаются запросом.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса  
//
&НаСервере
Функция ПолучитьВыборкуПоРеквизитамДокумента(ДокументСсылка)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка,
	|	Проведен,
	|	ПометкаУдаления,
	|	#Сумма,
	|	#Валюта,
	|	Представление
	|ИЗ
	|	Документ." + МетаданныеДокумента.Имя + "
	|ГДЕ
	|	Ссылка = &Ссылка
	|";
	ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеДокумента, "#Сумма", "СуммаДокумента");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Валюта","""" + ПредставлениеВалютыУчета() + """ КАК Валюта");

	ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеДокумента, , );
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Возврат Запрос.Выполнить().Выбрать(); 
	
КонецФункции

&НаСервере
Процедура ВывестиРодительскиеДокументы(ТекущийДокумент,ДеревоРодитель)
	
	СтрокиДерева = ДеревоРодитель.ПолучитьЭлементы();
	МетаданныеДокумента = ТекущийДокумент.Метаданные();
	СписокРеквизитов    = Новый СписокЗначений;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		
		Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
			
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			
			Если МетаданныеРеквизита <> Неопределено
				И Метаданные.Документы.Содержит(МетаданныеРеквизита)
				И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				
				ЗначениеРеквизита = ТекущийДокумент[Реквизит.Имя];
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита)
					И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
					И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
					
					СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";
		
		СодержимоеТЧ = ТекущийДокумент[ТЧ.Имя].Выгрузить();
		
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			
			Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				
				Если МетаданныеРеквизита<>Неопределено
					И Метаданные.Документы.Содержит(МетаданныеРеквизита)
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
			
			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
				
				ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения <> Неопределено Тогда
					
					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И Метаданные.Документы.Содержит(МетаданныеЗначения) Тогда
						
						Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
							
							СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СписокРеквизитов.СортироватьПоПредставлению();
	
	Для каждого ЭлементСписка Из СписокРеквизитов Цикл
		
		Выборка = ПолучитьВыборкуПоРеквизитамДокумента(ЭлементСписка.Значение);
		
		Если Выборка.Следующий() Тогда
			СтрокаДерева = ДобавитьСтрокуВДерево(СтрокиДерева, Выборка);
			Если НЕ ДобавляемыйДокументИмеетсяСредиРодителей(ДеревоРодитель,ЭлементСписка.Значение) Тогда
				ВывестиРодительскиеДокументы(ЭлементСписка.Значение,СтрокаДерева);	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет наличие документа среди родителей строки дерева, которая возомжно будет добавлена
//
// Параметры
//  СтрокаРодитель  - ДанныеФормыДерево,ДанныеФормыЭлементДерева - родитель, для 
//                 которого предполагается добавить строку дерева.
//  ДокументСсылка  - Документ - документ, на наличие которого выполняется проверка
//
// Возвращаемое значение:
//   Булево   - Истина если найден, Ложь в обратном случае.
//
Функция ДобавляемыйДокументИмеетсяСредиРодителей(СтрокаРодитель,ИскомыйДокумент)
	
	Если ИскомыйДокумент = ДокументСсылка Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Если ТипЗнч(СтрокаРодитель) = Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	ТекущийРодитель = СтрокаРодитель;
	Пока ТекущийРодитель <> Неопределено Цикл
		Если ТекущийРодитель.Ссылка = ИскомыйДокумент Тогда
			Возврат Истина;	
		КонецЕсли;
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеДокумента, ЧтоЗаменять, ИмяРеквизита)
	
	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменять, ИмяРеквизита + " КАК " + ИмяРеквизита);
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменять, " NULL КАК " + ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента)
	
	РеквизитыДокумента = мКэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокумента = Неопределено Тогда
		
		РеквизитыДокумента = Новый Соответствие;
		РеквизитыДокумента.Вставить("СуммаДокумента",  МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);
		РеквизитыДокумента.Вставить("Валюта",          МетаданныеДокумента.Реквизиты.Найти("Валюта") <> Неопределено);
		
		мКэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДокументовПоКритериюОтбора(ЗначениеКритерияОтбора)
	
	Если НЕ Метаданные.КритерииОтбора.Найти("СвязанныеДокументы") = Неопределено Тогда
		Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СвязанныеДокументы.Ссылка
			|ИЗ
			|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы";
			
			Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерияОтбора);
			Возврат Запрос.Выполнить().Выгрузить();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли НЕ Метаданные.КритерииОтбора.Найти("СвязанныеДокументы") = Неопределено Тогда
		Возврат ПолучитьСписокПодчиненныхДокументов(ЗначениеКритерияОтбора);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция выполняет поиск подчиненных документов текущего документа.
//
&НаСервере 
Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование)
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора.СтруктураПодчиненности.Состав Цикл
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным);
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + СтруктураПутьКДанным.ВидОбъекта + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
		|ВЫБРАТЬ") + "
		|" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает путь к объекту метаданных
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
//
// Параметры:
//  ПутьКДанным - строка.
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
//
&НаСервере
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным) Экспорт
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 по 3 Цикл
		
		Точка = Найти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 по 5  Цикл 
			
			Точка = Найти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если Структура.ТипОбъекта = "Документ" Тогда
		Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
	Иначе
		Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ВывестиПодчиненныеДокументы(ТекущийДокумент,ДеревоРодитель)
	
    СтрокиДерева 	= ДеревоРодитель.ПолучитьЭлементы();
	Таблица         = ПолучитьСписокДокументовПоКритериюОтбора(ТекущийДокумент);
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КэшПоТипамДокументов = Новый Соответствие;

	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл

		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;

		ИмяДокумента = МетаданныеДокумента.Имя;
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента);

		МассивСсылок = КэшПоТипамДокументов[ИмяДокумента];
		Если МассивСсылок = Неопределено Тогда

			МассивСсылок = Новый Массив;
			КэшПоТипамДокументов.Вставить(ИмяДокумента, МассивСсылок);

		КонецЕсли;

		МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);

	КонецЦикла;
	
	ЕСли КэшПоТипамДокументов.Количество() = 0 ТОгда
		Возврат;
	КонецЕсли;

	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";

	Запрос = Новый Запрос;
	Текст  = "";
	Для Каждого КлючИЗначение Из КэшПоТипамДокументов Цикл

		Текст = Текст + ?(Текст = "", " ВЫБРАТЬ ", " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + "
		|	Дата,
		|	Ссылка,
		|	Проведен,
		|	ПометкаУдаления,
		|" + ?(мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["СуммаДокумента"], "СуммаДокумента", "NULL") + " КАК СуммаДокумента,
		|" + """" + ПредставлениеВалютыУчета() + """" + " КАК Валюта,
		|	Представление
		|ИЗ
		|	Документ." + КлючИЗначение.Ключ + "
		|ГДЕ
		|	Ссылка В (&" + КлючИЗначение.Ключ + ")";

		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);

	КонецЦикла;

	Запрос.Текст = ТекстЗапросаНачало + Текст + ТекстЗапросаКонец;
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
        		
		НоваяСтрока = ДобавитьСтрокуВДерево(СтрокиДерева, Выборка);
	    Если НЕ ДобавляемыйДокументИмеетсяСредиРодителей(ДеревоРодитель,Выборка.Ссылка) Тогда
			 ВывестиПодчиненныеДокументы(Выборка.Ссылка,НоваяСтрока)
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуВДерево(СтрокиДерева, Выборка)

	НоваяСтрока = СтрокиДерева.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Ссылка, Представление, СуммаДокумента, Валюта, Проведен, ПометкаУдаления");
	
	Возврат НоваяСтрока;

КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//+yuraos, 10.09.2015
	yuraosИнициализация();
	//+yuraos, 10.09.2015

	Параметры.Свойство("ОбъектОтбора", ДокументСсылка);

	ИсходныйДокумент = ДокументСсылка;
	РежимИспользованияМодальностиБулево = Параметры.РежимИспользованияМодальностиБулево;

	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ОбновитьДеревоСтруктурыПодчиненности();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	//ТаблицаОтчета.Показать();	// 8.3.7.1949. Ошибка: Недопустимая операция для реквизита формы.

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
// Обработчики команд формы

&НаКлиенте
Процедура Обновить(Команда)
	
	ВывестиСтруктуруПодчиненности();
	//ТаблицаОтчета.Показать();		// 8.3.7.1949. Ошибка: Недопустимая операция для реквизита формы.
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДляТекущего(Команда)
	
	ТекущийДокумент = Элементы.полеТаблицаОтчета.ТекущаяОбласть.Расшифровка;	
    	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда		
		ДокументСсылка = ТекущийДокумент; 		
	Иначе 		
		Возврат;		
	КонецЕсли;
	
	ВывестиСтруктуруПодчиненности();
	//ТаблицаОтчета.Показать();	// 8.3.7.1949. Ошибка: Недопустимая операция для реквизита формы.
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ.

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Попытка
			Сообщение.КлючДанных = КлючДанных;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

//Функция возвращает представление валюты учета
//Параметры:
// Нет
Функция ПредставлениеВалютыУчета()
	
	Структура = Новый Структура;
	Структура.Вставить("НаименованиеСокращенное", НСтр("ru = 'руб.'"));
	Структура.Вставить("КодСимвольный", НСтр("ru = 'RUB'"));
		
	Возврат Структура;
	
КонецФункции

// функции внеконтекстных серверных вызововов методов обработки
// http://infostart.ru/public/241811/
&НаСервереБезКонтекста 
Функция ОбъектТипа_ЗначениеСсылочногоТипа(ОбъектТип,ЗначениеСсылка)
	
	// Создаем "облегченный" (без данных) объект обработки.
	This = Новый(ЗначениеИзСтрокиВнутр(ОбъектТип));
	This.УправляемаяФорма = Истина;
	// Вызываем нужный "статический" (не зависящий от данных объекта) метод.
	Возврат This.ЗначениеСсылочногоТипа(ЗначениеСсылка);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	Перем Оповещение;
	Перем ПараметрыОповещенияОЗавершении;
	
	ТекЗначение = Область.Расшифровка ;
	Если ЗначениеЗаполнено(ТекЗначение) И ОбъектТипа_ЗначениеСсылочногоТипа(ЭтаФорма.ОбъектТип,ТекЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Меню = Новый СписокЗначений;
		Меню.Добавить(1, "Открыть в 1С:Администраторе", , БиблиотекаКартинок.Изменить);
		Меню.Добавить(0, "Открыть в форме объекта", , БиблиотекаКартинок.Лупа);
		
		ПараметрыОповещенияОЗавершении = ТекЗначение;
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
			Выбор = ЭтаФорма.ВыбратьИзМеню(Меню,Элемент);
			ТаблицаОтчетаВыборЗавершение(Выбор,ПараметрыОповещенияОЗавершении);
		Иначе
			// Стандартно в немодальном режиме (8.3) с обработкой результата.
			//+yuraos, 10.09.2015 - для обратной совместимости лучше использовать атрибут "ЭтаФорма", "ЭтотОбъект" появляется в режиме совместимости "Версия 8.3.3" и выше.
			Оповещение = Вычислить("Новый ОписаниеОповещения(""ТаблицаОтчетаВыборЗавершение"", ЭтаФормаЭтотОбъект(), ПараметрыОповещенияОЗавершении)");
			Выполнить("ЭтаФорма.ПоказатьВыборИзМеню(Оповещение, Меню, Элемент)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтчетаВыборЗавершение(Выбор, ПараметрыОповещения) Экспорт
	
	// Проверяем ответ диалога отметки значений списка и выполняем действия.
	Если Выбор = Неопределено Тогда
		Возврат;
	ИначеЕсли Выбор.Значение = 1 Тогда
		ЭтаФорма.ВладелецФормы.НовоеОкноАдминистатора1С(Истина,ПараметрыОповещения);
	Иначе
		Попытка
			// По-возможности используем асинхронный метод.
			Выполнить("ПоказатьЗначение(, ПараметрыОповещения);");
		Исключение
			ОткрытьЗначение(ПараметрыОповещения);
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура yuraosИнициализация()
	
	// Добавим служебные реквизиты формы.
	мсДобавить = Новый Массив;
	мсДобавить.Добавить(Новый РеквизитФормы("ОбъектТип", Новый ОписаниеТипов("Строка", ,
														 Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), "", "Тип объекта обработки", Ложь));
	ЭтаФорма.ИзменитьРеквизиты(мсДобавить);
	
	Обработа = РеквизитФормыВЗначение("Объект");
	
	// Запомним тип объекта обработки для внеонтекстного вызова его методов.
	// http://infostart.ru/public/241811/
	ЭтаФорма.ОбъектТип = ЗначениеВСтрокуВнутр(ТипЗнч(Обработа));
	
	Элементы.полеТаблицаОтчета.ТолькоПросмотр = Истина;
	Элементы.полеТаблицаОтчета.Защита = Ложь; // Иногда бывает нужно скопировать строковое представление документа в буфер.
	Элементы.полеТаблицаОтчета.УстановитьДействие("Выбор", "ТаблицаОтчетаВыбор");
	
КонецПроцедуры
//+yuraos, 10.09.2015

&НаСервере
Функция ОбъектОбработка()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция ИспользоватьРежимМодальности()
	Возврат РежимИспользованияМодальностиБулево;
КонецФункции

&НаКлиенте
Функция ЭтаФормаЭтотОбъект()
	Попытка
		Возврат Вычислить("ЭтаФорма");
	Исключение
		Возврат Вычислить("ЭтотОбъект");
	КонецПопытки;
КонецФункции
