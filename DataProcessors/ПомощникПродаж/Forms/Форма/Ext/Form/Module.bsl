
&НаСервере
Функция ПолучитьМаксимальноеЗначение(Номенклатура,ТекущееЗначениеСкидкиНаценки)
	МаксСкидка = 0;
	Данные = Объект.Соглашение;
	СтруктураОтбора = Новый Структура("ЦеноваяГруппа",Номенклатура.ЦеноваяГруппа);
	МассивСтрок = Данные.ЦеновыеГруппы.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() > 0 Тогда 
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Макс(МассивСтрок[0].ПроцентРучнойСкидки,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки);
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			ПроцентНаценкиОбщий = МассивСтрок[0].ПроцентРучнойНаценки;
			ПроцентНаценкиИнд   = ?(МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки < 0,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки,0);
			Возврат Мин(ПроцентНаценкиОбщий,ПроцентНаценкиИнд);
		КонецЕсли;
	Иначе
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Объект.Соглашение.ПроцентРучнойСкидки;
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			Возврат Объект.Соглашение.ПроцентРучнойНаценки;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЦеноваяГруппа",СсылкаНоменклатура.ЦеноваяГруппа);
	МассивСтрок = СтруктураТаблиц.Ограничения.НайтиСтроки(СтруктураОтбора);
	ЗначениеСкидки = 0;
	Если МассивСтрок.Количество() > 0 Тогда
		Попытка
			Если НЕ МассивСтрок[0].Деактивирован Тогда 
				ЗначениеСкидки = ?(МассивСтрок[0].МаксимальныйПроцентРучнойСкидки = 0,МассивСтрок[0].МаксимальныйПроцентРучнойНаценки,МассивСтрок[0].МаксимальныйПроцентРучнойСкидки);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат ЗначениеСкидки;
КонецФункции

&НаСервере
Функция ТестРасчетСк()
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СписокПрименныхСкидок = Новый СписокЗначений;
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	Если ПримененныеСкидки.ДеревоСкидок.Строки.Количество() > 0 Тогда 
		Для Каждого СтрокаСписка из ПримененныеСкидки.ДеревоСкидок.Строки[0].Строки цикл
			Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий.Количество()>0  Тогда  // есть дополнительные условия по скидке... нужна на них проверка
				Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий[0].Выполнено = Истина тогда
					СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
				КонецЕсли;
			иначе // условий нет.. все скидки - в список...
				СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокПрименныхСкидок;
КонецФункции

&НаСервере
Процедура ДобавитьКолонкуНаСервере()
	КвЧисла = Новый КвалификаторыЧисла(15,2);	
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("ПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.Товары", "% общей скидки", Истина));
	нРеквизиты.Добавить(Новый РеквизитФормы("СуммаПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.Товары", "Общая скидка", Истина));
	ИзменитьРеквизиты(нРеквизиты);
	
	нЭлемент = Элементы.Добавить("ПроцентОбщий", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.ПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.ПодчиненныеЭлементы.ПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	нЭлемент = Элементы.Добавить("СуммаПроцентОбщий", Тип("ПолеФормы"), Элементы.Товары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.Товары.СуммаПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.ПодчиненныеЭлементы.СуммаПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СуммаПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
КонецПроцедуры


&НаКлиенте
&Вместо("НазначитьАвтоматическиеСкидкиЗавершение")
Процедура Рин1_НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры)
	
		Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		//++Гольм А.А. (Гигабайт)
		//ПоказатьОповещениеПользователя(
		//	НСтр("ru = 'Скидки (наценки)'"),
		//	,
		//	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		//	БиблиотекаКартинок.Информация32);
		//--Гольм А.А. (Гигабайт)
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
&Вместо("НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение")
Процедура Рин1_НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
	
		АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		//++Гольм А.А. (Гигабайт)
		//СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		//--Гольм А.А. (Гигабайт)
		
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

//++Шерстюк Ю.Ю. нет отличий от типовой
//&НаКлиенте
//&Вместо("НазначитьРучнуюСкидкуЗавершение")
//Процедура Рин1_НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
//	
//		АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
//	
//	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
//		
//		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
//		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
//		
//		РассчитатьИтоговыеПоказатели(ЭтаФорма);
//		
//	КонецЕсли;

//КонецПроцедуры
//--Шерстюк Ю.Ю.
&НаКлиенте
Процедура Рин1_ОбработкаВыбораВместо(ВыбранноеЗначение, ИсточникВыбора)
	
		Перем ВыполняемаяОперация;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПродаж.Форма.Форма.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда
		
		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда
		
		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда
		
		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПродаж.Форма.Настройка" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ОбработатьИзменениеПараметровСервер(ВыбранноеЗначение);
		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации"
		Или ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПродаж.Форма.РеквизитыПечатиАкта" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			
			Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
				Объект.БанковскийСчет = ВыбранноеЗначение.БанковскийСчетОрганизации;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗагрузитьДополнительныеРеквизитыИзХранилищаСервер(ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма,
													ОпределитьПараметрыСерийНаКлиенте(ВыбранноеЗначение.ИдентификаторТекущейСтроки),
													ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	//++Гольм А.А. (Гигабайт)	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
	//ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
	//--Гольм А.А. (Гигабайт)
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаСервере
&Вместо("ОбработкаВыбораПодборНаСервере")
Процедура Рин1_ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, СписокСвойств)
	
	ЗаполнитьСклады      = Ложь;
	ТаблицаТоваров       = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		
		Если НЕ ЗначениеЗаполнено(СписокСвойств) Тогда
			//++Гольм А.А. (Гигабайт)
			//СписокСвойств = "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, 
			//				  |КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки, ВариантОбеспечения, Серия, ДатаОтгрузки";
			СписокСвойств = "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, ВариантОбеспечения, Серия, ДатаОтгрузки";
			//--Гольм А.А. (Гигабайт)
			Если ЗначениеЗаполнено(Объект.Склад) Тогда
				СписокСвойств = СписокСвойств + ", Склад";
			КонецЕсли;
		КонецЕсли;

		// Заполнить склады по шапке, если склады не пришли в таблице.
		ЗаполнитьСклады = СтрНайти(СписокСвойств, "Склад") = 0;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		Если ТекущаяСтрока.ИндексИконкиВыбора = 0 Тогда
			Если ТекущаяСтрока.КоличествоПрогноз > 0 Тогда
				ТекущаяСтрока.ИндексИконкиВыбора = 1;
			ИначеЕсли ТекущаяСтрока.КоличествоОбъемПредыдущегоЗаказа > 0 Тогда
				ТекущаяСтрока.ИндексИконкиВыбора = 2;
				ТекущаяСтрока.КоличествоПрогноз = ТекущаяСтрока.КоличествоОбъемПредыдущегоЗаказа;
			Иначе
				ТекущаяСтрока.ИндексИконкиВыбора = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
									Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
									Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
									Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
									Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи",
									Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
									Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьСодержание",
									ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		СтруктураДействий.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокСуффикс", "Прогноз");
		//++Гольм А.А. (Гигабайт)
		СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
		//--Гольм А.А. (Гигабайт)
		
		ПересчитатьКоличествоУпаковокОбъемПредыдущегоЗаказа(ТекущаяСтрока, КэшированныеЗначения);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВариантОбеспечения) Тогда
			ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
			
			СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
										Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
		КонецЕсли;

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекущаяСтрока, Объект.ВариантОформленияДокументов, Объект.Дата, Объект.НеОтгружатьЧастями);
		
		Если ИспользоватьРасширенныеВозможностиЗаказаКлиента
			И (НЕ Объект.НеОтгружатьЧастями
					И ТекущаяСтрока.ДатаОтгрузки = НачалоДня(ТекущаяДатаСеанса())
				ИЛИ (Объект.НеОтгружатьЧастями
					И Объект.ДатаОтгрузки = НачалоДня(ТекущаяДатаСеанса()))
				ИЛИ (ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
					ИЛИ ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"))) Тогда

			ТекущаяСтрока.ВариантОбеспечения = ?(ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно,
												Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно,
												Перечисления.ВариантыОбеспечения.Отгрузить);
			Иначе
			Если Объект.УпрощенноеОбеспечение И Не ЗначениеЗаполнено(ТекущаяСтрока.ВариантОбеспечения) Тогда
				ВариантыОбеспечения.Свойство(ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущаяСтрока.ТипНоменклатуры),ТекущаяСтрока.ВариантОбеспечения);
			КонецЕсли;									
		КонецЕсли;
		//++Гольм А.А. (Гигабайт)
		ТекущаяСтрока.ПроцентОбщий      = ТекущаяСтрока.ПроцентАвтоматическойСкидки + ТекущаяСтрока.ПроцентРучнойСкидки;	
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
		//--Гольм А.А. (Гигабайт)
	КонецЦикла;
	
	Если ЗаполнитьСклады Тогда
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
		
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);
		
		Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	КонецЕсли;
	
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект,
		Объект.Товары);
	
	Если Объект.НеОтгружатьЧастями
		И ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		Объект.ДатаОтгрузки = Макс(ВыбранноеЗначение.МаксимальнаяДатаОтгрузки,
									Объект.ДатаОтгрузки, НачалоДня(ТекущаяДатаСеанса()));
		
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерий();
	
	ПриИзмененииКорзиныНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПартнера(Команда)
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента", Новый Структура("Ключ", Объект.Партнер));
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОткрытьПодборВместо(Команда)
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		ИЛИ Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	//++Гольм А.А. (Гигабайт)
	СкидкаПримененная = ТестРасчетСк();
	//--Гольм А.А. (Гигабайт)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в помощник продаж';
							|en = 'Select goods using sales wizard'");
	
	ПараметрыФормы = Новый Структура;
	Если Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
		ПараметрыФормы.Вставить("Соглашение", Неопределено);
	Иначе
		ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	КонецЕсли;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВозвращатьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
	Иначе
		ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	
	Если ЭтоОперацияПередачи(Объект.ХозяйственнаяОперация) Тогда
		ОтборПоТипуНоменклатуры = НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре();
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",Истина);
	Иначе 
		ОтборПоТипуНоменклатуры =НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареУслугеРаботе();
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
		
		РезультатПоиска = ОтборПоТипуНоменклатуры.Найти(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		Если РезультатПоиска <> Неопределено Тогда
			ОтборПоТипуНоменклатуры.Удалить(РезультатПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов = 
			ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение")
		ИЛИ Объект.ВариантОформленияДокументов = 
			ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг") Тогда
		ПодборВариантовОбеспечения = Ложь;
	Иначе
		ПодборВариантовОбеспечения = НЕ (Объект.НеОтгружатьЧастями И Объект.ДатаОтгрузки = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()));
	КонецЕсли; 
	
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(ОтборПоТипуНоменклатуры));

	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",				   НЕ Объект.НеОтгружатьЧастями);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                  ПараметрыУказанияСерий.Заказ);
	ПараметрыФормы.Вставить("Назначение",                              Неопределено);
	ПараметрыФормы.Вставить("Подразделение",                           Объект.Подразделение);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",              ПодборВариантовОбеспечения);
	//++Гольм А.А. (Гигабайт)
	ПараметрыФормы.Вставить("ПримененнаяСкидка",                       СкидкаПримененная);
	//--Гольм А.А. (Гигабайт)
	ПараметрыФормы.Вставить("ВариантыОбеспечения",                     ВариантыОбеспечения);
	ПараметрыФормы.Вставить("ОграничиватьВариантыОбеспечения",         Объект.УпрощенноеОбеспечение);
	//++Гольм А.А. (Гигабайт)
	//ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	ОткрытьФорму("Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
&Вместо("ОткрытьПодборСерий")
Процедура Рин1_ОткрытьПодборСерий(Текст, ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Выберите строку товаров, для которой необходимо указать серии.'");

			ПоказатьПредупреждение(,ТекстСообщения);

			Возврат;
		КонецЕсли;
		
		ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
	Иначе
		ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Не ЭтоРеализация(ТекущиеДанные.ВариантОформления)
		//++ НЕ УТ
		И Не ЭтоПередачаТоваров(ТекущиеДанные.ВариантОформления)
		//-- НЕ УТ
		И ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		Если ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			ТекстСообщения = НСтр("ru='Для этого товара серии указывать не нужно. На возможность указания серий могут влиять: вид номенклатуры, склад, политика указания серий, статус документа.'");
			
			ПоказатьПредупреждение(,ТекстСообщения);
			
			Возврат;
		КонецЕсли;
		
		Если Не (ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")
				Или ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")) Тогда
			
			ТекстСообщения = НСтр("ru='Для выбора серий необходимо указать действие ""Отгрузить"" или ""Отгрузить обособленно"".'");
			
			ПоказатьПредупреждение(,ТекстСообщения);
			
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ПараметрыФормы.Вставить("ВыборСерии", Истина);
			ОткрытьФорму(
			    //++Гольм А.А. (Гигабайт)
				"Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				//"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				//++Гольм А.А. (Гигабайт)
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЭтоРеализация = ЭтоРеализация(Элементы.Товары.ТекущиеДанные.ВариантОформления)
						//++ НЕ УТ
						Или ЭтоПередачаТоваров(Элементы.Товары.ТекущиеДанные.ВариантОформления)
						//-- НЕ УТ
						;
		
		Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ОпределитьПараметрыСерийНаКлиенте(ТекущиеДанныеИдентификатор), Текст, ТекущиеДанные) Тогда

			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ЭтоРеализация);
			
			ЗначениеВозврата = Неопределено;
			
			ДополнительныеПараметры = Новый Структура("ПараметрыФормыУказанияСерий, ЭтоРеализация",
														ПараметрыФормыУказанияСерий, ЭтоРеализация);
			ОписаниеОповещения      = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение",
																ЭтотОбъект,
																ДополнительныеПараметры);
			
			ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий, ЭтаФорма, , , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Партнер <> ВыбранноеЗначение тогда
		Если Объект.Товары.Количество() <> 0 тогда
			Параметр = Новый Структура("СтароеЗначение,НовоеЗначение",Объект.Партнер,ВыбранноеЗначение);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    ОтветНаВопрос = РезультатВопроса;
    ТекПараметр = ДополнительныеПараметры.СтароеЗначение;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
			Объект.Соглашение = ДополнительныеПараметры.НовоеЗначение;
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			СоглашениеПриИзмененииСервер();
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
		КонецЕсли;
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Партнер = ДополнительныеПараметры.НовоеЗначение;
			ПартнерПриИзмененииСервер();
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
				ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
		РассчитатьСкидкиНаценкиРучныеДляТаблЧасти();
	иначе
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
			Объект.Соглашение = ДополнительныеПараметры.СтароеЗначение;
		КонецЕсли;
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Партнер = ДополнительныеПараметры.СтароеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПриОткрытииПосле(Отказ)
	
	ДобавитьКолонкуНаСервере();
	
//{{20201029 ГлазуновДВ
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПечататьАктВыполненныхРабот",                   Объект.ПечататьАктВыполненныхРабот);
	СтруктураПараметров.Вставить("ПечататьЗаказКлиента",                          Объект.ПечататьЗаказКлиента);
	СтруктураПараметров.Вставить("ПечататьКоммерческоеПредложение",               Объект.ПечататьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("ПечататьПриходныйКассовыйОрдер",                Объект.ПечататьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("ПечататьРеализациюТоваровУслуг",                Объект.ПечататьРеализациюТоваровУслуг);
	//++ НЕ УТ
	СтруктураПараметров.Вставить("ПечататьПередачуТоваровХранителю",              Объект.ПечататьПередачуТоваровХранителю);
	//-- НЕ УТ
	СтруктураПараметров.Вставить("ПечататьСчетНаОплату",                          Объект.ПечататьСчетНаОплату);
	СтруктураПараметров.Вставить("ПечататьСчетФактуру",                           Объект.ПечататьСчетФактуру);
	СтруктураПараметров.Вставить("СоздаватьДокументПродажи",                      Объект.СоздаватьДокументПродажи);
	//++ НЕ УТ
	СтруктураПараметров.Вставить("СоздаватьПередачуТоваровХранителю",             Объект.СоздаватьПередачуТоваровХранителю);
	//-- НЕ УТ
	СтруктураПараметров.Вставить("СоздаватьЗаказКлиента",                         Объект.СоздаватьЗаказКлиента);
	СтруктураПараметров.Вставить("СоздаватьКоммерческоеПредложение",              Объект.СоздаватьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("СоздаватьПриходныйКассовыйОрдер",               Объект.СоздаватьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("СоздаватьСчетНаОплату",                         Объект.СоздаватьСчетНаОплату);
	СтруктураПараметров.Вставить("СтатусЗаказаКлиента",                           Объект.СтатусЗаказаКлиента);
	СтруктураПараметров.Вставить("СтатусКоммерческогоПредложения",                Объект.СтатусКоммерческогоПредложения);
	СтруктураПараметров.Вставить("СтатусРеализацииТоваровУслуг",                  Объект.СтатусРеализацииТоваровУслуг);
	СтруктураПараметров.Вставить("СоздаватьТранспортнуюНакладнуюПоУмолчанию",     Объект.СоздаватьТранспортнуюНакладнуюПоУмолчанию);
	СтруктураПараметров.Вставить("СоздаватьДоверенностьНаПолучениеДСПоУмолчанию", Объект.СоздаватьДоверенностьНаПолучениеДСПоУмолчанию);
	СтруктураПараметров.Вставить("ВариантОформленияДокументов",                   Объект.ВариантОформленияДокументов);
	
	СтруктураПараметров.Вставить("СоздаватьЗаявкуНаВозвратТоваровОтКлиентов",     Объект.СоздаватьЗаявкуНаВозвратТоваровОтКлиентов);
	СтруктураПараметров.Вставить("ПечататьЗаявкуНаВозвратТоваровОтКлиентов",      Объект.ПечататьЗаявкуНаВозвратТоваровОтКлиентов);
	СтруктураПараметров.Вставить("СтатусЗаявкиНаВозвратТоваровОтКлиентов",        Объект.СтатусЗаявкиНаВозвратТоваровОтКлиентов);
	СтруктураПараметров.Вставить("ЗаполнятьТоварыПоСоглашению",                   Объект.ЗаполнятьТоварыПоСоглашению);
	СтруктураПараметров.Вставить("ОтображатьРекомендацииКПокупке",                Объект.ОтображатьРекомендацииКПокупке);
	СтруктураПараметров.Вставить("СпособПрогнозированияПродаж",                   Объект.СпособПрогнозированияПродаж);
	СтруктураПараметров.Вставить("ПериодСбораСтатистики",                         Объект.ПериодСбораСтатистики);
	СтруктураПараметров.Вставить("УпрощенноеОбеспечение",                         Объект.УпрощенноеОбеспечение);
	СтруктураПараметров.Вставить("ВариантОбеспечения",                            Объект.ВариантОбеспечения);
	СтруктураПараметров.Вставить("НеЗадаватьВопросОбеспечение",                   Объект.НеЗадаватьВопросОбеспечение);
	
	ФормаНастроек = ПолучитьФорму("Обработка.ПомощникПродаж.Форма.Настройка", СтруктураПараметров, ЭтаФорма);
	
	Если ФормаНастроек.Рин1_ИспользоватьПредустановки
		И ЗначениеЗаполнено(ФормаНастроек.Рин1_Организация)
		И ЗначениеЗаполнено(ФормаНастроек.Рин1_Склад)
		И ЗначениеЗаполнено(ФормаНастроек.Рин1_Партнер)
		И ЗначениеЗаполнено(ФормаНастроек.Рин1_Соглашение)
		И ЗначениеЗаполнено(ФормаНастроек.Рин1_Контрагент)
		И ЗначениеЗаполнено(ФормаНастроек.Рин1_Договор) Тогда
		
		Объект.Организация =	 ФормаНастроек.Рин1_Организация;
		Объект.Склад =			 ФормаНастроек.Рин1_Склад;
		Объект.Партнер =		 ФормаНастроек.Рин1_Партнер;
		Объект.Соглашение =		 ФормаНастроек.Рин1_Соглашение;
		Объект.Контрагент =		 ФормаНастроек.Рин1_Контрагент;
		Объект.Договор =		 ФормаНастроек.Рин1_Договор;
		Элементы.Договор.Видимость = Истина;
		Элементы.Договор.Доступность = Истина;
		
		Отказ = Ложь;
		Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
			ИЛИ Не ЗначениеЗаполнено(Объект.Валюта) Тогда
			ОчиститьСообщения();
			СообщитьОбОшибкахОткрытияПодбора(Отказ);
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		СкидкаПримененная = ТестРасчетСк();
		
		ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в помощник продаж'");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		ПараметрыФормы.Вставить("ВозвращатьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			ПараметрыФормы.Вставить("Склад", Объект.Склад);
		Иначе
			ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
		КонецЕсли;
		ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
		ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
		ПараметрыФормы.Вставить("Дата", Объект.Дата);
		ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
		Если ЭтоОперацияПередачи(Объект.ХозяйственнаяОперация) Тогда
			ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
			ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",Истина);
		КонецЕсли;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                Истина);
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                  ПараметрыУказанияСерий.Заказ);
		ПараметрыФормы.Вставить("Назначение",                              Неопределено);
		ПараметрыФормы.Вставить("Подразделение",                           Объект.Подразделение);
		ПараметрыФормы.Вставить("ПодборВариантовОбеспечения", Истина);
		ПараметрыФормы.Вставить("ПримененнаяСкидка",                       СкидкаПримененная);
		ПараметрыФормы.Вставить("ВариантыОбеспечения",                     ВариантыОбеспечения);
		ПараметрыФормы.Вставить("ОграничиватьВариантыОбеспечения",         Объект.УпрощенноеОбеспечение);
		ОткрытьФорму("Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
//}}20201029 ГлазуновДВ
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	// тут програмно обрабатываем изменения добавленной колонки...
	Если Элемент.Имя = "ПроцентОбщий" Тогда 
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ЗначениеАвтоматической = ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		Если ТекущаяСтрока.ПроцентОбщий <> 0 Тогда 
			ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ЗначениеАвтоматической;
			ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
		Иначе
			Если ЗначениеАвтоматической <> 0 Тогда 
				ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
			КонецЕсли;	
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ЗначениеАвтоматической = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если  ТекущаяСтрока.СуммаПроцентОбщий <> 0 Тогда 
			ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ЗначениеАвтоматической;
			ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
		Иначе
			Если ЗначениеАвтоматической <> 0 Тогда 
				ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
			КонецЕсли;	
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	Иначе
		Если ТекущаяСтрока <> Неопределено Тогда 
			ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеДляТаблЧасти()
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда 
		АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
		// добавлено ГИГ
		Если Объект.Товары.Количество() > 0 Тогда 
			Для Каждого ТекущаяСтрока из Объект.Товары Цикл 
				// автоматическое заполнение по скидкам / наценкам
				Если ТекущаяСтрока <> Неопределено тогда  
					Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
						СсылкаНоменклатура = ТекущаяСтрока.Номенклатура;
						РассчитатьСкидкиНаценкиКлиент();
						ТекущаяСтрока.ПроцентРучнойСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
						
						ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентАвтоматическойСкидки + ТекущаяСтрока.ПроцентРучнойСкидки;	
						ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура)
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;

	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	ЗначениеСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	ТекЭлемент = Элементы.Товары.ТекущиеДанные;
	ТекЭлемент.ПроцентРучнойСкидки = ЗначениеСкидки;	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Соглашение <> ВыбранноеЗначение тогда
		Если Объект.Товары.Количество() <> 0 тогда
			СтандартнаяОбработка = Ложь;
			Параметр = Новый Структура("СтароеЗначение,НовоеЗначение",Объект.Соглашение,ВыбранноеЗначение);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСделку(Команда)
	
	ИмяФормыОбъекта = "Справочник.СделкиСКлиентами.ФормаОбъекта";
	ПараметрыОткрытияФормы = Новый Структура("Партнер, СоглашениеСКлиентом", Партнер, Объект.Соглашение);
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("Основание", ПараметрыОткрытияФормы), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыВидЦеныПриИзмененииПосле(Элемент)
	
	ПроцентПриИзменении(Элементы.ПроцентОбщий);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыВыборВместо(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПродаж.Форма.Форма.Элементы.Товары.Выбор");
	
	Если Не ТолькоПросмотрУстановлен
		И Элемент.ТекущийЭлемент = Элементы.ТоварыВариантОбеспечения Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму(
				//++Гольм А.А. (Гигабайт)
				"Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				//"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				//--Гольм А.А. (Гигабайт)
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Иначе
			
			ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
			ПараметрыПроверки.Поля.Удалить("Подразделение");
			
			Если ОбеспечениеКлиент.ПроверитьЗаполнение(Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
				
				ПараметрыФормы = ПараметрыВыбораОбеспечения();
				
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда

					ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы, ЭтаФорма,
						УникальныйИдентификатор);
					
				Иначе

					Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы,
																						"Товары",
																						НСтр("ru = 'Товары'"));
					
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не Объект.СкидкиРассчитаны Тогда
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
			
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);

			Если СтруктураСообщений.Сообщения.Количество() > 0
				И СтруктураСообщений.АвтоматическиОткрывать Тогда
				
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			РассчитатьСкидкиБезПримененияКОбъекту();
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
		
	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",    ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора",  ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец",         УникальныйИдентификатор);
			
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"));
			
		КонецЕсли;

	ИначеЕсли Поле = Элементы.ТоварыКоличествоУпаковокПрогноз Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ТекущаяСтрока.ИндексИконкиВыбора = 1 Тогда
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокПрогноз;
			ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоПрогноз;
			ТекущаяСтрока.КоличествоУпаковокПрогноз = ТекущаяСтрока.КоличествоУпаковокОбъемПредыдущегоЗаказа;
			ТекущаяСтрока.КоличествоПрогноз = ТекущаяСтрока.КоличествоОбъемПредыдущегоЗаказа;
			ТекущаяСтрока.ИндексИконкиВыбора = ТекущаяСтрока.ИндексИконкиВыбора + 1;
		ИначеЕсли ТекущаяСтрока.ИндексИконкиВыбора = 2 Тогда
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокПрогноз;
			ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоПрогноз;
			ТекущаяСтрока.ИндексИконкиВыбора = ТекущаяСтрока.ИндексИконкиВыбора + 1;
		ИначеЕсли ТекущаяСтрока.ИндексИконкиВыбора = 3 Тогда
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + ТекущаяСтрока.КоличествоУпаковокПрогноз;
			ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок + ТекущаяСтрока.КоличествоПрогноз;
		КонецЕсли;
		
		Если ТекущаяСтрока.ИндексИконкиВыбора <> 0 Тогда
			СтруктураДействий = Новый Структура;
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыКоличествоУпаковокПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//++Гольм А.А. (Гигабайт)
	ТекущаяСтрока.ПроцентОбщий      = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
	//--Гольм А.А. (Гигабайт)
	РассчитатьИтоговыеПоказатели(ЭтаФорма);

	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	//++Гольм А.А. (Гигабайт)
	ПроцентПриИзменении(Элементы.ПроцентОбщий);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПриИзмененииВместо(Элемент)
	
	ПроверитьПерезаполнитьЭтапыОплаты();
	ПриИзмененииКорзиныНаСервере();
	//++Гольм А.А. (Гигабайт)
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	ТекЭлемент = Элементы.Товары.ТекущиеДанные;
	Если ТекЭлемент <> Неопределено тогда  
		Если ЗначениеЗаполнено(ТекЭлемент.Номенклатура) Тогда 
			СсылкаНоменклатура = ТекЭлемент.Номенклатура;
			Если ТекЭлемент.ПроцентРучнойСкидки = 0 Тогда 
				РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//--Гольм А.А. (Гигабайт)
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	//++Гольм А.А. (Гигабайт)
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекЭлемент);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыПроцентРучнойСкидкиПриИзмененииВместо(Элемент)
	
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	// добавлена проверка на макс ручной
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,ТекущаяДата(),ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
    // конец проверки
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТоварыСуммаРучнойСкидкиПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	//++Гольм А.А. (Гигабайт)
	ФлагНаценка = Ложь;
	//--Гольм А.А. (Гигабайт)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",
								Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	//++Гольм А.А. (Гигабайт)
	// добавлена проверка на макс ручной	
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,ТекущаяДата(),ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
    // конец проверки
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
&Вместо("ОткрытьФормуНастроек")
Процедура Рин1_ОткрытьФормуНастроек()
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПечататьАктВыполненныхРабот",                   Объект.ПечататьАктВыполненныхРабот);
	СтруктураПараметров.Вставить("ПечататьЗаказКлиента",                          Объект.ПечататьЗаказКлиента);
	СтруктураПараметров.Вставить("ПечататьКоммерческоеПредложение",               Объект.ПечататьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("ПечататьПриходныйКассовыйОрдер",                Объект.ПечататьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("ПечататьРеализациюТоваровУслуг",                Объект.ПечататьРеализациюТоваровУслуг);
	//++ НЕ УТ
	СтруктураПараметров.Вставить("ПечататьПередачуТоваровХранителю",              Объект.ПечататьПередачуТоваровХранителю);
	//-- НЕ УТ
	СтруктураПараметров.Вставить("ПечататьСчетНаОплату",                          Объект.ПечататьСчетНаОплату);
	СтруктураПараметров.Вставить("ПечататьСчетФактуру",                           Объект.ПечататьСчетФактуру);
	СтруктураПараметров.Вставить("СоздаватьДокументПродажи",                      Объект.СоздаватьДокументПродажи);
	//++ НЕ УТ
	СтруктураПараметров.Вставить("СоздаватьПередачуТоваровХранителю",             Объект.СоздаватьПередачуТоваровХранителю);
	//-- НЕ УТ
	СтруктураПараметров.Вставить("СоздаватьЗаказКлиента",                         Объект.СоздаватьЗаказКлиента);
	СтруктураПараметров.Вставить("СоздаватьКоммерческоеПредложение",              Объект.СоздаватьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("СоздаватьПриходныйКассовыйОрдер",               Объект.СоздаватьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("СоздаватьСчетНаОплату",                         Объект.СоздаватьСчетНаОплату);
	СтруктураПараметров.Вставить("СтатусЗаказаКлиента",                           Объект.СтатусЗаказаКлиента);
	СтруктураПараметров.Вставить("СтатусКоммерческогоПредложения",                Объект.СтатусКоммерческогоПредложения);
	СтруктураПараметров.Вставить("СтатусРеализацииТоваровУслуг",                  Объект.СтатусРеализацииТоваровУслуг);
	СтруктураПараметров.Вставить("СоздаватьТранспортнуюНакладнуюПоУмолчанию",     Объект.СоздаватьТранспортнуюНакладнуюПоУмолчанию);
	СтруктураПараметров.Вставить("СоздаватьДоверенностьНаПолучениеДСПоУмолчанию", Объект.СоздаватьДоверенностьНаПолучениеДСПоУмолчанию);
//Исходное	СтруктураПараметров.Вставить("ВариантОформленияДокументов",                   Объект.ВариантОформленияДокументов);
//{{20201028 ГлазуновДВ
	СтруктураПараметров.Вставить("ВариантОформленияДокументов",                   ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента"));
	СтруктураПараметров.Вставить("Рин1_яОрганизацияФорма",                        Объект.Организация);
	СтруктураПараметров.Вставить("Рин1_яСкладФорма",                              Объект.Склад);
	СтруктураПараметров.Вставить("Рин1_яПартнерФорма",                            Объект.Партнер);
	СтруктураПараметров.Вставить("Рин1_яСоглашениеФорма",                         Объект.Соглашение);
	СтруктураПараметров.Вставить("Рин1_яКонтрагентФорма",                         Объект.Контрагент);
	СтруктураПараметров.Вставить("Рин1_яДоговорФорма",                            Объект.Договор);
//}}20201028 ГлазуновДВ
	
	СтруктураПараметров.Вставить("СоздаватьЗаявкуНаВозвратТоваровОтКлиентов",     Объект.СоздаватьЗаявкуНаВозвратТоваровОтКлиентов);
	СтруктураПараметров.Вставить("ПечататьЗаявкуНаВозвратТоваровОтКлиентов",      Объект.ПечататьЗаявкуНаВозвратТоваровОтКлиентов);
	СтруктураПараметров.Вставить("СтатусЗаявкиНаВозвратТоваровОтКлиентов",        Объект.СтатусЗаявкиНаВозвратТоваровОтКлиентов);
	СтруктураПараметров.Вставить("ЗаполнятьТоварыПоСоглашению",                   Объект.ЗаполнятьТоварыПоСоглашению);
	СтруктураПараметров.Вставить("ОтображатьРекомендацииКПокупке",                Объект.ОтображатьРекомендацииКПокупке);
	СтруктураПараметров.Вставить("СпособПрогнозированияПродаж",                   Объект.СпособПрогнозированияПродаж);
	СтруктураПараметров.Вставить("ПериодСбораСтатистики",                         Объект.ПериодСбораСтатистики);
	СтруктураПараметров.Вставить("УпрощенноеОбеспечение",                         Объект.УпрощенноеОбеспечение);
	СтруктураПараметров.Вставить("ВариантОбеспечения",                            Объект.ВариантОбеспечения);
	СтруктураПараметров.Вставить("НеЗадаватьВопросОбеспечение",                   Объект.НеЗадаватьВопросОбеспечение);
	
	ОткрытьФорму("Обработка.ПомощникПродаж.Форма.Настройка", СтруктураПараметров, ЭтаФорма, , , , Неопределено,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

