
&Вместо("ЗаполнитьОперативныеВзаиморасчеты")
Процедура Рин1_ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры)
	
	#Область ИнициализацияЗапросаИПеременных
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
	
	ЗапросГлобальныхПеременных = Новый Запрос;
	ЗапросГлобальныхПеременных.Текст = "
	|ВЫБРАТЬ
	|	Справочник.Организация КАК Организация
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка = &АналитикаУчетаПоПартнерам
	|;
	|ВЫБРАТЬ
	|	КурсыВалют.Кратность КАК КратностьРегл,
	|	ЕСТЬNULL(КурсыВалютыУпр.Кратность,1) КАК КратностьУпр
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних() КАК КурсыВалют
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних() КАК КурсыВалютыУпр
	|			ПО КурсыВалютыУпр.Валюта = &ВалютаУпр
	|ГДЕ КурсыВалют.Валюта = &ВалютаРасчетов
	|;
	|ВЫБРАТЬ
	|	Справочник.ГрафикИсполненияДоговора КАК ГрафикИсполненияДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка = &ОбъектРасчетов
	|";
	 
	ЗапросГлобальныхПеременных.УстановитьПараметр("АналитикаУчетаПоПартнерам",  ОсновныеПараметры.АналитикаУчетаПоПартнерам);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ОбъектРасчетов",             ОсновныеПараметры.ОбъектРасчетов);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ВалютаРасчетов",             ОсновныеПараметры.ВалютаРасчетов);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ВалютаУпр",                  ВалютаУправленческогоУчета);
	Результаты =  ЗапросГлобальныхПеременных.ВыполнитьПакет();
	
	Организация = Результаты[0].Выгрузить()[0].Организация;
	
	КурсыВалютСрезПоследних = Результаты[1].Выгрузить();
	КратностьРегл = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КратностьРегл, 1);
	КратностьУпр  = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КратностьУпр, 1);
	
	//Если график исполнения в договоре, то вместо графика заказа будет уточняться график договора.
	//Если пользователь каким-то образом ввел заказы с графиками по такому договору, то все этапы таких заказов будут отнесены к графику договора
	//и закрываться будут по ФИФО независимо от привязки накладных к заказам
	Если ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ОсновныеПараметры.ОбъектРасчетов) Тогда
		ГрафикИсполненияДоговора = Результаты[2].Выгрузить()[0].ГрафикИсполненияДоговора;
		ГрафикВДоговоре = ЗначениеЗаполнено(ГрафикИсполненияДоговора);
	Иначе
		ГрафикИсполненияДоговора = Неопределено;
		ГрафикВДоговоре = ЛОЖЬ;
	КонецЕсли;
	
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	ХозяйственныеОперацииНеОтгрузка = ХозяйственныеОперацииНеОтгрузка();
	
	//Хозяйственные операции для заполнения.
	ХозяйственныеОперации = Новый Соответствие; 
	ХозяйственныеОперации.Вставить("ПереносАванса", Перечисления.ХозяйственныеОперации.ПереносАванса);
	
	Если ОсновныеПараметры.ЭтоРасчетыСКлиентами Тогда
		
		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаКлиента);
		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента);
		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль);
		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток);
		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента);
		
		РасчетыПоЗаказу = ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказКлиента")
						ИЛИ ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
		//++ НЕ УТКА
		РасчетыПоЗаказу = РасчетыПоЗаказу ИЛИ ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказДавальца");
		//-- НЕ УТКА
		
		ИмяРегистраРасчетов = "РасчетыСКлиентамиПоСрокам";
		ИмяРегистраПланаОплат = "РасчетыСКлиентамиПланОплат";
		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСКлиентамиПланОтгрузок";
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	Иначе
		
		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику);
		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику);
		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток);
		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль);
		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику);
		
		РасчетыПоЗаказу = ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику");
		//++ НЕ УТ
		РасчетыПоЗаказу = РасчетыПоЗаказу ИЛИ ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПереработчику");
		//-- НЕ УТ
		
		ИмяРегистраРасчетов = "РасчетыСПоставщикамиПоСрокам";
		ИмяРегистраПланаОплат = "РасчетыСПоставщикамиПланОплат";
		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСПоставщикамиПланПоставок";
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
	КонецЕсли;
		
	Если ОсновныеПараметры.ПорядокФакт = Неопределено Тогда
		ОсновныеПараметры.ПорядокФакт = "";
	КонецЕсли;
	
	Если ОсновныеПараметры.ПорядокПлан = Неопределено Тогда
		ОсновныеПараметры.ПорядокПлан = "";
	КонецЕсли;
	
	ГлобальныеПеременные = ОбщегоНазначения.СкопироватьРекурсивно(ОсновныеПараметры);
	ГлобальныеПеременные.Вставить("ЕжедневнаяПереоценка", Константы.ПереоцениватьВалютныеСредстваПоДням.Получить());
	//Для уточнения плана оплат - в переменной хранится последний момент времени плана оплат,
	//чтобы при добавлении записи в план оплат можно было сразу определить есть ли планы оплат с датой больше, чем добавляемая запись.
	ГлобальныеПеременные.Вставить("МаксимальныйПорядокПланаОплат", "");
	ГлобальныеПеременные.Вставить("ГрафикВДоговоре",               ГрафикВДоговоре);
	ГлобальныеПеременные.Вставить("ПорядокПереоценки",             Новый Соответствие);
	ГлобальныеПеременные.Вставить("РазмерПорцииЗаписи",            РазмерПорцииЗаписи);
	ГлобальныеПеременные.Вставить("Организация",                   Организация);
	ГлобальныеПеременные.Вставить("ХозяйственныеОперации",         ХозяйственныеОперации);
	ГлобальныеПеременные.Вставить("РассчитыватьПланы",             Лев(ГлобальныеПеременные.ПорядокПлан, 4) <> "3000");
	ГлобальныеПеременные.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	ГлобальныеПеременные.Вставить("ВалютаУправленческогоУчета",     ВалютаУправленческогоУчета);
	ГлобальныеПеременные.Вставить("РазрядностьКурсаРегл",           3 + СтрДлина(Формат(КратностьРегл,"ЧГ=")));
	ГлобальныеПеременные.Вставить("РазрядностьКурсаУпр",            ГлобальныеПеременные.РазрядностьКурсаРегл + 3 + СтрДлина(Формат(КратностьУпр,"ЧГ=")));
	
	Запрос                         = Новый Запрос;
	Менеджер                       = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.УстановитьПараметр("ОбъектРасчетов",             ГлобальныеПеременные.ОбъектРасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",  ГлобальныеПеременные.АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ВалютаРасчетов",             ГлобальныеПеременные.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами",       ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("Регистратор",                ГлобальныеПеременные.Регистратор);
	ГлобальныеПеременные.Вставить("Порядок",Мин(ГлобальныеПеременные.ПорядокФакт, ГлобальныеПеременные.ПорядокПлан));
	Запрос.УстановитьПараметр("Порядок",                    ГлобальныеПеременные.Порядок);
	
	Если ЗначениеЗаполнено(ГлобальныеПеременные.Порядок) Тогда
		НачалоДняПорядкаФакт = Дата(Лев(ГлобальныеПеременные.ПорядокФакт,8));
		НачалоДняПорядка     = Дата(Лев(ГлобальныеПеременные.Порядок,8));
	Иначе
		НачалоДняПорядкаФакт = Дата(1,1,1,1,1,2);
		НачалоДняПорядка = Дата(1,1,1,1,1,2);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоДняПорядкаФакт",       НачалоДняПорядкаФакт);
	Запрос.УстановитьПараметр("НачалоДняПорядка",           НачалоДняПорядка);
	
	Запрос.УстановитьПараметр("ВалютаУпр",                  ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегл",                 ВалютаРегламентированногоУчета);
	ПорядокЗачетаПоДатеПлатежа = Константы.ПорядокЗачетаДокументовПоДатеОперации.Получить() = 1;
	Запрос.УстановитьПараметр("ПорядокЗачетаПоДатеПлатежа", ПорядокЗачетаПоДатеПлатежа);
	
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("ГрафикВДоговоре",            ГрафикВДоговоре);
	Запрос.УстановитьПараметр("ГрафикИсполненияДоговора",   ГрафикИсполненияДоговора);
	Запрос.УстановитьПараметр("РасчетыПоЗаказу",            РасчетыПоЗаказу);
	Запрос.УстановитьПараметр("РазмерПорцииЗаписи",         РазмерПорцииЗаписи);
	Запрос.УстановитьПараметр("ТипРасчетов",                ТипРасчетов);
	
	Запрос.УстановитьПараметр("СписокТиповЗаказов",         СписокТиповРегистраторовПланов());
	Запрос.УстановитьПараметр("НепересчитываемыеХО",        НепересчитываемыеХозяйственныеОперации());
	
	#КонецОбласти
	
	//Движения до начала пересчета и остатки.
	СформироватьВТДанныхРегистровДоНачалаРасчетов(Запрос, ГлобальныеПеременные);
	//Данные регистров с порядком меньше порядка начала расчета, далее дополняются.
	ТаблицаРасчетовПоСрокам     = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраРасчетов);
	ТаблицаРасчетовПоСрокам.Колонки.Добавить("ЗаписьДоНачалаРасчета", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(Истина,"ЗаписьДоНачалаРасчета");
	Если ГлобальныеПеременные.РассчитыватьПланы Тогда
		ТаблицаПланОплат            = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОплат);
		ТаблицаПланОтгрузокПоставок = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОтгрузкиПоставки);
	КонецЕсли;

	//Движения после начала пересчета и остатки до начала пересчета для распределения.
	РасчетыОтгрузкиПоставки     = ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные);
	Если ПорядокЗачетаПоДатеПлатежа Тогда
		РасчетыОтгрузкиПоставки.Индексы.Добавить("ЕстьОстаток, ПорядокЗачетаПоДатеПлатежа");
		РасчетыОтгрузкиПоставки.Индексы.Добавить("Регистратор");
	КонецЕсли;
	
	//Учтены только приходы по заказам, графикам и предоплатным накладным.
	//Остальные расходы и приходы добавляются при распределении фактических взаиморасчетов.
	РасчетыОплаты              = ПолучитьОплаты(Запрос, ГлобальныеПеременные);
	Если ГлобальныеПеременные.РассчитыватьПланы Тогда
		ПланыОплат                 = ПолучитьПланыОплат(Запрос, ГлобальныеПеременные);
		ПланыОтгрузокПоставок      = ПолучитьПланыОтгрузокПоставок(Запрос, ГлобальныеПеременные);
	КонецЕсли;
	
	НужнаПереоценка = (ГлобальныеПеременные.ВалютаРасчетов <> ВалютаРегламентированногоУчета 
			ИЛИ ГлобальныеПеременные.ВалютаРасчетов <> ВалютаУправленческогоУчета)
		И РасчетыОтгрузкиПоставки.Количество() > 0
		И НЕ ОсновныеПараметры.НачальноеЗаполнение;
	
	Если НужнаПереоценка Тогда
		ДатаНачалаКурсов = Мин(РасчетыОтгрузкиПоставки[0].Период,
									?(РасчетыОплаты.Количество() > 0,
										РасчетыОплаты[0].Период,
										РасчетыОтгрузкиПоставки[0].Период));
		ТаблицаКурсовВалют = ПолучитьКурсыВалют(Запрос, ДатаНачалаКурсов, ГлобальныеПеременные);
		ГлобальныеПеременные.Вставить("ТаблицаКурсовВалют", ТаблицаКурсовВалют);
		
		ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(Организация,
			?(РасчетыОтгрузкиПоставки.Количество() > 0, РасчетыОтгрузкиПоставки[0].ДатаВозникновения, ТекущаяДатаСеанса()),
			ТекущаяДатаСеанса(),
			ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
	КонецЕсли;
	
	ГлобальныеПеременные.Вставить("ДокументыРасчетаКурсовыхРазниц", ДокументыРасчетаКурсовыхРазниц);
	
	Если ГлобальныеПеременные.РассчитыватьПланы Тогда
		//Добавляем приходные записи планов отгрузок.
		Для Каждого Стр Из ПланыОтгрузокПоставок Цикл
			Если НЕ Стр.ПриходДобавлен Тогда
				НовСтр = ТаблицаПланОтгрузокПоставок.Добавить();
				НовСтр.ВидДвижения               = ВидДвиженияНакопления.Приход;
				НовСтр.ДокументРегистратор       = Стр.Регистратор;
				НовСтр.ДокументПлан              = Стр.Регистратор;
				НовСтр.Период                    = Стр.Период;
				НовСтр.ДатаВозникновения         = Стр.ДатаВозникновения;
				НовСтр.ДатаПлановогоПогашения    = Стр.ДатаПлановогоПогашения;
				НовСтр.Сумма                     = Стр.КОтгрузкеПоставке;
				НовСтр.ПорядокЗачета             = Стр.ПорядокОперации;
				НовСтр.ПорядокОперации           = Стр.ПорядокОперации;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Для определения курса корректировки реализации в минус.
	//Ключ     - ДокументСсылка.РеализациТоваровУслуг, ДокументСсылка.АктВыполненныхРабот
	//Значение - Структура
	//     * СуммаДокумента, СуммаДокументаРегл, СуммаДокументаУпр - нужны для определения среднего курса реализации при проведении корректировок.
	ДанныеНакладных = Новый Соответствие;
	ТаблицаДанныхНакладных = ПолучитьДанныеНакладных(Запрос);
	Для Каждого Строка Из ТаблицаДанныхНакладных Цикл
		ДанныеНакладных.Вставить(Строка.Накладная,
									СтруктураСумм(Строка.Сумма,
													Строка.СуммаРегл,
													Строка.СуммаУпр));
	КонецЦикла;
	ГлобальныеПеременные.Вставить("ДанныеНакладных", ДанныеНакладных);
	
	ЗаписейОплаты           = РасчетыОплаты.Количество();
	ЗаписейОтгрузкиПоставки = РасчетыОтгрузкиПоставки.Количество();
	ЗаписейОбработать       = ЗаписейОплаты + ЗаписейОтгрузкиПоставки;
	
	Индексы = Новый Структура;
	//Индекс текущей обрабатываемой строки отгрузок.
	Индексы.Вставить("ИндексОтгрузкиПоставки", 0);
	//Индекс текущей обрабатываемой строки оплат.
	Индексы.Вставить("ИндексОплаты", 0);
	
	//Для распределения копеек в рамках документа.
	ТекущийДокументОплаты           = Неопределено;
	ТекущийДокументОтгрузкиПоставки = Неопределено;
	
	//Сколько строк отгрузки пропущено для зачета корректировкой реализации.
	ПропускОтгрузкиПоставки = 0;
	
	#Область РасчетФактическойЗадолженности
	
	Пока Индексы.ИндексОплаты + Индексы.ИндексОтгрузкиПоставки < ЗаписейОбработать Цикл
		
		Если Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
			
			СтрокаОплаты           = РасчетыОплаты[Индексы.ИндексОплаты];
			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
			
			//Оплата раньше отгрузки.
			Если СтрокаОплаты.ПорядокОперации < СтрокаОтгрузкиПоставки.ПорядокОперации 
				//В пределах регистратора (при расчетах по накладным) должен происходить зачет аванса.
				ИЛИ СтрокаОплаты.Регистратор = СтрокаОтгрузкиПоставки.Регистратор
					И Лев(СтрокаОплаты.ПорядокОперации,9) = Лев(СтрокаОтгрузкиПоставки.ПорядокОперации,9)
					// Возвраты оплат должны сначала проходить по долгу (реклассификация)
					И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
					И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
					И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту Тогда
				
				//Приход предоплаты.
				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата");
				
				//Уменьшаем план отгрузки, если есть.
				Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
					СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.Сумма > 0 И СтрокаОплаты.Сумма > 0 Тогда
					
					//При порядке зачета по датам платежа могут быть документы отгрузки/поставки приоритетнее текущего
					//Поищем их и увеличим пропуск строк отгрузки поставки
					Если ПропускОтгрузкиПоставки = 0 И ПорядокЗачетаПоДатеПлатежа 
						И Индексы.ИндексОтгрузкиПоставки < ЗаписейОтгрузкиПоставки - 1 Тогда
						
						ПорядкиЗачета = РасчетыОтгрузкиПоставки.Скопировать(Новый Структура("ЕстьОстаток", ИСТИНА),"ПорядокЗачетаПоДатеПлатежа");
						ПорядкиЗачета.Сортировать("ПорядокЗачетаПоДатеПлатежа ВОЗР");
						СтрокаПорядков = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, ПорядокЗачетаПоДатеПлатежа", ИСТИНА, ПорядкиЗачета[0].ПорядокЗачетаПоДатеПлатежа))[0];
						Индекс = РасчетыОтгрузкиПоставки.Индекс(СтрокаПорядков);
						
						Если Индекс <> Индексы.ИндексОтгрузкиПоставки Тогда
							ПропускОтгрузкиПоставки = Индекс - Индексы.ИндексОтгрузкиПоставки;
							Индексы.ИндексОтгрузкиПоставки = Индекс;
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
					//Переброс аванса на расчетный документ - накладную.
					НеОтгрузка = ХозяйственныеОперацииНеОтгрузка.Найти(СтрокаОтгрузкиПоставки.ХозяйственнаяОперация) <> Неопределено;
					ДвойнаяЗаписьНеНужна = НеОтгрузка;
					
					Если ТекущийДокументОплаты <> СтрокаОплаты.РасчетныйДокумент Тогда
						ПредоплатаРаспределеноРегл = 0;
						ПредоплатаРаспределеноУпр  = 0;
						ТекущийДокументОплаты      = СтрокаОплаты.РасчетныйДокумент;
					КонецЕсли;
					
					Если ТекущийДокументОтгрузкиПоставки <> СтрокаОтгрузкиПоставки.РасчетныйДокумент Тогда
						ДолгРаспределеноРегл       = 0;
						ДолгРаспределеноУпр        = 0;
						ТекущийДокументОтгрузкиПоставки = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
					КонецЕсли;
					
					//Добавляем запись списания предоплаты.
					СуммаСписания = Мин(СтрокаОплаты.Сумма, СтрокаОтгрузкиПоставки.Сумма);
					
					//Возврат аванса отражаем по курсу возврата. Взаимозачет всегда по своему курсу.
					Если (СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
						И СтрокаОтгрузкиПоставки.РучнойКурсРегл)
						ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса И СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор Тогда
						ПредоплатаРеглПредв = СтрокаОтгрузкиПоставки.СуммаРегл / СтрокаОтгрузкиПоставки.Сумма * СуммаСписания;
					//Остальные авансы по курсу аванса.
					Иначе
						ПредоплатаРеглПредв = СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма * СуммаСписания;
					КонецЕсли;
					
					Если (СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
						И СтрокаОтгрузкиПоставки.РучнойКурсУпр)
						ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса И СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор Тогда
						ПредоплатаУпрПредв = СтрокаОтгрузкиПоставки.СуммаУпр / СтрокаОтгрузкиПоставки.Сумма * СуммаСписания;
					Иначе
						ПредоплатаУпрПредв = СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма * СуммаСписания;
					КонецЕсли;
					
					СуммаСписанияРегл = Окр(ПредоплатаРеглПредв + ПредоплатаРаспределеноРегл - Окр(ПредоплатаРаспределеноРегл, 2), 2);
					СуммаСписанияУпр  = Окр(ПредоплатаУпрПредв + ПредоплатаРаспределеноУпр - Окр(ПредоплатаРаспределеноУпр, 2), 2);
					
					Если СтрокаОтгрузкиПоставки.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
						
						НовСтр_Предоплата_Расход                          = ТаблицаРасчетовПоСрокам.Добавить();
						НовСтр_Предоплата_Расход.ВидДвижения              = ВидДвиженияНакопления.Расход;
						НовСтр_Предоплата_Расход.ДокументРегистратор      = СтрокаОтгрузкиПоставки.Регистратор;
						НовСтр_Предоплата_Расход.ВалютаДокумента          = СтрокаОтгрузкиПоставки.ВалютаДокумента;
						НовСтр_Предоплата_Расход.Период                   = СтрокаОтгрузкиПоставки.Период;
						НовСтр_Предоплата_Расход.РасчетныйДокумент        = СтрокаОплаты.РасчетныйДокумент;
						НовСтр_Предоплата_Расход.ДатаВозникновения        = СтрокаОплаты.ДатаВозникновения;
						НовСтр_Предоплата_Расход.ДатаПлановогоПогашения   = Дата(1,1,1);
						НовСтр_Предоплата_Расход.ПорядокЗачета            = СтрокаОплаты.ПорядокЗачетаПоДатеПлатежа;
						НовСтр_Предоплата_Расход.ПорядокОперации          = СтрокаОтгрузкиПоставки.ПорядокОперации;
						НовСтр_Предоплата_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
						НовСтр_Предоплата_Расход.СвязанныйДокумент        = СтрокаОплаты.СвязанныйДокумент;
						НовСтр_Предоплата_Расход.КорОбъектРасчетов        = СтрокаОплаты.КорОбъектРасчетов;
						НовСтр_Предоплата_Расход.КорАналитикаУчетаПоПартнерам = СтрокаОплаты.КорАналитикаУчетаПоПартнерам;
						
						Если СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
							И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионера")
							И СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера Тогда
							ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера;
						ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
							И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетКомитенту")
							И СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом Тогда
							ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту;
						ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
							И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
							И (СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
								ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту) Тогда
							Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
								ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера;
							Иначе
								ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту;
							КонецЕсли;
						Иначе
							ХозяйственнаяОперацияЗачетАванса = ХозяйственныеОперации["ЗачетАванса"];
						КонецЕсли;
						
						Если НеОтгрузка Тогда
							НовСтр_Предоплата_Расход.ХозяйственнаяОперация = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
						Иначе
							НовСтр_Предоплата_Расход.ХозяйственнаяОперация = ХозяйственнаяОперацияЗачетАванса;
						КонецЕсли;
						
						НовСтр_Предоплата_Расход.Предоплата     = СуммаСписания;
						НовСтр_Предоплата_Расход.ПредоплатаРегл = СуммаСписанияРегл;
						НовСтр_Предоплата_Расход.ПредоплатаУпр  = СуммаСписанияУпр;
						
						Если НЕ ДвойнаяЗаписьНеНужна Тогда
							//Отражаем приход на сумму долга по курсу предоплаты.
							НовСтр_Долг_Приход = ТаблицаРасчетовПоСрокам.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр_Долг_Приход, НовСтр_Предоплата_Расход , ,"Предоплата, ПредоплатаУпр, ПредоплатаРегл, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам");
							
							НовСтр_Долг_Приход.ВидДвижения                   = ВидДвиженияНакопления.Приход;
							НовСтр_Долг_Приход.Период                        = СтрокаОтгрузкиПоставки.Период;
							НовСтр_Долг_Приход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
							НовСтр_Долг_Приход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
							НовСтр_Долг_Приход.РасчетныйДокумент             = ?(СтрокаОтгрузкиПоставки.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор, СтрокаОтгрузкиПоставки.РасчетныйДокумент, СтрокаОтгрузкиПоставки.Регистратор);
							НовСтр_Долг_Приход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
							НовСтр_Долг_Приход.ХозяйственнаяОперация         = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
							//возврат ДС, статья должна быть
							НовСтр_Долг_Приход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
							НовСтр_Долг_Приход.КорОбъектРасчетов             = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
							НовСтр_Долг_Приход.КорАналитикаУчетаПоПартнерам  = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
							НовСтр_Долг_Приход.СвязанныйДокумент             = Неопределено;
							
							НовСтр_Долг_Приход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
							
							Если СтрокаОтгрузкиПоставки.РучнойКурсУпр ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
								Если СуммаСписания = СтрокаОтгрузкиПоставки.Сумма Тогда
									НовСтр_Долг_Приход.ДолгУпр = СтрокаОтгрузкиПоставки.СуммаУпр;
								Иначе
									НовСтр_Долг_Приход.ДолгУпр = СтрокаОтгрузкиПоставки.КурсУпр * СуммаСписания;
								КонецЕсли;
							Иначе
								НовСтр_Долг_Приход.ДолгУпр = НовСтр_Предоплата_Расход.ПредоплатаУпр;
							КонецЕсли;
							Если СтрокаОтгрузкиПоставки.РучнойКурсРегл ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
								Если СуммаСписания = СтрокаОтгрузкиПоставки.Сумма Тогда
									НовСтр_Долг_Приход.ДолгРегл = СтрокаОтгрузкиПоставки.СуммаРегл;
								Иначе
									НовСтр_Долг_Приход.ДолгРегл = СтрокаОтгрузкиПоставки.КурсРегл * СуммаСписания;
								КонецЕсли;
							Иначе
								НовСтр_Долг_Приход.ДолгРегл = НовСтр_Предоплата_Расход.ПредоплатаРегл;
							КонецЕсли;
							
							//Переносим предоплату на расчетный документ отгрузки.
							НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр_Долг_Расход, НовСтр_Долг_Приход);
							НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
							НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственнаяОперацияЗачетАванса;
							НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
							НовСтр_Долг_Расход.РасчетныйДокумент             = ?(СтрокаОтгрузкиПоставки.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор, СтрокаОтгрузкиПоставки.РасчетныйДокумент, СтрокаОтгрузкиПоставки.Регистратор);
							НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
							НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
							НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОтгрузкиПоставки.Регистратор;
							НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
							НовСтр_Долг_Расход.КорОбъектРасчетов             = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
							НовСтр_Долг_Расход.КорАналитикаУчетаПоПартнерам  = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
							
							НовСтр_Долг_Расход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
							НовСтр_Долг_Расход.ДолгУпр                       = НовСтр_Предоплата_Расход.ПредоплатаУпр;
							НовСтр_Долг_Расход.ДолгРегл                      = НовСтр_Предоплата_Расход.ПредоплатаРегл;
							
						КонецЕсли;
					КонецЕсли;
					
					ПредоплатаРаспределеноРегл = ПредоплатаРаспределеноРегл + ПредоплатаРеглПредв;
					ПредоплатаРаспределеноУпр  = ПредоплатаРаспределеноУпр  + ПредоплатаУпрПредв;
					
					//Уменьшаем строку оплаты на сумму зачета
					СтрокаОплаты.Сумма         = СтрокаОплаты.Сумма     - СуммаСписания;
					СтрокаОплаты.СуммаРегл     = СтрокаОплаты.СуммаРегл - СуммаСписанияРегл;
					СтрокаОплаты.СуммаУпр      = СтрокаОплаты.СуммаУпр  - СуммаСписанияУпр;
					
					Если СтрокаОтгрузкиПоставки.РучнойКурсРегл И НЕ ДвойнаяЗаписьНеНужна
						И СтрокаОтгрузкиПоставки.Сумма <> 0 И СтрокаОтгрузкиПоставки.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
						//Остаток должен быть уменьшен ровно на ту сумму, на которую уже сформирован приход в двойной записи.
						ДолгРеглПредв = НовСтр_Долг_Приход.ДолгРегл;
						//Остаток для переоценки может отличаться от остатка к приходованию.
						СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - НовСтр_Долг_Расход.ДолгРегл;
					Иначе
						//Иначе пропорционально уменьшаем остаток строки.
						Если СуммаСписания = СтрокаОтгрузкиПоставки.Сумма Тогда
							ДолгРеглПредв = СтрокаОтгрузкиПоставки.СуммаРегл;
						Иначе
							ДолгРеглПредв = СтрокаОтгрузкиПоставки.КурсРегл * СуммаСписания;
						КонецЕсли;
						СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - Окр(ДолгРеглПредв + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.РучнойКурсУпр И НЕ ДвойнаяЗаписьНеНужна
						И СтрокаОтгрузкиПоставки.Сумма <> 0 И СтрокаОтгрузкиПоставки.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
						ДолгУпрПредв = НовСтр_Долг_Приход.ДолгУпр;
						СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - НовСтр_Долг_Расход.ДолгУпр;
					Иначе
						Если СуммаСписания = СтрокаОтгрузкиПоставки.Сумма Тогда
							ДолгУпрПредв = СтрокаОтгрузкиПоставки.СуммаУпр;
						Иначе
							ДолгУпрПредв = СтрокаОтгрузкиПоставки.КурсУпр * СуммаСписания;
						КонецЕсли;
						СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - Окр(ДолгУпрПредв + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
					КонецЕсли;
					
					Если ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор] = Неопределено Тогда
						ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаОтгрузкиПоставки.Регистратор, СтруктураСумм());
					КонецЕсли;
					
					СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма - СуммаСписания;
					СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - Окр(ДолгРеглПредв + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
					СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр - Окр(ДолгУпрПредв + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
					
					ДолгРаспределеноРегл = ДолгРаспределеноРегл + ДолгРеглПредв;
					ДолгРаспределеноУпр  = ДолгРаспределеноУпр  + ДолгУпрПредв;
					
					ДанныеНакладной                    = ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор];
					ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента     + СуммаСписания;
					ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + СуммаСписанияРегл;
					ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + СуммаСписанияУпр;
					
					//Уменьшаем график оплаты условной задолженности на сумму списания. Если это остаток, то платеж уже закрыл график.
					Если Не СтрокаОплаты.ЭтоОстаток Тогда
						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаОплаты, -СуммаСписания);
					КонецЕсли;
					
				КонецЕсли;
				
				ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.КОплате, СтрокаОтгрузкиПоставки.Регистратор);
				
				Если СтрокаОплаты.Сумма = 0 Тогда
					ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОплаты, -СтрокаОплаты.КОплате);
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки.Период,
						СтрокаОплаты, "Предоплата", -Окр(СтрокаОплаты.СуммаРегл, 2), -Окр(СтрокаОплаты.СуммаУпр, 2));
					Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
					СтрокаОтгрузкиПоставки.ЕстьОстаток = Ложь;
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОтгрузкиПоставки.Период),
						СтрокаОтгрузкиПоставки, "Долг", -Окр(СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, 2), -Окр(СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки, 2));
				КонецЕсли;
				
				//Если порядок зачета по дате платежа - возвращаемся к нужной строке.
				Если ПропускОтгрузкиПоставки <> 0 Тогда
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
					ПропускОтгрузкиПоставки = 0;
				ИначеЕсли СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
				КонецЕсли;
				
			//Отгрузка раньше оплаты.
			Иначе
				//Обычная оплата.
				Если НЕ СтрокаОплаты.ЭтоКорректировка Тогда
					
					//Добавляем строку прихода долга по отгрузке/поставке.
					ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ПланыОплат);
					
					//Списываем план отгрузки если есть.
					Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
						СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.Сумма > 0 И СтрокаОплаты.Сумма > 0 Тогда
						
						//При порядке зачета по датам платежа могут быть документы отгрузки/поставки приобритетнее текущего
						//Поищем их и увеличим пропуск строк отгрузки поставки
						Если ПропускОтгрузкиПоставки = 0 И ПорядокЗачетаПоДатеПлатежа 
							И Индексы.ИндексОтгрузкиПоставки < ЗаписейОтгрузкиПоставки - 1 Тогда
							
							ПорядкиЗачета = РасчетыОтгрузкиПоставки.Скопировать(Новый Структура("ЕстьОстаток", ИСТИНА),"ПорядокЗачетаПоДатеПлатежа, ПорядокОперации");
							ПорядкиЗачета.Сортировать("ПорядокЗачетаПоДатеПлатежа ВОЗР");
							МинимальныйПорядок = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
							Для Каждого СтрокаПорядка Из ПорядкиЗачета Цикл
								Если СтрокаПорядка.ПорядокОперации < СтрокаОплаты.ПорядокОперации Тогда
									МинимальныйПорядок = СтрокаПорядка.ПорядокЗачетаПоДатеПлатежа;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							СтрокаПорядка = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, ПорядокЗачетаПоДатеПлатежа", Истина, МинимальныйПорядок))[0];
							Индекс = РасчетыОтгрузкиПоставки.Индекс(СтрокаПорядка);
							
							Если Индекс <> Индексы.ИндексОтгрузкиПоставки Тогда
								ПропускОтгрузкиПоставки = Индекс - Индексы.ИндексОтгрузкиПоставки;
								Индексы.ИндексОтгрузкиПоставки = Индекс;
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
						//Переоценка накладной до даты оплаты.
						Если НужнаПереоценка Тогда
							ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор, СтрокаОплаты);
						КонецЕсли;
						
						//Если расчетный документ накладная изменился, то сбрасываем служебные реквизиты распределения копеек.
						Если ТекущийДокументОтгрузкиПоставки <> СтрокаОтгрузкиПоставки.РасчетныйДокумент Тогда
							ДолгРаспределеноРегл       = 0;
							ДолгРаспределеноУпр        = 0;
							ТекущийДокументОтгрузкиПоставки = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
						КонецЕсли;
						
						//Добавляем строку погашения задолженности.
						СуммаСписания = Мин(СтрокаОплаты.Сумма, СтрокаОтгрузкиПоставки.Сумма);
						
						//Списываем долг по курсу аванса.
						Если СтрокаОплаты.Сумма = СуммаСписания Тогда
							ДолгРегл = СтрокаОплаты.СуммаРегл;
							ДолгУпр = СтрокаОплаты.СуммаУпр;
						Иначе
							ДолгРегл = Окр(СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма, ГлобальныеПеременные.РазрядностьКурсаРегл) * СуммаСписания;
							Если ВалютаРегламентированногоУчета = ВалютаУправленческогоУчета Тогда
								ДолгУпр  = Окр(СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма,ГлобальныеПеременные.РазрядностьКурсаРегл) * СуммаСписания;
							Иначе
								ДолгУпр  = Окр(СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма,ГлобальныеПеременные.РазрядностьКурсаУпр) * СуммаСписания;
							КонецЕсли;
						КонецЕсли;
						
						СуммаСписанияРегл = Окр(ДолгРегл + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
						СуммаСписанияУпр = Окр(ДолгУпр + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
						
						Если СтрокаОплаты.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
						
							НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
							НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
							НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОплаты.Регистратор;
							//Взаимозачет считаем взаимозачетом
							Если СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
								ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
								ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом
								ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносАванса Тогда
								НовСтр_Долг_Расход.ХозяйственнаяОперация         = СтрокаОплаты.ХозяйственнаяОперация;
							Иначе
								НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ПогашениеЗадолженности"];
							КонецЕсли;
							НовСтр_Долг_Расход.ВалютаДокумента               = СтрокаОплаты.ВалютаДокумента;
							НовСтр_Долг_Расход.Период                        = СтрокаОплаты.Период;
							НовСтр_Долг_Расход.ПорядокОперации               = СтрокаОплаты.ПорядокОперации;
							НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОплаты.СтатьяДвиженияДенежныхСредств;
							НовСтр_Долг_Расход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
							НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
							НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
							НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
							НовСтр_Долг_Расход.КорОбъектРасчетов             = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
							НовСтр_Долг_Расход.КорАналитикаУчетаПоПартнерам  = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
							
							НовСтр_Долг_Расход.Долг     = СуммаСписания;
							НовСтр_Долг_Расход.ДолгРегл = СуммаСписанияРегл;
							НовСтр_Долг_Расход.ДолгУпр  = СуммаСписанияУпр;
						
						КонецЕсли;
						
						ДолгРаспределеноРегл = ДолгРаспределеноРегл + ДолгРегл;
						ДолгРаспределеноУпр  = ДолгРаспределеноУпр + ДолгУпр;
						
						//Уменьшаем строку оплаты на зачтенную сумму.
						СтрокаОплаты.Сумма       = СтрокаОплаты.Сумма     - СуммаСписания;
						СтрокаОплаты.СуммаРегл   = СтрокаОплаты.СуммаРегл - СуммаСписанияРегл;
						СтрокаОплаты.СуммаУпр    = СтрокаОплаты.СуммаУпр  - СуммаСписанияУпр;
						
						//Уменьшаем строку отгрузки/поставки на зачтенную сумму.
						СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма     - СуммаСписания;
						СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - СуммаСписанияРегл;
						СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр  - СуммаСписанияУпр;
						СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - СуммаСписанияРегл;
						СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - СуммаСписанияУпр;
						СтрокаОтгрузкиПоставки.КОплате   = СтрокаОтгрузкиПоставки.КОплате     - СуммаСписания;
						
						//Закрываем план оплаты накладной, которую зачли.
						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОплаты, -Мин(СуммаСписания,СтрокаОплаты.КОплате), СтрокаОтгрузкиПоставки.РасчетныйДокумент);
						
					КонецЕсли;
					
					Если СтрокаОплаты.Сумма = 0 Тогда
						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОплаты, -СтрокаОплаты.КОплате);
						Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
						
						Если СтрокаОтгрузкиПоставки.КОплате > 0 Тогда
							ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.КОплате, СтрокаОтгрузкиПоставки.РасчетныйДокумент);
						КонецЕсли;
						
						СтрокаОтгрузкиПоставки.ЕстьОстаток = ЛОЖЬ;
						
						ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
							СтрокаОтгрузкиПоставки, "Долг", -Окр(СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, 2), -Окр(СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки, 2));
					КонецЕсли;
					
					//Если порядок зачета по дате платежа - возвращаемся к нужной строке.
					Если ПропускОтгрузкиПоставки <> 0 Тогда
						Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
						ПропускОтгрузкиПоставки = 0;
					ИначеЕсли СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
						Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
					КонецЕсли;
					
				//Корректировка накладной в минус.
				Иначе
					
					ОстаткиСвязанногоДокумента = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, Регистратор", ИСТИНА, СтрокаОплаты.СвязанныйДокумент));
					
					Для Каждого СтрокаОстаткаСвязанногоДокумента Из ОстаткиСвязанногоДокумента Цикл
						Если СтрокаОплаты.ПорядокОперации < СтрокаОстаткаСвязанногоДокумента.ПорядокОперации 
							ИЛИ СтрокаОстаткаСвязанногоДокумента.Сумма = 0 Тогда
							Продолжить;
						Иначе //Если это корректировка и накладная еще не оплачена полностью, то расчетным документом должна являться накладная.
						
							//Добавляем строку прихода по долгу для сторнируемой накладной.
							ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОстаткаСвязанногоДокумента, "ОтгрузкаПоставка", ПланыОплат);
							
							Если СтрокаОплаты.Сумма > 0 И СтрокаОстаткаСвязанногоДокумента.Сумма > 0 Тогда
							
								//Переоценка накладной до даты оплаты.
								Если НужнаПереоценка И НачалоМесяца(СтрокаОстаткаСвязанногоДокумента.ДатаВозникновения) < НачалоМесяца(СтрокаОплаты.ДатаВозникновения) Тогда
									ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОстаткаСвязанногоДокумента.Регистратор, СтрокаОплаты, Ложь);
								КонецЕсли;
								
								СуммаСторно  = Мин(СтрокаОстаткаСвязанногоДокумента.Сумма, СтрокаОплаты.Сумма);
								
								Если СтрокаОплаты.РучнойКурсРегл Тогда
									СуммаСторноРегл = Окр(СуммаСторно * СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма,2);
								Иначе
									СуммаСторноРегл = Окр(СуммаСторно * 
										(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаРегл 
											/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента),2);
								КонецЕсли;
										
								Если СтрокаОплаты.РучнойКурсУпр Тогда
									СуммаСторноУпр = Окр(СуммаСторно * СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма,2);
								Иначе
									СуммаСторноУпр = Окр(СуммаСторно * 
										(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаУпр 
											/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента),2);
								КонецЕсли;
								
								Если СтрокаОплаты.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
								
									НовСтр_Сторно = ТаблицаРасчетовПоСрокам.Добавить();
									НовСтр_Сторно.ВидДвижения = ВидДвиженияНакопления.Расход;
									
									НовСтр_Сторно.ДокументРегистратор   = СтрокаОплаты.Регистратор;
									НовСтр_Сторно.РасчетныйДокумент     = СтрокаОстаткаСвязанногоДокумента.РасчетныйДокумент;
									НовСтр_Сторно.ХозяйственнаяОперация = СтрокаОплаты.ХозяйственнаяОперация;
									НовСтр_Сторно.ВалютаДокумента       = СтрокаОплаты.ВалютаДокумента;
									НовСтр_Сторно.СвязанныйДокумент     = СтрокаОплаты.СвязанныйДокумент;
									
									НовСтр_Сторно.Долг     = СуммаСторно;
									НовСтр_Сторно.ДолгРегл = СуммаСторноРегл;
									НовСтр_Сторно.ДолгУпр  = СуммаСторноУпр;
									
									НовСтр_Сторно.Период                   = СтрокаОплаты.Период;
									НовСтр_Сторно.ДатаПлановогоПогашения   = СтрокаОстаткаСвязанногоДокумента.ДатаПлановогоПогашения;
									НовСтр_Сторно.ДатаВозникновения        = СтрокаОстаткаСвязанногоДокумента.ДатаВозникновения;
									НовСтр_Сторно.ПорядокЗачета            = СтрокаОстаткаСвязанногоДокумента.ПорядокЗачетаПоДатеПлатежа;
									НовСтр_Сторно.ПорядокОперации          = СтрокаОплаты.ПорядокОперации;
									НовСтр_Сторно.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
									НовСтр_Сторно.КорОбъектРасчетов             = СтрокаОстаткаСвязанногоДокумента.КорОбъектРасчетов;
									НовСтр_Сторно.КорАналитикаУчетаПоПартнерам  = СтрокаОстаткаСвязанногоДокумента.КорАналитикаУчетаПоПартнерам;
									
								КонецЕсли;
								
								//Уменьшаем строку оплаты на сумму сторно.
								СтрокаОплаты.Сумма     = СтрокаОплаты.Сумма     - СуммаСторно;
								СтрокаОплаты.СуммаРегл = СтрокаОплаты.СуммаРегл - СуммаСторноРегл;
								СтрокаОплаты.СуммаУпр  = СтрокаОплаты.СуммаУпр  - СуммаСторноУпр;
								
								//Уменьшаем строку отгрузки на сумму сторно.
								СтрокаОстаткаСвязанногоДокумента.Сумма                  = СтрокаОстаткаСвязанногоДокумента.Сумма     - СуммаСторно;
								СтрокаОстаткаСвязанногоДокумента.СуммаРегл              = СтрокаОстаткаСвязанногоДокумента.СуммаРегл - СуммаСторноРегл; 
								СтрокаОстаткаСвязанногоДокумента.СуммаУпр               = СтрокаОстаткаСвязанногоДокумента.СуммаУпр  - СуммаСторноУпр;
								СтрокаОстаткаСвязанногоДокумента.СуммаРеглДляПереоценки = СтрокаОстаткаСвязанногоДокумента.СуммаРеглДляПереоценки - СуммаСторноРегл;
								СтрокаОстаткаСвязанногоДокумента.СуммаУпрДляПереоценки  = СтрокаОстаткаСвязанногоДокумента.СуммаУпрДляПереоценки - СуммаСторноУпр;
								СтрокаОстаткаСвязанногоДокумента.КОплате                = СтрокаОстаткаСвязанногоДокумента.КОплате     - СуммаСторно;
								
								//Уменьшаем график оплаты накладной, если есть.
								ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаОплаты, -Мин(СуммаСторно,СтрокаОплаты.КОплате), СтрокаОстаткаСвязанногоДокумента.РасчетныйДокумент);
								// В документ план надо писать только заказ, т.к. иначе при разных последовательностях проведения схемы "заказ оплата сторно оплата" по разному зачитываются документы.
								
								Если СтрокаОплаты.Сумма <> 0 Тогда
									//Остатка для сторно по реализации больше нет, строка сторно становится обычной оплатой.
									ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
								КонецЕсли;
								
								Если СтрокаОстаткаСвязанногоДокумента.Сумма = 0 Тогда
									ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
										СтрокаОстаткаСвязанногоДокумента, "Долг", -Окр(СтрокаОстаткаСвязанногоДокумента.СуммаРеглДляПереоценки, 2), -Окр(СтрокаОстаткаСвязанногоДокумента.СуммаУпрДляПереоценки, 2));
										СтрокаОстаткаСвязанногоДокумента.СуммаРеглДляПереоценки = 0;
										СтрокаОстаткаСвязанногоДокумента.СуммаУпрДляПереоценки = 0;
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если СтрокаОплаты.Сумма = 0 Тогда
						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОплаты, -СтрокаОплаты.КОплате, СтрокаОплаты.СвязанныйДокумент); ////
						Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
					Иначе
						ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		//Оплаты распределены, остальные отгрузки в приход.
		ИначеЕсли Индексы.ИндексОплаты = ЗаписейОплаты И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
			
			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
			ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ПланыОплат);
			
			Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
				СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
			КонецЕсли;
			
			Если НужнаПереоценка Тогда
				ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор);
			КонецЕсли;
			
			Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
			
		//Отгрузки распределены, остальные оплаты в приход.
		ИначеЕсли Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки = ЗаписейОтгрузкиПоставки Тогда
			
			СтрокаОплаты = РасчетыОплаты[Индексы.ИндексОплаты];
			ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата");
			
			Если НЕ СтрокаОплаты.ЭтоОстаток Тогда
				ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаОплаты, -СтрокаОплаты.КОплате);
			КонецЕсли;
			
			Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
		
	#Область ПланыОплат
	
	Если ГлобальныеПеременные.РассчитыватьПланы И ПланыОплат.Количество() > 0 Тогда
		
		ПланыОплат.Свернуть("Регистратор, ДокументПлан ,ВариантОплаты, Период, ДатаВозникновения, ДатаПлановогоПогашения, ПорядокОперации, ПорядокЗачетаПоДатеПлатежа, ХозяйственнаяОперация, ПриходДобавлен, ЕстьДокументПлан","КОплате, Оплачено");
		ПланыОплат.Сортировать("ПорядокОперации ВОЗР, ПорядокЗачетаПоДатеПлатежа ВОЗР, ЕстьДокументПлан УБЫВ");
		ПланыОплат.Индексы.Добавить("Регистратор");
		
		//С учетом документа плана
		
		сч = 0;
		РаспределеноСтрок = 0;
		ПриходЭтоКОплате = Истина;
		СтрокиКУдалению = Новый Массив;
		Пока сч < ПланыОплат.Количество() Цикл
			
			Если сч > ПланыОплат.Количество()-1 Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПланыОплат[сч].ДокументПлан) Тогда
				сч = сч + 1;
				Продолжить;
			КонецЕсли;
			
			СвязанныеСтроки = ПланыОплат.НайтиСтроки(Новый Структура("Регистратор", ПланыОплат[сч].ДокументПлан));
			Для Каждого СвязаннаяСтрока Из СвязанныеСтроки Цикл
			
				Если (СвязаннаяСтрока.КОплате > 0 И ПланыОплат[сч].Оплачено > 0
						ИЛИ ПланыОплат[сч].КОплате > 0 И СвязаннаяСтрока.Оплачено > 0)
					И СвязаннаяСтрока.ПорядокОперации < ПланыОплат[сч].ПорядокОперации
						ИЛИ СвязаннаяСтрока.ПорядокОперации = ПланыОплат[сч].ПорядокОперации И СвязаннаяСтрока.ПорядокЗачетаПоДатеПлатежа < ПланыОплат[сч].ПорядокЗачетаПоДатеПлатежа Тогда
					
					ПриходЭтоКОплате = СвязаннаяСтрока.КОплате > 0;
					
					Если СвязаннаяСтрока.КОплате > 0 Тогда
						СуммаСписанияКОплате = Мин(СвязаннаяСтрока.КОплате, ПланыОплат[сч].Оплачено);
						СуммаСписанияОплачено = 0;
						ХозОперацияПланирования =  ГлобальныеПеременные.ХозяйственныеОперации["Планирование"];
					Иначе
						СуммаСписанияКОплате = 0;
						СуммаСписанияОплачено = Мин(СвязаннаяСтрока.Оплачено, ПланыОплат[сч].КОплате);
						ХозОперацияПланирования = СвязаннаяСтрока.ХозяйственнаяОперация;
					КонецЕсли;
					
					Если СвязаннаяСтрока.Регистратор <> ПланыОплат[сч].Регистратор Тогда
						//Приход по плану и расход по плану
						Если СвязаннаяСтрока.ПорядокОперации <= ПланыОплат[сч].ПорядокОперации  Тогда
							ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, СвязаннаяСтрока, ХозОперацияПланирования, СуммаСписанияКОплате, СуммаСписанияОплачено);
							ДобавитьРасходПланаОплат(ТаблицаПланОплат, СвязаннаяСтрока, ПланыОплат[сч], СуммаСписанияКОплате, СуммаСписанияОплачено, Истина);
						Иначе
							ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[сч], ПланыОплат[сч].ХозяйственнаяОперация, СуммаСписанияКОплате, СуммаСписанияОплачено);
							ДобавитьРасходПланаОплат(ТаблицаПланОплат, ПланыОплат[сч], СвязаннаяСтрока, СуммаСписанияКОплате, СуммаСписанияОплачено);
						КонецЕсли;
					КонецЕсли;
					
					Если СвязаннаяСтрока.КОплате > 0 Тогда
						СвязаннаяСтрока.КОплате = СвязаннаяСтрока.КОплате - СуммаСписанияКОплате;
						ПланыОплат[сч].Оплачено = ПланыОплат[сч].Оплачено - СуммаСписанияКОплате;
					Иначе
						ПланыОплат[сч].КОплате = ПланыОплат[сч].КОплате - СуммаСписанияОплачено;
						СвязаннаяСтрока.Оплачено = СвязаннаяСтрока.Оплачено - СуммаСписанияОплачено;
					КонецЕсли;
					
					Если СвязаннаяСтрока.КОплате = 0 И СвязаннаяСтрока.Оплачено = 0 Тогда
						СтрокиКУдалению.Добавить(СвязаннаяСтрока);
					КонецЕсли;
					
					Если ПланыОплат[сч].КОплате = 0 И ПланыОплат[сч].Оплачено = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//Если накладная проведена на сумму больше заказа то на ней образется Оплачено одновременно с КОплате, надо свернуть эти остатки.
			сч2 = сч+1;
			Пока сч2 < ПланыОплат.Количество()
				И ПланыОплат[сч].Оплачено > 0
				И ПланыОплат[сч2].Регистратор = ПланыОплат[сч].Регистратор Цикл
				
				Если ПланыОплат[сч2].КОплате > 0 Тогда
					СуммаСписания = Мин(ПланыОплат[сч2].КОплате,ПланыОплат[сч].Оплачено);
					ПланыОплат[сч2].КОплате = ПланыОплат[сч2].КОплате - СуммаСписания;
					ПланыОплат[сч].Оплачено = ПланыОплат[сч].Оплачено - СуммаСписания;
				КонецЕсли;
				
				Если ПланыОплат[сч2].КОплате = 0 И ПланыОплат[сч2].Оплачено = 0 Тогда
					ПланыОплат.Удалить(сч2)
				Иначе
					сч2 = сч2 +1;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПланыОплат[сч].КОплате = 0 И ПланыОплат[сч].Оплачено = 0 Тогда
				ПланыОплат.Удалить(сч);
			Иначе
				сч = сч + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка Из СтрокиКУдалению Цикл
			Если ПланыОплат.Индекс(Строка) <> -1 Тогда
				ПланыОплат.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		//Без учета документа плана
		
		счПриход = 0;
		счРасход = 0;
		РаспределеноСтрок = 0;
		ПриходЭтоКОплате = Истина;
		Пока счПриход < ПланыОплат.Количество() ИЛИ счРасход < ПланыОплат.Количество() Цикл
			
			Если счРасход > ПланыОплат.Количество()-1 Тогда
				Если РаспределеноСтрок = 0 Тогда
					Прервать;
				Иначе
					РаспределеноСтрок = 0;
				КонецЕсли;
				счПриход = счПриход + 1;
				счРасход = 0;
			КонецЕсли;
			
			Если счПриход > ПланыОплат.Количество()-1 Тогда
				Прервать;
			КонецЕсли;
			
			Если ПланыОплат[счПриход].КОплате > 0 И ПланыОплат[счРасход].Оплачено > 0
				ИЛИ ПланыОплат[счРасход].КОплате > 0 И ПланыОплат[счПриход].Оплачено > 0 Тогда
				РаспределеноСтрок = РаспределеноСтрок + 1;
				ПриходЭтоКОплате = ПланыОплат[счПриход].КОплате > 0;
				
				Если ПланыОплат[счПриход].КОплате > 0 Тогда
					СуммаСписанияКОплате = Мин(ПланыОплат[счПриход].КОплате, ПланыОплат[счРасход].Оплачено);
					СуммаСписанияОплачено = 0;
					ХозОперацияПланирования =  ГлобальныеПеременные.ХозяйственныеОперации["Планирование"];
				Иначе
					СуммаСписанияКОплате = 0;
					СуммаСписанияОплачено = Мин(ПланыОплат[счПриход].Оплачено, ПланыОплат[счРасход].КОплате);
					ХозОперацияПланирования =  ПланыОплат[счПриход].ХозяйственнаяОперация;
				КонецЕсли;
				
				Если ПланыОплат[счПриход].Регистратор <> ПланыОплат[счРасход].Регистратор Тогда
					//Приход по плану и расход по плану
					Если ПланыОплат[счПриход].ПорядокОперации <= ПланыОплат[счРасход].ПорядокОперации  Тогда
						ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счПриход], ХозОперацияПланирования, СуммаСписанияКОплате, СуммаСписанияОплачено);
						ДобавитьРасходПланаОплат(ТаблицаПланОплат, ПланыОплат[счПриход], ПланыОплат[счРасход], СуммаСписанияКОплате, СуммаСписанияОплачено);
					Иначе
						ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счРасход], ПланыОплат[счРасход].ХозяйственнаяОперация, СуммаСписанияКОплате, СуммаСписанияОплачено);
						ДобавитьРасходПланаОплат(ТаблицаПланОплат, ПланыОплат[счРасход], ПланыОплат[счПриход], СуммаСписанияКОплате, СуммаСписанияОплачено);
					КонецЕсли;
				КонецЕсли;
				
				Если ПланыОплат[счПриход].КОплате > 0 Тогда
					ПланыОплат[счПриход].КОплате = ПланыОплат[счПриход].КОплате - СуммаСписанияКОплате;
					ПланыОплат[счРасход].Оплачено = ПланыОплат[счРасход].Оплачено - СуммаСписанияКОплате;
				Иначе
					ПланыОплат[счРасход].КОплате = ПланыОплат[счРасход].КОплате - СуммаСписанияОплачено;
					ПланыОплат[счПриход].Оплачено = ПланыОплат[счПриход].Оплачено - СуммаСписанияОплачено;
				КонецЕсли;
				
				Если ПланыОплат[счРасход].КОплате = 0 И ПланыОплат[счРасход].Оплачено = 0 Тогда
					ПланыОплат.Удалить(счРасход);
				КонецЕсли;
				
				Если ПланыОплат[счПриход].КОплате = 0 И ПланыОплат[счПриход].Оплачено = 0 Тогда
					ПланыОплат.Удалить(счПриход);
					//Если тип прихода меняется, сбрасываем счетчик Расхода.
					Если ПриходЭтоКОплате И счПриход < ПланыОплат.Количество()
						И ПланыОплат[счПриход].Оплачено > 0 И счРасход <> 0 Тогда
						счРасход = 0;
					ИначеЕсли счРасход > 0 Тогда
						счРасход = счРасход - 1;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ПланыОплат[счПриход].КОплате = 0 И ПланыОплат[счПриход].Оплачено = 0 Тогда
				ПланыОплат.Удалить(счПриход);
				Если ПриходЭтоКОплате И счПриход < ПланыОплат.Количество() И ПланыОплат[счПриход].Оплачено > 0 И счРасход <> 0 Тогда
					счРасход = 0;
				ИначеЕсли счРасход > 0 Тогда
					счРасход = счРасход - 1;
				КонецЕсли;
			Иначе
				счРасход = счРасход + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		//Нераспределенные остатки
		счПриход = 0;
		счРасход = 0;
		
		Пока счПриход < ПланыОплат.Количество() Цикл
			Если ПланыОплат[счПриход].КОплате > 0 Тогда
				ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счПриход], ГлобальныеПеременные.ХозяйственныеОперации["Планирование"], ПланыОплат[счПриход].КОплате);
			КонецЕсли;
			счПриход = счПриход + 1;
		КонецЦикла;
		
		Пока счРасход < ПланыОплат.Количество() Цикл
			Если ПланыОплат[счРасход].Оплачено > 0 Тогда
				ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счРасход], ПланыОплат[счРасход].ХозяйственнаяОперация, 0, ПланыОплат[счРасход].Оплачено);
			КонецЕсли;
			счРасход = счРасход + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ФиксацияРезультатов
	
	НаборЗаписейПоСрокам = РегистрыНакопления[ИмяРегистраРасчетов].СоздатьНаборЗаписей();
	НаборЗаписейПланОплат = РегистрыНакопления[ИмяРегистраПланаОплат].СоздатьНаборЗаписей();
	НаборЗаписейПланОтгрузокПоставок = РегистрыНакопления[ИмяРегистраПланаОтгрузкиПоставки].СоздатьНаборЗаписей();
	
	ТаблицаРасчетовПоСрокам.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
			|РасчетныйДокумент, ХозяйственнаяОперация, ДатаПлановогоПогашения, ДатаВозникновения, ПорядокЗачета, ПорядокОперации,
			|ВалютаДокумента, СвязанныйДокумент, СтатьяДвиженияДенежныхСредств, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам,
			|ЗаписьДоНачалаРасчета",
			"Предоплата, ПредоплатаРегл, ПредоплатаУпр, Долг, ДолгРегл, ДолгУпр");
	
	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
	ТаблицаРасчетовПоСрокам.Индексы.Добавить("Регистратор");
	
	Если НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ЗаписыватьИзменения Тогда
		
		Если ГлобальныеПеременные.ПорядокФакт <> "" Тогда
			НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("Порядок",ГлобальныеПеременные.ПорядокФакт );
		КонецЕсли;
		
		ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам);
		
		#Область ПроверкаИзмененийРегистров
		
		ТаблицаИзменений = Неопределено;
		
		Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ *
			|ПОМЕСТИТЬ ВтДвиженияПосле
			|ИЗ  &ТаблицаПоСрокам КАК ДвиженияПосле
			|;
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Период                        КАК Период,
			|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
			|	ВложенныйЗапрос.ОбъектРасчетов                КАК ОбъектРасчетов,
			|	ВложенныйЗапрос.Валюта                        КАК Валюта,
			|	ВложенныйЗапрос.РасчетныйДокумент             КАК РасчетныйДокумент,
			|	ВложенныйЗапрос.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
			|	ВложенныйЗапрос.ДатаВозникновения             КАК ДатаВозникновения,
			|	
			|	ВложенныйЗапрос.ПорядокЗачета                 КАК ПорядокЗачета,
			|	ВложенныйЗапрос.ПорядокОперации               КАК ПорядокОперации,
			|	ВложенныйЗапрос.ВалютаДокумента               КАК ВалютаДокумента,
			|	ВложенныйЗапрос.СвязанныйДокумент             КАК СвязанныйДокумент,
			|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ВложенныйЗапрос.КорОбъектРасчетов             КАК КорОбъектРасчетов,
			|	ВложенныйЗапрос.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
			|	ВложенныйЗапрос.ДокументРегистратор           КАК ДокументРегистратор,
			|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
			|	
			|	СУММА(ВложенныйЗапрос.Предоплата)                    КАК Предоплата,
			|	СУММА(ВложенныйЗапрос.ПредоплатаРегл)                КАК ПредоплатаРегл,
			|	СУММА(ВложенныйЗапрос.ПредоплатаУпр)                 КАК ПредоплатаУпр,
			|	СУММА(ВложенныйЗапрос.Долг)                          КАК Долг,
			|	СУММА(ВложенныйЗапрос.ДолгРегл)                      КАК ДолгРегл,
			|	СУММА(ВложенныйЗапрос.ДолгУпр)                       КАК ДолгУпр
			|ПОМЕСТИТЬ ТаблицаИзмененийРасчетыСКлиентамиПоСрокам
			|ИЗ
			|	(ВЫБРАТЬ
			|		РасчетыПоСрокам.Период                        КАК Период,
			|		РасчетыПоСрокам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
			|		РасчетыПоСрокам.ОбъектРасчетов                КАК ОбъектРасчетов,
			|		РасчетыПоСрокам.Валюта                        КАК Валюта,
			|		РасчетыПоСрокам.РасчетныйДокумент             КАК РасчетныйДокумент,
			|		РасчетыПоСрокам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
			|		РасчетыПоСрокам.ДатаВозникновения             КАК ДатаВозникновения,
			|		
			|		РасчетыПоСрокам.ПорядокЗачета                 КАК ПорядокЗачета,
			|		РасчетыПоСрокам.ПорядокОперации               КАК ПорядокОперации,
			|		РасчетыПоСрокам.ВалютаДокумента               КАК ВалютаДокумента,
			|		РасчетыПоСрокам.СвязанныйДокумент             КАК СвязанныйДокумент,
			|		РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|		РасчетыПоСрокам.КорОбъектРасчетов             КАК КорОбъектРасчетов,
			|		РасчетыПоСрокам.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
			|		РасчетыПоСрокам.ДокументРегистратор           КАК ДокументРегистратор,
			|		РасчетыПоСрокам.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
			|		
			|		РасчетыПоСрокам.Предоплата                    КАК Предоплата,
			|		РасчетыПоСрокам.ПредоплатаРегл                КАК ПредоплатаРегл,
			|		РасчетыПоСрокам.ПредоплатаУпр                 КАК ПредоплатаУпр,
			|		РасчетыПоСрокам.Долг                          КАК Долг,
			|		РасчетыПоСрокам.ДолгРегл                      КАК ДолгРегл,
			|		РасчетыПоСрокам.ДолгУпр                       КАК ДолгУпр
			|		
			|	ИЗ
			|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
			|	ГДЕ
			|		РасчетыПоСрокам.ДокументРегистратор В (&МассивДокументов)
			|		И РасчетыПоСрокам.Активность
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДвиженияПосле.Период                        КАК Период,
			|		ДвиженияПосле.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
			|		ДвиженияПосле.ОбъектРасчетов                КАК ОбъектРасчетов,
			|		ДвиженияПосле.Валюта                        КАК Валюта,
			|		ДвиженияПосле.РасчетныйДокумент             КАК РасчетныйДокумент,
			|		ДвиженияПосле.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
			|		ДвиженияПосле.ДатаВозникновения             КАК ДатаВозникновения,
			|		
			|		ДвиженияПосле.ПорядокЗачета                 КАК ПорядокЗачета,
			|		ДвиженияПосле.ПорядокОперации               КАК ПорядокОперации,
			|		ДвиженияПосле.ВалютаДокумента               КАК ВалютаДокумента,
			|		ДвиженияПосле.СвязанныйДокумент             КАК СвязанныйДокумент,
			|		ДвиженияПосле.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|		ДвиженияПосле.КорОбъектРасчетов             КАК КорОбъектРасчетов,
			|		ДвиженияПосле.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
			|		ДвиженияПосле.ДокументРегистратор           КАК ДокументРегистратор,
			|		ВЫБОР КОГДА ДвиженияПосле.КорАналитикаУчетаПоПартнерам = Неопределено
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
			|			ИНАЧЕ ДвиженияПосле.КорАналитикаУчетаПоПартнерам
			|		КОНЕЦ                                       КАК КорАналитикаУчетаПоПартнерам,
			|		
			|		-ДвиженияПосле.Предоплата                    КАК Предоплата,
			|		-ДвиженияПосле.ПредоплатаРегл                КАК ПредоплатаРегл,
			|		-ДвиженияПосле.ПредоплатаУпр                 КАК ПредоплатаУпр,
			|		-ДвиженияПосле.Долг                          КАК Долг,
			|		-ДвиженияПосле.ДолгРегл                      КАК ДолгРегл,
			|		-ДвиженияПосле.ДолгУпр                       КАК ДолгУпр
			|	ИЗ
			|		ВтДвиженияПосле КАК ДвиженияПосле) КАК ВложенныйЗапрос
			|СГРУППИРОВАТЬ ПО
			|	Период,
			|	АналитикаУчетаПоПартнерам,
			|	ОбъектРасчетов,
			|	Валюта,
			|	РасчетныйДокумент,
			|	ДатаПлановогоПогашения,
			|	ДатаВозникновения,
			|	ПорядокЗачета,
			|	ПорядокОперации,
			|	ВалютаДокумента,
			|	СвязанныйДокумент,
			|	СтатьяДвиженияДенежныхСредств,
			|	КорОбъектРасчетов,
			|	ХозяйственнаяОперация,
			|	ДокументРегистратор,
			|	КорАналитикаУчетаПоПартнерам
			|ИМЕЮЩИЕ
			|	СУММА(ВложенныйЗапрос.Предоплата) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаРегл) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаУпр) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ДолгРегл) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ДолгУпр) <> 0";
			
			Если НЕ ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентами", "РасчетыСПоставщиками");
			КонецЕсли;
			
			РасчетыДляПроверки = ТаблицаРасчетовПоСрокам.Скопировать(Новый Структура("ЗаписьДоНачалаРасчета",Ложь));
			
			МассивДокументов = РасчетыДляПроверки.ВыгрузитьКолонку("ДокументРегистратор");
			МассивДокументов.Добавить(ОсновныеПараметры.Регистратор);
			
			Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
			Запрос.УстановитьПараметр("ТаблицаПоСрокам", РасчетыДляПроверки);
			Запрос.УстановитьПараметр("МассивЗадействованныхРегистраторов",
				ГлобальныеПеременные["МассивЗадействованныхРегистраторов"
					+ ?(ГлобальныеПеременные.ЭтоРасчетыСКлиентами,"РасчетыСКлиентамиПоСрокам","РасчетыСПоставщикамиПоСрокам")]);
			
			Запрос.Выполнить();
			
			НеотражаемыйДокумент = ОсновныеПараметры.Регистратор;
			
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				
				Запрос.УстановитьПараметр("НеотражаемыйДокумент", НеотражаемыйДокумент);
				
				ТекстАктуализацииОтражения =
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
				|
				|ГДЕ
				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаИзменений.ДокументРегистратор";
						
				//++ НЕ УТ
				ТекстАктуализацииОтражения =
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор,
				|	ТаблицаИзменений.Период КАК Период,
				|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
				|
				|ГДЕ
				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаИзменений.ДокументРегистратор,
				|	ТаблицаИзменений.Период,
				|	ТаблицаИзменений.АналитикаУчетаПоПартнерам";
				//-- НЕ УТ
					
				Запрос.Текст = ТекстАктуализацииОтражения;
				
				ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
				
				#Область ПроверкаДатыЗапрета
				
				ЗапросПроверкиДатыЗапрета = Новый Запрос("
				|ВЫБРАТЬ
				|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период),ДАТАВРЕМЯ(3999,1,1)) КАК Период
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений");
				
				ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
				ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
				//{{20200602 ГлазуновДВ Убрали проверку по Заказам, которые попали в закрытый период, а отгрузка только сегодня
				Если Не ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
				//}}20200602 ГлазуновДВ		Если ВыборкаМинимальногоПериода.Следующий() Тогда
					ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
					
					НоваяСтрока = ДанныеДляПроверки.Добавить();
					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
					НоваяСтрока.Раздел = "ВзаимозачетыСписанияЗадолженности";
					
					НоваяСтрока = ДанныеДляПроверки.Добавить();
					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
					НоваяСтрока.Раздел = "ПродажиВозвратыОтКлиентов";
					
					НоваяСтрока = ДанныеДляПроверки.Добавить();
					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
					НоваяСтрока.Раздел = "РегламентныеОперации";
					
					ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.';
											|en = 'Mutual settlements data being changed is in the closed period.'");
					Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
						ВызватьИсключение ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				#КонецОбласти
				
				//++ НЕ УТ
				#Область ЗаданияКРасчетуРезервыПоСомнительнымДолгам
				
				ИмяТаблицыИзменений = НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПодготовитьТаблицуИзмененийПоАналитикеУчетаПоПартнерам(
					Запрос, "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам");
				НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.СформироватьЗаданияКЗакрытиюМесяцаПриИзмененииРасчетов(Запрос, ИмяТаблицыИзменений);
				РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, ИмяТаблицыИзменений);
				
				#КонецОбласти
				//-- НЕ УТ
				
				//++ НЕ УТ
				РеглУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(ТаблицаИзменений);
				//-- НЕ УТ
				//++ НЕ УТКА
				МеждународныйУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВМеждународномУчете(ТаблицаИзменений);
				//-- НЕ УТКА
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
				|	Изменения.РасчетныйДокумент                    КАК Документ,
				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК Изменения";
				
				ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
				
				СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
				ДляПроведения = Новый Структура("СтруктураВременныеТаблицы", СтруктураВременныеТаблицы);
				ДополнительныеСвойства = Новый Структура("ДляПроведения", ДляПроведения);
				ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ГлобальныеПеременные.Регистратор, ДополнительныеСвойства);
				
			Иначе
				
				Запрос.УстановитьПараметр("НеотражаемыйДокумент", НеотражаемыйДокумент);
				
				ТекстАктуализацииОтражения =
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
				|
				|ГДЕ
				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаИзменений.ДокументРегистратор";
				
				//++ НЕ УТ
				ТекстАктуализацииОтражения =
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор,
				|	ТаблицаИзменений.Период КАК Период,
				|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
				|
				|ГДЕ
				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаИзменений.ДокументРегистратор,
				|	ТаблицаИзменений.Период,
				|	ТаблицаИзменений.АналитикаУчетаПоПартнерам";
				//-- НЕ УТ
					
				Запрос.Текст = ТекстАктуализацииОтражения;
					
				ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
				
				#Область ПроверкаДатыЗапрета
				
				ЗапросПроверкиДатыЗапрета = Новый Запрос("
				|ВЫБРАТЬ
				|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период),ДАТАВРЕМЯ(3999,1,1)) КАК Период
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений");
				
				ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
				ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
				//{{20200602 ГлазуновДВ Убрали проверку по Заказам, которые попали в закрытый период, а отгрузка только сегодня
				Если Не ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
				//}}20200602 ГлазуновДВ	

					Если ВыборкаМинимальногоПериода.Следующий() Тогда
						ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
						
						НоваяСтрока = ДанныеДляПроверки.Добавить();
						НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
						НоваяСтрока.Раздел = "ВзаимозачетыСписанияЗадолженности";
						
						НоваяСтрока = ДанныеДляПроверки.Добавить();
						НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
						НоваяСтрока.Раздел = "ЗакупкиВозвратыПоставщикамПеремещенияСборки";
						
						НоваяСтрока = ДанныеДляПроверки.Добавить();
						НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
						НоваяСтрока.Раздел = "РегламентныеОперации";
						
						ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.';
												|en = 'Mutual settlements data being changed is in the closed period.'");
						Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
							Отказ = Истина;
							ВызватьИсключение ОписаниеОшибки;
						КонецЕсли;
					КонецЕсли;
				//{{20200602 ГлазуновДВ
			  	  КонецЕсли;
			      //}}20200602 ГлазуновДВ
				#КонецОбласти
				
				//++ НЕ УТ
				#Область ЗаданияКРасчетуРезервыПоСомнительнымДолгам
				
				ИмяТаблицыИзменений = НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПодготовитьТаблицуИзмененийПоАналитикеУчетаПоПартнерам(
					Запрос, "ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
				НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.СформироватьЗаданияКЗакрытиюМесяцаПриИзмененииРасчетов(Запрос, ИмяТаблицыИзменений);
				РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, ИмяТаблицыИзменений);
				
				#КонецОбласти
				//-- НЕ УТ
				
				//++ НЕ УТ
				РеглУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(ТаблицаИзменений);
				//-- НЕ УТ
				//++ НЕ УТКА
				МеждународныйУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВМеждународномУчете(ТаблицаИзменений);
				//-- НЕ УТКА
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
				|	Изменения.ДокументРегистратор                          КАК Документ,
				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
				|	Изменения.РасчетныйДокумент                    КАК Документ,
				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения";
				
				ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
				
				СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
				ДляПроведения = Новый Структура("СтруктураВременныеТаблицы", СтруктураВременныеТаблицы);
				ДополнительныеСвойства = Новый Структура("ДляПроведения", ДляПроведения);
				ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ГлобальныеПеременные.Регистратор, ДополнительныеСвойства);
				
			КонецЕсли;
			
			РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВтДвиженияПосле");
			
		КонецЕсли;
		
		#КонецОбласти
		
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам);
		
		Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСКлиентами(ИзмененияНДСУП);
				// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
				РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам");
			Иначе
				УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСПоставщиками(ИзмененияНДСУП);
				// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
				РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаИзменений <> Неопределено И ТаблицаИзменений.Количество() > 0 Тогда
			УдалитьСистемныеКорректировкиРегистров(НачалоДняПорядкаФакт, Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ЗаписыватьИзменения И ГлобальныеПеременные.РассчитыватьПланы Тогда
	
		ТаблицаПланОплат.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
				|ДокументПлан, ХозяйственнаяОперация, ДатаПлановогоПогашения, ДатаВозникновения, ВариантОплаты, ПорядокЗачета, ПорядокОперации",
				"КОплате, Оплачено");
		
		ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
		ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
		ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
		ТаблицаПланОплат.Индексы.Добавить("Регистратор");
	
		ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат);
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат);
	КонецЕсли;
	
	Если ОсновныеПараметры.ЗаписыватьИзменения И ГлобальныеПеременные.РассчитыватьПланы Тогда
	
		ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
		ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
		ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
		ТаблицаПланОтгрузокПоставок.Индексы.Добавить("Регистратор");
	
		ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок);
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок);
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено И НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ЗаписыватьИзменения Тогда
		УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки);
	КонецЕсли;
	
	Если НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
		ОсновныеПараметры.ДополнительныеСвойстваПроведения.ДляПроведения.Вставить(
			?(ГлобальныеПеременные.ЭтоРасчетыСКлиентами, "РасчетыСКлиентами", "РасчетыСПоставщиками")+"ПоСрокам",
			ТаблицаРасчетовПоСрокам);
	КонецЕсли;
	
	#КонецОбласти

КонецПроцедуры

