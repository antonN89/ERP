//++Шерстюк Ю.Ю. обновление 2.4.13.227 код процедуры не отличается за исключением  ОтразитьТоварыКОформлениюТаможенныхДеклараций - она переименована разработчиками
//&Вместо("ОбработкаПроведения")
//Процедура Рин1_ОбработкаПроведения(Отказ, РежимПроведения)
//	
//	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
//	
//	Документы.ПриобретениеТоваровУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
//	
//	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
//	
//	ЗаказыСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
//	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
//	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
//	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
//	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
//	ЗапасыСервер.ОтразитьТоварыКОформлениюТаможенныхДеклараций(ДополнительныеСвойства, Движения, Отказ);
//	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
//	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
//	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
//	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
//	
//	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
//	
//	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
//	
//	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
//	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
//	
//	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
//	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
//	
//	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
//	
//	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
//	
//	Ценообразование.ОтразитьЦеныНоменклатурыПоставщика(ДополнительныеСвойства, Движения, Отказ);
//	
//	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
//	МногооборотнаяТараСервер.ОтразитьПринятуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);
//	
//	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
//	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
//	
//	УчетНДСУП.СформироватьДвиженияВРегистры(ДополнительныеСвойства, Движения, Отказ);
//	
//	// Движения по оборотным регистрам управленческого учета
//	УправленческийУчетПроведениеСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
//	УправленческийУчетПроведениеСервер.ОтразитьДвиженияКонтрагентДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
//	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
//	
//	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
//	
//	СформироватьСписокРегистровДляКонтроля();
//	
//	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.Проведение);	
//	
//	ПриобретениеТоваровУслугЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
//	
//	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
//	//++ НЕ УТКА
//	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
//	//-- НЕ УТКА
//	
//	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
//	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
//	
//	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
//	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);	
//	
//	ПараметрыРегистрации = Документы.ПриобретениеТоваровУслуг.ПараметрыРегистрацииСчетовФактурПолученных(ЭтотОбъект);
//	УчетНДСУП.АктуализироватьСчетаФактурыПолученныеПриПроведении(ПараметрыРегистрации);
//	
//	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
//	
//	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
//	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
//	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
//	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
//	
//КонецПроцедуры

//&Вместо("ОбработкаУдаленияПроведения")
//Процедура Рин1_ОбработкаУдаленияПроведения(Отказ)
//	
//	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

//	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

//	СформироватьСписокРегистровДляКонтроля();
//	
//	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);

//	ПриобретениеТоваровУслугЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);

//	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

//	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
//	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
//	
//	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
//	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
//	
//	ПараметрыРегистрации = Документы.ПриобретениеТоваровУслуг.ПараметрыРегистрацииСчетовФактурПолученных(ЭтотОбъект);
//	УчетНДСУП.АктуализироватьСчетаФактурыПолученныеПриУдаленииПроведения(ПараметрыРегистрации);
//	
//	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
//	
//	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
//	
//	
//	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
//	
//	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
//	
//	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
//	
//КонецПроцедуры
//--Шерстюк Ю.Ю.

//{{20201007 ГлазуновДВ вставляем проверку и заполнение ГТД
&Вместо("ПередЗаписью")
Процедура Рин1_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ЕстьКорректировки = Ложь;
	ЕстьСФ = Ложь;
	ЗакупкиСервер.ПроверитьНаличиеКорректировокИСчетовФактур(Ссылка, Ссылка, ЕстьКорректировки, ЕстьСФ);
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ЕстьКорректировки Тогда
		ЗакупкиСервер.СообщитьОбОшибкахОтменаПроведенияЕстьКорректировки(Ссылка,Отказ);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	ДополнительныеСвойства.Вставить("АвансовыйОтчет", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "АвансовыйОтчет"));
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ПриобретениеТоваровУслуг.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
		
	Если (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		Или Не ВернутьМногооборотнуюТару)
		И ТребуетсяЗалогЗаТару Тогда
		ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	СуммаДокумента = ПолучитьСуммуДокумента();
	
	Если ПоступлениеПоЗаказам И ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику) Тогда
				ТекСтрока.ЗаказПоставщику = ЗаказПоставщику;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо
		И ЗначениеЗаполнено(Контрагент) Тогда
		
		Для каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.НомерВходящегоДокумента = Неопределено;
			СтрокаТЧ.ДатаВходящегоДокумента = Неопределено;
			СтрокаТЧ.НаименованиеВходящегоДокумента = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	СуммаЗалоговойТары = ПолучитьСуммуЗалоговойТары();
	Если Валюта = ВалютаВзаиморасчетов Тогда
		СуммаВзаиморасчетов = СуммаДокумента;
		СуммаВзаиморасчетовПоТаре = СуммаЗалоговойТары;
	Иначе
		СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Курс,Кратность);
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВПоступлении(ЭтотОбъект, , СтруктураКурса);
	КонецЕсли;
	
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураКурса);
	ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Товары");
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, 
								НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПриобретениеТоваровУслуг));
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(ЭтотОбъект, РежимЗаписи);
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	ПараметрыРегистрации = Документы.ПриобретениеТоваровУслуг.ПараметрыРегистрацииСчетовФактурПолученных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыПолученныеПередЗаписью(ПараметрыРегистрации, РежимЗаписи, ПометкаУдаления, Проведен);

	УчетПрослеживаемыхТоваровЛокализация.ОчиститьНомерГТДУПрослеживаемыхТоваровВДокументеПриобретениеТоваровУслуг(ЭтотОбъект);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Тогда
			ВзаиморасчетыСервер.ЗаполнитьСуммуРасшифровкиПлатежаПоСуммеДокумента(
				СуммаДокумента,
				РасшифровкаПлатежа);
			ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
				Валюта,
				Дата,
				РасшифровкаПлатежа);
		ИначеЕсли СуммаДокумента > 0 
				И ((НЕ ПоступлениеПоЗаказам И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным)
						ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным) 
				И НЕ (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию 
						ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо) Тогда
				ВзаиморасчетыСервер.ЗаполнитьСуммыРасшифровкиНакладной(СуммаДокумента, СуммаВзаиморасчетов, РасшифровкаПлатежа);
		Иначе
			Если РасшифровкаПлатежа.Количество() <> 0 Тогда
				РасшифровкаПлатежа.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			ХозяйственнаяОперация,
			Склад,
			Подразделение,
			Партнер,
			Договор);
			
		МассивОперацийВПутиИФактуровка = Новый Массив;
		МассивОперацийВПутиИФактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
		МассивОперацийВПутиИФактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
		МассивОперацийВПутиИФактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
		МассивОперацийВПутиИФактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
		МассивОперацийВПутиИФактуровка.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
		// Если Склад - группа, то для аналитики учета номенклатуры склад берем из ТЧ
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		Если Склад.ЭтоГруппа И Склад.ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных
		 И МассивОперацийВПутиИФактуровка.Найти(ХозяйственнаяОперация) = Неопределено Тогда
			ИменаПолей.Вставить("Произвольный", "Склад");
		КонецЕсли;
		
		ИменаПолей.Вставить("Работа", "Подразделение");
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			Товары,
			МестаУчета,
			ИменаПолей);
		
		ЗаполнитьВидыЗапасов(Отказ);
		НоменклатураПартнеровСервер.ЗаполнитьПустоеСопоставлениеВНоменклатуреПартнераПоНоменклатуреИБ(Товары, Отказ);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ВидыЗапасов.Очистить();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И НЕ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И НЕ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		
		Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
			ЗаполнитьЭтапыГрафикаОплаты();
		ИначеЕсли ЭтапыГрафикаОплаты.Итог("СуммаПлатежа") + ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару")
			+ ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетов") + ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетовПоТаре")
			+ ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетовПоТаре") = 0 Тогда
			ЭтапыГрафикаОплаты.Очистить();
		ИначеЕсли ЭтапыГрафикаОплаты.Итог("СуммаПлатежа") + ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару") <> СуммаДокумента
			ИЛИ ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетов") + ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетовПоТаре") <> СуммаВзаиморасчетов
			ИЛИ ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетовПоТаре") <> СуммаВзаиморасчетовПоТаре Тогда
			
			Если ЗначениеЗаполнено(Договор) Тогда
				ГрафикИсполненияДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ГрафикИсполненияДоговора");
			Иначе
				ГрафикИсполненияДоговора = Документы.ГрафикИсполненияДоговора.ПустаяСсылка();
			КонецЕсли;
			
			Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным ИЛИ НЕ ПоступлениеПоЗаказам
				ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов И ЗначениеЗаполнено(ГрафикИсполненияДоговора) Тогда
				
				ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
					ЭтапыГрафикаОплаты,
					СуммаДокумента - СуммаЗалоговойТары,
					СуммаЗалоговойТары,
					СуммаВзаиморасчетов - СуммаВзаиморасчетовПоТаре,
					СуммаВзаиморасчетовПоТаре);
				
			Иначе
			
				ПараметрыЗаполненияЭтапов = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплатыПоЗаказам();
				ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияЭтапов,ЭтотОбъект);
				ПараметрыЗаполненияЭтапов.ТабличнаяЧасть = Товары;
				ПараметрыЗаполненияЭтапов.ИмяПоляЗаказ   = "ЗаказПоставщику";
				ПараметрыЗаполненияЭтапов.ЕстьТара       = Истина;
				ПараметрыЗаполненияЭтапов.ПоЗаказам      = ПоступлениеПоЗаказам;
				ПараметрыЗаполненияЭтапов.УпрощеннаяСхема= ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках");
				
				ЭтапыОплатыСервер.РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(ПараметрыЗаполненияЭтапов);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПризнакЕстьАлкогольнаяПродукция();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИнтеграцияГИСМ_УТ.ЗаполнитьПризнакиЕстьМаркируемаяПродукцияИЕстьКиЗ(ЭтотОбъект, "Товары"));
	
	
	
	ПриобретениеТоваровУслугЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

&После("ИнициализироватьДокумент")
Процедура Рин1_ИнициализироватьДокумент(ДанныеЗаполнения)
	//++Шерстюк Ю.Ю. Задача 7625
	Если ЗначениеЗаполнено(Договор) Тогда 
		Менеджер = Договор.Менеджер;
		Подразделение = Договор.Подразделение;
	КонецЕсли;
    //--Шерстюк Ю.Ю.

КонецПроцедуры
//}}20201007 ГлазуновДВ
