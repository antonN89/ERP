

// Возвращает структуру - информацию о цене продажи и остатках товара.
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура			 - номенклатура,
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика номенклатуры,
//  Соглашение		 - СправочникСсылка.СоглашенияСКлиентами		 - соглашение, на основании которого осуществляется продажа,
//  Валюта			 - СправочникСсылка.Валюты						 - валюта взаиморасчетов,
//  Склады			 - СправочникСсылка.Склады						 - склад, с которого осуществляется отпуск номенклатуры,
//  ВидыЦен			 - СправочникСсылка.ВидыЦен						 - вид цены.
// 
// Возвращаемое значение:
//  Структура - Структура с информацией о цене продажи и остатках товара.
//
Функция ЦенаПродажиИОстаткиТовара_Обеспечение(Номенклатура, Характеристика, Соглашение, Валюта, Склады, ВидыЦен) Экспорт
	
	Перем СоставРазделовЗапроса;
	
	Если НЕ Склады.Количество() = 1 Тогда 
		Возврат Новый Структура("ТекущиеОстатки,  Цена, ИсточникиОбеспечения", Новый Массив,  Неопределено, Новый Массив);	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользованиеХарактеристик");
	НесколькоХарактеристик = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;

	Запрос.Текст = ГИГ_МодульСервер.ГИГ_ТекстЗапросаДоступныхСхемОбеспеченияДляПодбора(СоставРазделовЗапроса)
		+ ПодборТоваровСервер.РазделительПакетаЗапросов()
		+ГИГ_МодульСервер.ГИГ_ТекстЗапросаДоступныхОстатковПроизводителяДляПодбора(
		ЗначениеЗаполнено(Характеристика), НесколькоХарактеристик, СоставРазделовЗапроса)
		+ ПодборТоваровСервер.РазделительПакетаЗапросов()
		+ ГИГ_МодульСервер.ГИГ_ТекстЗапросаДоступныхОстатковПеремещенияДляПодбора(
		ЗначениеЗаполнено(Характеристика), НесколькоХарактеристик, СоставРазделовЗапроса)
		+ ПодборТоваровСервер.РазделительПакетаЗапросов()
		+ ПодборТоваровСервер.ТекстЗапросаЦенаПродажиТовара(СоставРазделовЗапроса);
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{(Номенклатура)}", "И Номенклатура = &Номенклатура И Характеристика = &Характеристика");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{(Номенклатура)}", "И Номенклатура = &Номенклатура");
		Характеристика =  Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	Запрос.УстановитьПараметр("ТаблицаДоступныхСхемОбеспечения",ГИГ_МодульСервер.ГИГ_ПолучитьТаблицуДоступныхСхемОбеспечения(Склады));
	Запрос.УстановитьПараметр("Склады", Склады);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДатаСеанса()));
//{{20201026 ГлазуновДВ
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
//}}20201026 ГлазуновДВ
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Цена продажи.
	Коэффициент = 1;
	
	ЦенаПродажи = Новый Структура("ВидЦены, Цена, Упаковка, ЕдиницаИзмерения, Описание, СрокПоставки");
	
	ЦенаПродажи.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	ЦенаПродажи.Цена = 0;
	ЦенаПродажи.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЦенаПродажи.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЦенаПродажи.Описание = "";
	ЦенаПродажи.СрокПоставки = '00010101';
	
	Выборка = Результат[СоставРазделовЗапроса.Найти("ЦенаПродажиТовара")].Выбрать();
	Если Выборка.Следующий() Тогда
		
		Коэффициент = Выборка.Коэффициент;
		ЗаполнитьЗначенияСвойств(ЦенаПродажи, Выборка);
		
	КонецЕсли;
	
	ИсточникиОбеспечения = Новый Массив;
	
	// Текущие остатки.
	Выборка = Результат[СоставРазделовЗапроса.Найти("ДоступныеТоварыПроизводителя")].Выбрать();
	ТекущиеОстатки = Новый Массив;
	
		
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, Период, Доступно, ИсточникОбеспечения, АктуальностьЗагрузки");
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		//Казаков
		НоваяСтрока.Вставить("СхемаОбеспечения",Выборка.СхемаОбеспечения);
		НоваяСтрока.Вставить("СрокОбеспеченияМакс",Выборка.СрокОбеспеченияМакс);
		НоваяСтрока.Вставить("СрокОбеспеченияМин",Выборка.СрокОбеспеченияМин);
		НоваяСтрока.Вставить("ИсточникОбеспечения",Выборка.ИсточникОбеспечения);
		
		НоваяСтрока.Период = Выборка.Период;
		НоваяСтрока.Доступно = НоваяСтрока.Доступно / Коэффициент;
		ТекущиеОстатки.Добавить(НоваяСтрока);
		
		Если ИсточникиОбеспечения.Найти(Выборка.ИсточникОбеспечения)=Неопределено Тогда
			 ИсточникиОбеспечения.Добавить(Выборка.ИсточникОбеспечения);
		КонецЕсли;
		 
		
	КонецЦикла;
	
	// Перемещение.
	Выборка = Результат[СоставРазделовЗапроса.Найти("ДоступныеТоварыДляПеремещения")].Выбрать();

	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, Период, Доступно,ИсточникОбеспечения");
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		//Казаков
		НоваяСтрока.Вставить("СхемаОбеспечения",Выборка.СхемаОбеспечения);
		НоваяСтрока.Вставить("СрокОбеспеченияМакс",Выборка.СрокОбеспеченияМакс);
		НоваяСтрока.Вставить("СрокОбеспеченияМин",Выборка.СрокОбеспеченияМин);
		НоваяСтрока.Вставить("ИсточникОбеспечения",Выборка.ИсточникОбеспечения);
		
		НоваяСтрока.Период = Выборка.Период;
		НоваяСтрока.Доступно = НоваяСтрока.Доступно / Коэффициент;
		ТекущиеОстатки.Добавить(НоваяСтрока);
		
		Если ИсточникиОбеспечения.Найти(Выборка.ИсточникОбеспечения)=Неопределено Тогда
			 ИсточникиОбеспечения.Добавить(Выборка.ИсточникОбеспечения);
		КонецЕсли;

	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Новый Структура("ТекущиеОстатки,  Цена, ИсточникиОбеспечения", ТекущиеОстатки,  ЦенаПродажи, ИсточникиОбеспечения);
	
КонецФункции

Функция СозданиеНоменклатурыНаСервере(ВыбраннаяПозиция,ВидНоменклатурыДляСоздания)   Экспорт 
	// в зависимости от того, указаны ли необходимые реквизиты
	// Создаем, записываем, устанавливаем цену корректировкой
	// или открываем форму для ручных изменений
	
	Основание = ВыбраннаяПозиция.ПолучитьОбъект();
	СсылкаНаЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ВидНоменклатурыДляСоздания) Тогда  
		Если НЕ ЗначениеЗаполнено(Основание.ВидНоменклатуры) и Основание.ВидНоменклатуры <> ВидНоменклатурыДляСоздания Тогда 
			Основание.ВидНоменклатуры = ВидНоменклатурыДляСоздания;
			Основание.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	Если Основание.Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() тогда
		СсылкаНаЭлементНоменклатуры = Основание.Номенклатура;
	КонецЕсли;
	
	Если СсылкаНаЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() Тогда 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Артикул",ВыбраннаяПозиция.Артикул);
		Выборка  = Справочники.Номенклатура.Выбрать(,,СтруктураОтбора);
		Пока Выборка.Следующий() цикл
			Если  Выборка.Производитель =  Основание.Производитель Тогда  
				СсылкаНаЭлементНоменклатуры = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Если СсылкаНаЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() Тогда 
		Если СсылкаНаЭлементНоменклатуры = Неопределено Или СсылкаНаЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() тогда 
			ЭлементНоменклатуры = Справочники.Номенклатура.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатуры,Основание,,"Владелец");
			Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(ЭлементНоменклатуры);
			Если Основание.ВесБазовой <> 0 Тогда 
				ЭлементНоменклатуры.ВесИспользовать = Истина;
				ЭлементНоменклатуры.ВесЕдиницаИзмерения = Основание.ЕИВеса;
				ЭлементНоменклатуры.ВесЗнаменатель = 1;
				ЭлементНоменклатуры.ВесЧислитель = Основание.ВесБазовой;
			КонецЕсли;
			Если Основание.ОбъемБазовой <> 0 Тогда 
				ЭлементНоменклатуры.ОбъемЕдиницаИзмерения = Основание.ЕИОбъема;
				ЭлементНоменклатуры.ОбъемЗнаменатель = 1;
				ЭлементНоменклатуры.ОбъемИспользовать = Истина;
				ЭлементНоменклатуры.ОбъемЧислитель = Основание.ОбъемБазовой;
			КонецЕсли;
			ЭлементНоменклатуры.ЕдиницаИзмерения = Основание.БазоваяЕдиницаИзмерения;
			ЭлементНоменклатуры.ЕдиницаДляОтчетов = ?(ЗначениеЗаполнено(Основание.ОсновнаяЕдиницаИзмерения),Основание.ОсновнаяЕдиницаИзмерения,Основание.БазоваяЕдиницаИзмерения);
			ЭлементНоменклатуры.КоэффициентЕдиницыДляОтчетов = Основание.КоэффициентОсновнойЕдИзм;
			///<-- Гигабайт (Чернов А.С.): КратностьПартии, пока что отменим заполнение
			//ЭлементНоменклатуры.ГИГ_КратностьПартии = Основание.КоэффициентОсновнойЕдИзм;
			///--> Гигабайт (Чернов А.С.) 
			//++Шерстюк Ю.Ю. 13.04.2021, 04.05.2021 заполнение марки
			ЭлементНоменклатуры.СкладскаяГруппа = Основание.СкладскаяГруппа;
			ЭлементНоменклатуры.Марка = Основание.Марка;
			//--Шерстюк Ю.Ю.
			ЭлементНоменклатуры.НаименованиеПолное = Основание.Наименование;
			ЭлементНоменклатуры.ЦеноваяГруппа      = Основание.ЦеноваяКатегория;
			ЭлементНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
			СтрокаДопСвойств = ЭлементНоменклатуры.ДополнительныеРеквизиты.Добавить(); 
			СтрокаДопСвойств.Значение = Ложь;
			СтрокаДопСвойств.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Утвержден");
			СтрокаДопСвойств = ЭлементНоменклатуры.ДополнительныеРеквизиты.Добавить(); 
			СтрокаДопСвойств.Значение = Основание.ссылка;
			СтрокаДопСвойств.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номенклатура производителей");
			ОбновитьКешРеквизитовВидаНоменклатуры(ЭлементНоменклатуры);
			
			ЭлементНоменклатуры.Записать();
			
			//++Шерстюк Ю.Ю. 14.04.2021 Задача № 7565 для адресного хранения необходимо использование индивидуальных упаковок
			//поэтому создаем упаковку: ед.изм = базовая ед.из. коэф = 1
			Если ЭлементНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда 
				//++Шерстюк Ю.Ю. 04.05.2021 Задача 8025 при создании номенклатуры уже создается упаковка, поэтому просто проверим ее создание и если создана, то дозаполним вес и объем 
				пРезультат = Справочники.Номенклатура.ПроверитьИндУпаковкуЕдиницыХранения(ЭлементНоменклатуры.Ссылка);
				Если пРезультат.Количество() > 0 Тогда 
					 пПустаяСсылкаУпаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					 пСтруктураВГХ = Новый Структура;
					 пСтруктураВГХ.Вставить("ЕдИзВес",?(ВыбраннаяПозиция.ЕИВеса<>пПустаяСсылкаУпаковка и ВыбраннаяПозиция.ВесБазовой <> 0,ВыбраннаяПозиция.ЕИВеса,Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("163")));//грамм
					 пСтруктураВГХ.Вставить("Вес",?(ВыбраннаяПозиция.ЕИВеса=пПустаяСсылкаУпаковка или ВыбраннаяПозиция.ВесБазовой = 0,1,ВыбраннаяПозиция.ВесБазовой));
					 пСтруктураВГХ.Вставить("ЕдИзОбъем",?(ВыбраннаяПозиция.ЕИОбъема<>пПустаяСсылкаУпаковка и ВыбраннаяПозиция.ОбъемБазовой <> 0,ВыбраннаяПозиция.ЕИОбъема,Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("131")));//мм3
					 пСтруктураВГХ.Вставить("Объем",?(ВыбраннаяПозиция.ЕИОбъема=пПустаяСсылкаУпаковка или ВыбраннаяПозиция.ОбъемБазовой = 0,1,ВыбраннаяПозиция.ОбъемБазовой));
					 пСтруктураВГХ.Вставить("ЕдИзШирина",?(ВыбраннаяПозиция.ЕИШирина<>пПустаяСсылкаУпаковка и ВыбраннаяПозиция.ШиринаБазовой <> 0,ВыбраннаяПозиция.ЕИШирина,Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("003"))); //мм
					 пСтруктураВГХ.Вставить("Ширина",?(ВыбраннаяПозиция.ЕИШирина=пПустаяСсылкаУпаковка или ВыбраннаяПозиция.ШиринаБазовой = 0,1,ВыбраннаяПозиция.ШиринаБазовой));
					 пСтруктураВГХ.Вставить("ЕдИзВысота",?(ВыбраннаяПозиция.ЕИВысота<>пПустаяСсылкаУпаковка и ВыбраннаяПозиция.ВысотаБазовой <> 0,ВыбраннаяПозиция.ЕИВысота,Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("003")));
					 пСтруктураВГХ.Вставить("Высота",?(ВыбраннаяПозиция.ЕИВысота=пПустаяСсылкаУпаковка или ВыбраннаяПозиция.ВысотаБазовой = 0,1,ВыбраннаяПозиция.ВысотаБазовой));
					 пСтруктураВГХ.Вставить("ЕдИзГлубина",?(ВыбраннаяПозиция.ЕИГлубина<>пПустаяСсылкаУпаковка и ВыбраннаяПозиция.ГлубинаБазовой <> 0,ВыбраннаяПозиция.ЕИГлубина,Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("003")));
					 пСтруктураВГХ.Вставить("Глубина",?(ВыбраннаяПозиция.ЕИГлубина=пПустаяСсылкаУпаковка или ВыбраннаяПозиция.ГлубинаБазовой,1,ВыбраннаяПозиция.ГлубинаБазовой));

					 СоздатьУпаковкуПоЕдХранения(ЭлементНоменклатуры.Ссылка,пРезультат[0].Упаковка,пСтруктураВГХ);
				Иначе
					 СоздатьУпаковкуПоЕдХранения(ЭлементНоменклатуры.Ссылка);
				КонецЕсли;
				
				Если ВыбраннаяПозиция.ГлубинаБазовой > 0 и ВыбраннаяПозиция.ЕИГлубина<>пПустаяСсылкаУпаковка Тогда 
					ЭлементНоменклатуры.ДлинаЕдиницаИзмерения = ВыбраннаяПозиция.ЕИГлубина;
					ЭлементНоменклатуры.ДлинаЧислитель  = ВыбраннаяПозиция.ГлубинаБазовой;
					ЭлементНоменклатуры.ДлинаЗнаменатель = 1;
					ЭлементНоменклатуры.ДлинаИспользовать = Истина;
				КонецЕсли;
				
				Если ВыбраннаяПозиция.ОбъемБазовой > 0 и ВыбраннаяПозиция.ЕИОбъема<>пПустаяСсылкаУпаковка Тогда 
					ЭлементНоменклатуры.ОбъемЕдиницаИзмерения = ВыбраннаяПозиция.ЕИОбъема;
					ЭлементНоменклатуры.ОбъемЧислитель  = ВыбраннаяПозиция.ОбъемБазовой;
					ЭлементНоменклатуры.ОбъемЗнаменатель = 1;
					ЭлементНоменклатуры.ОбъемИспользовать = Истина;
				КонецЕсли;
				
				Если ВыбраннаяПозиция.ВесБазовой > 0 и ВыбраннаяПозиция.ЕИВеса<>пПустаяСсылкаУпаковка Тогда 
					ЭлементНоменклатуры.ВесЕдиницаИзмерения = ВыбраннаяПозиция.ЕИВеса;
					ЭлементНоменклатуры.ВесЧислитель  = ВыбраннаяПозиция.ВесБазовой;
					ЭлементНоменклатуры.ВесЗнаменатель = 1;
					ЭлементНоменклатуры.ВесИспользовать = Истина;
				КонецЕсли;
			
				//--Шерстюк Ю.Ю.
				ЭлементНоменклатуры.ИспользоватьУпаковки = Истина;
				ЭлементНоменклатуры.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
				ИспользованиеУпаковок = "ИндивидуальныйНабор";
				ЭлементНоменклатуры.ПоставляетсяВМногооборотнойТаре   = Ложь;
				ЭлементНоменклатуры.НоменклатураМногооборотнаяТара    = Неопределено;
				ЭлементНоменклатуры.ХарактеристикаМногооборотнаяТара  = Неопределено;
			КонецЕсли;
			//--Шерстюк Ю.Ю.

			
			
			Если ЭлементНоменклатуры.КоэффициентЕдиницыДляОтчетов <> 1 и ЭлементНоменклатуры.ЕдиницаИзмерения <> ЭлементНоменклатуры.ЕдиницаДляОтчетов Тогда 
				ЭлементНоменклатуры.ИспользоватьУпаковки = Истина;
				ЭлементНоменклатуры.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
				ИспользованиеУпаковок = "ИндивидуальныйНабор";
				ЭлементНоменклатуры.ПоставляетсяВМногооборотнойТаре   = Ложь;
				ЭлементНоменклатуры.НоменклатураМногооборотнаяТара    = Неопределено;
				ЭлементНоменклатуры.ХарактеристикаМногооборотнаяТара  = Неопределено;
				ЭлементУпаковки = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
				ЭлементУпаковки.Владелец = ЭлементНоменклатуры.Ссылка;
				ЭлементУпаковки.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
				ЭлементУпаковки.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
				ЭлементУпаковки.ЕдиницаИзмерения = ЭлементНоменклатуры.ЕдиницаДляОтчетов;
				ЭлементУпаковки.Числитель = ЭлементНоменклатуры.КоэффициентЕдиницыДляОтчетов;
				ЭлементУпаковки.Знаменатель = 1;
				ЭлементУпаковки.Наименование = Справочники.УпаковкиЕдиницыИзмерения.СформироватьНаименование(ЭлементУпаковки.ТипУпаковки, ЭлементУпаковки.ЕдиницаИзмерения, ЭлементУпаковки.Числитель, ЭлементУпаковки.Знаменатель, ЭлементУпаковки.Владелец.ЕдиницаИзмерения);
				ЭлементУпаковки.Записать();
			КонецЕсли;
			ЭлементНоменклатуры.Записать();	
			СсылкаНаЭлемент = ЭлементНоменклатуры.Ссылка;
			
			//bercut090120
			Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Если Основание.КоэффициентЕдИзмТарифа > 1 Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец,
				|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
				|	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель
				|ИЗ
				|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
				|ГДЕ
				|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
			//{{20200716 ГлазуновДВ Изменил условия отбора	
				|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаИзмерения
				|	И УпаковкиЕдиницыИзмерения.Числитель = &Числитель
				|	И УпаковкиЕдиницыИзмерения.Знаменатель = &Знаменатель";
			//}}20200716 ГлазуновДВ
//Отключил 20200716 ГлазуновДВ				|	И УпаковкиЕдиницыИзмерения.Родитель = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)";
				
				Запрос.УстановитьПараметр("Владелец", СсылкаНаЭлемент);
				Запрос.УстановитьПараметр("ЕдиницаИзмерения", Основание.ЕдиницаИзмеренияТарифа);
				Запрос.УстановитьПараметр("Числитель", Основание.КоэффициентЕдИзмТарифа);
				Запрос.УстановитьПараметр("Знаменатель", 1);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если РезультатЗапроса.Пустой() Тогда
					Попытка
						НоваяУпаковка = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
						НоваяУпаковка.Владелец = СсылкаНаЭлемент;
						НоваяУпаковка.ЕдиницаИзмерения = Основание.ЕдиницаИзмеренияТарифа; 
						НоваяУпаковка.Числитель = Основание.КоэффициентЕдИзмТарифа;
						НоваяУпаковка.Знаменатель = 1;
						НоваяУпаковка.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
						НоваяУпаковка.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
						НоваяУпаковка.Наименование = Строка(Основание.ЕдиницаИзмеренияТарифа) + " (" + 
						Основание.КоэффициентЕдИзмТарифа + " " + Строка(СсылкаНаЭлемент.ЕдиницаИзмерения) + ")";
						НоваяУпаковка.Записать();
						Упаковка = НоваяУпаковка.Ссылка;
						Если не СсылкаНаЭлемент.ИспользоватьУпаковки Тогда
							ЭлементНоменклатуры = СсылкаНаЭлемент.ПолучитьОбъект();
							ЭлементНоменклатуры.ИспользоватьУпаковки = Истина;
							ЭлементНоменклатуры.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
							ЭлементНоменклатуры.ПоставляетсяВМногооборотнойТаре   = Ложь;
							ЭлементНоменклатуры.НоменклатураМногооборотнаяТара    = Неопределено;
							ЭлементНоменклатуры.ХарактеристикаМногооборотнаяТара  = Неопределено;
							ЭлементНоменклатуры.Записать();	
						КонецЕсли;					
					Исключение
					КонецПопытки;
				Иначе
					Упаковка = РезультатЗапроса.Выгрузить()[0].Ссылка;
				КонецЕсли;
			КонецЕсли;
			//

			СтруктураОтбора = Новый Структура("НоменклатураПроизводителя",Основание.ссылка);
			ЗаписьРегистраНаТекущуюДату = РегистрыСведений.ГИГ_ЦеныНоменклатурыПроизводителей.СрезПоследних(ТекущаяДата(),СтруктураОтбора);
			Если ЗаписьРегистраНаТекущуюДату.Количество() <> 0 Тогда 
				Валюта       = ЗаписьРегистраНаТекущуюДату[0].ВалютаТарифа;
				ТарифБезНДС	 = ЗаписьРегистраНаТекущуюДату[0].ТарифБезНДС;
				ТарифСНДС	 = ЗаписьРегистраНаТекущуюДату[0].ТарифСНДС;
				ПериодЗаписи = ?(ЗаписьРегистраНаТекущуюДату[0].Период > ТекущаяДата(), ЗаписьРегистраНаТекущуюДату[0].Период, ТекущаяДата());
				МРЦБезНДС	 = ЗаписьРегистраНаТекущуюДату[0].МРЦБезНДС;
				МРЦСНДС	     = ЗаписьРегистраНаТекущуюДату[0].МРЦСНДС;
				
				// создаем установку цен   для всех, кроме 0,00 цены
				Если ТарифБезНДС > 0 или ТарифСНДС > 0 или МРЦБезНДС > 0 или МРЦСНДС > 0 Тогда 
					УстановитьПривилегированныйРежим(Истина);
					ДокументУстановки = Документы.КорректировкаРегистров.СоздатьДокумент();
					ДокументУстановки.Дата = ПериодЗаписи;
					ДокументУстановки.Комментарий = "Добавлен при создании номенклатуры "+СсылкаНаЭлемент.Наименование;  
					СтрокаРегистра = ДокументУстановки.ТаблицаРегистров.Добавить();
					СтрокаРегистра.Имя = "ЦеныНоменклатуры";
					ДокументУстановки.Ответственный = Пользователи.ТекущийПользователь();
					ДокументУстановки.Записать(РежимЗаписиДокумента.Запись);
					ДокументУстановки.Движения.ЦеныНоменклатуры.Записывать = Истина;
					
					Если ТарифБезНДС > 0  Тогда
						Движение = ДокументУстановки.Движения.ЦеныНоменклатуры.Добавить();
						Движение.Активность = Истина;
						Движение.Номенклатура = СсылкаНаЭлемент;
						Движение.ВидЦены = Константы.ГИГ_ОсновнойВидЦеныТарифаНоменклатуры.Получить();
						Движение.Период = ДокументУстановки.Дата;
						Движение.Цена = ТарифБезНДС/?(Основание.КоличествоЕдиницВТарифе = 0,1,Основание.КоличествоЕдиницВТарифе);
						Движение.Валюта = Валюта;
						Движение.Регистратор = ДокументУстановки.Ссылка;
						Движение.Упаковка = Упаковка;
					КонецЕсли;
					Если  МРЦБезНДС > 0 Тогда 
						Движение = ДокументУстановки.Движения.ЦеныНоменклатуры.Добавить();
						Движение.Активность = Истина;
						Движение.Номенклатура = СсылкаНаЭлемент;
						Движение.ВидЦены = Константы.ГИГ_ОсновнойВидЦеныМРЦБезНДС.Получить();
						Движение.Период = ДокументУстановки.Дата;
						Движение.Цена = МРЦБезНДС/?(Основание.КоличествоЕдиницВТарифе = 0,1,Основание.КоличествоЕдиницВТарифе);
						Движение.Валюта = Валюта;
						Движение.Регистратор = ДокументУстановки.Ссылка;
						Движение.Упаковка = Упаковка;
					КонецЕсли;
										
					Если  ТарифСНДС > 0 Тогда 
						Движение = ДокументУстановки.Движения.ЦеныНоменклатуры.Добавить();
						Движение.Активность = Истина;
						Движение.Номенклатура = СсылкаНаЭлемент;
						Движение.ВидЦены = Константы.ГИГ_ОсновнойВидЦеныТарифаНоменклатурыСНДС.Получить();
						Движение.Период = ДокументУстановки.Дата;
						Движение.Цена = ТарифСНДС/?(Основание.КоличествоЕдиницВТарифе = 0,1,Основание.КоличествоЕдиницВТарифе);
						Движение.Валюта = Валюта;
						Движение.Регистратор = ДокументУстановки.Ссылка;
						Движение.Упаковка = Упаковка;
					КонецЕсли;
					Если  МРЦСНДС > 0 Тогда 
						Движение = ДокументУстановки.Движения.ЦеныНоменклатуры.Добавить();
						Движение.Активность = Истина;
						Движение.Номенклатура = СсылкаНаЭлемент;
						Движение.ВидЦены = Константы.ГИГ_ОсновнойВидЦеныМРЦСНДС.Получить();
						Движение.Период = ДокументУстановки.Дата;
			//Исходное			Движение.Цена = МРЦСНДС;
					//{{20200716 ГлазуновДВ Исправили
						Движение.Цена = МРЦСНДС/?(Основание.КоличествоЕдиницВТарифе = 0,1,Основание.КоличествоЕдиницВТарифе);
					//}}20200716 ГлазуновДВ
						Движение.Валюта = Валюта;
						Движение.Регистратор = ДокументУстановки.Ссылка;
						Движение.Упаковка = Упаковка;
					КонецЕсли;
					
					
			//Исходное		ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Основание.СтавкаНДС)*100;
				//{{20200716 ГлазуновДВ Исправили
					ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Основание.СтавкаНДС);
				//}}20200716 ГлазуновДВ
					Если ТекПроцентНДС <> 0 Тогда 
						Если  ТарифБезНДС > 0 и ТарифСНДС = 0  Тогда 
							// расчитываем сумму с НДС
			//Исходное		СуммаКУстановке = Окр(ТарифБезНДС+((ТарифБезНДС * ТекПроцентНДС)/(100+ТекПроцентНДС)),2,1);
						//{{20200716 ГлазуновДВ Исправили
							СуммаКУстановке = Окр(ТарифБезНДС + (ТарифБезНДС * ТекПроцентНДС / 100),2,1);
						//}}20200716 ГлазуновДВ
							Движение = ДокументУстановки.Движения.ЦеныНоменклатуры.Добавить();
							Движение.Активность = Истина;
							Движение.Номенклатура = СсылкаНаЭлемент;
							Движение.ВидЦены = Константы.ГИГ_ОсновнойВидЦеныТарифаНоменклатурыСНДС.Получить();
							Движение.Период = ДокументУстановки.Дата;
			//Исходное				Движение.Цена = СуммаКУстановке;
						//{{20200716 ГлазуновДВ Исправили
							Движение.Цена = СуммаКУстановке/?(Основание.КоличествоЕдиницВТарифе = 0,1,Основание.КоличествоЕдиницВТарифе);
						//}}20200716 ГлазуновДВ
							Движение.Валюта = Валюта;
							Движение.Регистратор = ДокументУстановки.Ссылка;
							Движение.Упаковка = Упаковка;
						КонецЕсли;
						Если  ТарифСНДС > 0 и ТарифБезНДС = 0 Тогда 
							// расчитываем сумму без НДС
			//Исходное				СуммаКУстановке = Окр(ТарифСНДС-((ТарифСНДС * ТекПроцентНДС)/(100+ТекПроцентНДС)),2,1);
						//{{20200716 ГлазуновДВ Исправили
							СуммаКУстановке = Окр(ТарифСНДС * 100 / (100 + ТекПроцентНДС),2,1);
						//}}20200716 ГлазуновДВ
							Движение = ДокументУстановки.Движения.ЦеныНоменклатуры.Добавить();
							Движение.Активность = Истина;
							Движение.Номенклатура = СсылкаНаЭлемент;
							Движение.ВидЦены = Константы.ГИГ_ОсновнойВидЦеныТарифаНоменклатуры.Получить();
							Движение.Период = ДокументУстановки.Дата;
			//Исходное				Движение.Цена = СуммаКУстановке;
						//{{20200716 ГлазуновДВ Исправили
							Движение.Цена = СуммаКУстановке/?(Основание.КоличествоЕдиницВТарифе = 0,1,Основание.КоличествоЕдиницВТарифе);
						//}}20200716 ГлазуновДВ
							Движение.Валюта = Валюта;
							Движение.Регистратор = ДокументУстановки.Ссылка;
							Движение.Упаковка = Упаковка;
						КонецЕсли;
						
						
						Если  МРЦБезНДС > 0 и МРЦСНДС = 0  Тогда 
							// расчитываем сумму с НДС
			//Исходное				СуммаКУстановке = Окр(МРЦБезНДС+((МРЦБезНДС * ТекПроцентНДС)/(100+ТекПроцентНДС)),2,1);
						//{{20200716 ГлазуновДВ Исправили
							СуммаКУстановке = Окр(МРЦБезНДС + (МРЦБезНДС * ТекПроцентНДС / 100),2,1);
						//}}20200716 ГлазуновДВ
							Движение = ДокументУстановки.Движения.ЦеныНоменклатуры.Добавить();
							Движение.Активность = Истина;
							Движение.Номенклатура = СсылкаНаЭлемент;
							Движение.ВидЦены = Константы.ГИГ_ОсновнойВидЦеныМРЦСНДС.Получить();
							Движение.Период = ДокументУстановки.Дата;
			//Исходное				Движение.Цена = СуммаКУстановке;
						//{{20200716 ГлазуновДВ Исправили
							Движение.Цена = СуммаКУстановке/?(Основание.КоличествоЕдиницВТарифе = 0,1,Основание.КоличествоЕдиницВТарифе);
						//}}20200716 ГлазуновДВ
							Движение.Валюта = Валюта;
							Движение.Регистратор = ДокументУстановки.Ссылка;
							Движение.Упаковка = Упаковка;
						КонецЕсли;
						Если  МРЦСНДС > 0 и МРЦБезНДС = 0 Тогда 
							// расчитываем сумму без НДС
			//Исходное				СуммаКУстановке = Окр(МРЦСНДС-((МРЦСНДС * ТекПроцентНДС)/(100+ТекПроцентНДС)),2,1);
						//{{20200716 ГлазуновДВ Исправили
							СуммаКУстановке = Окр(МРЦСНДС * 100 / (100 + ТекПроцентНДС),2,1);
						//}}20200716 ГлазуновДВ
							Движение = ДокументУстановки.Движения.ЦеныНоменклатуры.Добавить();
							Движение.Активность = Истина;
							Движение.Номенклатура = СсылкаНаЭлемент;
							Движение.ВидЦены = Константы.ГИГ_ОсновнойВидЦеныМРЦБезНДС.Получить();
							Движение.Период = ДокументУстановки.Дата;
			//Исходное				Движение.Цена = СуммаКУстановке;
						//{{20200716 ГлазуновДВ Исправили
							Движение.Цена = СуммаКУстановке/?(Основание.КоличествоЕдиницВТарифе = 0,1,Основание.КоличествоЕдиницВТарифе);
						//}}20200716 ГлазуновДВ
							Движение.Валюта = Валюта;
							Движение.Регистратор = ДокументУстановки.Ссылка;
							Движение.Упаковка = Упаковка;
						КонецЕсли;
					КонецЕсли;
					ДокументУстановки.Записать(РежимЗаписиДокумента.Запись);
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не сформирован документ Установки цен! Возможно цены не загружены!";
				Сообщение.Сообщить();
			КонецЕсли;
			
			Основание.Номенклатура = СсылкаНаЭлемент;
			УстановитьПривилегированныйРежим(Истина);
			Основание.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		иначе
			СсылкаНаЭлемент = СсылкаНаЭлементНоменклатуры;
		КонецЕсли;
	иначе
		Основание.Номенклатура = СсылкаНаЭлементНоменклатуры;
		УстановитьПривилегированныйРежим(Истина);
		Основание.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		СсылкаНаЭлемент = СсылкаНаЭлементНоменклатуры;
	КонецЕсли;
	Возврат СсылкаНаЭлемент;
КонецФункции

//++Шерстюк Ю.Ю. 14.04.2021 Задача 7565 для заданной номенклатуры создаем индивид.упаковку с коэф = 1, изменена 04.05.2021 проверка на наличие существующей упаковки и дозаполнение
Процедура СоздатьУпаковкуПоЕдХранения(пНоменклатура,пУпаковка = Неопределено, пСтруктураВГХ = Неопределено) Экспорт 
	Если пСтруктураВГХ = Неопределено Тогда 
		 пСтруктураВГХ = Новый Структура;
		 пСтруктураВГХ.Вставить("ЕдИзВес",Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("163"));//грамм
		 пСтруктураВГХ.Вставить("Вес",1);
		 пСтруктураВГХ.Вставить("ЕдИзОбъем",Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("131"));//мм3 (дюйм3)
		 пСтруктураВГХ.Вставить("Объем",1);
		 пСтруктураВГХ.Вставить("ЕдИзШирина",Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("003"));//мм
		 пСтруктураВГХ.Вставить("Ширина",1);
		 пСтруктураВГХ.Вставить("ЕдИзВысота",Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("003"));
		 пСтруктураВГХ.Вставить("Высота",1);
		 пСтруктураВГХ.Вставить("ЕдИзГлубина",Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("003"));
		 пСтруктураВГХ.Вставить("Глубина",1);
	КонецЕсли;
	Если пУпаковка = Неопределено Тогда 
		НоваяИндУпаковка = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		НоваяИндУпаковка.Числитель = 1;
		НоваяИндУпаковка.Знаменатель = 1;
		НоваяИндУпаковка.ПоставляетсяВМногооборотнойТаре = Ложь;
		НоваяИндУпаковка.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
		НоваяИндУпаковка.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
		НоваяИндУпаковка.Безразмерная = Ложь;
	Иначе
		НоваяИндУпаковка = пУпаковка.ПолучитьОбъект();
	КонецЕсли;
	НоваяИндУпаковка.Владелец = пНоменклатура;
	НоваяИндУпаковка.Наименование = пНоменклатура.ЕдиницаИзмерения.Наименование;
	НоваяИндУпаковка.ЕдиницаИзмерения = пНоменклатура.ЕдиницаИзмерения;
	НоваяИндУпаковка.Вес = пСтруктураВГХ.Вес;
	НоваяИндУпаковка.ВесЕдиницаИзмерения = пСтруктураВГХ.ЕдИзВес;
	НоваяИндУпаковка.Высота = пСтруктураВГХ.Высота;
	НоваяИндУпаковка.ВысотаЕдиницаИзмерения = пСтруктураВГХ.ЕдИзВысота;
	НоваяИндУпаковка.Ширина = пСтруктураВГХ.Ширина;
	НоваяИндУпаковка.ШиринаЕдиницаИзмерения = пСтруктураВГХ.ЕдИзШирина;
	НоваяИндУпаковка.Глубина = пСтруктураВГХ.Глубина;
	НоваяИндУпаковка.ГлубинаЕдиницаИзмерения = пСтруктураВГХ.ЕдИзГлубина;
	НоваяИндУпаковка.Объем = пСтруктураВГХ.Объем;
	НоваяИндУпаковка.ОбъемЕдиницаИзмерения = пСтруктураВГХ.ЕдИзОбъем;
	НоваяИндУпаковка.Записать();

КонецПроцедуры
//--Шерстюк Ю.Ю.

Процедура ОбновитьКешРеквизитовВидаНоменклатуры(ЭлементНоменклатуры)
	
	РеквизитыВидаНоменклатурыТепм = Новый Структура;
	РеквизитыВидаНоменклатурыТепм.Вставить("ШаблонРабочегоНаименованияНоменклатуры", "");
	РеквизитыВидаНоменклатурыТепм.Вставить("ЗапретРедактированияРабочегоНаименованияНоменклатуры", Ложь);
	РеквизитыВидаНоменклатурыТепм.Вставить("ШаблонНаименованияДляПечатиНоменклатуры", "");
	РеквизитыВидаНоменклатурыТепм.Вставить("ЗапретРедактированияНаименованияДляПечатиНоменклатуры", Ложь);
	
	РеквизитыВидаНоменклатурыТепм.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка());
	РеквизитыВидаНоменклатурыТепм.Вставить("СодержитДрагоценныеМатериалы", Ложь);
	РеквизитыВидаНоменклатурыТепм.Вставить("ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	РеквизитыВидаНоменклатурыТепм.Вставить("ИспользоватьСерии", Ложь);
	РеквизитыВидаНоменклатурыТепм.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	РеквизитыВидаНоменклатурыТепм.Вставить("НаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
	РеквизитыВидаНоменклатурыТепм.Вставить("ГруппаДоступа", Справочники.ГруппыДоступа.ПустаяСсылка());
	РеквизитыВидаНоменклатурыТепм.Вставить("НаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
	РеквизитыВидаНоменклатурыТепм.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(ЭлементНоменклатуры.ВидНоменклатуры) Тогда
		ИменаРеквизитов = "";
		Для Каждого КлючЗначение из РеквизитыВидаНоменклатурыТепм Цикл
			ИменаРеквизитов = ИменаРеквизитов + КлючЗначение.Ключ + ",";
		КонецЦикла;
		
		ИменаРеквизитов = Лев(ИменаРеквизитов,СтрДлина(ИменаРеквизитов) - 1);
		
		РеквизитыВидаНоменклатуры = Новый ФиксированнаяСтруктура(ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементНоменклатуры.ВидНоменклатуры, ИменаРеквизитов));
	Иначе
		РеквизитыВидаНоменклатуры = Новый ФиксированнаяСтруктура(РеквизитыВидаНоменклатурыТепм);
	КонецЕсли;
	
КонецПроцедуры

Функция ГИГ_ПолучитьСрокиОбеспеченияПоСхеме(Схема,Дата,Склад,ДанныеНоменклатуры) Экспорт
	
	СтруктураСрокиОбеспечения = Новый Структура("СрокОбеспеченияМин,СрокОбеспеченияМакс",0,0);

	СтруктураЗакупкаУПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Схема,"ГИГ_ЗакупкаСПроизводства,ГИГ_СкладПоставщика");
	
	Если СтруктураЗакупкаУПоставщика.ГИГ_ЗакупкаСПроизводства Тогда
		 СрокиПоставкиСПроизводства = РегистрыСведений.ГИГ_СрокиПоставкиНаСкладПоставщикаСПроизводства.СрокПоставкиНоменклатуры(СтруктураЗакупкаУПоставщика.ГИГ_СкладПоставщика,ДанныеНоменклатуры.Номенклатура,ДанныеНоменклатуры.Характеристика);		
		 
		 Если СрокиПоставкиСПроизводства <> Неопределено Тогда
			 СтруктураСрокиОбеспечения.СрокОбеспеченияМин = СрокиПоставкиСПроизводства.СрокПоставкиМин;
			 СтруктураСрокиОбеспечения.СрокОбеспеченияМакс = СрокиПоставкиСПроизводства.СрокПоставкиМакс;
		 КонецЕсли;
		 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СхемыОбеспечения.СхемаОбеспечения КАК СхемаОбеспечения,
	|	СхемыОбеспечения.Склад КАК Склад,
	|	СхемыОбеспечения.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей
	|ПОМЕСТИТЬ ВТ1
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК ТранзитныеСхемы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыИсточник
	|				ПО ТранзитныеСхемы.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей = СкладыИсточник.Ссылка
	|					И (СкладыИсточник.Ссылка = &Склад)
	|			ПО СхемыОбеспечения.СхемаОбеспечения = ТранзитныеСхемы.СхемаОбеспечения
	//{Гига suv 11.01.2018 СхемыОбеспеченияДляЗаказов
	|				И (ВЫРАЗИТЬ(ТранзитныеСхемы.Склад КАК Справочник.Склады).ЦеховаяКладовая = ЛОЖЬ)
	//Гига suv 11.01.2018}
	|		ПО Склады.Ссылка = СхемыОбеспечения.Склад
	|			И (Склады.Ссылка = &Склад)
	|			И (НЕ СхемыОбеспечения.СхемаОбеспечения.ПометкаУдаления)
	|			И (СхемыОбеспечения.СхемаОбеспечения = &СхемаОбеспечения)
	|ГДЕ
	|	ТранзитныеСхемы.СхемаОбеспечения ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ1.СхемаОбеспечения КАК СхемаОбеспечения,
	|	СхемыОбеспечения.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	СхемыОбеспечения.Склад КАК СкладПолучатель,
	|	СхемыОбеспечения.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей КАК Источник,
	|	СхемыОбеспечения.СпособОбеспеченияПотребностей.СрокИсполненияЗаказа КАК СрокОбеспеченияМин,
	|	СхемыОбеспечения.СпособОбеспеченияПотребностей.ГарантированныйСрокОтгрузки КАК СрокОбеспеченияМакс,
	|	ВТ1.Склад КАК СкладПотребности,
	|	СхемыОбеспечения.СпособОбеспеченияПотребностей.ТипОбеспечения КАК ТипОбеспечения
	|ИЗ
	|	ВТ1 КАК ВТ1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
	|		ПО ВТ1.СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения";
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("СхемаОбеспечения",Схема);
	
	Результат = Запрос.Выполнить();

	ВыборкаЭтапы = Результат.Выбрать();
	СкладИсточник = Склад; 
	Пока ВыборкаЭтапы.НайтиСледующий(СкладИсточник,"СкладПолучатель") Цикл
		
		СтруктураСрокиОбеспечения.СрокОбеспеченияМин = СтруктураСрокиОбеспечения.СрокОбеспеченияМин + ВыборкаЭтапы.СрокОбеспеченияМин; 
		СтруктураСрокиОбеспечения.СрокОбеспеченияМакс = СтруктураСрокиОбеспечения.СрокОбеспеченияМакс + ВыборкаЭтапы.СрокОбеспеченияМакс; 
		
		Источник = ВыборкаЭтапы.Источник;
		
		Если ВыборкаЭтапы.ТипОбеспечения = Перечисления.ТипыОбеспечения.Перемещение Тогда
			СкладЭтапа = Источник;
			СкладИсточник = Источник;
		ИначеЕсли ВыборкаЭтапы.ТипОбеспечения = Перечисления.ТипыОбеспечения.Покупка Тогда 
			СкладЭтапа = Неопределено;
			СкладИсточник = ВыборкаЭтапы.СхемаОбеспечения.ГИГ_СкладПоставщика;
		Иначе
			СкладЭтапа = Неопределено;
			СкладИсточник = Неопределено;
		КонецЕсли;
		ВыборкаЭтапы.Сбросить();
	КонецЦикла;
		
	СтруктураВозврат = Новый Структура;
	
	СтруктураВозврат.Вставить("ДатаОтгрузки",Дата + СтруктураСрокиОбеспечения.СрокОбеспеченияМакс*86400);
	СтруктураВозврат.Вставить("ГИГ_СрокПоставки",?(СтруктураСрокиОбеспечения.СрокОбеспеченияМин = СтруктураСрокиОбеспечения.СрокОбеспеченияМакс,"",Строка(СтруктураСрокиОбеспечения.СрокОбеспеченияМин)+" - ")+Строка(СтруктураСрокиОбеспечения.СрокОбеспеченияМакс) + " дн."); 
	
	//{Гига suv 11.01.2018 СхемыОбеспеченияДляЗаказов
	//Для документа ЗаказаМатериаловВПроизводство
	СтруктураВозврат.Вставить("НачалоОтгрузки",СтруктураВозврат.ДатаОтгрузки);
	//Гига suv 11.01.2018}
	
	Возврат СтруктураВозврат; 

КонецФункции


// + [Rineco], [Киселев А.] [04.08.2021] 
// Задача: [№ 8311], [# скопирован из модуля формы Заказа клиента]
Функция ПолучитьОбработатьСкидки(Номенклатура,Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиЦеновыеГруппы.ЗначениеСкидкиНаценки КАК АвтоСкидка,
	|	СкидкиНаценкиЦеновыеГруппы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_АвтоСкидка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СкидкиНаценкиУсловияПредоставления.Ссылка КАК Скидка
	|	ИЗ
	|		РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|				ПО УсловияПредоставленияСкидокНаценок.Ссылка = СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления
	|			ПО ПартнерыСегмента.Сегмент = УсловияПредоставленияСкидокНаценок.СегментПартнеров
	|	ГДЕ
	|		ПартнерыСегмента.Партнер = &Партнер) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ЦеновыеГруппы КАК СкидкиНаценкиЦеновыеГруппы
	|		ПО ВложенныйЗапрос.Скидка = СкидкиНаценкиЦеновыеГруппы.Ссылка
	|ГДЕ
	|	СкидкиНаценкиЦеновыеГруппы.ЦеноваяГруппа = &ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ПроцентИндивидуальнойСкидкиНаценки КАК РучнаяСкидка,
	|	СоглашенияСКлиентамиЦеновыеГруппы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_РучнаяСкидка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|ГДЕ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа = &ЦеноваяГруппа
	|	И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен = &ВидЦен
	|	И СоглашенияСКлиентамиЦеновыеГруппы.Ссылка = &Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_АвтоСкидка.АвтоСкидка, 0) КАК АвтоСкидка,
	|	ЕСТЬNULL(ВТ_РучнаяСкидка.РучнаяСкидка, 0) КАК РучнаяСкидка
	|ИЗ
	|	ВТ_АвтоСкидка КАК ВТ_АвтоСкидка
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_РучнаяСкидка КАК ВТ_РучнаяСкидка
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_АвтоСкидка.НомерСтроки УБЫВ,
	|	ВТ_РучнаяСкидка.НомерСтроки УБЫВ";
		
	Запрос.УстановитьПараметр("Партнер", Объект.Контрагент.Партнер);
	Запрос.УстановитьПараметр("Соглашение", "");
	Запрос.УстановитьПараметр("ЦеноваяГруппа", Номенклатура.ЦеноваяГруппа);
	Запрос.УстановитьПараметр("ВидЦен", "");

	РезультатЗапроса = Запрос.Выполнить();
	
	ПрименныеСкидки = Новый Структура;
	
	Если не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить()[0];
		ПрименныеСкидки.Вставить("АвтоСкидка",Результат.АвтоСкидка);
		ПрименныеСкидки.Вставить("РучнаяСкидка",Результат.РучнаяСкидка);	
	КонецЕсли;
	
	Возврат ПрименныеСкидки;

КонецФункции // ПолучитьОбработатьСкидки()
// - [Rineco], [Киселев А.] [04.08.2021]