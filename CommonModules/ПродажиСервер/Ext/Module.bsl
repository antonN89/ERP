
&Вместо("ПроверитьКорректностьЭтаповГрафикаОплаты")
Процедура Рин1_ПроверитьКорректностьЭтаповГрафикаОплаты(Знач ДокументПродажи, СуммаОплатыПоДокументу, СуммаЗалогаПоДокументу, УчитыватьВариантОплаты, Отказ, ПривязыватьСообщенияКГиперссылке)
	
	Если ЗначениеЗаполнено(ДокументПродажи.Дата) Тогда
		ДатаДокумента = НачалоДня(ДокументПродажи.Дата);
	КонецЕсли;
	
	СуммаОплатыВсего = Окр(СуммаОплатыПоДокументу, 2);
	СуммаЗалогаВсего = Окр(СуммаЗалогаПоДокументу, 2);
	
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
	
	Если ДокументПродажи.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если СуммаОплатыВсего > 0 Тогда
			
			Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнены условия оплаты';
									|en = 'Payment conditions are required'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Необходимо заполнить этапы графика оплаты';
									|en = 'Fill in steps of payment schedule'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты"),
				,
				Отказ);
				
		КонецЕсли;
		
	Иначе
		
		ИтогПроцентПлатежа = 0;
		ИтогПроцентЗалогаЗаТару = 0;
		ИтогСуммаПлатежа = 0;
		ИтогСуммаЗалогаЗаТару = 0;
		ИтогСуммаОтклонения = 0;
		Для ТекИндекс = 0 По ДокументПродажи.ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			ДанныеЭтапа = Новый Структура();
			ДанныеЭтапа.Вставить("НомерСтроки",                  0);
			ДанныеЭтапа.Вставить("ВариантОплаты",     Неопределено);
			ДанныеЭтапа.Вставить("ДатаПлатежа",         '00010101');
			ДанныеЭтапа.Вставить("ПроцентПлатежа",               0);
			ДанныеЭтапа.Вставить("ПроцентЗалогаЗаТару",          0);
			ДанныеЭтапа.Вставить("СуммаПлатежа",                 0);
			ДанныеЭтапа.Вставить("СуммаЗалогаЗаТару",            0);
			ДанныеЭтапа.Вставить("СуммаОтклоненияМерныхТоваров", 0);
			
			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс]);
			ИтогПроцентПлатежа = ИтогПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
			ИтогПроцентЗалогаЗаТару = ИтогПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
			ИтогСуммаПлатежа = ИтогСуммаПлатежа + ДанныеЭтапа.СуммаПлатежа;
			ИтогСуммаЗалогаЗаТару = ИтогСуммаЗалогаЗаТару + ДанныеЭтапа.СуммаЗалогаЗаТару;
			ИтогСуммаОтклонения = ИтогСуммаОтклонения + ДанныеЭтапа.СуммаОтклоненияМерныхТоваров;
			
			АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Этапы графика оплаты""';
									|en = 'in line %НомерСтроки% of the ""Payment schedule steps"" list'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДанныеЭтапа.НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОплаты) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Вариант оплаты""';
									|en = 'Column ""Payment method"" is not filled in'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОплаты")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) Тогда
				
				Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
					ТекстОшибки = НСтр("ru = 'Не заполнена ""Дата платежа""';
										|en = '""Payment date"" is required'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Дата платежа""';
										|en = 'Column ""Payment date"" is not filled in'");
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару)
				И СуммаЗалогаВсего+СуммаОплатыВсего > 0
				И (ДанныеЭтапа.СуммаПлатежа + ДанныеЭтапа.СуммаЗалогаЗаТару) / (СуммаЗалогаВсего+СуммаОплатыВсего) >= 0.0001 Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Процент платежа""';
									|en = 'Column ""Payment percentage"" is not filled in'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ПроцентПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаПлатежа) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа) И 
				СуммаОплатыВсего - СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма платежа""';
									|en = 'Column ""Payment amount"" is not filled in'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаПлатежа")),
					,
					Отказ);
				
				КонецЕсли;
				
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаЗалогаЗаТару) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) И 
				СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма залога за тару""';
									|en = 'Column ""Package deposit value"" is not filled in'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаЗалогаЗаТару")),
					,
					Отказ);
				
			КонецЕсли;
			
			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
				ЗначениеЗаполнено(ДокументПродажи.Дата) И
				ДанныеЭтапа.ДатаПлатежа < ДатаДокумента Тогда
				
				ТекстОшибки = НСтр("ru = 'Дата платежа должна быть не меньше даты документа %ДатаДокумента%';
									|en = 'Payment date must be not less than document date %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(ДокументПродажи.Дата, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если УчитыватьВариантОплаты
				И (ТипЗнч(ДокументПродажи) = Тип("ДанныеФормыСтруктура") И ДокументПродажи.Свойство("ЖелаемаяДатаОтгрузки")
					ИЛИ ТипЗнч(ДокументПродажи) = Тип("ДокументОбъект.ЗаказКлиента") 
					И ОбщегоНазначения.ЕстьРеквизитОбъекта("ЖелаемаяДатаОтгрузки", ДокументПродажи.Метаданные())) Тогда
				
				// Дата платежа по авансовому этапу должна быть не больше даты отгрузки в шапке
				Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
					ЗначениеЗаполнено(ДокументПродажи.ЖелаемаяДатаОтгрузки) И
					(ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) И
					ДанныеЭтапа.ДатаПлатежа > ДокументПродажи.ЖелаемаяДатаОтгрузки Тогда
					
					ТекстОшибки = НСтр("ru = 'Дата платежа по авансовому этапу должна быть не больше желаемой даты отгрузки %ДатаОтгрузки%';
										|en = 'Date of payment under advance stage must be not greater than the required shipment date %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(ДокументПродажи.ЖелаемаяДатаОтгрузки, "ДЛФ=DD"));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты",ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				// Дата платежа по кредитному этапу должна быть не меньше даты отгрузки в шапке
				ИначеЕсли ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И 
					ЗначениеЗаполнено(ДокументПродажи.ЖелаемаяДатаОтгрузки) И
					(ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки
						ИЛИ ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитСдвиг) И
					ДанныеЭтапа.ДатаПлатежа < ДокументПродажи.ЖелаемаяДатаОтгрузки Тогда
					
					ТекстОшибки = НСтр("ru = 'Дата платежа по кредитному этапу должна быть не меньше желаемой даты отгрузки %ДатаОтгрузки%';
										|en = 'Date of payment under credit stage must be not less than the required shipment date %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(ДокументПродажи.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ДокументПродажи.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогПроцентПлатежа <> 100 И СуммаОплатыВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';
									|en = 'Payment percent at all stages ""%ПроцентПоЭтапам%%"" should be equal to ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентПлатежа);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
				
			Если ИтогПроцентЗалогаЗаТару <> 100 И СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Процент залога за тару по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';
									|en = 'Percent of the package deposit for all steps ""%ПроцентПоЭтапам%%"" should be equal to ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентЗалогаЗаТару);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].ПроцентЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежей в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций.
		
		Если ДокументПродажи.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогСуммаПлатежа + ИтогСуммаОтклонения <> СуммаОплатыВсего Тогда
				
				ТекстОшибки = НСтр("ru = 'Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна
				                       | отличаться от суммы заказанных строк ""%СуммаВсего% %Валюта%""';
				                       |en = 'Payment amount of all steps ""%СуммаПоЭтапам% %Валюта%"" should not
				                       |differ from amount of ordered lines ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаПлатежа + ИтогСуммаОтклонения);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаОплатыВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        ДокументПродажи.Валюта);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].СуммаПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если ИтогСуммаЗалогаЗаТару <> СуммаЗалогаВсего И СуммаЗалогаВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Сумма залога за тару по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна
				                       | отличаться от суммы залога по документу ""%СуммаВсего% %Валюта%""';
				                       |en = 'Package deposit value by all steps ""%СуммаПоЭтапам% %Валюта%"" should not
				                       |differ from a deposit value under document ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаЗалогаЗаТару);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        ДокументПродажи.Валюта);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].СуммаЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоЭтапов = ДокументПродажи.ЭтапыГрафикаОплаты.Количество();
		
		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл
			
			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;
			
			Если УчитыватьВариантОплаты Тогда
				
				ПредыдущееЗначениеВариантаОплаты = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
				
				// В табличной части Этапы не должно быть строк со значением АвансДоОбеспечения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоОтгрузки
				// КредитПослеОтгрузки
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки ИЛИ
					 ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоОтгрузки
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеОтгрузки.
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки) Тогда
					
					ТекстОшибки = НСтр("ru = 'Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
					|не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%';
					|en = 'Payment option ""%ТекущееЗначениеВариантаОплаты%"" in row %ИндексТекущегоЭтапа%
					|cannot be placed after payment option ""%ПредыдущееЗначениеВариантаОплаты%"" in row %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты")),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию.
			//++Гольм А.А. (Гигабайт)
			//Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И 
			//	ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
			//	ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда
			//	
			//	Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
			//		ТекстОшибки = НСтр("ru='Дата платежа по кредиту не должна быть меньше, чем дата платежа по предоплате'");
			//	Иначе
			//		ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
			//		|списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'");
			//		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
			//		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);
			//	КонецЕсли;
			//	
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//		ТекстОшибки,
			//		,
			//		?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа")),
			//		,
			//		Отказ);
			//		
			//КонецЕсли;
			//--Гольм А.А. (Гигабайт)
			
		КонецЦикла;
		
	КонецЕсли;

	
КонецПроцедуры

&Вместо("ПроверитьКорректностьЭтаповГрафикаОплатыПоТаблицеЗначений")
Процедура Рин1_ПроверитьКорректностьЭтаповГрафикаОплатыПоТаблицеЗначений(Знач ЭтапыГрафикаОплаты, СуммаОплатыПоДокументу, СуммаЗалогаПоДокументу, УчитыватьВариантОплаты, Отказ, УпрощенныйРежимДиалога, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Дата) Тогда
		ДатаДокумента = НачалоДня(СтруктураПараметров.Дата);
	КонецЕсли;
	
	СуммаОплатыВсего = Окр(СуммаОплатыПоДокументу, 2);
	СуммаЗалогаВсего = Окр(СуммаЗалогаПоДокументу, 2);
	
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если СуммаОплатыВсего <> 0 Или СуммаЗалогаВсего <> 0 Тогда
			
			Если УпрощенныйРежимДиалога Тогда
				ТекстОшибки = НСтр("ru = 'Необходимо заполнить хотя бы один из этапов';
									|en = 'Fill in at least one of the steps'");
				ПолеОшибки  = "ПроцентПлатежаКредит";
			Иначе
				ТекстОшибки = НСтр("ru = 'Необходимо заполнить этапы графика оплаты';
									|en = 'Fill in steps of payment schedule'");
				ПолеОшибки  = "Объект.ЭтапыГрафикаОплаты";
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
			
		КонецЕсли;
		
	Иначе
		
		ИтогПроцентПлатежа = 0;
		ИтогПроцентЗалогаЗаТару = 0;
		ИтогСуммаПлатежа = 0;
		ИтогСуммаЗалогаЗаТару = 0;
		ИтогСуммаОтклонения = 0;
		Для ТекИндекс = 0 По ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			ДанныеЭтапа = Новый Структура();
			ДанныеЭтапа.Вставить("НомерСтроки",                  0);
			ДанныеЭтапа.Вставить("ВариантОплаты",     Неопределено);
			ДанныеЭтапа.Вставить("ДатаПлатежа",         '00010101');
			ДанныеЭтапа.Вставить("ПроцентПлатежа",               0);
			ДанныеЭтапа.Вставить("ПроцентЗалогаЗаТару",          0);
			ДанныеЭтапа.Вставить("СуммаПлатежа",                 0);
			ДанныеЭтапа.Вставить("СуммаЗалогаЗаТару",            0);
			ДанныеЭтапа.Вставить("СуммаОтклоненияМерныхТоваров", 0);
			
			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ЭтапыГрафикаОплаты[ТекИндекс]);
			ИтогПроцентПлатежа = ИтогПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
			ИтогПроцентЗалогаЗаТару = ИтогПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
			ИтогСуммаПлатежа = ИтогСуммаПлатежа + ДанныеЭтапа.СуммаПлатежа;
			ИтогСуммаЗалогаЗаТару = ИтогСуммаЗалогаЗаТару + ДанныеЭтапа.СуммаЗалогаЗаТару;
			ИтогСуммаОтклонения = ИтогСуммаОтклонения + ДанныеЭтапа.СуммаОтклоненияМерныхТоваров;
			
			АдресОшибки = НСтр("ru = 'в строке %НомерСтроки% списка ""Этапы графика оплаты""';
								|en = 'in line %НомерСтроки% of the ""Payment schedule steps"" list'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДанныеЭтапа.НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОплаты) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Вариант оплаты""';
									|en = 'Column ""Payment method"" is not filled in'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОплаты"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
						ТекстОшибки = НСтр("ru = 'Не заполнена ""Дата платежа"" по кредиту';
											|en = '""Payment date"" is not filled in for credit payment'");
						ПолеОшибки  = "ДатаКредит";
					Иначе
						ТекстОшибки = НСтр("ru = 'Не заполнена ""Дата платежа"" по предоплате';
											|en = '""Payment date"" is not filled in for prepayment'");
						ПолеОшибки  = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Дата платежа""';
										|en = 'Column ""Payment date"" is not filled in'") + " " + АдресОшибки;
					ПолеОшибки  = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару)
				И СуммаЗалогаВсего+СуммаОплатыВсего > 0
				И (ДанныеЭтапа.СуммаПлатежа + ДанныеЭтапа.СуммаЗалогаЗаТару) / (СуммаЗалогаВсего+СуммаОплатыВсего) >= 0.0001 Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Процент платежа""';
									|en = 'Column ""Payment percentage"" is not filled in'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ПроцентПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаПлатежа) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа) И 
				СуммаОплатыВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма платежа""';
									|en = 'Column ""Payment amount"" is not filled in'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаПлатежа"),
					,
					Отказ);
				
				КонецЕсли;
				
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаЗалогаЗаТару) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) И 
				СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма залога за тару""';
									|en = 'Column ""Package deposit value"" is not filled in'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
				ЗначениеЗаполнено(СтруктураПараметров.Дата) И
				ДанныеЭтапа.ДатаПлатежа < ДатаДокумента Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
						ПолеОшибки = "ДатаКредит";
					Иначе
						ПолеОшибки = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
				
				ТекстОшибки = НСтр("ru = 'Дата платежа должна быть не меньше даты документа %ДатаДокумента%';
									|en = 'Payment date must be not less than document date %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(СтруктураПараметров.Дата, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
			Если УчитыватьВариантОплаты Тогда
			
				// Дата платежа по авансовому этапу должна быть не больше даты отгрузки в шапке
				Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаОтгрузки) И
					(ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) И
					ДанныеЭтапа.ДатаПлатежа > СтруктураПараметров.ЖелаемаяДатаОтгрузки Тогда
					
					ТекстОшибки = НСтр("ru = 'Дата платежа по авансовому этапу должна быть не больше желаемой даты отгрузки %ДатаОтгрузки%';
										|en = 'Date of payment under advance stage must be not greater than the required shipment date %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(СтруктураПараметров.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(УпрощенныйРежимДиалога, "ДатаПредоплата", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты",ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				// Дата платежа по кредитному этапу должна быть не меньше даты отгрузки в шапке
				ИначеЕсли ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И 
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаОтгрузки) И
					(ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки
						ИЛИ ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитСдвиг) И
					ДанныеЭтапа.ДатаПлатежа < СтруктураПараметров.ЖелаемаяДатаОтгрузки Тогда
					
					ТекстОшибки = НСтр("ru = 'Дата платежа по кредитному этапу должна быть не меньше желаемой даты отгрузки %ДатаОтгрузки%';
										|en = 'Date of payment under credit stage must be not less than the required shipment date %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(СтруктураПараметров.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(УпрощенныйРежимДиалога, "ДатаКредит", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогПроцентПлатежа <> 100 И СуммаОплатыВсего - СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';
									|en = 'Payment percent at all stages ""%ПроцентПоЭтапам%%"" should be equal to ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентПлатежа);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(УпрощенныйРежимДиалога, "ПроцентПлатежаКредит", "ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
				
			Если ИтогСуммаЗалогаЗаТару + ИтогСуммаОтклонения -(СуммаОплатыВсего - ИтогСуммаПлатежа) 
				<> СуммаЗалогаВсего И СуммаЗалогаВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Процент залога за тару по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';
									|en = 'Percent of the package deposit for all steps ""%ПроцентПоЭтапам%%"" should be equal to ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентЗалогаЗаТару);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(УпрощенныйРежимДиалога, "ПроцентЗалогаЗаТаруКредит", "ЭтапыГрафикаОплаты[0].ПроцентЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежей в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций.
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если СуммаОплатыВсего <> 0 И ИтогСуммаПлатежа <> СуммаОплатыВсего Тогда
				
				ТекстОшибки = НСтр("ru = 'Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы заказанных строк ""%СуммаВсего% %Валюта%""';
									|en = 'Payment amount of all steps ""%СуммаПоЭтапам% %Валюта%"" should not differ from the ordered line amount ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаПлатежа);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаОплатыВсего - СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);
				
				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
						ПолеОшибки = "СуммаПлатежаПредоплата";
					Иначе
						ПолеОшибки = "СуммаПлатежаКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаПлатежа";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
			Если СуммаЗалогаВсего <> 0 И ИтогСуммаЗалогаЗаТару <> СуммаЗалогаВсего Тогда
				
				ТекстОшибки = НСтр("ru = 'Сумма залога за тару по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы залога по документу ""%СуммаВсего% %Валюта%""';
									|en = 'Package deposit value by all steps ""%СуммаПоЭтапам% %Валюта%"" should not differ from a deposit value against document ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаЗалогаЗаТару);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);
				
				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
						ПолеОшибки = "СуммаЗалогаЗаТаруПредоплата";
					Иначе
						ПолеОшибки = "СуммаЗалогаЗаТаруКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаЗалогаЗаТару";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоЭтапов = ЭтапыГрафикаОплаты.Количество();
		
		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл
			
			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;
			
			Если УчитыватьВариантОплаты Тогда
				
				ПредыдущееЗначениеВариантаОплаты = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
				
				// В табличной части Этапы не должно быть строк со значением АвансДоОбеспечения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоОтгрузки
				// КредитПослеОтгрузки
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки ИЛИ
					 ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоОтгрузки
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеОтгрузки.
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки) Тогда
					
					ТекстОшибки = НСтр("ru = 'Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
					|не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%';
					|en = 'Payment option ""%ТекущееЗначениеВариантаОплаты%"" in row %ИндексТекущегоЭтапа%
					|cannot be placed after payment option ""%ПредыдущееЗначениеВариантаОплаты%"" in row %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты"),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию.
			//++Гольм А.А. (Гигабайт)
			//Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И 
			//	ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
			//	ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда
			//	
			//	Если УпрощенныйРежимДиалога Тогда
			//		ТекстОшибки = НСтр("ru='Дата платежа по кредиту не должна быть меньше, чем дата платежа по предоплате'");
			//		ПолеОшибки  = "ДатаПредоплата";
			//	Иначе
			//		ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
			//		|списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'");
			//		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
			//		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);
			//		ПолеОшибки  = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа");
			//	КонецЕсли;
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
			//КонецЕсли;
			//--Гольм А.А. (Гигабайт)			
		КонецЦикла;
		
	КонецЕсли;
	

	
КонецПроцедуры

&Вместо("СообщитьОбОшибкахШапкаДокументаПродажи")
Процедура Рин1_СообщитьОбОшибкахШапкаДокументаПродажи(Знач Выборка, Знач ДокументПродажи, Отказ, МассивОтклонений) 
	
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ЕстьОшибкиЗаполненияПартнер Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Партнер не должен отличаться от значения в соглашении ""%ПартнерСоглашение%""';
									|en = 'Partner should not differ from the value in agreement ""%ПартнерСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Партнер",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%ПартнерДокумент%"" отличается от партнера в соглашении ""%ПартнерСоглашение%""';
									|en = '""%ПартнерДокумент%"" is different from the partner in the ""%ПартнерСоглашение%"" agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерДокумент%", ДокументПродажи.Партнер);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Партнер';
																								|en = 'Partner'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиСтатусСоглашения Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Соглашение находится в статус ""Не согласовано"". Проведение документа запрещено.';
									|en = 'Agreement is in the ""Not approved"" status. You cannot post the document.'");
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Соглашение",
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru = 'Соглашение находится в статус ""Не согласовано"".';
									|en = 'Agreement is in the ""Not approved"" status.'");
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Соглашение';
																								|en = 'Agreement'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		//bercut181219 в запросе ошибка поле отсутствует Выборка.ЕстьОшибкиЗаполненияКонтрагент
		Если не ТипЗнч(ДокументПродажи) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") и Выборка.ЕстьОшибкиЗаполненияКонтрагент Тогда //Если Выборка.ЕстьОшибкиЗаполненияКонтрагент Тогда
		//

			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Контрагент не должен отличаться от значения в соглашении ""%КонтрагентСоглашение%""';
									|en = 'Counterparty should not differ from the value in agreement ""%КонтрагентСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Контрагент",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%Контрагент%"" отличается от контрагента в соглашении ""%КонтрагентСоглашение%""';
									|en = '""%Контрагент%"" is different from the counterparty in the ""%КонтрагентСоглашение%"" agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Контрагент%", ДокументПродажи.Контрагент);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Контрагент';
																								|en = 'Counterparty'"), ТекстОшибки, МассивОтклонений);
			
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияОрганизация Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Организация не должна отличаться от значения в типовом соглашении ""%ОрганизацияСоглашение%""';
										|en = 'Company should not differ from the value in standard agreement ""%ОрганизацияСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Организация не должна отличаться от значения в соглашении ""%ОрганизацияСоглашение%""';
										|en = 'Company should not differ from the value in agreement ""%ОрганизацияСоглашение%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Организация",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '""%Организация%"" отличается от организации в типовом соглашении ""%ОрганизацияСоглашение%""';
										|en = '""%Организация%"" is different from the company in the ""%ОрганизацияСоглашение%"" standard agreement'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%Организация%"" отличается от организации в соглашении ""%ОрганизацияСоглашение%""';
										|en = '""%Организация%"" is different from the company in the ""%ОрганизацияСоглашение%"" agreement'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%", ДокументПродажи.Организация);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Организация';
																								|en = 'Company'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалюта Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Валюта не должна отличаться от значения в типовом соглашении ""%ВалютаСоглашение%""';
										|en = 'Currency should not differ from the value in standard agreement ""%ВалютаСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Валюта не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""';
										|en = 'Currency should not differ from the value in agreement ""%ВалютаСоглашение%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Валюта",
					Отказ);
			Иначе 
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '""%Валюта%"" отличается от валюты в типовом соглашении ""%ВалютаСоглашение%""';
										|en = '""%Валюта%"" is different from the currency in the ""%ВалютаСоглашение%"" standard agreement'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%Валюта%"" отличается от валюты в соглашении ""%ВалютаСоглашение%""';
										|en = '""%Валюта%"" is different from the currency in the ""%ВалютаСоглашение%"" agreement'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументПродажи.Валюта);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Валюта';
																								|en = 'Currency'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Валюта взаиморасчетов не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""';
									|en = 'Mutual settlements currency should not differ from the one in agreement ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаВзаиморасчетовСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВалютаВзаиморасчетов",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%Валюта%"" отличается от валюты взаиморасчетов в соглашении ""%ВалютаСоглашение%""';
									|en = '""%Валюта%"" is different from the mutual settlements currency in the ""%ВалютаСоглашение%"" agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаВзаиморасчетовСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументПродажи.ВалютаВзаиморасчетов);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Валюта взаиморасчетов';
																								|en = 'Mutual settlements currency'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки Тогда
			ТекстОшибки = НСтр("ru = 'Признак ограничивать ручные скидки не должен отличаться от значения в типовом соглашении';
								|en = 'Flag of manual discount limit shall not differ from the value in the standard agreement'");
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ОграничиватьРучныеСкидки",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Ручные скидки';
																								|en = 'Manual discounts'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВидЦен Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если ЗначениеЗаполнено(Выборка.ВидЦенСоглашение) Тогда
				
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'Вид цен не должен отличаться от значения в типовом соглашении ""%ВидЦенСоглашение%""';
											|en = 'Price type should not differ from the value in standard agreement ""%ВидЦенСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Вид цен не должен отличаться от значения в соглашении ""%ВидЦенСоглашение%""';
											|en = 'Price type should not differ from the value in agreement ""%ВидЦенСоглашение%""'");
					КонецЕсли;
						
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);

				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'Вид цен в типовом соглашении не определен. Вид цен не может быть установлен без согласования';
											|en = 'Price type is not defined in the standard agreement. You cannot set a price type without approval. '");
					Иначе
						ТекстОшибки = НСтр("ru = 'Вид цен в соглашении не определен. Вид цен не может быть установлен без согласования';
											|en = 'Price type is not defined in the agreement. You cannot set a price type without approval. '");
					КонецЕсли;
						
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВидЦен",
					Отказ);
			Иначе 
					
				Если ЗначениеЗаполнено(Выборка.ВидЦенСоглашение) Тогда
				
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = '""%ВидЦен%"" отличается от вида цен в типовом соглашении ""%ВидЦенСоглашение%""';
											|en = '""%ВидЦен%"" is different from the price type in the ""%ВидЦенСоглашение%"" standard agreement'");
					Иначе
						ТекстОшибки = НСтр("ru = '""%ВидЦен%"" отличается от вида цен в соглашении ""%ВидЦенСоглашение%""';
											|en = '""%ВидЦен%"" is different from the price type in the ""%ВидЦенСоглашение%"" agreement'");
					КонецЕсли;
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦен%", ?(ЗначениеЗаполнено(ДокументПродажи.ВидЦен),ДокументПродажи.ВидЦен,НСтр("ru = 'произвольный';
																																				|en = 'Arbitrary'")));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);
				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'Вид цен в типовом соглашении не определен. Вид цен не может быть установлен без согласования';
											|en = 'Price type is not defined in the standard agreement. You cannot set a price type without approval. '");
					Иначе
						ТекстОшибки = НСтр("ru = 'Вид цен в соглашении не определен. Вид цен не может быть установлен без согласования';
											|en = 'Price type is not defined in the agreement. You cannot set a price type without approval. '");
					КонецЕсли;
						
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Вид цен';
																								|en = 'Price type'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияСценарияПланирования Тогда
			
			Если Не ВыводитьВОтчет Тогда
				Если ЗначениеЗаполнено(Выборка.СценарийПланированияСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru = 'Сценарий планирования не должен отличаться от значения в типовом соглашении ""%СценарийПланированияСоглашение%""';
										|en = 'Planning scenario should not differ from the value in standard agreement ""%СценарийПланированияСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СценарийПланированияСоглашение%", Выборка.СценарийПланированияСоглашение);

				Иначе
					
					ТекстОшибки = НСтр("ru = 'Сценарий планирования в типовом соглашении не определен. Сценарий планирования не может быть установлен без согласования';
										|en = 'Planning scenario is not determined in the standard agreement. Planning scenario cannot be set without approval'");
					
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СценарийПланирования",
					Отказ);
			Иначе 
				
				Если ЗначениеЗаполнено(Выборка.СценарийПланированияСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru = '""%СценарийПланирования%"" отличается от сценария в типовом соглашении ""%СценарийПланированияСоглашение%""';
										|en = '""%СценарийПланирования%"" is different from the scenario in the ""%СценарийПланированияСоглашение%"" standard agreement'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СценарийПланирования%", ДокументПродажи.СценарийПланирования);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СценарийПланированияСоглашение%", Выборка.СценарийПланированияСоглашение);
				Иначе
					
					ТекстОшибки = НСтр("ru = 'Сценарий планирования в типовом соглашении не определен. Сценарий планирования не может быть установлен без согласования';
										|en = 'Planning scenario is not determined in the standard agreement. Planning scenario cannot be set without approval'");
					
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Сценарий планирования';
																								|en = 'Planning scenario'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияВидПлана Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если ЗначениеЗаполнено(Выборка.ВидПланаСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru = 'Вид плана не должен отличаться от значения в типовом соглашении ""%ВидПланаСоглашение%""';
										|en = 'Plan profile should not differ from the value in standard agreement ""%ВидПланаСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидПланаСоглашение%", Выборка.ВидПланаСоглашение);

				Иначе
					
					ТекстОшибки = НСтр("ru = 'Вид плана в типовом соглашении не определен. Вид плана не может быть установлен без согласования';
										|en = 'Plan profile is not defined in the standard agreement. You cannot set a plan profile without approval'");
					
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВидПлана",
					Отказ);
			Иначе 
				Если ЗначениеЗаполнено(Выборка.ВидПланаСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru = '""%ВидПлана%"" отличается от вида плана в типовом соглашении ""%ВидПланаСоглашение%""';
										|en = '""%ВидПлана%""  is different from the plan profile of the ""%ВидПланаСоглашение%"" standard agreement'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидПлана%", ДокументПродажи.ВидПлана);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидПланаСоглашение%", Выборка.ВидПланаСоглашение);

				Иначе
					
					ТекстОшибки = НСтр("ru = 'Вид плана в типовом соглашении не определен. Вид плана не может быть установлен без согласования';
										|en = 'Plan profile is not defined in the standard agreement. You cannot set a plan profile without approval'");
					
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Вид плана';
																								|en = 'Plan profile'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияХозяйственнаяОперация Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Операция не должна отличаться от значения в типовом соглашении ""%Операция%""';
										|en = 'Operation should not differ from the value in standard agreement ""%Операция%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Операция не должна отличаться от значения в соглашении ""%Операция%""';
										|en = 'Operation should not differ from the value in agreement ""%Операция%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", Выборка.ХозяйственнаяОперацияСоглашение); 
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ХозяйственнаяОперация",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '""%Операция%"" отличается от операции в типовом соглашении ""%ОперацияСоглашения%""';
										|en = '""%Операция%"" is different from the transaction in the ""%ОперацияСоглашения%"" standard agreement'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%Операция%"" отличается от операции в соглашении ""%ОперацияСоглашения%""';
										|en = '""%Операция%"" is different from the transaction in the ""%ОперацияСоглашения%"" agreement'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", ДокументПродажи.ХозяйственнаяОперация); 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОперацияСоглашения%", Выборка.ХозяйственнаяОперацияСоглашение); 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Хозяйственная операция';
																								|en = 'Business transaction'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда

			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Признак ""Цена включает НДС"" не должен отличаться от значения в типовом соглашении ""%ЦенаВключаетНДС%""';
									|en = 'Flag ""Price includes VAT"" should not differ from the value in standard agreement ""%ЦенаВключаетНДС%""'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении ""%ЦенаВключаетНДС%""';
									|en = 'Flag ""Price includes VAT"" should not differ from the value in agreement ""%ЦенаВключаетНДС%""'");
			КонецЕсли;
				
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаВключаетНДС%", ?(Выборка.ЦенаВключаетНДССоглашение, НСтр("ru = 'Цена включает НДС';
																													|en = 'Price includes VAT'"), НСтр("ru = 'Цена не включает НДС';
																																					|en = 'Price does not include VAT'")));
			
			Если НЕ ВыводитьВОтчет Тогда 
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ЦенаВключаетНДС",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Цена включает НДС';
																								|en = 'Price includes VAT'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияПорядокОплаты Тогда

			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Оплата не должна отличаться от значения в типовом соглашении ""%ПорядокОплаты%""';
										|en = 'Payment cannot be different from the value in the ""%ПорядокОплаты%"" standard agreement.'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Оплата не должна отличаться от значения в соглашении ""%ПорядокОплаты%""';
										|en = 'Payment cannot be different from the value in the ""%ПорядокОплаты%"" agreement.'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПорядокОплаты%", Выборка.ПорядокОплатыСоглашение); 
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ПорядокОплаты",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '""%ПорядокОплаты%"" отличается от оплаты в типовом соглашении ""%ПорядокОплатыСоглашения%""';
										|en = '""%ПорядокОплаты%"" differs from payment in standard agreement ""%ПорядокОплатыСоглашения%""'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%ПорядокОплаты%"" отличается от оплаты в соглашении ""%ПорядокОплатыСоглашения%""';
										|en = '""%ПорядокОплаты%"" differs from payment in the ""%ПорядокОплатыСоглашения%"" agreement'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПорядокОплаты%", ДокументПродажи.ПорядокОплаты); 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПорядокОплатыСоглашения%", Выборка.ПорядокОплатыСоглашение); 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Оплата';
																								|en = 'Payment'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияДатаНачалаДействия Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Дата начала действия должна быть не меньше, чем дата начала действия типового соглашения ""%ДатаНачалаДействияСоглашение%""';
									|en = 'Start date cannot be less than the effective date of a standard agreement ""%ДатаНачалаДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачалаДействияСоглашение%", Формат(Выборка.ДатаНачалаДействияСоглашение, "ДЛФ=DD"));
			
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДатаНачалаДействия",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%ДатаНачала%"" меньше, чем дата начала действия типового соглашения ""%ДатаНачалаДействияСоглашение%""';
									|en = '""%ДатаНачала%"" is less than the ""%ДатаНачалаДействияСоглашение%"" standard agreement effective date '");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачалаДействияСоглашение%", Формат(Выборка.ДатаНачалаДействияСоглашение, "ДЛФ=DD"));
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачала%", Формат(ДокументПродажи.ДатаНачалаДействия, "ДЛФ=DD"));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Дата начала действия';
																								|en = 'Effective date'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияДатаОкончанияДействия Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Дата окончания действия должна быть не больше, чем дата окончания действия типового соглашения ""%ДатаОкончанияДействияСоглашение%""';
									|en = 'Expiration date cannot be greater than the expiration date of a standard agreement ""%ДатаОкончанияДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействияСоглашение%", Формат(Выборка.ДатаОкончанияДействияСоглашение, "ДЛФ=DD"));
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДатаОкончанияДействия",
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru = '""%ДатаОкончания%"" больше, чем дата окончания действия типового соглашения ""%ДатаОкончанияДействияСоглашение%""';
									|en = '""%ДатаОкончания%"" is bigger than the ""%ДатаОкончанияДействияСоглашение%"" standard agreement validity expiration date'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействияСоглашение%", Формат(Выборка.ДатаОкончанияДействияСоглашение, "ДЛФ=DD"));
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончания%", Формат(ДокументПродажи.ДатаОкончанияДействия, "ДЛФ=DD"));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Дата окончания действия';
																								|en = 'Expiration date'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияГрафикОплаты Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'График оплаты не должен отличаться от значения в типовом соглашении ""%ГрафикОплатыСоглашение%""';
										|en = 'Payment schedule should not differ from the value in standard agreement ""%ГрафикОплатыСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'График оплаты не должен отличаться от значения в соглашении ""%ГрафикОплатыСоглашение%""';
										|en = 'Payment schedule should not differ from the value in agreement ""%ГрафикОплатыСоглашение%""'");
				КонецЕсли;
					
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплатыСоглашение%", Выборка.ГрафикОплатыСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ГрафикОплаты",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '""%ГрафикОплаты%"" отличается от графика в типовом соглашении ""%ГрафикОплатыСоглашение%""';
										|en = '""%ГрафикОплаты%"" is different from the schedule in the ""%ГрафикОплатыСоглашение%"" standard agreement'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%ГрафикОплаты%"" отличается от графика в соглашении ""%ГрафикОплатыСоглашение%""';
										|en = '""%ГрафикОплаты%"" is different from the schedule in the ""%ГрафикОплатыСоглашение%"" agreement'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплатыСоглашение%", Выборка.ГрафикОплатыСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплаты%", ДокументПродажи.ГрафикОплаты);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'График оплаты';
																								|en = 'Payment schedule'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru = 'Склад должен входить в группу складов типового соглашения ""%СкладСоглашение%""';
											|en = 'Warehouse should be included in group of the ""%СкладСоглашение%"" standard agreement warehouses'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Склад не должен отличаться от значения в типовом соглашении ""%СкладСоглашение%""';
											|en = 'Warehouse should not differ from the value in standard agreement ""%СкладСоглашение%""'");
					КонецЕсли;
				Иначе
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru = 'Склад должен входить в группу складов соглашения ""%СкладСоглашение%""';
											|en = 'Warehouse should be included in group of the ""%СкладСоглашение%"" agreement warehouses'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Склад не должен отличаться от значения в соглашении ""%СкладСоглашение%""';
											|en = 'Warehouse should not differ from the value in agreement ""%СкладСоглашение%""'");
					КонецЕсли;
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Склад",
					Отказ);
			Иначе 
				Если Выборка.ЭтоСоглашение Тогда
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru = '""%Склад%"" должен входить в группу складов типового соглашения ""%СкладСоглашение%""';
											|en = '""%Склад%"" must be in the warehouse group of the ""%СкладСоглашение%"" standard agreement'");
					Иначе
						ТекстОшибки = НСтр("ru = '""%Склад%"" отличается от склада в типовом соглашении ""%СкладСоглашение%""';
											|en = '""%Склад%"" is different from the warehouse in the ""%СкладСоглашение%"" standard agreement'");
					КонецЕсли;
				Иначе
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru = '""%Склад%"" должен входить в группу складов соглашения ""%СкладСоглашение%""';
											|en = '""%Склад%"" must be in the warehouse group of the ""%СкладСоглашение%"" agreement'");
					Иначе
						ТекстОшибки = НСтр("ru = '""%Склад%"" отличается от склада в соглашении ""%СкладСоглашение%""';
											|en = '""%Склад%"" is different from the warehouse in the ""%СкладСоглашение%"" agreement'");
					КонецЕсли;
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", ДокументПродажи.Склад);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Склад';
																								|en = 'Warehouse'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Признак возврата многооборотной тары не должен отличаться от значения в типовом соглашении';
									|en = 'Flag of reusable package return cannot differ from the value in the standard agreement'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Признак возврата многооборотной тары не должен отличаться от значения в соглашении';
									|en = 'Flag of reusable package return cannot differ from the value in the agreement'");
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда 
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					?(Выборка.ЭтоСоглашение,"ВозвращатьМногооборотнуюТару","ВернутьМногооборотнуюТару"),
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Возврат тары';
																								|en = 'Return package'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияТребуетсяЗалогЗаТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Признак необходимости залога за тару не должен отличаться от значения в типовом соглашении';
									|en = 'Flag of necessity of deposit for package should not differ from the value in standard agreement'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Признак необходимости залога за тару не должен отличаться от значения в соглашении';
									|en = 'Flag of necessity of deposit for package should not differ from the value in agreement'");
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда 
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ТребуетсяЗалогЗаТару",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Залог за тару';
																								|en = 'Deposit for package'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю Тогда
			
			ТекстОшибки = НСтр("ru = 'Способ расчета даты возврата многооборотной тары не должен отличаться от значения в типовом соглашении ""%РассчитыватьДатуВозвратаТарыПоКалендарю%""';
								|en = 'Calculation method of reusable package return date should not differ from the value in standard agreement ""%РассчитыватьДатуВозвратаТарыПоКалендарю%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РассчитыватьДатуВозвратаТарыПоКалендарю%", 
				?(Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю, НСтр("ru = 'По календарю предприятия';
																		|en = 'By enterprise calendar'"),НСтр("ru = 'По всем дням';
																												|en = 'On all days'")));
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"РассчитыватьДатуВозвратаТарыПоКалендарю",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Способ расчета даты возврата';
																								|en = 'Calculation method for return date'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			Если НЕ ВыводитьВОтчет Тогда 
				
				ТекстОшибки = НСтр("ru = 'Срок возврата многооборотной тары не должен отличаться от значения в соглашении (%СрокВозврата%)';
									|en = 'Reusable package return date should not differ from the value in agreement (%СрокВозврата%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СрокВозвратаМногооборотнойТары",
					Отказ);
			Иначе 
					
				ТекстОшибки = НСтр("ru = '(%СрокВозвратаТиповое%) отличается от срока в соглашении (%СрокВозврата%)';
									|en = '(%СрокВозвратаТиповое%) is different from the period in the (%СрокВозврата%) agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозвратаТиповое%", ДокументПродажи.СрокВозвратаМногооборотнойТары);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Срок возврата тары';
																								|en = 'Package return cycle length'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиДатаВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
				ДокументПродажи,
				Выборка.СрокВозвратаМногооборотнойТары,
				Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю,
				Выборка.КалендарьВозвратаТары);
			
			Если ДатаВозвратаМногооборотнойТары <> ДокументПродажи.ДатаВозвратаМногооборотнойТары Тогда
				ТекстОшибки = НСтр("ru = 'Дата возврата многооборотной тары не должна отличаться от указанной в соглашении ""%ДатаВозвратаМногооборотнойТары%""';
									|en = 'Reusable package return date should not differ from the one in the agreement ""%ДатаВозвратаМногооборотнойТары%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаВозвратаМногооборотнойТары%", Формат(ДатаВозвратаМногооборотнойТары, "ДЛФ=DD"));
				
				Если Не ВыводитьВОтчет Тогда
					СообщитьПользователюОбОшибке(
						ТекстОшибки,
						ДокументПродажи,
						"ДатаВозвратаМногооборотнойТары",
						Отказ);
				Иначе 
					Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Дата возврата тары';
																									|en = 'Package return date  '"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКалендарьВозвратаТары Тогда
			
			ТекстОшибки = НСтр("ru = 'Календарь возврата тары не должен отличаться от указанного в соглашении %КалендарьВозвратаТарыСоглашение%';
								|en = 'Package return calendar should not differ from the one specified in agreement %КалендарьВозвратаТарыСоглашение%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КалендарьВозвратаТарыСоглашение%", Выборка.КалендарьВозвратаТарыСоглашение);
				
			Если Не ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"КалендарьВозвратаТары",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Календарь возврата тары';
																								|en = 'Package return calendar'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСегментНоменклатуры Тогда

			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Сегмент номенклатуры не должен отличаться от значения в типовом соглашении ""%СегментНоменклатурыСоглашение%""';
									|en = 'Product segment should not differ from the value in standard agreement ""%СегментНоменклатурыСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатурыСоглашение%", Выборка.СегментНоменклатурыСоглашение);
			
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СегментНоменклатуры",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%СегментНоменклатуры%"" отличается от сегмента в типовом соглашении ""%СегментНоменклатурыСоглашение%""';
									|en = '""%СегментНоменклатуры%"" is different from the segment in the ""%СегментНоменклатурыСоглашение%"" standard agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатурыСоглашение%", Выборка.СегментНоменклатурыСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатуры%", ДокументПродажи.СегментНоменклатуры);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Сегмент номенклатуры';
																								|en = 'Product segment'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияПроцентРучнойСкидки Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Процент ручной скидки не должен быть больше значения, чем в типовом соглашении (%ПроцентРучнойСкидки%%)';
									|en = 'Manual discount percent should not be greater than the value in standard agreement (%ПроцентРучнойСкидки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидки%", Выборка.ПроцентРучнойСкидки);
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ПроцентРучнойСкидки",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '(%ПроцентРучнойСкидкиТиповое%%) больше значения в типовом соглашении (%ПроцентРучнойСкидки%%)';
									|en = '(%ПроцентРучнойСкидкиТиповое%%) exceeds the value in the (%ПроцентРучнойСкидки%%) standard agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидки%", Выборка.ПроцентРучнойСкидки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидкиТиповое%", ДокументПродажи.ПроцентРучнойСкидки);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Процент ручной скидки';
																								|en = 'Manual discount percentage'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияПроцентРучнойНаценки Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Процент ручной наценки не должен быть больше значения, чем в типовом соглашении (%ПроцентРучнойНаценки%%)';
									|en = 'Manual markup percent should not differ from the value in the standard agreement (%ПроцентРучнойНаценки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценки%", Выборка.ПроцентРучнойНаценки);
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ПроцентРучнойНаценки",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '(%ПроцентРучнойНаценкиТиповое%%) больше значения в типовом соглашении (%ПроцентРучнойНаценки%%)';
									|en = '(%ПроцентРучнойНаценкиТиповое%%) exceeds the value in the (%ПроцентРучнойНаценки%%) standard agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценки%", Выборка.ПроцентРучнойНаценки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценкиТиповое%", ДокументПродажи.ПроцентРучнойНаценки);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Процент ручной наценки';
																								|en = 'Manual markup percentage'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияРегулярное Тогда
			ТекстОшибки = НСтр("ru = 'Признак регулярности не должен отличаться от значения в типовом соглашении';
								|en = 'Frequency flag should not differ from the value in standard agreement'");
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Регулярное",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Регулярность';
																								|en = 'Frequency'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияПериод Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Период не должен отличаться от значения в типовом соглашении ""%ПериодСоглашение%""';
									|en = 'Period should not differ from the value in standard agreement ""%ПериодСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПериодСоглашение%", Выборка.ПериодСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Период",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%Период%"" отличается от периода в типовом соглашении ""%ПериодСоглашение%""';
									|en = '""%Период%"" is different from the period in the ""%ПериодСоглашение%"" standard agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПериодСоглашение%", Выборка.ПериодСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Период%", ДокументПродажи.Период);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Период';
																								|en = 'Period'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияКоличествоПериодов Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Количество периодов не должен быть меньше, чем в типовом соглашении - %КоличествоПериодовСоглашение%';
									|en = 'Number of periods should not be less than in the standard agreement - %КоличествоПериодовСоглашение%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодовСоглашение%", Выборка.КоличествоПериодовСоглашение);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"КоличествоПериодов",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '%КоличествоПериодов% меньше, чем в типовом соглашении - %КоличествоПериодовСоглашение%';
									|en = '%КоличествоПериодов% is less than in the %КоличествоПериодовСоглашение% standard agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодовСоглашение%", Выборка.КоличествоПериодовСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодов%", ДокументПродажи.КоличествоПериодов);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Количество периодов';
																								|en = 'Number of periods'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей Тогда

			ТекстОшибки = НСтр("ru = 'Признак использования в работе торговых представителей не должен отличаться от значения в типовом соглашении';
								|en = 'Flag of usage of sales representatives cannot differ from the value in the standard agreement'");
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ИспользуетсяВРаботеТорговыхПредставителей",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Торговые представители';
																								|en = 'Sales representatives'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияДоступноВнешнимПользователям Тогда

			ТекстОшибки = НСтр("ru = 'Признак доступности внешним пользователям не должен отличаться от значения в типовом соглашении';
								|en = 'Flag of availability to external users should not differ from the value in standard agreement '");
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДоступноВнешнимПользователям",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Внешние пользователи';
																								|en = 'External users'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Срок поставки не должен быть меньше, чем в типовом соглашении - %СрокПоставкиСоглашение% дн.';
										|en = 'Delivery period should not be less than the one specified in the standard agreement - %СрокПоставкиСоглашение% days'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Срок поставки не должен быть меньше, чем в соглашении - %СрокПоставкиСоглашение% дн.';
										|en = 'Delivery period should not be less than the one specified in the agreement - %СрокПоставкиСоглашение% days'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
		
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СрокПоставки",
					Отказ);
			Иначе 
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '%СрокПоставки% дн. меньше, чем в типовом соглашении - %СрокПоставкиСоглашение% дн.';
										|en = '%СрокПоставки% days are fewer than days in the standard agreement - %СрокПоставкиСоглашение% days'");
				Иначе
					ТекстОшибки = НСтр("ru = '%СрокПоставки% дн. меньше, чем в соглашении - %СрокПоставкиСоглашение% дн.';
										|en = '%СрокПоставки% days are fewer than days in the agreement - %СрокПоставкиСоглашение% days'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставки%", ДокументПродажи.СрокПоставки);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Срок поставки';
																								|en = 'Delivery period'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияФормыОплаты Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Форма оплаты не должна отличаться от значения в графике оплаты ""%ФормаОплатыГрафик%""';
									|en = 'Payment method should not differ from the value in payment schedule ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыГрафик);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ФормаОплаты",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%ФормаОплаты%"" отличается от формы оплаты в графике оплаты ""%ФормаОплатыГрафик%""';
									|en = '""%ФормаОплаты%"" is different from the payment method in the ""%ФормаОплатыГрафик%"" payment schedule'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыГрафик);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплаты%", ?(ЗначениеЗаполнено(ДокументПродажи.ФормаОплаты),ДокументПродажи.ФормаОплаты, НСтр("ru = 'Любая';
																																							|en = 'Any'")));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Форма оплаты';
																								|en = 'Payment method'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКалендаря Тогда

			Если ЗначениеЗаполнено(Выборка.Календарь) И Не ЗначениеЗаполнено(ДокументПродажи.Календарь) Тогда
				
				ТекстОшибки = НСтр("ru = 'Режим учета отсрочки не должен отличаться от значения в типовом соглашении ""по рабочим дням""';
									|en = 'Deferment accounting mode should not differ from the value in standard agreement ""by workdays""'");
				
			ИначеЕсли Не ЗначениеЗаполнено(Выборка.Календарь) И ЗначениеЗаполнено(ДокументПродажи.Календарь) Тогда
				
				ТекстОшибки = НСтр("ru = 'Режим учета отсрочки не должен отличаться от значения в типовом соглашении ""по календарным дням""';
									|en = 'Deferment accounting mode should not differ from value in standard agreement ""by calendar days""'");
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Календарь не должен отличаться от значения ""%Календарь%""';
									|en = 'Calendar should not differ from value ""%Календарь%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Календарь%", Выборка.Календарь);
				
			КонецЕсли;
			
			ВидимостьЭтаповОплаты = ДокументПродажи.ЭтапыГрафикаОплаты.Количество() > 0 Или Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
			
			Если ВидимостьЭтаповОплаты Тогда 
				Поле = "НадписьОплата";
				КлючДанныхСообщения = Неопределено;
			Иначе
				Поле = "ГрафикОплаты";
				КлючДанныхСообщения = ДокументПродажи;
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					КлючДанныхСообщения,
					Поле,
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Календарь';
																								|en = 'Calendar'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияФормыОплатыСоглашения Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Форма оплаты не должна отличаться от значения в типовом соглашении ""%ФормаОплатыГрафик%""';
									|en = 'Payment method should not differ from the value in standard agreement ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыСоглашенияСКлиентом);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ФормаОплаты",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%ФормаОплаты%"" отличается от формы оплаты в типовом соглашении ""%ФормаОплатыГрафик%""';
									|en = '""%ФормаОплаты%"" is different from the payment method in the ""%ФормаОплатыГрафик%"" standard agreement'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыСоглашенияСКлиентом);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплаты%", ?(ЗначениеЗаполнено(ДокументПродажи.ФормаОплаты),ДокументПродажи.ФормаОплаты, НСтр("ru = 'Любая';
																																							|en = 'Any'")));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Форма оплаты';
																								|en = 'Payment method'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
					ТекстОшибки = НСтр("ru = 'Использование договоров не должно отличаться от значения в типовом соглашении ""Требуется указание договора""';
										|en = 'Contract usage should not differ from the value in standard agreement ""Specify a contract""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Использование договоров не должно отличаться от значения в типовом соглашении ""Договоры не используются""';
										|en = 'Contract usage should not differ from a value in standard agreement ""Contracts are not used""'");
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ИспользуютсяДоговорыКонтрагентов",
					Отказ);
			Иначе 
				Если Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
					ТекстОшибки = НСтр("ru = '""Договоры не используются"" отличается от значения в типовом соглашении ""Требуется указание договора""';
										|en = '""Contracts are not used"" is different from the value in the ""Specify a contract"" standard agreement'");
				Иначе
					ТекстОшибки = НСтр("ru = '""Требуется указание договора"" отличается от значения в типовом соглашении ""Договоры не используются""';
										|en = '""Specify a contract"" is different from the value in the ""Contracts are not used"" standard agreement'");
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Использование договоров';
																								|en = 'Use contracts'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияПорядокРасчетов
			И Не Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Порядок расчетов не должен отличаться от значения в типовом соглашении ""%ПорядокРасчетов%""';
									|en = 'Payment procedure should not differ from the value in standard agreement ""%ПорядокРасчетов%""'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Порядок расчетов не должен отличаться от значения в соглашении ""%ПорядокРасчетов%""';
									|en = 'Payment terms should not differ from the value in the ""%ПорядокРасчетов%"" agreement'");
			КонецЕсли;
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПорядокРасчетов%", Выборка.ПорядокРасчетовСоглашение);
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ПорядокРасчетов",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Порядок расчетов';
																								|en = 'Payment terms'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиРеализацияБезПереходаПраваСобственности Тогда
			
			ТекстОшибки = 
				НСтр("ru = 'Возможность отгрузки без перехода права собственности не должна отличаться от значения в типовом соглашении.';
					|en = 'Possibility to ship without transfer of ownership rights should not be different from the value in the standard agreement.'");
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВозможностьОтгрузкиБезПереходаПраваСобственности",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(
					НСтр("ru = 'Отгрузка без перехода права собственности';
						|en = 'Shipment without transfer of ownership'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиМинимальнаяСуммаЗаказа Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Минимальная сумма заказа не должна отличаться от значения в типовом соглашении ""%МинимальнаяСуммаЗаказа% %Валюта%""';
									|en = 'Minimum order amount cannot differ from the value in the ""%МинимальнаяСуммаЗаказа% %Валюта%"" standard agreement '");
			Иначе
				ТекстОшибки = НСтр("ru = 'Сумма заказа меньше, чем минимально допустимая сумма заказа в соглашении ""%МинимальнаяСуммаЗаказа% %Валюта%""';
									|en = 'Order amount is less than the minimum allowable amount of order in the agreement ""%МинимальнаяСуммаЗаказа% %Валюта%""'");
			КонецЕсли;
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МинимальнаяСуммаЗаказа%", Выборка.МинимальнаяСуммаЗаказа);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", Выборка.ВалютаСоглашение);
			
			ЕстьОшибкиМинимальнаяСуммаЗаказа = Выборка.ЕстьОшибкиМинимальнаяСуммаЗаказа;
			Если Выборка.ВалютаСоглашение <> Выборка.Валюта Тогда
				СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютаСоглашение, Выборка.Дата);
				СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
				НоваяМинимальнаяСуммаЗаказа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
					Выборка.МинимальнаяСуммаЗаказа,
					СтруктураКурсовСтаройВалюты,
					СтруктураКурсовНовойВалюты);




					
				Если НоваяМинимальнаяСуммаЗаказа <= Выборка.СуммаДокумента Тогда
					
					ЕстьОшибкиМинимальнаяСуммаЗаказа = ЛОЖЬ;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьОшибкиМинимальнаяСуммаЗаказа Тогда
				Если НЕ ВыводитьВОтчет Тогда
					Если Выборка.ЭтоСоглашение Тогда 
						Поле = "МинимальнаяСуммаЗаказа";
					Иначе
						Поле = "СуммаДокумента";
					КонецЕсли;
					СообщитьПользователюОбОшибке(
						ТекстОшибки,
						ДокументПродажи,
						Поле,
						Отказ);
				Иначе
					Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Мин. сумма заказа';
																									|en = 'Min. order amount'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры
