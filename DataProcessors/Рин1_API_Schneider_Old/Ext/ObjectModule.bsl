
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СведенияОВнешнейОбработке 

//Функция СведенияОВнешнейОбработке() Экспорт
//    	
//	ТаблицаКоманд = ПолучитьТаблицуКоманд();
//	
//	ДобавитьКоманду(ТаблицаКоманд,
//	"Херши_РаботаСAPISchneiderElectric", // Уникальный идентификатор команды
//	"ОткрытиеФормы", // Использование команды //ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок
//	"Работа с API Schneider Electric", // Представление команды в пользовательском интерфейсе
//	Истина, // Показывать оповещение.
//	"", // Дополнительный модификатор команды.
//	Ложь // Команду необходимо скрывать в форме элемента.
//	);
//	
//	ПараметрыРегистрации = Новый Структура;
//    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка"); //ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок
//    ПараметрыРегистрации.Вставить("Версия", "1.0");
//    ПараметрыРегистрации.Вставить("Назначение", ПолучитьМассивОбъектов());
//    ПараметрыРегистрации.Вставить("Наименование", "Работа с API Schneider Electric");
//    ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
//    ПараметрыРегистрации.Вставить("Информация", "Работа с API Schneider Electric");
//    ПараметрыРегистрации.Вставить("ВерсияБСП", "3.0.1.405"); //для 2,4,7,107
//	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
//	ПараметрыРегистрации.Вставить("Разрешения", ПолучитьРазрешения());
//	ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
//	
//	Возврат ПараметрыРегистрации;
//	
//КонецФункции

//Функция ПолучитьТаблицуКоманд()
//	
//	Команды = Новый ТаблицаЗначений;
//    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
//    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
//    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
//    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
//    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
//	Команды.Колонки.Добавить("Скрыть", Новый ОписаниеТипов("Булево"));
//	
//	Возврат Команды;
//	
//КонецФункции

//Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Использование, Представление, ПоказыватьОповещение = Ложь, Модификатор = "", Скрыть = Ложь)
//	
//	НоваяКоманда = ТаблицаКоманд.Добавить();
//    НоваяКоманда.Идентификатор		  = Идентификатор;
//    НоваяКоманда.Использование		  = Использование;
//    НоваяКоманда.Представление		  = Представление;
//    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
//    НоваяКоманда.Модификатор		  = Модификатор;
//	НоваяКоманда.Скрыть				  = Скрыть;
//	
//КонецПроцедуры

//Функция ПолучитьМассивОбъектов()
//	
//	ОбъектыНазначенияФормы = Новый Массив;
//	//ОбъектыНазначенияФормы.Добавить("Документ.РеализацияТоваровУслуг");

//	Возврат ОбъектыНазначенияФормы;

//КонецФункции

//Функция ПолучитьРазрешения()
//	
//	//ИспользуемыйПакет = "http://www.1c.ru/1cFresh/Application/Permissions/1.0.0.1";
//	//Если ИспользуемыйПакет = Неопределено Тогда
//	//	ИспользуемыйПакет = ДополнительныеОтчетыИОбработкиВБезопасномРежимеИнтерфейс.Пакет();
//	//КонецЕсли;
//	//
//	//РазрешениеФайловаяСистема = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ИспользуемыйПакет, "FileSystemAccess"));
//	//РазрешениеФайловаяСистема.Description = "File";
//	//РазрешениеФайловаяСистема.Path = КаталогВременныхФайлов();
//	//РазрешениеФайловаяСистема.AllowedRead = Истина;
//	//РазрешениеФайловаяСистема.AllowedWrite = Ложь;
//	//
//	//РазрешениеПодключениеВнешнейКомпонентыИзОбщегоМакетаКонфигурации = ДополнительныеОтчетыИОбработкиВБезопасномРежимеИнтерфейс.РазрешениеПодключениеВнешнейКомпонентыИзОбщегоМакетаКонфигурации("КомпонентаСклоненияФИО"); 
//	
//	Разрешения = Новый Массив;
//	//Разрешения.Добавить(РазрешениеФайловаяСистема);
//		
//	Возврат Разрешения;

//КонецФункции

#КонецОбласти

#Область РаботаСWEB

//GET ─получить данные
//PUT ─ создать данные
//POST ─ редактировать/отправить данные
//DELETE ─ удалить данные

Функция ВыполнитьPostЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса)
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".xml");
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".xml");
		
	// Создаем новое HTTP соединение с указанием сервера
	// Последний параметр отвечает за использование защищенного соединения
	HTTPСоединение = Новый HTTPСоединение(СтруктураПараметровСоединения.Сервер, СтруктураПараметровСоединения.Порт, 
			СтруктураПараметровСоединения.Пользователь, СтруктураПараметровСоединения.Пароль, 
			СтруктураПараметровСоединения.Прокси, СтруктураПараметровСоединения.Таймаут, 
			СтруктураПараметровСоединения.ЗащищенноеСоединение, СтруктураПараметровСоединения.ИспользоватьАутентификациюОС);
			
	// Записываем содержимое тела в файл отправки
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(СтруктураПараметровЗапроса.АдресРесурса);          
	ТекстовыйФайл.Записать(ИмяФайлаЗапроса, КодировкаТекста.UTF8);
	ФайлОтправки = Новый Файл(ИмяФайлаЗапроса);

	// Отсылаем POST запрос на обработку.
	// АдресРесурса — ссылка на веб-сервер (страницу), к которой посылается POST запрос
	// Выполним POST запрос через URL
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураПараметровЗапроса.АдресРесурса, СтруктураПараметровЗапроса.Заголовки);     
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
		
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаОтвета);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаОтвета, КодировкаТекста.UTF8);
	
	ТекстОтвета = ТекстовыйДокумент.ПолучитьТекст();
	
	РезультатПостЗапрос = Новый Структура;
	РезультатПостЗапрос.Вставить("HTTPОтвет", HTTPОтвет);
	РезультатПостЗапрос.Вставить("ТекстОтвета", ТекстОтвета);	
	
	// Обнулим запрос, чтобы освободить чтение ИмяФайлаЗапроса!
	HTTPЗапрос = Неопределено;
	
	Попытка
		УдалитьФайлы(ИмяФайлаОтвета);
		УдалитьФайлы(ИмяФайлаЗапроса);
	Исключение
	КонецПопытки;
	
	Возврат РезультатПостЗапрос;
	
КонецФункции

Функция ВыполнитьGetЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса) 
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".xml");
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".xml");
		
	// Создаем новое HTTP соединение с указанием сервера
	// Последний параметр отвечает за использование защищенного соединения
	HTTPСоединение = Новый HTTPСоединение(СтруктураПараметровСоединения.Сервер, СтруктураПараметровСоединения.Порт, 
			СтруктураПараметровСоединения.Пользователь, СтруктураПараметровСоединения.Пароль, 
			СтруктураПараметровСоединения.Прокси, СтруктураПараметровСоединения.Таймаут, 
			СтруктураПараметровСоединения.ЗащищенноеСоединение, СтруктураПараметровСоединения.ИспользоватьАутентификациюОС);
			
	// Записываем содержимое тела в файл отправки
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(СтруктураПараметровЗапроса.АдресРесурса);          
	ТекстовыйФайл.Записать(ИмяФайлаЗапроса, КодировкаТекста.UTF8);
	ФайлОтправки = Новый Файл(ИмяФайлаЗапроса);
		
	// Отсылаем POST запрос на обработку.
	// АдресРесурса — ссылка на веб-сервер (страницу), к которой посылается POST запрос
	// Выполним POST запрос через URL
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураПараметровЗапроса.АдресРесурса, СтруктураПараметровЗапроса.Заголовки);     
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
		
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяФайлаОтвета);

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаОтвета, КодировкаТекста.UTF8);
	
	ТекстОтвета = ТекстовыйДокумент.ПолучитьТекст();
	
	РезультатGetЗапрос = Новый Структура;
	РезультатGetЗапрос.Вставить("HTTPОтвет", HTTPОтвет);
	РезультатGetЗапрос.Вставить("ТекстОтвета", ТекстОтвета);	
	РезультатGetЗапрос.Вставить("ИмяФайлаОтвета", ИмяФайлаОтвета);	
	
	// Обнулим запрос, чтобы освободить чтение ИмяФайлаЗапроса!
	HTTPЗапрос = Неопределено;
	
	Попытка
		УдалитьФайлы(ИмяФайлаЗапроса);
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат РезультатGetЗапрос;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровСоединения()
	
	//Если Константы.HTTPЗащищенноеСоединение.Получить() Тогда
	Если ЭтотОбъект.HTTPЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());  	
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	СтруктураПараметровСоединения = Новый Структура;
	//СтруктураПараметровСоединения.Вставить("Сервер",						 Константы.HTTPСервер.Получить());	
	//СтруктураПараметровСоединения.Вставить("Порт",							 Константы.HTTPПорт.Получить());	
	//СтруктураПараметровСоединения.Вставить("Пользователь",					 Константы.HTTPПользователь.Получить());	
	//СтруктураПараметровСоединения.Вставить("Пароль",						 Константы.HTTPПароль.Получить());	
	//СтруктураПараметровСоединения.Вставить("Прокси",						 Неопределено);	
	//СтруктураПараметровСоединения.Вставить("Таймаут",						 Константы.HTTPТаймаут.Получить());	
	//СтруктураПараметровСоединения.Вставить("ЗащищенноеСоединение",			 ЗащищенноеСоединение);	
	//СтруктураПараметровСоединения.Вставить("ИспользоватьАутентификациюОС",	 Константы.HTTPИспользоватьАутентификациюОС.Получить());	
	СтруктураПараметровСоединения.Вставить("Сервер",						 ЭтотОбъект.HTTPСервер);	
	СтруктураПараметровСоединения.Вставить("Порт",							 ЭтотОбъект.HTTPПорт);	
	СтруктураПараметровСоединения.Вставить("Пользователь",					 ЭтотОбъект.HTTPПользователь);	
	СтруктураПараметровСоединения.Вставить("Пароль",						 ЭтотОбъект.HTTPПароль);	
	СтруктураПараметровСоединения.Вставить("Прокси",						 Неопределено);	
	СтруктураПараметровСоединения.Вставить("Таймаут",						 ЭтотОбъект.HTTPТаймаут);	
	СтруктураПараметровСоединения.Вставить("ЗащищенноеСоединение",			 ЗащищенноеСоединение);	
	СтруктураПараметровСоединения.Вставить("ИспользоватьАутентификациюОС",	 ЭтотОбъект.HTTPИспользоватьАутентификациюОС);	
	
	Возврат СтруктураПараметровСоединения;	
	
КонецФункции

Функция ПолучитьСтруктуруПараметровЗапроса()
	
	СтруктураПараметровЗапроса = Новый Структура;
	//СтруктураПараметровЗапроса.Вставить("АдресРесурса",	Константы.HTTPАдресРесурса.Получить());	
	СтруктураПараметровЗапроса.Вставить("АдресРесурса",	СокрЛП(ЭтотОбъект.HTTPАдресРесурса));	
	СтруктураПараметровЗапроса.Вставить("Заголовки",	Новый Соответствие);	
		
	Возврат СтруктураПараметровЗапроса;	
	
КонецФункции

Функция ПреобразоватьКURL(Строка)
	
	Длина = СтрДлина(Строка);
	
	Итог = "";
	
	Для Счетчик = 1 По Длина Цикл
		
		Знак = Сред(Строка, Счетчик, 1);
		Код = КодСимвола(Знак);
		
		Если ((Знак>="a") И (Знак<="z")) ИЛИ
			 ((Знак>="A") И (Знак<="Z")) ИЛИ
			 ((Знак>="0") И (Знак<="9")) Тогда
			 
			Итог = Итог + Знак;
			
		Иначе
			
			Если (Код >= КодСимвола("А")) И (Код <= КодСимвола("п")) Тогда
				Итог = Итог + "%" + ПреобразоватьВСистему(208, 16) + "%" + ПреобразоватьВСистему(144 + Код - КодСимвола("А"), 16);
			ИначеЕсли (Код >= КодСимвола("р")) И (Код <= КодСимвола("я")) Тогда
				Итог = Итог + "%" + ПреобразоватьВСистему(209, 16) + "%" + ПреобразоватьВСистему(128 + Код - КодСимвола("р"), 16);
			ИначеЕсли (Знак = "ё") Тогда
				Итог = Итог + "%" + ПреобразоватьВСистему(209, 16) + "%" + ПреобразоватьВСистему(145, 16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог = Итог + "%" + ПреобразоватьВСистему(208, 16) + "%" + ПреобразоватьВСистему(129, 16);
			Иначе
				Итог = Итог + "%" + ПреобразоватьВСистему(Код, 16);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Итог;
	
КонецФункции

Функция ПреобразоватьВСистему(Число10, Система)
	
	Если Система > 36 ИЛИ Система < 2 тогда
		СообщитьПользователю("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 цикл
		РезультатДеления = Число10/Система;
		ЧислоСистема = Цел(РезультатДеления);
		ОстатокОтДеления = Число10 - Система * (ЧислоСистема);
		СтрокаСистема = Сред(СтрокаЗначений, ОстатокОтДеления + 1, 1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема = 0, 0, РезультатДеления); 
	КонецЦикла;
	
	Нечётное = СтрДлина(СтрокаСистема) - Цел(СтрДлина(СтрокаСистема) / 2) * 2;
	Если Нечётное Тогда
		СтрокаСистема = "0" + СтрокаСистема;
	КонецЕсли;
	
	Возврат СтрокаСистема;
	
КонецФункции

#КонецОбласти

#Область ВзаимодействиеСКлиентом

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - Текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - Наименование реквизита формы.
//  ПутьКДанным                - Строка - Путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//  ИдентификаторНазначения    - УникальныйИдентификатор - Позволяет точно указать,
//                               к какой форме должно быть "привязано" сообщение.
//  ЭтоОбъект                  - Булево - Устанавливает на основе переданного объекта свойства ПутьКДанным и КлючДанных.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",		
		Отказ = Ложь,
		Знач ИдентификаторНазначения = "",
		Знач ЭтоОбъект = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст		  = ТекстСообщенияПользователю;
	Сообщение.Поле		  = Поле;
	Сообщение.ПутьКДанным = ПутьКДанным;	
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторНазначения) = Тип("УникальныйИдентификатор") Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДанныхWEB

Процедура ВыполнитьЕдиничныйЗапрос(КодСостояния, Ответ) Экспорт
	
	Если ТипЗнч(ЭтотОбъект.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Артикул = ЭтотОбъект.Номенклатура.Артикул; 
		
		Если ЗначениеЗаполнено(Артикул) Тогда
			
			// Устаревший адресс
			//ЭтотОбъект.HTTPАдресРесурса = "api/XML/getbasicdata?accessCode=" + ЭтотОбъект.АвторизационныйКлюч + "&commercialRef=" + Артикул;		
			ЭтотОбъект.HTTPАдресРесурса = "new-api/XML/getbasicdata?accessCode=" + СокрЛП(ЭтотОбъект.АвторизационныйКлюч) + "&commercialRef=" + СокрЛП(Артикул);
			
			РезультатGetЗапрос = ВыполнитьGetЗапрос(ПолучитьСтруктуруПараметровСоединения(), ПолучитьСтруктуруПараметровЗапроса());
			
			КодСостояния = РезультатGetЗапрос.HTTPОтвет.КодСостояния;
			
			Ответ = РезультатGetЗапрос.ТекстОтвета;
			
			ПрочитатьФайлXMLЧерезDOM(РезультатGetЗапрос.ИмяФайлаОтвета);
			
			Попытка
				УдалитьФайлы(РезультатGetЗапрос.ИмяФайлаОтвета);
			Исключение
				СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки; 	
			
		Иначе
			
			СообщитьПользователю("Не заполнен ""Артикул"" в номенклатуре: " + Строка(ЭтотОбъект.Номенклатура) + "!");
			
		КонецЕсли;
		
	Иначе
		
		СообщитьПользователю("Выбран не подходящий тип для единичного запроса в элементе ""Номенклатура""!");
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыполнитьГрупповойЗапрос(КодСостояния, Ответ) Экспорт
	
	Если ТипЗнч(ЭтотОбъект.Номенклатура) = Тип("СписокЗначений") Тогда
		
		СтрокаАртикулов = "";
		
		Для Каждого Элемент Из ЭтотОбъект.Номенклатура Цикл 
			
			Артикул = Элемент.Значение.Артикул; 
			
			Если ЗначениеЗаполнено(Артикул) Тогда
				
				СтрокаАртикулов = СтрокаАртикулов + ?(СтрокаАртикулов = "", СокрЛП(Артикул), "," + СокрЛП(Артикул)); 	
				
			Иначе
				
				Сообщить("Не заполнен ""Артикул"" в номенклатуре: " + Строка(Элемент.Значение) + "!");
				
			КонецЕсли;			
						
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаАртикулов) Тогда
			
			// Устаревший адресс
			//ЭтотОбъект.HTTPАдресРесурса = "api/XML/getbasicdata?accessCode=" + ЭтотОбъект.АвторизационныйКлюч + "&commercialRef=" + Артикул;		
			ЭтотОбъект.HTTPАдресРесурса = "new-api/XML/getbasicdata?accessCode=" + СокрЛП(ЭтотОбъект.АвторизационныйКлюч) + "&commercialRef=" + СокрЛП(СтрокаАртикулов);
			
			РезультатGetЗапрос = ВыполнитьGetЗапрос(ПолучитьСтруктуруПараметровСоединения(), ПолучитьСтруктуруПараметровЗапроса());
			
			КодСостояния = РезультатGetЗапрос.HTTPОтвет.КодСостояния;
			
			Ответ = РезультатGetЗапрос.ТекстОтвета;
			
			ПрочитатьФайлXMLЧерезDOM(РезультатGetЗапрос.ИмяФайлаОтвета);
			
			Попытка
				УдалитьФайлы(РезультатGetЗапрос.ИмяФайлаОтвета);
			Исключение
				СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки; 	
			
		Иначе
			
			СообщитьПользователю("Отсутствуют артикулы для загрузки!");
			
		КонецЕсли;
	
	Иначе
		
		СообщитьПользователю("Выбран не подходящий тип для группового запроса в элементе ""Номенклатура""!");
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПрочитатьФайлXMLЧерезDOM(ПутьКФайлу) Экспорт 
 
	// Разбор документа через DOM (document object model)
	// https://ru.wikipedia.org/wiki/Document_Object_Model
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ПутьКФайлу);
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер);
	
	Для Каждого Элемент0 Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		
		// Проверка на успешную загрузку
		Если Элемент0.ИмяУзла = "result" Тогда
			
			Если Элемент0.ТекстовоеСодержимое = "success" Тогда
				// Файл загрузился корректно!
				Продолжить;	
			Иначе
				Прервать;
				СообщитьПользователю("Файл содержит ошибки!");
			КонецЕсли;
			
			// Данные по запрошенному списку номенклатуры
		ИначеЕсли Элемент0.ИмяУзла = "data" Тогда
			
			// Список элементов номенклатуры
			Для Каждого Элемент1 Из Элемент0.ДочерниеУзлы Цикл
				
				// Элемент номенклатуры
				Если Элемент1.ИмяУзла = "reference" Тогда
					
					ТекущийАртикул = "";
					ТекущаяНоменклатура = ПолучитьПустуюНоменклатуру();
					ТекущееНаименование = "";
					
					// Свойства элемента номенклатуры
					Для Каждого Элемент2 Из Элемент1.ДочерниеУзлы Цикл
						
						// Артикул номенклатуры
						Если Элемент2.ИмяУзла = "commercialRef" Тогда
							
							ТекущийАртикул = СокрЛП(Элемент2.ТекстовоеСодержимое);
							
							ТекущаяНоменклатура = НайтиНоменклатуруПоАртикулу(ТекущийАртикул);
							
							// Наименование номенклатуры	
						ИначеЕсли Элемент2.ИмяУзла = "description" Тогда
							
							ТекущееНаименование = СокрЛП(Элемент2.ТекстовоеСодержимое);
							
							// Контейнер изображений номенклатуры	
						ИначеЕсли Элемент2.ИмяУзла = "images" Тогда
							
							// Список изображений номенклатуры	
							Для Каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл
								
								// Элемент изображение номенклатуры
								Если Элемент3.ИмяУзла = "image" Тогда
									
									ТекущаяСсылкаНаФайл			  = "";
									ТекущийРазмерСсылкиНаФайл	  = "";
									ТекущееРасширениеСсылкиНаФайл = "";
									
									// Свойства элемента изображения номенклатуры
									Для Каждого Элемент4 Из Элемент3.ДочерниеУзлы Цикл
										
										// Ссылка на файл изображения номенклатуры
										Если Элемент4.ИмяУзла = "url" Тогда
											
											ТекущаяСсылкаНаФайл = Элемент4.ТекстовоеСодержимое;
											
											// Размер файла изображения номенклатуры
										ИначеЕсли Элемент4.ИмяУзла = "size" Тогда
											
											ТекущийРазмерСсылкиНаФайл = Элемент4.ТекстовоеСодержимое;
											
											// Тип файла изображения номенклатуры
										ИначеЕсли Элемент4.ИмяУзла = "type" Тогда
											
											ТекущееРасширениеСсылкиНаФайл = Элемент4.ТекстовоеСодержимое;
											
										КонецЕсли;
										
									КонецЦикла;
									
									// Загружаем изображение
									Если ЗначениеЗаполнено(ТекущаяСсылкаНаФайл) И ЗначениеЗаполнено(ТекущаяНоменклатура) Тогда
										
										ЗагрузитьФайлНоменклатуры(ТекущаяНоменклатура, ТекущаяСсылкаНаФайл);
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
							// Контейнер файлов сертификатов номенклатуры	
						ИначеЕсли Элемент2.ИмяУзла = "certificates" Тогда
							
							// Список файлов сертификатов номенклатуры	
							Для Каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл
								
								// Элемент файл-сертификат номенклатуры
								Если Элемент3.ИмяУзла = "certificate" Тогда
									
									ТекущаяСсылкаНаСертификат = "";
									ТекущаяДатаОбновления	  = Дата("00010101");
									
									// Свойства элемента файл-сертификат номенклатуры
									Для Каждого Элемент4 Из Элемент3.ДочерниеУзлы Цикл
										
										// Ссылка на файл-сертификат номенклатуры
										Если Элемент4.ИмяУзла = "url" Тогда
											
											ТекущаяСсылкаНаСертификат = Элемент4.ТекстовоеСодержимое;
											
											// Дата обновления файла-сертификата номенклатуры
										ИначеЕсли Элемент4.ИмяУзла = "update_date" Тогда
											
											ТекущаяДатаОбновления = Элемент4.ТекстовоеСодержимое;
											
										КонецЕсли;
										
									КонецЦикла;
									
									// Загружаем сертификат										
									Если ЗначениеЗаполнено(ТекущаяСсылкаНаСертификат) И ЗначениеЗаполнено(ТекущаяНоменклатура) Тогда
										
										ЗагрузитьФайлНоменклатуры(ТекущаяНоменклатура, ТекущаяСсылкаНаСертификат, ТекущаяДатаОбновления);
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
							// Контейнер свойств номенклатуры по ЕТИМ	
						ИначеЕсли Элемент2.ИмяУзла = "etim" Тогда
							
							// Список версий номенклатуры по ЕТИМ	
							Для Каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл
								
								// Контейнер свойств номенклатуры по ЕТИМ версии 6(ранее были и другие, вероятно)	
								Если Элемент3.ИмяУзла = "etim6" Тогда
									
									// Список свойств номенклатуры по ЕТИМ версии 6(ранее были и другие, вероятно)	
									Для Каждого Элемент4 Из Элемент3.ДочерниеУзлы Цикл
										
										// Контейнер свойства "Класс" номенклатуры
										Если Элемент4.ИмяУзла = "class" Тогда
											
											ТекущийКодКласса			  = "";
											ТекущийЕТИМ					  = Справочники.Рин1_ГруппыКлассыETIM.ПустаяСсылка();
											ТекущееНаименованиеКласса	  = "";
											//ТекущийДополнительныйРеквизит = ПолучитьТекущийДополнительныйРеквизит("Класс");
											
											// Список реквизитов свойства "Класс" номенклатуры
											Для Каждого Элемент5 Из Элемент4.ДочерниеУзлы Цикл
												
												// Код "Класса" номенклатуры
												Если Элемент5.ИмяУзла = "id" Тогда
													
													ТекущийКодКласса = Элемент5.ТекстовоеСодержимое;
													
													// Наименование "Класса" номенклатуры
												ИначеЕсли Элемент5.ИмяУзла = "descriptionRu" Тогда
													
													ТекущееНаименованиеКласса = Элемент5.ТекстовоеСодержимое;													
													
												КонецЕсли;
												
											КонецЦикла;
											
											ТекущийЕТИМ_Класс = ПолучитьТекущийЕТИМ_Классы(ТекущийКодКласса, Элемент5.ТекстовоеСодержимое);
											
											ОбработатьКлассНоменклатуры(ТекущаяНоменклатура, ТекущийЕТИМ_Класс, ТекущееНаименованиеКласса);													
											
											// Контейнер свойства "Функции" номенклатуры
										ИначеЕсли Элемент4.ИмяУзла = "features" Тогда
											
											// Список реквизитов свойства "Функции" номенклатуры
											Для Каждого Элемент5 Из Элемент4.ДочерниеУзлы Цикл
												
												// Контейнер реквизита "Функция" свойства "Функции" номенклатуры
												Если Элемент5.ИмяУзла = "feature" Тогда
													
													ТекущийКодСвойства = "";
													ТекущийЕТИМ = Справочники.Рин1_ГруппыКлассыETIM.ПустаяСсылка();
													ТекущееНаименованиеСвойства = "";
													ТекущийДополнительныйРеквизит = ПолучитьПустойДополнительныйРеквизит();
													ТекущийКодЗначенияСвойства = "";
													ЕстьЕдиницаИзмерения = Ложь;
													
													ТекущееНаименованиеЗначенияСвойстваРусское = "";
													ТекущийКодЕдиницыИзмерения = "";
													ТекущееНаименованиеЕдиницыИзмеренияРусское = "";													
													РезультатНаименованиеСвойства = "";
													
													// Список свойств реквизита "Функция" свойства "Функции" номенклатуры
													Для Каждого Элемент6 Из Элемент5.ДочерниеУзлы Цикл
														
														// Код "Функции"
														Если Элемент6.ИмяУзла = "id" Тогда
															
															ТекущийКодСвойства = Элемент6.ТекстовоеСодержимое;
															
															// Наименование "Функции"
														ИначеЕсли Элемент6.ИмяУзла = "description" Тогда
															
															ТекущееНаименованиеСвойства = СокрЛП(Элемент6.ТекстовоеСодержимое);
															
															// Код значение "Функции"
														ИначеЕсли Элемент6.ИмяУзла = "value" Тогда
															
															ТекущийКодЗначенияСвойства = СокрЛП(Элемент6.ТекстовоеСодержимое);
															
															// Русское наименование значения "Функции"
														ИначеЕсли Элемент6.ИмяУзла = "valueDescriptionRu" Тогда
															
															ТекущееНаименованиеЗначенияСвойстваРусское = СокрЛП(Элемент6.ТекстовоеСодержимое);
															
															// Английское наименование значения "Функции"
														ИначеЕсли Элемент6.ИмяУзла = "valueDescriptionEn" Тогда
															
															ТекущееНаименованиеЗначенияСвойстваАнглийское = СокрЛП(Элемент6.ТекстовоеСодержимое);
															
															// Контейнер реквизита "Единица измерения" реквизита "Функция" свойства "Функции" номенклатуры
														ИначеЕсли Элемент6.ИмяУзла = "unit" Тогда
															
															// Список свойств реквизита "Единица измерения" реквизита "Функция" свойства "Функции" номенклатуры
															Для Каждого Элемент7 Из Элемент6.ДочерниеУзлы Цикл
																
																// Код "Единицы измерения"
																Если Элемент7.ИмяУзла = "id" Тогда
																	
																	ТекущийКодЕдиницыИзмерения = СокрЛП(Элемент7.ТекстовоеСодержимое);
																	
																	// Русское наименование "Единицы измерения"
																ИначеЕсли Элемент7.ИмяУзла = "description_ru" Тогда
																	
																	ТекущееНаименованиеЕдиницыИзмеренияРусское = СокрЛП(Элемент7.ТекстовоеСодержимое);
																	
																	// Английское наименование "Единицы измерения"
																ИначеЕсли Элемент7.ИмяУзла = "description_en" Тогда
																	
																	ТекущееНаименованиеЕдиницыИзмеренияАнглийское = СокрЛП(Элемент7.ТекстовоеСодержимое);
																	
																КонецЕсли;
																
															КонецЦикла;
															
														КонецЕсли;
														
													КонецЦикла;
													
													// Анализ полченных данных
													ТекущийЕТИМ = ПолучитьТекущийЕТИМ_Свойства(ТекущийЕТИМ_Класс, ТекущийКодСвойства, ТекущееНаименованиеСвойства);
													ТекущийДополнительныйРеквизит = ТекущийКодЗначенияСвойства;//ПолучитьТекущийДополнительныйРеквизит(ТекущееНаименованиеСвойства);
													
													ЕстьЕдиницаИзмерения = ЗначениеЗаполнено(ТекущееНаименованиеЕдиницыИзмеренияРусское);																		
													
													Если ПустаяСтрока(ТекущееНаименованиеСвойства) Тогда
														
														ТекстСообщения = "Произошла ошибка разбора свойств артикула: " + ТекущийАртикул + ", код ЕТИМ: " + ТекущийКодСвойства + Символы.ПС + "Сообщите производителю о проблеме!";
														
														СообщитьПользователю(ТекстСообщения);														
														
													Иначе
														
														Если ЗначениеЗаполнено(ТекущееНаименованиеЗначенияСвойстваРусское) Тогда
															
															РезультатНаименованиеСвойства = ?(ЕстьЕдиницаИзмерения, ТекущееНаименованиеЗначенияСвойстваРусское + " " + ТекущееНаименованиеЕдиницыИзмеренияРусское, ТекущееНаименованиеЗначенияСвойстваРусское); 									
															
															ОбработатьТекущееСвойствоНоменклатуры(ТекущаяНоменклатура, ТекущийЕТИМ_Класс, ТекущийЕТИМ, ТекущийДополнительныйРеквизит, РезультатНаименованиеСвойства);
															
														КонецЕсли;
														
														Если ЗначениеЗаполнено(ТекущийКодЕдиницыИзмерения) Тогда
															
															ОбработатьТекущееСвойствоНоменклатуры(ТекущаяНоменклатура, ТекущийЕТИМ_Класс, ТекущийЕТИМ, ТекущийКодЕдиницыИзмерения, ТекущееНаименованиеЕдиницыИзмеренияРусское);
															
														КонецЕсли;
														
													КонецЕсли;
													
												КонецЕсли;
												
											КонецЦикла;
											
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЦикла;
							
							// Список серий номенклатуры	
						ИначеЕсли Элемент2.ИмяУзла = "series" Тогда
							
							ТекущийЕТИМ = Справочники.Рин1_ГруппыКлассыETIM.ПустаяСсылка();
							
							ТекущийДополнительныйРеквизит = ПолучитьТекущийДополнительныйРеквизит("Серия");
							
							// Элемент серии номенклатуры	
							Для Каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл
								
								// Код серии номенклатуры
								Если Элемент3.ИмяУзла = "id" Тогда
									
									ТекущийКодСерии = СокрЛП(Элемент3.ТекстовоеСодержимое);
									
									// Наименование серии номенклатуры (значение дополнительного реквизита "Серия")
								ИначеЕсли Элемент3.ИмяУзла = "name" Тогда
									
									ТекущееНаименованиеСерии = СокрЛП(Элемент3.ТекстовоеСодержимое);									
									
								КонецЕсли;
								
							КонецЦикла;
							
							//ТекущийЕТИМ = ПолучитьТекущийЕТИМ_Свойства(ТекущийКодСерии);
							
							//ОбработатьТекущееСвойствоНоменклатуры(ТекущаяНоменклатура, ТекущийЕТИМ, ТекущийДополнительныйРеквизит, ТекущееНаименованиеСерии);
							
						КонецЕсли;
						
					КонецЦикла;                    
					
				КонецЕсли;                
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
 
    Парсер.Закрыть();
 
КонецПроцедуры

Функция ПолучитьПустуюНоменклатуру()
	
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции

Функция НайтиНоменклатуруПоАртикулу(Знач Артикул)
	
	ТекущаяНоменклатура = ПолучитьПустуюНоменклатуру();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущаяНоменклатура = Выборка.Ссылка;		
		
	КонецЦикла;
	
	Возврат ТекущаяНоменклатура;
	
КонецФункции

Функция ПолучитьТекущийЕТИМ_Классы(Знач КодЕТИМ, Знач ПредставлениеГруппыКласса)
	
	ТекущийЕТИМ = Справочники.Рин1_ГруппыКлассыETIM.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыETIM.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Рин1_ГруппыКлассыETIM КАК КодыETIM
	               |ГДЕ
	               |	КодыETIM.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", КодЕТИМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийЕТИМ = Выборка.Ссылка;		
		
	КонецЦикла;
	
	Если ТекущийЕТИМ = Справочники.Рин1_ГруппыКлассыETIM.ПустаяСсылка() Тогда
		
		ЕТИМОбъект = Справочники.Рин1_ГруппыКлассыETIM.СоздатьЭлемент();
		ЕТИМОбъект.Наименование = КодЕТИМ;
		ЕТИМОбъект.ПредставлениеГруппыКласса = ПредставлениеГруппыКласса;
		ЕТИМОбъект.Записать();
		
		ТекущийЕТИМ = ЕТИМОбъект.Ссылка;
		
	КонецЕсли;
		
	Возврат ТекущийЕТИМ;
	
КонецФункции

Функция ПолучитьТекущийЕТИМ_Свойства(Знач КодЕТИМ_Класс, Знач КодЕТИМ_Свойство, Знач ПредставлениеСвойства)
	
	ТекущийЕТИМ = Справочники.Рин1_СвойстваКлассаETIM.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Рин1_СвойстваКлассаETIM.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Рин1_СвойстваКлассаETIM КАК Рин1_СвойстваКлассаETIM
	               |ГДЕ
	               |	Рин1_СвойстваКлассаETIM.Наименование = &Наименование
	               |	И Рин1_СвойстваКлассаETIM.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", КодЕТИМ_Класс);
	Запрос.УстановитьПараметр("Наименование", КодЕТИМ_Свойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийЕТИМ = Выборка.Ссылка;		
		
	КонецЦикла;
	
	Если ТекущийЕТИМ = Справочники.Рин1_СвойстваКлассаETIM.ПустаяСсылка() Тогда
		
		ЕТИМОбъект = Справочники.Рин1_СвойстваКлассаETIM.СоздатьЭлемент();
		ЕТИМОбъект.Владелец = КодЕТИМ_Класс;
		ЕТИМОбъект.Наименование = КодЕТИМ_Свойство;
		ЕТИМОбъект.ПредставлениеСвойства = ПредставлениеСвойства;
		ЕТИМОбъект.Записать();
		
		ТекущийЕТИМ = ЕТИМОбъект.Ссылка;
		
	КонецЕсли;
		
	Возврат ТекущийЕТИМ;
	
КонецФункции

Функция ПолучитьПустойДополнительныйРеквизит()
	
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьОбщийНаборДополнительныхРеквизитов()
	
	Возврат Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
	
КонецФункции

Процедура ОбработатьКлассНоменклатуры(Знач ТекущаяНоменклатура, Знач ТекущийЕТИМ, Знач ЗначениеДополнительногоРеквизита)
	
	Если ЗначениеЗаполнено(ТекущаяНоменклатура) И ЗначениеЗаполнено(ТекущийЕТИМ) И не ЗначениеЗаполнено(ТекущаяНоменклатура.КлассETIM) Тогда 
		
		ОбъектНоменклатура = ТекущаяНоменклатура.ПолучитьОбъект();
		ОбъектНоменклатура.КлассETIM = ТекущийЕТИМ;
		ОбъектНоменклатура.Записать();
		
	Иначе
		
		СообщитьПользователю("Произошла ошибка, обратитесь к разработчику!");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьТекущееСвойствоНоменклатуры(Знач ТекущаяНоменклатура, Знач ТекущийЕТИМ_Класс, Знач ТекущийЕТИМ_Свойство, Знач ЕТИМ_Значение, Знач ПредставлениеЗначения)
	
	Если ЗначениеЗаполнено(ТекущаяНоменклатура) И ЗначениеЗаполнено(ТекущийЕТИМ_Класс) И ЗначениеЗаполнено(ТекущийЕТИМ_Свойство) И ЗначениеЗаполнено(ЕТИМ_Значение) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Рин1_СвойстваКлассаETIM.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Рин1_СвойстваКлассаETIM КАК Рин1_СвойстваКлассаETIM
		|ГДЕ
		|	Рин1_СвойстваКлассаETIM.Владелец = &Владелец
		|	И Рин1_СвойстваКлассаETIM.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Владелец", ТекущийЕТИМ_Класс);
		Запрос.УстановитьПараметр("Ссылка", ТекущийЕТИМ_Свойство);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если СтрНайти(ЕТИМ_Значение,"EV") > 0  Тогда		
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписи.Ссылка.Value.Найти(ЕТИМ_Значение,"Value_A") = Неопределено Тогда
						
						ЕТИМОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						ЕТИМОбъект.ТИП = Перечисления.Рин1_ТипСвойства.A;
						НовСтр = ЕТИМОбъект.Value.Добавить();
						НовСтр.Value_A = ЕТИМ_Значение;
						НовСтр.ПредставлениеЗначения = ПредставлениеЗначения;
						ЕТИМОбъект.Записать();
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе 
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка.Value_N) Тогда
						
						ЕТИМОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						ЕТИМОбъект.ТИП = Перечисления.Рин1_ТипСвойства.N;
						ЕТИМОбъект. Value_N = ЕТИМ_Значение;
						ЕТИМОбъект. ЕдиницаИзмерения = ПредставлениеЗначения;
						ЕТИМОбъект.Записать();
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СообщитьПользователю("Произошла ошибка загрузки значения свойства, обратитесь к разработчику!");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекущийДополнительныйРеквизит(Знач НаименованиеДополнительногоРеквизита)
	
	ТекущийДополнительныйРеквизит = ПолучитьПустойДополнительныйРеквизит();
	НаборСвойств				  = ПолучитьОбщийНаборДополнительныхРеквизитов();
	ТекущееНаименование			  = НаименованиеДополнительногоРеквизита + " (" + НаборСвойств.Наименование + ")";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыИСведения.Ссылка
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	               |	И ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств
	               |	И ДополнительныеРеквизитыИСведения.Наименование = &ТекущееНаименование";
	
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеДополнительногоРеквизита);
	Запрос.УстановитьПараметр("НаборСвойств",		  НаборСвойств);
	Запрос.УстановитьПараметр("ТекущееНаименование",  ТекущееНаименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийДополнительныйРеквизит = Выборка.Ссылка;		
		
	КонецЦикла;
	
	Если ТекущийДополнительныйРеквизит = ПолучитьПустойДополнительныйРеквизит() Тогда
		
		ДополнительныйРеквизитСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор);
		
		ДополнительныйРеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		ДополнительныйРеквизитОбъект.УстановитьСсылкуНового(ДополнительныйРеквизитСсылка);
		ДополнительныйРеквизитОбъект.Наименование = ТекущееНаименование;
		ДополнительныйРеквизитОбъект.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
		ДополнительныйРеквизитОбъект.Виден = Истина;
		ДополнительныйРеквизитОбъект.ДополнительныеЗначенияИспользуются = Истина;
		ДополнительныйРеквизитОбъект.Доступен = Истина;
		ДополнительныйРеквизитОбъект.Заголовок = НаименованиеДополнительногоРеквизита;
		ДополнительныйРеквизитОбъект.НаборСвойств = НаборСвойств;
		ДополнительныйРеквизитОбъект.МногострочноеПолеВвода = 0;
		
		НовыйДополнительныйРеквизитСсылка = ДополнительныйРеквизитОбъект.ПолучитьСсылкуНового();
		
		НоваяСтрока = ДополнительныйРеквизитОбъект.ЗависимостиДополнительныхРеквизитов.Добавить();
		НоваяСтрока.ЗависимоеСвойство = "Виден";
		НоваяСтрока.Реквизит		  = НовыйДополнительныйРеквизитСсылка;
		НоваяСтрока.Условие			  = "Заполнено";
		НоваяСтрока.Значение		  = Неопределено;
		
		НоваяСтрока = ДополнительныйРеквизитОбъект.ЗависимостиДополнительныхРеквизитов.Добавить();
		НоваяСтрока.ЗависимоеСвойство = "Доступен";
		НоваяСтрока.Реквизит		  = "ЭтоГруппа";
		НоваяСтрока.Условие			  = "Равно";
		НоваяСтрока.Значение		  = Истина;
		
		ДополнительныйРеквизитОбъект.Записать();
		
		НаборСвойствОбъект = НаборСвойств.ПолучитьОбъект();
		
		НоваяСтрока = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = ДополнительныйРеквизитОбъект.Ссылка;
		
		НаборСвойствОбъект.Записать();
		
		ТекущийДополнительныйРеквизит = ДополнительныйРеквизитОбъект.Ссылка;
		
	КонецЕсли;
		
	Возврат ТекущийДополнительныйРеквизит;
	
КонецФункции

Процедура СоздатьНаборЗаписейСвойстваКодовЕТИМ(Знач ТекущийЕТИМ, Знач ДополнительныйРеквизит)
	
	НаборЗаписей = РегистрыСведений.Херши_СвойстваКодовETIM.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодETIM.Установить(ТекущийЕТИМ);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НоваяЗапись = НаборЗаписей.Добавить();
    НоваяЗапись.КодETIM = ТекущийЕТИМ;
    НоваяЗапись.ДополнительныйРеквизит = ДополнительныйРеквизит;

	НаборЗаписей.Записать();

КонецПроцедуры

Функция ПолучитьПустоеЗначенияСвойствОбъектов()
	
	Возврат Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьТекущееЗначениеСвойстваНоменклатуры(Знач ДополнительныйРеквизит, Знач ЗначениеДополнительногоРеквизита)
	
	ТекущееЗначениеСвойстваНоменклатуры = ПолучитьПустоеЗначенияСвойствОбъектов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Ссылка
	               |ИЗ
	               |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Владелец = &ДополнительныйРеквизит
	               |	И ЗначенияСвойствОбъектов.Наименование = &ЗначениеДополнительногоРеквизита";
	
	Запрос.УстановитьПараметр("ДополнительныйРеквизит", ДополнительныйРеквизит);
	Запрос.УстановитьПараметр("ЗначениеДополнительногоРеквизита", ЗначениеДополнительногоРеквизита);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущееЗначениеСвойстваНоменклатуры = Выборка.Ссылка;
		
	КонецЦикла;
	
	Если ТекущееЗначениеСвойстваНоменклатуры = ПолучитьПустоеЗначенияСвойствОбъектов() Тогда
		
		ЗначенияСвойствОбъектовОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		ЗначенияСвойствОбъектовОбъект.Наименование = ЗначениеДополнительногоРеквизита;
		ЗначенияСвойствОбъектовОбъект.ПолноеНаименование = ЗначениеДополнительногоРеквизита;
		ЗначенияСвойствОбъектовОбъект.Владелец = ДополнительныйРеквизит;
		ЗначенияСвойствОбъектовОбъект.Записать();
		
		ТекущееЗначениеСвойстваНоменклатуры = ЗначенияСвойствОбъектовОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат ТекущееЗначениеСвойстваНоменклатуры; 
	
КонецФункции

Процедура ОбработатьНоменклатуру(Знач ТекущаяНоменклатура, Знач ДополнительныйРеквизит, Знач ТекущееЗначениеСвойстваНоменклатуры)
	
	Если ЗначениеЗаполнено(ТекущаяНоменклатура) И ЗначениеЗаполнено(ДополнительныйРеквизит) Тогда 
		
		НоменклатураОбъект = ТекущаяНоменклатура.ПолучитьОбъект();
		
		Если НоменклатураОбъект <> Неопределено Тогда			
			
			НужноЗаписать = Ложь;
			
			НайденнаяСтрока = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(ДополнительныйРеквизит, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				НужноЗаписать = Истина;
				НоваяСтрока = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
				НоваяСтрока.Свойство = ДополнительныйРеквизит;
				НоваяСтрока.Значение = ТекущееЗначениеСвойстваНоменклатуры;
			Иначе
				Если Не НайденнаяСтрока.Значение = ТекущееЗначениеСвойстваНоменклатуры Тогда
					НужноЗаписать = Истина;
					НайденнаяСтрока.Значение = ТекущееЗначениеСвойстваНоменклатуры;
				КонецЕсли;
			КонецЕсли;
			
			Если НужноЗаписать Тогда
				НоменклатураОбъект.Записать();					
			КонецЕсли;

		Иначе
			
			СообщитьПользователю("Не удалось определить номенклатуру!");		
			
		КонецЕсли;		
		
	Иначе
		
		СообщитьПользователю("Произошла ошибка, обратитесь к разработчику!");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьФайлНоменклатуры(Знач ТекущаяНоменклатура, Знач ТекущаяСсылкаНаФайл, Знач ТекущаяДатаОбновления = "01.01.0001")
	
	Если СтрНайти(ТекущаяСсылкаНаФайл,".jpeg") > 0 или СтрНайти(ТекущаяСсылкаНаФайл,".png") > 0 Тогда
		
		ПутьИИмя = ТекущаяСсылкаНаФайл; 
		Путь = "";
		Имя  = "";
		ПозСлэш = СтрНайти(ПутьИИмя, "/");
		Пока ПозСлэш > 0 Цикл
			Путь = Путь + Сред(ПутьИИмя, 1, ПозСлэш);
			ПутьИИмя = Сред(ПутьИИмя, ПозСлэш + 1);
			ПозСлэш = СтрНайти(ПутьИИмя, "/");
		КонецЦикла;
		Имя = ПутьИИмя;
		
		ИмяВременногоФайла = КаталогВременныхФайлов() + Имя; 
		
		Попытка
			КопироватьФайл(ТекущаяСсылкаНаФайл, ИмяВременногоФайла);  
		Исключение
			//Сообщить("Проверьте права доступа на папку для временных файлов! " + ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			ВремяИзмененияМестное = Дата(Прав(ТекущаяДатаОбновления, 4) + Сред(ТекущаяДатаОбновления, 4, 2) + Лев(ТекущаяДатаОбновления, 2));
		Исключение
			ВремяИзмененияМестное = Дата("00010101");
		КонецПопытки;
		
		ВремяИзмененияУниверсальное = УниверсальноеВремя(ВремяИзмененияМестное); 
		
		ВыбранныйФайл = Новый Файл(ИмяВременногоФайла);
		
		ИмяБезРасширения = ВыбранныйФайл.ИмяБезРасширения;
		РасширениеБезТочки = СтрЗаменить(ВыбранныйФайл.Расширение, ".", "");
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
		РазмерФайла = ДвоичныеДанные.Размер();
		
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ТекущаяНоменклатура.УникальныйИдентификатор()); 
		
		ОбновитьФайл = ТребуетсяОбновлениеФайла(ТекущаяНоменклатура, ИмяБезРасширения, РасширениеБезТочки, РазмерФайла, ВремяИзмененияМестное);
		
		Если ОбновитьФайл.Требуется = Неопределено Тогда
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор",					   Пользователи.ТекущийПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов",			   ТекущаяНоменклатура);
			ПараметрыФайла.Вставить("ИмяБезРасширения",			   ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки",		   РасширениеБезТочки);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
			
			ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
			
		ИначеЕсли ОбновитьФайл.Требуется = Истина Тогда
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",	ВремяИзмененияУниверсальное);
			
			ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ОбновитьФайл.ПрисоединенныйФайл, ИнформацияОФайле);
			
		КонецЕсли;
		
		ВыбранныйФайл = Неопределено;
		
		УдалитьФайлы(ИмяВременногоФайла);	
		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяОбновлениеФайла(Знач ВладелецФайла, Знач НаименованиеФайла, Знач РасширениеФайла, Знач РазмерФайла, Знач ДатаМодификацииУниверсальная)
	
	ОбновитьФайл = Новый Структура;
	ОбновитьФайл.Вставить("Требуется",			Неопределено);
	ОбновитьФайл.Вставить("ПрисоединенныйФайл", Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НоменклатураПрисоединенныеФайлы.Ссылка,
	               |	НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная,
	               |	НоменклатураПрисоединенныеФайлы.Размер
	               |ИЗ
	               |	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	               |ГДЕ
	               |	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	               |	И НоменклатураПрисоединенныеФайлы.Наименование = &НаименованиеФайла
	               |	И НоменклатураПрисоединенныеФайлы.Расширение = &РасширениеФайла
	               |	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла",		ВладелецФайла);
	Запрос.УстановитьПараметр("НаименованиеФайла",	НаименованиеФайла);
	Запрос.УстановитьПараметр("РасширениеФайла",	РасширениеФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// У картинок нет даты модификации
		//ОбновитьФайл.Требуется			= Выборка.Размер <> РазмерФайла ИЛИ Выборка.ДатаМодификацииУниверсальная <> ДатаМодификацииУниверсальная;
		ОбновитьФайл.Требуется			= Выборка.Размер <> РазмерФайла;
		ОбновитьФайл.ПрисоединенныйФайл = Выборка.Ссылка;
		
	КонецЦикла;
		
	Возврат ОбновитьФайл;
	
КонецФункции

#КонецОбласти

#Область ОбработкаДанныхКаталогов

Процедура ПрочитатьФайлXMLЧерезDOM_Классы(ПутьКФайлу) Экспорт 
	
	// Разбор документа через DOM (document object model)
	// https://ru.wikipedia.org/wiki/Document_Object_Model	
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ПутьКФайлу);
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер);
	
	Для Каждого Элемент0 Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		
		// Проверка на успешную загрузку
		Если не Элемент0.ИмяУзла = "element" Тогда
			Прервать;
			СообщитьПользователю("Файл содержит ошибки! Не получен элемент!");
		КонецЕсли;
		
		СписокСинонимов = Новый СписокЗначений;
		
		Для каждого Элемент1 Из Элемент0.ДочерниеУзлы Цикл			
			
			//грузим второй вид файла - классы и остальное
			Если Элемент1.ИмяУзла = "classId" Тогда
				//создадим группу если ранее не грузили (без представления)
				Если Элемент1.СледующийСоседний.ИмяУзла = "groupId" Тогда
					Группа = Справочники.Рин1_ГруппыКлассыETIM.НайтиПоНаименованию(СокрЛП(Элемент1.СледующийСоседний.ТекстовоеСодержимое)); 
					Если Группа = Справочники.Рин1_ГруппыКлассыETIM.ПустаяСсылка() Тогда //не нашли
						Попытка					
							Группа = Справочники.Рин1_ГруппыКлассыETIM.СоздатьГруппу(); 
							Группа.Наименование = Элемент1.СледующийСоседний.ТекстовоеСодержимое;
							Группа.Записать();
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				//запишим класс
				Класс = Справочники.Рин1_ГруппыКлассыETIM.НайтиПоНаименованию(СокрЛП(Элемент1.ТекстовоеСодержимое)); 
				Если Класс = Справочники.Рин1_ГруппыКлассыETIM.ПустаяСсылка() Тогда  //не нашли
					Класс = Справочники.Рин1_ГруппыКлассыETIM.СоздатьЭлемент(); 
					Класс.Наименование = Элемент1.ТекстовоеСодержимое;
					Класс.Родитель = Группа; 
				Иначе 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			//Наименование класса
			Если Элемент1.ИмяУзла = "descriptionRu" Тогда
				
				Попытка
					Класс.ПредставлениеГруппыКласса = Элемент1.ТекстовоеСодержимое; 
					Класс.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
			//Свойства класса
			Если Элемент1.ИмяУзла = "features"  Тогда
				Для каждого Элемент2 Из Элемент1.ДочерниеУзлы Цикл //список свойств
					
					Для каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл  //запись свойства
						
						Если Элемент3.ИмяУзла = "featureId" тогда
							Свойство = Справочники.Рин1_СвойстваКлассаETIM.НайтиПоНаименованию(СокрЛП(Элемент3.ТекстовоеСодержимое),Истина,,Класс.Ссылка);
							Если Свойство = Справочники.Рин1_СвойстваКлассаETIM.ПустаяСсылка() Тогда  //не нашли
								Свойство = Справочники.Рин1_СвойстваКлассаETIM.СоздатьЭлемент(); 
								Свойство.Наименование = Элемент3.ТекстовоеСодержимое;
								Свойство.Владелец = Класс.Ссылка;
							Иначе 
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						Если Элемент3.ИмяУзла = "descriptionRu" тогда //представление свойства
							Свойство.ПредставлениеСвойства = Элемент3.ТекстовоеСодержимое;
						КонецЕсли;
						Если Элемент3.ИмяУзла = "type" тогда  //тип свойства
							type = Элемент3.ТекстовоеСодержимое;
							Если type = "A" Тогда
								type = Перечисления.Рин1_ТипСвойства.A;
							ИначеЕсли type = "N" Тогда
								type = Перечисления.Рин1_ТипСвойства.N;								
							ИначеЕсли type = "R" Тогда
								type = Перечисления.Рин1_ТипСвойства.R;
							ИначеЕсли type = "L" Тогда
								type = Перечисления.Рин1_ТипСвойства.L;
							КонецЕсли;
							Свойство.ТИП = type;
						КонецЕсли;
						Если Элемент3.ИмяУзла = "unit" и не Элемент3.ТекстовоеСодержимое = "" тогда //единица измерения свойства
							Для каждого Элемент4 Из Элемент3.ДочерниеУзлы Цикл
								Если Элемент4.ИмяУзла = "descriptionRu" тогда
									Свойство.ЕдиницаИзмерения = Элемент4.ТекстовоеСодержимое;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Если Элемент3.ИмяУзла = "values"  тогда //значения свойства
							Для каждого Элемент5 Из Элемент3.ДочерниеУзлы Цикл   //в таблицу
								Для каждого Элемент6 Из Элемент5.ДочерниеУзлы  Цикл
									Если Элемент6.ИмяУзла = "valueId"  тогда
										НоваяСтрока = Свойство.Value.Добавить();
										НоваяСтрока.Value_A = Элемент6.ТекстовоеСодержимое;
									КонецЕсли;
									Если Элемент6.ИмяУзла = "descriptionRu"  тогда
										НоваяСтрока.ПредставлениеЗначения = Элемент6.ТекстовоеСодержимое;
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
						
						Попытка
							Свойство.Записать();
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;					   
						
					КонецЦикла;	
					
				КонецЦикла;				
				
			КонецЕсли;
			
			//Синоним класса
			Если Элемент1.ИмяУзла = "synonyms"  Тогда
				
				Для каждого Элемент7 Из Элемент1.ДочерниеУзлы Цикл				
					
					СписокСинонимов.Добавить(Элемент7.ТекстовоеСодержимое);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка			
			МассивЭлементов = СписокСинонимов.ВыгрузитьЗначения();
			Класс.Синонимы = СтрСоединить(МассивЭлементов,",");
			Класс.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьФайлXMLЧерезDOM_Группы(ПутьКФайлу) Экспорт 
	
	// Разбор документа через DOM (document object model)
	// https://ru.wikipedia.org/wiki/Document_Object_Model	
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ПутьКФайлу);
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер);
	
	Для Каждого Элемент0 Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		
		
		// Проверка на успешную загрузку
		Если не Элемент0.ИмяУзла = "element" Тогда
			Прервать;
			СообщитьПользователю("Файл содержит ошибки! Не получен элемент!");
		КонецЕсли;		
		
		КлассЗаписан = Ложь;
		СвойствоЗаписано = Ложь;
		
		Для каждого Элемент1 Из Элемент0.ДочерниеУзлы Цикл
			//грузим второй вид файла - классы и остальное
			Если Элемент1.ИмяУзла = "descriptionRu" Тогда
				Наименование = Элемент1.ТекстовоеСодержимое;
			КонецЕсли;	
			Если Элемент1.ИмяУзла = "groupId" Тогда
				//создадим группу если ранее не грузили
				Группа = Справочники.Рин1_ГруппыКлассыETIM.НайтиПоНаименованию(Элемент1.ТекстовоеСодержимое); 
				Если не ЗначениеЗаполнено(Группа) Тогда //не нашли
					Попытка					
						Группа = Справочники.Рин1_ГруппыКлассыETIM.СоздатьГруппу();
						Группа.Наименование = Элемент1.ТекстовоеСодержимое;
						Группа.ПредставлениеГруппыКласса = Наименование;
						Группа.Записать();
						Наименование = "";
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
