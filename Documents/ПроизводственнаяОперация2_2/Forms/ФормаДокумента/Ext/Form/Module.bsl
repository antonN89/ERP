
&НаКлиенте
Перем ЗаписываемЕслиЕстьРазницаМежду_ВременемВыполнения_И_ТрудозатратыИтого;

&НаКлиентеНаСервереБезКонтекста
&После("НастроитьЗависимыеЭлементыФормы")
Процедура Рин1_НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("Подразделение") ИЛИ Инициализация Тогда
		
		Формат = "ДФ='dd.MM.yyyy HH:mm'";
		
		Элементы.НачалоВыполнения.ФорматРедактирования = Формат;
		Элементы.ОкончаниеВыполнения.ФорматРедактирования = Формат;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_НачалоВыполненияНачалоВыбораПосле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаВремя",   Объект.НачалоВыполнения);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВыбораВремениНачала", ЭтотОбъект, ПараметрыФормы);
	ОткрытьФорму("ОбщаяФорма.Рин1_ФормаВводаДатыВремени", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОкончаниеВыполненияНачалоВыбораПосле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаВремя",   Объект.ОкончаниеВыполнения);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВыбораВремениОкончание", ЭтотОбъект, ПараметрыФормы);
	ОткрытьФорму("ОбщаяФорма.Рин1_ФормаВводаДатыВремени", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПослеЗакрытияВыбораВремениНачала(ВыбЭлемент, ДопПараметры)
	Если НЕ ВыбЭлемент = Неопределено Тогда
		Объект.НачалоВыполнения = ВыбЭлемент;
		ПосчитатьВремяВыполнения();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПослеЗакрытияВыбораВремениОкончание(ВыбЭлемент, ДопПараметры)
	Если НЕ ВыбЭлемент = Неопределено Тогда
		Объект.ОкончаниеВыполнения = ВыбЭлемент;
		ПосчитатьВремяВыполнения();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПосчитатьВремяВыполнения()
	
	Объект.ВремяВыполнения = (Объект.ОкончаниеВыполнения - Объект.НачалоВыполнения)/60;
	Если Объект.ОкончаниеВыполнения - Объект.НачалоВыполнения <= 0 Тогда
		Элементы.ГруппаВремяВыполнения.ЦветФона = WebЦвета.Красный;
	Иначе 
		Элементы.ГруппаВремяВыполнения.ЦветФона = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры // ПосчитатьВремяВыполнения()

&НаСервере
Процедура Рин1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Объект.ВремяВыполненияЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Минута;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаполнитьТрудозатратыПоИсполнителюПосле(Команда)
	
	//Если Объект.Трудозатраты.Количество() = 0 Тогда
	//	Сообщить("Заполните табличную часть видами работ. Заполнение не возможно!");
	//	Возврат;
	//КонецЕсли;
	
	Если Объект.ВремяВыполнения = 0 Тогда
		Сообщить("Не определено время выполнения. Заполнение не возможно!");
		Возврат;
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		Сообщить("Не определен исполнитель. Заполнение не возможно!");
		Возврат;
	КонецЕсли;	
	
	Если типзнч(Объект.Исполнитель) = Тип("СправочникСсылка.Бригады") Тогда
		Сообщить("Заполнение возможно для исполнителей физических лиц!");
		Возврат;
	КонецЕсли;	
	
	РабочихЧасов = ПолучитьВремяРаботыИсполнителя();
	
	Если РабочихЧасов = -2 Тогда
		Сообщить("Исполнитель это элемент справочника физические лица, которому должен соответствовать элемент справочника сотрудники. Соответствие отсутствует!");
		Возврат;
	КонецЕсли;
	
	Если РабочихЧасов = -1 Тогда
		Сообщить("Исполнителю не назначен график работы!");
		Возврат;
	КонецЕсли;
	
	Если РабочихЧасов = 0 Тогда
		Сообщить("График работы исполнителя не содержит рабочих часов!");
		Возврат;
	КонецЕсли;
	
	Тгр = Мин(РабочихЧасов*60,Объект.ВремяВыполнения);
	Тсверхурочно = Макс(0,Объект.ВремяВыполнения - Тгр);
	
	Т15 = 0;
	Т20 = 0;
	
	Если не Тсверхурочно = 0 Тогда
		Если Тсверхурочно > 60 Тогда
			Т15 = 60;
			Т20 = Макс(0,Тсверхурочно - Т15);
		Иначе 
			Т15 = Тсверхурочно; 
		КонецЕсли;
	КонецЕсли;
	
	ПВ = Новый Структура;
	ПВ.Вставить("Тгр",Тгр);
	Если не Т15 = 0 Тогда
		ПВ.Вставить("Т15",Т15);
	КонецЕсли;
	Если не Т20 = 0 Тогда
		ПВ.Вставить("Т20",Т20);		
	КонецЕсли;
	
	//ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросОРаспределении",ЭтотОбъект,ПВ),"Распределить время работы исполнителя по выбранным видам работ?",РежимДиалогаВопрос.ДаНет,0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОРаспределении(Результат, ПВ) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		//РаспределитьВремяРаботПоВидамРабот(Ложь,ПВ);
		Возврат;
	КонецЕсли;
	//распрелелим Тг по видам работ и добавим переработку
	//РаспределитьВремяРаботПоВидамРабот(Истина,ПВ);
	
КонецПроцедуры // ПослеОтветаНаВопрос()

&НаСервере
Функция ПолучитьВремяРаботыИсполнителя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Рин1_НазначенияСотрудниковВРЦСрезПоследних.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.Рин1_НазначенияСотрудниковВРЦ.СрезПоследних(
	|			,
	|			ВРЦ.Подразделение = &Подразделение
	|				И НЕ ОсвободитьОтНазначений
	|				И Сотрудник.ФизическоеЛицо = &ФизическоеЛицо) КАК Рин1_НазначенияСотрудниковВРЦСрезПоследних";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.Исполнитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		Сотрудник = РезультатЗапроса.Выгрузить()[0].Сотрудник;
	Иначе 
		Возврат(-2);
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Ложь,Сотрудник,"ГрафикРаботы",Объект.Дата,);
	
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат(-1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0) КАК РабочихЧасов
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Дата = &Дата
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ВидУчетаВремени";
	
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ВидУчетаВремени", Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка"));
	Запрос.УстановитьПараметр("ГрафикРаботы", КадровыеДанные[0].ГрафикРаботы);
	
	РезультатЗапроса = Запрос.Выполнить();
	//проверим сколько рабочих часов по графику
	Если не РезультатЗапроса.Пустой() Тогда
		РабочихЧасов = РезультатЗапроса.Выгрузить()[0].РабочихЧасов;
	Иначе 
		РабочихЧасов = 0;
	КонецЕсли;
	
	Возврат РабочихЧасов;
	
КонецФункции // ПолучитьВремяРаботыИсполнителя()

&НаКлиенте
Процедура Рин1_ДобавитьВидРаботВместо(Команда)
	
	Если Объект.ВремяВыполнения = 0 Тогда
		Сообщить("Не определено время выполнения. Заполнение не возможно!");
		Возврат;
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		Сообщить("Не определен исполнитель. Заполнение не возможно!");
		Возврат;
	КонецЕсли;	
	
	Если типзнч(Объект.Исполнитель) = Тип("СправочникСсылка.Бригады") Тогда
		Сообщить("Заполнение возможно для исполнителей физических лиц!");
		Возврат;
	КонецЕсли;
	
	РабочихЧасов = ПолучитьВремяРаботыИсполнителя();
	
	Если РабочихЧасов = -2 Тогда
		Сообщить("Исполнитель это элемент справочника физические лица, которому должен соответствовать элемент справочника сотрудники. Соответствие отсутствует!");
		Возврат;
	КонецЕсли;
	
	Если РабочихЧасов = -1 Тогда
		Сообщить("Исполнителю не назначен график работы!");
		Возврат;
	КонецЕсли;
	
	Если РабочихЧасов = 0 Тогда
		Сообщить("График работы исполнителя не содержит рабочих часов!");
		Возврат;
	КонецЕсли;
	
	Тгр = Мин(РабочихЧасов*60,Объект.ВремяВыполнения);
	Тсверхурочно = Макс(0,Объект.ВремяВыполнения - Тгр);
	
	Т15 = 0;
	Т20 = 0;
	
	Если не Тсверхурочно = 0 Тогда
		Если Тсверхурочно > 60 Тогда
			Т15 = 60;
			Т20 = Макс(0,Тсверхурочно - Т15);
		Иначе 
			Т15 = Тсверхурочно; 
		КонецЕсли;
	КонецЕсли;
	
	Адрес = ПолучитьАдрес();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Адрес",Адрес);
	ПараметрыФормы.Вставить("ВремяВыполнения",Объект.ВремяВыполнения);
	ПараметрыФормы.Вставить("Тсверхурочно",Тсверхурочно);
	ПараметрыФормы.Вставить("Т15",Т15);
	ПараметрыФормы.Вставить("Т20",Т20);
	
	Форма = ОткрытьФорму("Документ.ПроизводственнаяОперация2_2.Форма.Рин1_ФормаПодбораТрудозатрат",ПараметрыФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработатьВыборВидовРабот",ЭтотОбъект,Параметры),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдрес()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственнаяОперация2_2Трудозатраты.ВидРабот КАК ВидРабот,
	|	ПроизводственнаяОперация2_2Трудозатраты.Количество КАК Количество
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2.Трудозатраты КАК ПроизводственнаяОперация2_2Трудозатраты
	|ГДЕ
	|	НЕ ПроизводственнаяОперация2_2Трудозатраты.ВидРабот.Предопределенный
	|	И ПроизводственнаяОперация2_2Трудозатраты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		Возврат ПоместитьВоВременноеХранилище(РезультатЗапроса.Выгрузить());
	Иначе 
		Возврат ПоместитьВоВременноеХранилище(Неопределено);
	КонецЕсли;
	
КонецФункции // ПолучитьАдрес()

&НаСервере
Процедура ОбработатьВыборВидовРабот(Результат,Параметры) Экспорт 
	//добавим выбранные виды работ в тч и переработку
	Если не Результат = Неопределено Тогда
		
		Объект.Трудозатраты.Очистить();
		
		СтруктураВозврата = ПолучитьИзВременногоХранилища(Результат);
		Объект.Трудозатраты.Загрузить(СтруктураВозврата.ВидыРабот);
		ОбщееКоличествоЧасов = СтруктураВозврата.ОбщееКоличествоЧасов;	
		СверхурочнаяРабота = СтруктураВозврата.СверхурочнаяРабота;	
				
		//добавим сверхурочную работу
		Если не СверхурочнаяРабота = 0 Тогда
			НовСтр = Объект.Трудозатраты.Добавить();
			НовСтр.ВидРабот = Справочники.ВидыРаботСотрудников.НайтиПоКоду("000000001");
			НовСтр.Количество = ?(СверхурочнаяРабота<=2,СверхурочнаяРабота,2);
			Если СверхурочнаяРабота - 2 > 0 Тогда
				НовСтр = Объект.Трудозатраты.Добавить();
				НовСтр.ВидРабот = Справочники.ВидыРаботСотрудников.НайтиПоКоду("000000002");
				НовСтр.Количество = СверхурочнаяРабота - 2;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборВидовРабот()

&НаСервере
Функция ПолучитьТрудоемкостьРаботПоВиду(ВидРабот)
	
	Возврат ВидРабот.Трудоемкость;
	
КонецФункции // ПолучитьКоличествоРаботПоВиду()

&НаСервере
Процедура РаспределитьВремяРаботПоВидамРабот(Распределить,ПВ)
	
	//удалим предопределенные виды работ - сверхурочка		
	КолВо = Объект.Трудозатраты.Количество()-1;
	ИндексСтроки = КолВо;
	Для счетчик = 0 по КолВо Цикл
		Строка = Объект.Трудозатраты.Получить(ИндексСтроки);
		Если Строка.ВидРабот.Предопределенный Тогда
			Объект.Трудозатраты.Удалить(Строка);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;	
	КонецЦикла;   
	
	//распределим время работ на виды работ
	Если Распределить Тогда
		Тгр = 0;
		ПВ.Свойство("Тгр",Тгр);
		ДоляРаспределения = Тгр/Объект.Трудозатраты.Количество();
		Для каждого Строка Из Объект.Трудозатраты Цикл
			Строка.Количество = ДоляРаспределения;
		КонецЦикла;
	КонецЕсли;
	
	//добавим сверхурочную работу
	Если ПВ.Свойство("Т15") Тогда
		НовСтр = Объект.Трудозатраты.Добавить();
		НовСтр.ВидРабот = Справочники.ВидыРаботСотрудников.НайтиПоКоду("000000001");
		ПВ.Свойство("Т15",НовСтр.Количество);
		Если ПВ.Свойство("Т20") Тогда
			НовСтр = Объект.Трудозатраты.Добавить();
			НовСтр.ВидРабот = Справочники.ВидыРаботСотрудников.НайтиПоКоду("000000002");
			ПВ.Свойство("Т20",НовСтр.Количество);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РаспределитьВремяРаботПоВидамРабот()

&НаКлиенте
Процедура Рин1_НачалоВыполненияПриИзмененииПосле(Элемент)
	ПосчитатьВремяВыполнения();
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОкончаниеВыполненияПриИзмененииПосле(Элемент)
	ПосчитатьВремяВыполнения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписываемЕслиЕстьРазницаМежду_ВременемВыполнения_И_ТрудозатратыИтого = Истина;
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры // ПослеЗакрытияВопроса()

&НаКлиенте
Процедура Рин1_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
	
	Если не ЗаписываемЕслиЕстьРазницаМежду_ВременемВыполнения_И_ТрудозатратыИтого и не Отказ и не Объект.ВремяВыполнения/60 = Объект.Трудозатраты.Итог("Количество") Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтотОбъект,ПараметрыЗаписи),"Время выполнения отличается от итогового времени выполнения в табличной части трудозатраты. Записать документ?",РежимДиалогаВопрос.ДаНет,0);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПриОткрытииПосле(Отказ)
	ЗаписываемЕслиЕстьРазницаМежду_ВременемВыполнения_И_ТрудозатратыИтого = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПредопределенный(ВидРабот)
	
	Возврат ВидРабот.Предопределенный;
	
КонецФункции // ЭтоПредопределенный(ВидРабот)

&НаКлиенте
Процедура Рин1_ТрудозатратыПриАктивизацииЯчейкиПосле(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТрудозатратыКоличество" Тогда
		ТекущаяСтрока = Элементы.трудозатраты.ТекущиеДанные;
		Если ЭтоПредопределенный(ТекущаяСтрока.ВидРабот) Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ТрудозатратыПередУдалениемПосле(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.трудозатраты.ТекущиеДанные;
	ПроверимПредопределенностьУдалимНужноеПоТЗ(ТекущаяСтрока.ВидРабот);	
	
КонецПроцедуры

&НаСервере
Процедура ПроверимПредопределенностьУдалимНужноеПоТЗ(ВидРабот)
	
	Если ВидРабот.Предопределенный Тогда
		
		Если ВидРабот.Код = "000000001" тогда
			
			Для каждого Строка Из Объект.Трудозатраты Цикл
				Если Строка.ВидРабот.Код = "000000002" Тогда
					Объект.Трудозатраты.Удалить(Строка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверимПредопределенностьУдалимНужноеПоТЗ()


