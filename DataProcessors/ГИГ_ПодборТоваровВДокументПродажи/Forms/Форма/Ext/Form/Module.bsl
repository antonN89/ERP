&НаКлиенте
Перем КэшированныеЗначения; //текущая номенклатура для передачи в обработчики ожидания

&НаКлиенте
Перем ОбрабатыватьВариантОбеспеченияОсобенно;

&НаКлиенте
Перем ВыполняетсяЗакрытие Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ДобавитьКолонкуНаСервере()
   КвЧисла = Новый КвалификаторыЧисла(15,2);	
	
   нРеквизиты = Новый Массив;
   нРеквизиты.Добавить(Новый РеквизитФормы("ПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.Корзина", "% общей скидки", Истина));
   нРеквизиты.Добавить(Новый РеквизитФормы("СуммаПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.Корзина", "Общая скидка", Истина));
   ИзменитьРеквизиты(нРеквизиты);
      
   нЭлемент = Элементы.Добавить("ПроцентОбщий", Тип("ПолеФормы"), Элементы.Корзина); 
   нЭлемент.Вид = ВидПоляФормы.ПолеВвода;
   нЭлемент.ПутьКДанным = "Объект.Корзина.ПроцентОбщий"; 
   Элементы.Переместить(нЭлемент, Элементы.Корзина.ПодчиненныеЭлементы.КорзинаКоличественныеПараметры,Элементы.Корзина.ПодчиненныеЭлементы.КорзинаКоличественныеПараметры.ПодчиненныеЭлементы.КорзинаСумма);
   нЭлемент.УстановитьДействие("ПриИзменении", "КорзинаПриИзменении");
   
   Элемент = УсловноеОформление.Элементы.Добавить();
   ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
   ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Корзина.ПодчиненныеЭлементы.КорзинаКоличественныеПараметры.ПодчиненныеЭлементы.ПроцентОбщий.Имя);
   ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корзина.ПроцентОбщий");
   ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
   ОтборЭлемента.ПравоеЗначение = 0;
   Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
   
   нЭлемент = Элементы.Добавить("СуммаПроцентОбщий", Тип("ПолеФормы"), Элементы.Корзина); 
   нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
   нЭлемент.ПутьКДанным = "Объект.Корзина.СуммаПроцентОбщий"; 
   Элементы.Переместить(нЭлемент, Элементы.Корзина.ПодчиненныеЭлементы.КорзинаКоличественныеПараметры,Элементы.Корзина.ПодчиненныеЭлементы.КорзинаКоличественныеПараметры.ПодчиненныеЭлементы.КорзинаСумма);
   нЭлемент.УстановитьДействие("ПриИзменении", "КорзинаПриИзменении");
   
   Элемент = УсловноеОформление.Элементы.Добавить();
   ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
   ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Корзина.ПодчиненныеЭлементы.КорзинаКоличественныеПараметры.ПодчиненныеЭлементы.СуммаПроцентОбщий.Имя);
   ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корзина.СуммаПроцентОбщий");
   ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
   ОтборЭлемента.ПравоеЗначение = 0;
   Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
   
   
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено И Не Параметры.Свойство("Пропустить") Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	КодФормы = "Обработка_ГИГ_ПодборТоваровВДокументПродажи_Форма";
	
	ГИГ_МодульСервер.ПриСозданииФормыПодбораНаСервере(ЭтаФорма);
	
	Если Не Параметры.Свойство("ПараметрыУказанияСерий",ПараметрыУказанияСерий) Тогда
		Элементы.КорзинаСерия.Видимость = Ложь;
	КонецЕсли;
	
	Параметры.Свойство("ТолькоОбособленно", ТолькоОбособленно);
	
	Параметры.Свойство("ПодборВариантовОбеспечения", ПодборВариантовОбеспечения);
	ПодборВариантовОбеспечения = ПодборВариантовОбеспечения
	И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
	И ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	Параметры.Свойство("ОграничиватьВариантыОбеспечения", ОграничиватьВариантыОбеспечения);
	
	Если ПодборВариантовОбеспечения 
		И Не ОграничиватьВариантыОбеспечения Тогда
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Очистить();
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно);
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.Обособленно);
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить);
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.ИзЗаказов);
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.Требуется);
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.НеТребуется);
	Иначе
		Элементы.КорзинаВариантОбеспечения.Видимость = Ложь;
	КонецЕсли;
	
	ДокументСсылка = Параметры.Документ;
	Параметры.Свойство("Назначение",Назначение);
	Параметры.Свойство("Подразделение",Подразделение);
	Параметры.Свойство("Организация",Организация);
	
	Параметры.Свойство("ВариантыОбеспечения", ВариантыОбеспечения);
	
	Склад = Параметры.Склад;
	//{Гига suv 12.01.2018 СхемыОбеспеченияДляЗаказов
	Если Параметры.Свойство("ПримененнаяСкидка") Тогда
		СписокСкидок = Параметры.ПримененнаяСкидка;
	КонецЕсли;
	//Гига suv 12.01.2018}
	
	УстановитьУсловноеОформление();
	ТекстПартнера = "";
	Если ЗначениеЗаполнено(Параметры.Соглашение.Партнер) тогда
		ТекстПартнера = "; партнер: "+Параметры.Соглашение.Партнер.Наименование+"";
	КонецЕсли;
	ЭтаФорма.Заголовок = "Подбор товаров в документ продажи по соглашению: "+Соглашение.Наименование+ТекстПартнера;
		
	// + [Rineco], [Киселев А.] [22.07.2021] 
	// Задача: [№ ], [# добавим колонку в тч "Корзина"]
	ДобавитьКолонкуНаСервере();
	// - [Rineco], [Киселев А.] [22.07.2021]
			
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстатки(ЭтаФорма);
	
	Если ВариантПоискаТоваров = "Расширенный"
		Или (ВариантПоискаТоваров = "ПоУмолчанию" И Не ИспользоватьСтандартныйПоискПриПодбореТоваров) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоискаНоменклатура;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы = Истина, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		И Объект.Корзина.Количество() > 0 Тогда
		
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
		
		Возврат;
		
	КонецЕсли;
	ЭтаФорма.ВыполняетсяЗакрытие = Истина;
	ПодборТоваровКлиент.ПередЗакрытиемФормыПодбораТоваров(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиФормыНаСервере();
	Если ПеренестиВДокумент Тогда
		АдресТоваровВХранилище = АдресТоваровВХранилище(ЭтаФорма.ВладелецФормы.УникальныйИдентификатор);
	Иначе
		АдресТоваровВХранилище = Неопределено;
	КонецЕсли;
	
	Если АдресТоваровВХранилище <> Неопределено Тогда
		Структура = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
		Если ИспользоватьДатыОтгрузки Тогда
			Структура.Вставить("МаксимальнаяДатаОтгрузки", МаксимальнаяДатаОтгрузки);
		КонецЕсли;
		ОповеститьОВыборе(Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	КлючеваяОперация = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Событие.ОбработкаОповещения";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыКомплекта = Новый Структура;
		ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
		ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
		
		АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
		ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
		ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыОткрытия.Вставить("Валюта", Валюта);
		ПараметрыОткрытия.Вставить("Соглашение", Соглашение);
		ПараметрыОткрытия.Вставить("Дата", Дата);
		ПараметрыОткрытия.Вставить("ЗапретРедактированияСоставаНабора", ЗапретРедактированияСоставаНабора);
		ПараметрыОткрытия.Вставить("ЗапретРедактированияЦены", ЗапретРедактированияЦеныНабора);
		ПараметрыОткрытия.Вставить("ПересчитатьСуммы", Истина);
		ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
		ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
		
		ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Номенклатура" 
		И Параметр.ЭтоНоваяНоменклатура Тогда
		Если ЗначениеЗаполнено(СтрокаПоискаНоменклатура) Тогда
			ВыполнитьПоискНоменклатуры();
		КонецЕсли;
		ПараметрыФормы = ПриЗаписиНовойНоменклатурыНаСервере(Источник);
		
		Если ТоварДляДобавленияВКорзину <> Неопределено Тогда
			ТоварДляДобавленияВКорзину.Склад = Склад;
			ДобавитьВКорзину(ТоварДляДобавленияВКорзину, ПараметрыФормы);
			ТоварДляДобавленияВКорзину = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если ИмяСобытия = "Запись_ХарактеристикиНоменклатуры" Тогда
		
		ПараметрыФормы = ПриЗаписиНовойХарактеристикиНаСервере(Источник);
		
		Если ТоварДляДобавленияВКорзину <> Неопределено Тогда
			ТоварДляДобавленияВКорзину.Склад = Склад;
			ДобавитьВКорзину(ТоварДляДобавленияВКорзину, ПараметрыФормы);
			ТоварДляДобавленияВКорзину = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяСобытия = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Событие.ОбработкаВыбора";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяСобытия);

	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		ТекущиеДанные = Элементы.Корзина.ТекущиеДанные;
		ТекущиеДанные.Серия = ВыбранноеЗначение.Значение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийСтрокПоиска

&НаКлиенте
Процедура СтрокаПоискаНоменклатураПриИзменении(Элемент)
	
	Если не СписокНоменклатура.Параметры.Элементы.Найти("Дата") = Неопределено Тогда
		СписокНоменклатура.Параметры.Элементы.Найти("Дата").Значение = ТекущаяДата();
	КонецЕсли;
	
	ВыполнитьПоискНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоискаНоменклатура = "";
	
	СнятьОтборПоСтрокеПоискаНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаХарактеристикиПриИзменении(Элемент)
	
	ВыполнитьПоискХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаХарактеристикиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоискаХарактеристики = "";
	
	СнятьОтборПоСтрокеПоискаХарактеристикиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФлаговТочногоСоответствия

&НаКлиенте
Процедура НайтиНоменклатуруПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоискНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиХарактеристикиПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоискХарактеристик();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ВидНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПриНажатииНаИнформационнуюНадпись(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОстаткиНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ГИГ_МодульКлиент.ПриИзмененииОтображенияОстатковПоСкладамДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаДоПриИзменении(Элемент)
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаОтПриИзменении(Элемент)
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СегментПриИзменении(Элемент)
	
	СегментНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	ТолькоВНаличииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	
	ИспользоватьФильтрыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураИсходногоКачестваПриИзменении(Элемент)
	
	НоменклатураИсходногоКачестваПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзина

&НаКлиенте
Процедура КорзинаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	ТекущаяСтрока.Серия = Неопределено;
	ТекущаяСтрока.ВариантОбеспечения = Неопределено;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ДобавитьВСтруктуруДействийЗаполнениеОбеспечения(СтруктураДействий, ТекущаяСтрока, ДокументСсылка, ВариантыОбеспечения);
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДатаСеанса);
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Соглашение) Тогда
		
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка",     Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	Иначе
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ВариантАнализаНоменклатурыПродаваемойСовместно);
		
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	
	ПрименныеСкидки = РасчетСкидок(ТекущаяСтрока.Номенклатура);
	ПрименныеСкидки.Свойство("АвтоСкидка",ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ПрименныеСкидки.Свойство("РучнаяСкидка",ТекущаяСтрока.ПроцентРучнойСкидки);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий) Тогда
		Если Не ПроверитьУстановитьСтатусСерийНаКлиенте(ТекущаяСтрока, ПараметрыУказанияСерий) Тогда
			ЗаполнитьСтатусУказанияСерииВСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
	//bercut150420
	СуммаДляКорректногоРасчетаРучнойСкидки = 0;
			
	Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		
		Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки),2);
		Иначе 
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		ТекущаяСтрока.Сумма = (ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена) - ТекущаяСтрока.СуммаПроцентОбщий;
		
		СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;

		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		
	Иначе
		
		Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаРучнойСкидки =  Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки),2);
		Иначе 
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий;
		
		СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
		
		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки;
		
	КонецЕсли;
	
	ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
	//
	
КонецПроцедуры

&НаСервере
Функция РасчетСкидок(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиЦеновыеГруппы.ЗначениеСкидкиНаценки КАК АвтоСкидка,
	|	СкидкиНаценкиЦеновыеГруппы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_АвтоСкидка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СкидкиНаценкиУсловияПредоставления.Ссылка КАК Скидка
	|	ИЗ
	|		РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|				ПО УсловияПредоставленияСкидокНаценок.Ссылка = СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления
	|			ПО ПартнерыСегмента.Сегмент = УсловияПредоставленияСкидокНаценок.СегментПартнеров
	|	ГДЕ
	|		ПартнерыСегмента.Партнер = &Партнер) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ЦеновыеГруппы КАК СкидкиНаценкиЦеновыеГруппы
	|		ПО ВложенныйЗапрос.Скидка = СкидкиНаценкиЦеновыеГруппы.Ссылка
	|ГДЕ
	|	СкидкиНаценкиЦеновыеГруппы.ЦеноваяГруппа = &ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ПроцентИндивидуальнойСкидкиНаценки КАК РучнаяСкидка,
	|	СоглашенияСКлиентамиЦеновыеГруппы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_РучнаяСкидка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|ГДЕ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа = &ЦеноваяГруппа
	|	И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен = &ВидЦен
	|	И СоглашенияСКлиентамиЦеновыеГруппы.Ссылка = &Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_АвтоСкидка.АвтоСкидка, 0) КАК АвтоСкидка,
	|	ЕСТЬNULL(ВТ_РучнаяСкидка.РучнаяСкидка, 0) КАК РучнаяСкидка
	|ИЗ
	|	ВТ_АвтоСкидка КАК ВТ_АвтоСкидка
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_РучнаяСкидка КАК ВТ_РучнаяСкидка
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_АвтоСкидка.НомерСтроки УБЫВ,
	|	ВТ_РучнаяСкидка.НомерСтроки УБЫВ";
		
	Запрос.УстановитьПараметр("Партнер", ДокументСсылка.Партнер);
	Запрос.УстановитьПараметр("Соглашение", Объект.Соглашение);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", Номенклатура.ЦеноваяГруппа);
	Запрос.УстановитьПараметр("ВидЦен", Объект.Соглашение.ВидЦен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПрименныеСкидки = Новый Структура;
	
	Если не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить()[0];
		ПрименныеСкидки.Вставить("АвтоСкидка",Результат.АвтоСкидка);
		ПрименныеСкидки.Вставить("РучнаяСкидка",Результат.РучнаяСкидка);	
	КонецЕсли;
	
	Возврат ПрименныеСкидки;
	
КонецФункции

&НаКлиенте
Процедура КорзинаВариантОбеспеченияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	ТекущаяСтрока.Серия = Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий) Тогда
		Если Не ПроверитьУстановитьСтатусСерийНаКлиенте(ТекущаяСтрока, ПараметрыУказанияСерий) Тогда
			ЗаполнитьСтатусУказанияСерииВСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	ТекущаяСтрока.Серия = Неопределено;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДатаСеанса);
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Соглашение) Тогда
		
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка", Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	Иначе
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ВариантАнализаНоменклатурыПродаваемойСовместно);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КорзинаПриИзменении(Элементы.ПроцентОбщий);
	
	//bercut150420
	ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок * ПолучитьЧислительУпаковки(ТекущаяСтрока.Упаковка);
	
	Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.ЦенаСоСкидкой;
		ТекущаяСтрока.ПроцентОбщий = (100-100/(ТекущаяСтрока.Цена/ТекущаяСтрока.ЦенаСоСкидкой));
		Если не ТекущаяСтрока.ПроцентОбщий = 0 Тогда
			ТекущаяСтрока.СуммаПроцентОбщий = (ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентОбщий))*ТекущаяСтрока.КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.СуммаПроцентОбщий = 0;
		КонецЕсли;
		Если не ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр((ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена)/(100/ТекущаяСтрока.ПроцентАвтоматическойСкидки),2);
		Иначе 
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		КонецЕсли;
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки; 
		ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ТекущаяСтрока.ПроцентАвтоматическойСкидки; 
				
	Иначе
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.ЦенаСоСкидкой;
		Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаПроцентОбщий = (ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки))*ТекущаяСтрока.КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.СуммаПроцентОбщий = 0;
		КонецЕсли;
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий; 		
		
	КонецЕсли;	
	//
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислительУпаковки(Упаковка)
	
	Возврат ?(Упаковка.Числитель = 0,1,Упаковка.Числитель);	
	
КонецФункции // ПолучитьЧислительУпаковки()

&НаКлиенте
Процедура КорзинаУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДатаСеанса);
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Соглашение) Тогда
		
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка", Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//bercut170420
	Если не ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0 Тогда
		ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр((ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена)/(100/ТекущаяСтрока.ПроцентАвтоматическойСкидки),2);
	Иначе
		ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
	КонецЕсли;
	Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки),2);
	Иначе 
		ТекущаяСтрока.СуммаРучнойСкидки = 0;
	КонецЕсли;
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий;
	
	СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
	
	ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
	ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
	
	ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	//
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	//СтруктураЗаполненияЦены = Новый Структура;
	//СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДатаСеанса);
	//СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//bercut170420
	СуммаДляКорректногоРасчетаРучнойСкидки = 0;
	Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ВариантАнализаНоменклатурыПродаваемойСовместно);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		
		ПрименныеСкидки = РасчетСкидок(ТекущаяСтрока.Номенклатура);
		ПрименныеСкидки.Свойство("АвтоСкидка",ТекущаяСтрока.ПроцентАвтоматическойСкидки);
		ПрименныеСкидки.Свойство("РучнаяСкидка",ТекущаяСтрока.ПроцентРучнойСкидки);		
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если не ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр((ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена)/(100/ТекущаяСтрока.ПроцентАвтоматическойСкидки),2);
		Иначе
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		КонецЕсли;
		Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки),2);
		Иначе 
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий;
		
		СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
		
		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		
	Иначе 
		
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		
		ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		ТекущаяСтрока.СуммаРучнойСкидки = 0;
		
		ТекущаяСтрока.СуммаПроцентОбщий = 0;
		ТекущаяСтрока.ПроцентОбщий = 0;
		
		//теперь надо получать цену для произвольного вида цен, по виду цен в соглашении, если в соглашении нет вида цен то цена = 0
		ТекущаяСтрока.Цена = ПолучитьЦенуДляСтрокиСПроизвольнойЦенойПоВидуЦенИзСоглашения(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика);
		//
		ТекущаяСтрока.Сумма = (ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена) - ТекущаяСтрока.СуммаПроцентОбщий;
		
		СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
		
		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок; 
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		
	КонецЕсли;
	
	ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;	
	//
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенуДляСтрокиСПроизвольнойЦенойПоВидуЦенИзСоглашения(Номенклатура,Характеристика)
	  
	Если Объект.Соглашение.ВидЦен = Справочники.ВидыЦен.ПустаяСсылка() Тогда
		Возврат 0;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена * КурсыВалютСрезПоследних.Курс КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
		|		ПО (КурсыВалютСрезПоследних.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)";
		
		Запрос.УстановитьПараметр("ВидЦены", Объект.Соглашение.ВидЦен);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат 0;
		Иначе
			Попытка  //хбз что за ошибка тут вылетает. Не показали случай
			  Возврат РезультатЗапроса.Выгрузить()[0].Цена;
			Исключение
			  Возврат 0;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьЦенуДляСтрокиСПроизвольнойЦенойПоВидуЦенИзСоглашения()

&НаКлиенте
Процедура КорзинаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		
		Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки),2);
		Иначе 
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		ТекущаяСтрока.Сумма = (ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена) - ТекущаяСтрока.СуммаПроцентОбщий;
		
		СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
		
		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок; 
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаПриИзменении(Элемент)
	 
	//СтруктураДействий = Новый Структура;
	//СтруктураПересчетаЦены = Новый Структура("ИспользоватьРучныеСкидки");
	//СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах",СтруктураПересчетаЦены);
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Корзина.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	//bercut170420
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
	
	ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма/ТекущаяСтрока.КоличествоУпаковок;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
	ТекущаяСтрока.ПроцентОбщий = (100-100/(ТекущаяСтрока.Цена/ТекущаяСтрока.ЦенаСоСкидкой));
	ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ТекущаяСтрока.ПроцентАвтоматическойСкидки; 
	Если не ТекущаяСтрока.ПроцентОбщий = 0 Тогда
		ТекущаяСтрока.СуммаПроцентОбщий = (ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентОбщий))*ТекущаяСтрока.КоличествоУпаковок;
	Иначе
		ТекущаяСтрока.СуммаПроцентОбщий = 0;
	КонецЕсли;
	ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки;
	
	ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
	//
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретащитьВКорзинуНаСервере(ПараметрыПеретаскивания.Значение);
	
	Если Не ИспользоватьНоменклатуруПродаваемуюСовместно Тогда	
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
	// добавлена проверка на макс ручной
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,ТекущаяДата(),ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
    // конец проверки
	
	//bercut170420
	СуммаДляКорректногоРасчетаРучнойСкидки = 0;
			
	Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		
		Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки),2);
		Иначе 
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		ТекущаяСтрока.Сумма = (ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена) - ТекущаяСтрока.СуммаПроцентОбщий;
		
		СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;

		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		
	Иначе
		
		Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
			ТекущаяСтрока.СуммаРучнойСкидки =  Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки),2);
		Иначе 
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий;
		
		СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
		
		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки;
		
	КонецЕсли;
	
	ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
	//
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
	// добавлена проверка на макс ручной
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,ТекущаяДата(),ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	// конец проверки
	
	//bercut170420
	СуммаДляКорректногоРасчетаРучнойСкидки =0;
	
	Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		
		Если не ТекущаяСтрока.СуммаРучнойСкидки = 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100/((ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена)/ТекущаяСтрока.СуммаРучнойСкидки),2);
		Иначе 
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		ТекущаяСтрока.Сумма = (ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена) - ТекущаяСтрока.СуммаПроцентОбщий;
		
		СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
		
		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		
	Иначе
		
		Если не ТекущаяСтрока.СуммаРучнойСкидки = 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100/((ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена)/ТекущаяСтрока.СуммаРучнойСкидки),2);
		Иначе 
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		ТекущаяСтрока.Сумма = (ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена) - ТекущаяСтрока.СуммаПроцентОбщий;
		
		СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
		
		ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		
	КонецЕсли;	
	
	ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
	//
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	Иначе	
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
	// тут програмно обрабатываем изменения добавленной колонки...
	Если Элемент.Имя = "ПроцентОбщий" Тогда 
		//ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
		//ЗначениеАвтоматической = ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		//Если ТекущаяСтрока.ПроцентОбщий <> 0 Тогда 
		//	ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ЗначениеАвтоматической;
		//	КорзинаПроцентРучнойСкидкиПриИзменении(Элемент);
		//Иначе
		//	Если ЗначениеАвтоматической <> 0 Тогда 
		//		ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
		//	КонецЕсли;	
		//	ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		//	ТекущаяСтрока.СуммаРучнойСкидки = 0;
		//КонецЕсли;
		//ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
		
		//bercut170420
		ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
		Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
			
			ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ТекущаяСтрока.ПроцентАвтоматическойСкидки;		
			Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда	
				ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок/(100/(ТекущаяСтрока.ПроцентРучнойСкидки)),2);
			Иначе 
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
			КонецЕсли;	
			ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;			
			ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий;
			
			СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
			
			ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
			
		Иначе
			
			ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий;			
			Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда	
				ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок/(100/(ТекущаяСтрока.ПроцентРучнойСкидки)),2);
			Иначе 
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
			КонецЕсли;		
			ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки;			
			ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий;
			
			СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
			
			ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		//
	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
		//ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
		//ЗначениеАвтоматической = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		//Если  ТекущаяСтрока.СуммаПроцентОбщий <> 0 Тогда 
		//	ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ЗначениеАвтоматической;
		//	КорзинаСуммаРучнойСкидкиПриИзменении(Элемент);
		//Иначе
		//	Если ЗначениеАвтоматической <> 0 Тогда 
		//		ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
		//	КонецЕсли;	
		//	ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		//	ТекущаяСтрока.СуммаРучнойСкидки = 0;
		//КонецЕсли;
		//ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
		
		//bercut170420
		ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
		Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
			
			ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий;
			
			СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
			
			ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки;			
			Если не ТекущаяСтрока.СуммаРучнойСкидки = 0 Тогда
				ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100/(ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена/ТекущаяСтрока.СуммаРучнойСкидки),2);
			Иначе 
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			КонецЕсли;
			ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
			
		Иначе
			
			ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий; 
			
			СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
			
			ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий;
			Если не ТекущаяСтрока.СуммаРучнойСкидки = 0 Тогда
				ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100/(ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена/ТекущаяСтрока.СуммаРучнойСкидки),2);
			Иначе 
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			КонецЕсли;
			ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки;
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;	
		//
	Иначе
		Если ТекущаяСтрока <> Неопределено Тогда  //??? где ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
			ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
		КонецЕсли;
		//bercut170220
		ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
		Если Элементы.Корзина.ТекущиеДанные.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		   ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		   ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		   ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки;
		   ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки;
	   КонецЕсли;
	   //
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьМаксимальноеЗначение(Номенклатура,ТекущееЗначениеСкидкиНаценки)
	МаксСкидка = 0;
	Данные = Объект.Соглашение;
	СтруктураОтбора = Новый Структура("ЦеноваяГруппа",Номенклатура.ЦеноваяГруппа);
	МассивСтрок = Данные.ЦеновыеГруппы.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() > 0 Тогда 
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Макс(МассивСтрок[0].ПроцентРучнойСкидки,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки);
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			ПроцентНаценкиОбщий = МассивСтрок[0].ПроцентРучнойНаценки;
			ПроцентНаценкиИнд   = ?(МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки < 0,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки,0);
			Возврат Мин(ПроцентНаценкиОбщий,ПроцентНаценкиИнд);
		КонецЕсли;
	Иначе
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Объект.Соглашение.ПроцентРучнойСкидки;
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			Возврат Объект.Соглашение.ПроцентРучнойНаценки;
		КонецЕсли;
	КонецЕсли;
КонецФункции	

&НаКлиенте
Процедура КорзинаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Корзина.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрыКомплекта = Новый Структура;
			ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
			ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
			
			АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
			ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
			ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
			ПараметрыОткрытия.Вставить("Валюта", Валюта);
			ПараметрыОткрытия.Вставить("Соглашение", Соглашение);
			ПараметрыОткрытия.Вставить("Дата", Дата);
			ПараметрыОткрытия.Вставить("ЗапретРедактированияСоставаНабора", ЗапретРедактированияСоставаНабора);
			ПараметрыОткрытия.Вставить("ЗапретРедактированияЦены", ЗапретРедактированияЦеныНабора);
			ПараметрыОткрытия.Вставить("ПересчитатьСуммы", Истина);
			ПараметрыОткрытия.Вставить("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры.ВыгрузитьЗначения());
			ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
			ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
			
			ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПередУдалением(Элемент, Отказ)
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Корзина", Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОтборов

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПодборТоваровКлиент.ДеревоОтборовВыбор(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ПодборТоваровКлиент.ДеревоОтборовПриИзмененииЗавершение(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПередНачаломИзменения(Элемент, Отказ)
	
	ПодборТоваровКлиент.ДеревоОтборовПередНачаломИзменения(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	ПодборТоваровКлиент.ДеревоОтборовОтборПриИзменении(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияНоменклатуры

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ПодборТоваровКлиент.ОбработчикАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОстаткиТоваров

&НаКлиенте
Процедура ОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекущаяСтрокаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыОстатков = ОстаткиТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТаблицыОстатков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрокаТаблицыОстатков.СкладДоступенДляВыбора Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Данный склад не был выбран в редактируемом документе.'"));
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьХарактеристикиНоменклатуры 
		И ТекущаяСтрокаНоменклатуры.ХарактеристикиИспользуются 
		И Не НавигацияПоХарактеристикам Тогда
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОстаткиТоваровВыборЗавершение", ЭтотОбъект), НСтр("ru = 'Не выбрана характеристика. Перейти к выбору характеристик?'"), РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	Если НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(ЭтаФорма)].ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрокаНоменклатуры);
	КонецЕсли;
	
	Если ТекущаяСтрокаНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
		ПараметрыТовара.Склад = СтрокаТаблицыОстатков.Склад;
	КонецЕсли;
	
	ПараметрыТовара.ДатаОтгрузки = СтрокаТаблицыОстатков.Период;
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	//++Гольм А.А. (Гигабайт) 12.04.2019 12:07:04
	ПараметрыТовара.Вставить("ГИГ_ПодборСРезервированием", Истина);
	//--Гольм А.А. (Гигабайт) 12.04.2019 12:07:47
	ПараметрыФормы = Новый Структура();
	ПараметрыФормыИТовараНаСервере(ПараметрыФормы, ПараметрыТовара);

	//++Гольм А.А. (Гигабайт) 12.04.2019 12:08:11
	ПараметрыФормы.Вставить("ГИГ_ПодборСРезервированием", Истина);
	//--Гольм А.А. (Гигабайт) 12.04.2019 12:08:25
	ДобавитьВКорзину(ПараметрыТовара, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        ПерейтиКСпискуХарактеристик();
		ПодборТоваровКлиент.ПослеПереходаКСпискуХарактеристик(ЭтаФорма);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскиванияОстатков(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровПроизводителяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекущаяСтрокаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыОстатков = ОстаткиТоваровПроизводителя.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТаблицыОстатков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрокаТаблицыОстатков.СкладДоступенДляВыбора Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Данный склад не был выбран в редактируемом документе.'"));
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьХарактеристикиНоменклатуры 
		И ТекущаяСтрокаНоменклатуры.ХарактеристикиИспользуются 
		И Не НавигацияПоХарактеристикам Тогда
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОстаткиТоваровПроизводителяВыборЗавершение", ЭтотОбъект), НСтр("ru = 'Не выбрана характеристика. Перейти к выбору характеристик?'"), РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	Если НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(ЭтаФорма)].ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрокаНоменклатуры);
	КонецЕсли;
	
	Если ТекущаяСтрокаНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
		ПараметрыТовара.Склад = СтрокаТаблицыОстатков.Склад;
	КонецЕсли;
	
	Если СтрокаТаблицыОстатков.Свойство("СхемаОбеспечения") Тогда //Казаков М.В.
		ПараметрыТовара.Вставить("ГИГ_СхемаОбеспечения",СтрокаТаблицыОстатков.СхемаОбеспечения);
		ПараметрыТовара.Вставить("ГИГ_СрокПоставки",СтрокаТаблицыОстатков.СрокОбеспеченияОписание);
	КонецЕсли;
	
	ПараметрыТовара.ДатаОтгрузки = СтрокаТаблицыОстатков.Период;
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	//++Гольм А.А. (Гигабайт) 12.04.2019 18:31:15
	ПараметрыФормы = Новый Структура();
	ПараметрыФормыИТовараНаСервере(ПараметрыФормы, ПараметрыТовара);
	//--Гольм А.А. (Гигабайт) 12.04.2019 18:31:17
	ДобавитьВКорзину(ПараметрыТовара, ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровПроизводителяНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскиванияОстатков(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровПроизводителяВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        ПерейтиКСпискуХарактеристик();
		ПодборТоваровКлиент.ПослеПереходаКСпискуХарактеристик(ЭтаФорма);
    КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодборТаблицаХарактеристики

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыХарактеристик(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку характеристик.
	Оповещение = Новый ОписаниеОповещения("ПодборТаблицаХарактеристикиВыборЗавершение", ЭтотОбъект, 
		Новый Структура("Элемент", Элемент));
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыХарактеристик(ЭтаФорма, Элемент, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяСобытия = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Событие.ПодборТаблицаХарактеристикиВыборЗавершение";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяСобытия);
	
	СтрокаТаблицыХарактеристик = ДополнительныеПараметры.Элемент.ТекущиеДанные;
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыТовара = ПолучитьПараметрыТовараПередДобавлениеВКорзину(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	
	ДобавитьВКорзину(ПараметрыТовара, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтаФорма, Элемент);
	Попытка 
		ГИГ_СформироватьНадписьПоЦенамТарифа(
						Элемент.ТекущиеДанные.ВидЦены,
						Элемент.ТекущиеДанные.Номенклатура,
						Элемент.ТекущиеДанные.ЦенаСоСкидкойНаценкой);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку номенклатуры.
	Оповещение = Новый ОписаниеОповещения("ПодборТаблицаНоменклатураВыборЗавершение", ЭтотОбъект, 
		Новый Структура("Элемент", Элемент));
		
	ОбрабатыватьВариантОбеспеченияОсобенно = Истина;	
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяСобытия = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Событие.ПодборТаблицаНоменклатураВыборЗавершение";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяСобытия);
	
	СтрокаТаблицыНоменклатуры = ДополнительныеПараметры.Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьХарактеристикиНоменклатуры 
		И СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются Тогда
		
		ПерейтиКСпискуХарактеристик();
		ПодборТоваровКлиент.ПослеПереходаКСпискуХарактеристик(ЭтаФорма);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыТовара = ПолучитьПараметрыТовараПередДобавлениеВКорзину(ПараметрыФормы);
		Если ЭтаФорма.ИмяФормы = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Форма" тогда
			Если СтрокаТаблицыНоменклатуры.Свойство("ЦенаСоСкидкойНаценкой") тогда
				ПараметрыТовара.Вставить("ЦенаСоСкидкойНаценкой",СтрокаТаблицыНоменклатуры.ЦенаСоСкидкойНаценкой);
			КонецЕсли;
			Если СтрокаТаблицыНоменклатуры.Свойство("ПроцентРучнойСкидкиНаценки") тогда
				Если СтрокаТаблицыНоменклатуры.Деактивирован = Истина Тогда 
					ПараметрыТовара.Вставить("ПроцентРучнойСкидки",0);
				Иначе	
					ПараметрыТовара.Вставить("ПроцентРучнойСкидки",СтрокаТаблицыНоменклатуры.ПроцентРучнойСкидкиНаценки);
				КонецЕсли;
			КонецЕсли;
			Если СтрокаТаблицыНоменклатуры.Свойство("ЦенаСоСкидкойНаценкой") тогда
				ПараметрыТовара.Вставить("ПроцентАвтоматическойСкидки",СтрокаТаблицыНоменклатуры.ПроцентАвтоматическойСкидкиНаценки);
			КонецЕсли;
		КонецЕсли;
		ДобавитьВКорзину(ПараметрыТовара, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКачества

&НаКлиенте
Процедура СписокКачестваПометкаПриИзменении(Элемент)
	
	СписокКачестваПометкаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьТекущийЭлементНавигация(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементНавигация(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСписокТоваров(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСписокТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементКорзина(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементКорзина(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСтрокаПоиска(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСтрокаПоиска(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНеЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = Ложь;
	ЗапрашиватьЦену = Ложь;
	Элементы.НеЗапрашиватьКоличество.Пометка = Истина;
	Элементы.ЗапрашиватьКоличество.Пометка = Ложь;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапрашиватьКоличество(Команда)
	
	Если Элементы.ЗапрашиватьКоличествоЦену.Видимость Тогда
		ЗапрашиватьЦену = Ложь;
		ЗапрашиватьКоличество = Истина;
		Элементы.НеЗапрашиватьКоличество.Пометка = Ложь;
		Элементы.ЗапрашиватьКоличество.Пометка = Истина;
		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Ложь;
	Иначе
		ЗапрашиватьКоличество = Не ЗапрашиватьКоличество;
		Элементы.НеЗапрашиватьКоличество.Пометка = Ложь;
		Элементы.ЗапрашиватьКоличество.Пометка = ЗапрашиватьКоличество;
		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапрашиватьКоличествоИЦену(Команда)
	
	ЗапрашиватьКоличество = Истина;
	ЗапрашиватьЦену = Истина;
	Элементы.НеЗапрашиватьКоличество.Пометка = Ложь;
	Элементы.ЗапрашиватьКоличество.Пометка = Ложь;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ТекущееСообщениеПользователю = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатуры(Команда)
	
	ПодборТоваровКлиент.ЦеныНоменклатуры(Этаформа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ПодборТоваровКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНоменклатуру(Команда)
	
	ПодборТоваровКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СПодобраннойНоменклатуройСовместноПродается(Команда)
	
	СПодобраннойНоменклатуройСовместноПродаетсяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСАналогичнымиСвойствами(Команда)
	
	НоменклатураСАналогичнымиСвойствамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДругогоКачества(Команда)
	
	ТоварыДругогоКачестваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыСозданияНовойНоменклатурыНаСервере(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюХарактеристику(Команда)
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ПомощникНового", ПараметрыСозданияНовойХарактеристикиНаСервере(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборыПоСвойствам(Команда)
	
	СброситьОтборыПоСвойствамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Команда.СоставНабора");
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	Если НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(ЭтаФорма)].ТекущиеДанные;
		
		Если СтрокаТаблицыХарактеристик = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	Иначе
		
		Если ТекущаяСтрокаНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрокаНоменклатуры);
	КонецЕсли;
	
	Если ПараметрыТовара.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Просмотр состава набора доступен только для номенклатуры типа ""Набор""'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыТовара.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика",                    ПараметрыТовара.Характеристика);
		ПараметрыФормы.Вставить("ВидЦены",                           ПараметрыТовара.ВидЦены);
		ПараметрыФормы.Вставить("Соглашение",                        Соглашение);
		ПараметрыФормы.Вставить("Упаковка",                          ПараметрыТовара.Упаковка);
		ПараметрыФормы.Вставить("Цена",                              ПараметрыТовара.Цена);
		ПараметрыФормы.Вставить("Склад",                             ПараметрыТовара.Склад);
		ПараметрыФормы.Вставить("ДатаОтгрузки",                      ПараметрыТовара.ДатаОтгрузки);
		ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыТовара.ТипНоменклатуры);
		ПараметрыФормы.Вставить("Дата",                              Дата);
		ПараметрыФормы.Вставить("Валюта",                            Валюта);
		ПараметрыФормы.Вставить("СкрытьЦену",                        РежимПодбораБезСуммовыхПараметров);
		ПараметрыФормы.Вставить("РедактироватьВидЦены",              Элементы.КорзинаВидЦены.Видимость);
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",          ИспользоватьДатыОтгрузки);
		ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", РежимПодбораИспользоватьСкладыВТабличнойЧасти);
		ПараметрыФормы.Вставить("ЦенаВключаетНДС",                   Объект.ЦенаВключаетНДС);
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",              СкрыватьРучныеСкидки Или РежимПодбораБезСуммовыхПараметров);
		ПараметрыФормы.Вставить("ИспользоватьРучныеСкидкиВПродажах", ИспользоватьРучныеСкидкиВПродажах);
		ПараметрыФормы.Вставить("Склады",                            Склады.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ВидыЦен",                           ВидыЦен.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ОтображатьОстатки",                 ОтображатьОстатки);
		
		Если ИспользоватьРучныеСкидкиВПродажах Тогда
			АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилищеНаСервере(ПараметрыТовара);
		Иначе
			АдресВоВременномХранилище = Неопределено;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		
		ПодобранныеТовары = Неопределено;

		
		ОткрытьФорму("Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.СоставНабора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("СоставНабораЗавершение", ЭтотОбъект, Новый Структура("ПараметрыТовара", ПараметрыТовара)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыТовара = ДополнительныеПараметры.ПараметрыТовара;
    
    
    ПодобранныеТовары = Результат;
    
    Если ПодобранныеТовары = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    НовыеСтроки = Новый Массив;
    
    Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
        НоваяСтрока = ПодборТоваровКлиентСервер.ПараметрыТовара();
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
        
        НовыеСтроки.Добавить(НоваяСтрока);
    КонецЦикла;
    
    ТекстОповещения = ДобавитьВКорзинуНаКлиенте(ПараметрыТовара, НовыеСтроки);

КонецПроцедуры

#Область ЦеныИСкидки

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

	Если Объект.Корзина.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Корзина не заполнена. Цены не могут быть заполнены.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
		
	ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если Объект.Корзина.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Корзина не заполнена. Цены не могут быть заполнены.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ПродажиКлиент.ВыбратьВидЦен(
		Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Объект.ЦенаВключаетНДС,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Объект.Корзина.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Корзина не заполнена. Ручная скидка (наценка) не может быть назначена.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Валюта);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Объект.Корзина.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Корзина не заполнена. Ручная скидка (наценка) не может быть назначена'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, АдресВоВременномХранилище, Элементы.Корзина.ВыделенныеСтроки);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Валюта);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Объект.Корзина.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Корзина не заполнена. Ручные скидки (наценки) не могут быть отменены'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	ИначеЕсли Объект.Корзина.Итог("СуммаРучнойСкидки") = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В корзине не заполнена сумма ручной скидки. Ручные скидки (наценки) не могут быть отменены'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
КонецПроцедуры

#КонецОбласти


#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	
	Если ПоВсемСтрокам Тогда
		МассивСтрок = Неопределено;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Корзина.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Корзина.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	КонецЕсли;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Корзина, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	
	ПараметрыЗаполненияЦен = Новый Структура;
	ПараметрыЗаполненияЦен.Вставить("Дата",              Дата);
	ПараметрыЗаполненияЦен.Вставить("Валюта",            Валюта);
	ПараметрыЗаполненияЦен.Вставить("Соглашение",        Соглашение);
	ПараметрыЗаполненияЦен.Вставить("Организация",       Организация);
	ПараметрыЗаполненияЦен.Вставить("РасчитыватьНаборы", Истина);
	ПараметрыЗаполненияЦен.Вставить("ПоляЗаполнения",    "Цена, СтавкаНДС, ВидЦены, СрокПоставки");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Корзина,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполненияЦен, // Параметры заполнения
		СтруктураДействий);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Корзина.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Корзина.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Корзина, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	
	ПараметрыЗаполненияЦен = Новый Структура;
	ПараметрыЗаполненияЦен.Вставить("Дата",              Дата);
	ПараметрыЗаполненияЦен.Вставить("Валюта",            Валюта);
	ПараметрыЗаполненияЦен.Вставить("ВидЦены",           ВидЦен);
	ПараметрыЗаполненияЦен.Вставить("РасчитыватьНаборы", Истина);
	ПараметрыЗаполненияЦен.Вставить("ПоляЗаполнения",    "Цена, ВидЦены");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Корзина,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполненияЦен, // Параметры заполнения
		СтруктураДействий);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Корзина", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, АдресВоВременномХранилище, Знач ВыделенныеСтроки = Неопределено)
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Корзина", СуммаСкидкиНаценки, ПараметрыСкидки);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Корзина", Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корзина.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма, 
														"КорзинаВидЦены", 
														"Объект.Корзина.ВидЦены");

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаИндексСовместноПродаваемыеТовары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимПодбораБезСуммовыхПараметров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Если Не ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураДоступно.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Набор;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<см. набор>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
	
	КонецЕсли;
	
	//
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураЦена.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураЦена.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ВариантРасчетаЦеныНабора");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<см. набор>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
	КонецЕсли;
	//
	
	Если Не ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Набор;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<см. набор>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
	
	КонецЕсли;
	
	//
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиЦена.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиЦена.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ВариантРасчетаЦеныНабора");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<см. набор>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
	КонецЕсли;
	
	//
	
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Корзина");
	
	//
	
	ПодборТоваровСервер.УстановитьУсловноеОформлениеДинамическихСписков(ЭтаФорма);
	
	//
	
	ПодборТоваровСервер.УстановитьУсловноеОформлениеЭлементовФормПодборов(ЭтаФорма);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаСерия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корзина.СтатусУказанияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серия не указывается>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// оформление текста деактивированных ручных скидок
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураИндСкидкаПроцент.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.Деактивирован");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.СписокРасширенныйПоискНоменклатураИндСкидкаПроцент.Шрифт,,,,,,Истина));
	
//{{20201029 ГлазуновДВ установим отметку не актуальных остатков цветом
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиТоваровПроизводителяДоступноОписание.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиТоваровПроизводителя.АктуальностьЗагрузкиЧисло");
	//Число(Лев("4д.",СтрНайти("4д.","д.")-1))
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 2880; //(2*86400)
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
//}}20201029 ГлазуновДВ
	
КонецПроцедуры

#Область ОбработчикиСобытийНаСервере

&НаСервере
Процедура СегментНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииСегментаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураИсходногоКачестваПриИзмененииНаСервере()
	
	ПодборТоваровСервер.НоменклатураИсходногоКачестваПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуХарактеристик() 
	ПодборТоваровСервер.ПерейтиКСпискуХарактеристик(ЭтаФорма);
КонецПроцедуры		

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания()
	
	ГИГ_МодульКлиент.ГИГ_ПолучитьИнформациюОТовареПриПродаже(ЭтаФорма);
	//Для Каждого Элемент ИЗ ОстаткиТоваровПроизводителя.ПолучитьЭлементы() Цикл
	//	Элементы.ОстаткиТоваровПроизводителя.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
	//КонецЦикла;		
	
	ЭлементыДерева = ОстаткиТоваров.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Элементы.ОстаткиТоваров.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ДобавитьВКорзинуНаКлиенте(ПараметрыТовара, НовыеСтроки)
	
	Отбор = Новый Структура("НоменклатураНабора, ХарактеристикаНабора, Артикул, Номенклатура, ТипНоменклатуры, Характеристика, ХарактеристикиИспользуются, Упаковка, Цена, ВидЦены, Склад, ПроцентРучнойСкидки,ПроцентАвтоматическойСкидки, СрокПоставки, ВариантОбеспечения, Серия");
	
	Если ПараметрыТовара.Свойство("ГИГ_СхемаОбеспечения") Тогда
	Отбор.Вставить("ГИГ_СхемаОбеспечения",ПараметрыТовара.ГИГ_СхемаОбеспечения);//Казаков М.В.
	Отбор.Вставить("ГИГ_СрокПоставки",ПараметрыТовара.ГИГ_СрокПоставки);//Казаков М.В.
	Иначе
	Отбор.Вставить("ГИГ_СхемаОбеспечения",ПредопределенноеЗначение("Справочник.СхемыОбеспечения.ПустаяСсылка"));//Казаков М.В.
	Отбор.Вставить("ГИГ_СрокПоставки","");//Казаков М.В.
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	
	МассивИДСтрокПересчетаСтатусаСерий = Новый Массив;
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, НоваяСтрока);
		
		Если ИспользоватьДатыОтгрузки Тогда
			Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Отбор.ВариантОбеспечения) Тогда
			СтруктураДействийВариантОбеспечения = Новый Структура;
			ДобавитьВСтруктуруДействийЗаполнениеОбеспечения(СтруктураДействийВариантОбеспечения, Отбор, ДокументСсылка, ВариантыОбеспечения);
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Отбор, СтруктураДействийВариантОбеспечения, Неопределено);
		КонецЕсли;
		
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 ИЛИ НоваяСтрока.Погрешность <> 0 Тогда
			
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
			
			//bercut140120
			Если не ОбрабатыватьВариантОбеспеченияОсобенно = Неопределено Тогда
				ТекущаяСтрока.ВариантОбеспечения  = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
			КонецЕсли;
			//
			
			ТекущаяСтрока.ПроцентАвтоматическойСкидки = Отбор.ПроцентАвтоматическойСкидки;
			ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
			
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", НоваяСтрока.Погрешность);
			СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ВариантАнализаНоменклатурыПродаваемойСовместно);
			
		Иначе
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
		ТекущаяСтрока.ПроцентОбщий =  ТекущаяСтрока.ПроцентАвтоматическойСкидки + ТекущаяСтрока.ПроцентРучнойСкидки;
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		//bercut150420
		СуммаДляКорректногоРасчетаРучнойСкидки = 0;
		Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
			
			Если не ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0 Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр((ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена)/(100/ТекущаяСтрока.ПроцентАвтоматическойСкидки),2);
			Иначе
				ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
			КонецЕсли;
			Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
				ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки),2);
			Иначе 
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
			КонецЕсли;
			ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий;
			
			СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
			
			ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
			
		Иначе 
			
			Если не ТекущаяСтрока.ПроцентРучнойСкидки = 0 Тогда
				ТекущаяСтрока.СуммаРучнойСкидки =  Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентРучнойСкидки),2);
			Иначе 
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
			КонецЕсли;
			
			ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена - ТекущаяСтрока.СуммаПроцентОбщий;
			
			СуммаДляКорректногоРасчетаРучнойСкидки = ТекущаяСтрока.Сумма;
			
			ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки;			
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаРучнойСкидки - (ТекущаяСтрока.Сумма - СуммаДляКорректногоРасчетаРучнойСкидки); 
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;		
		//
		
		Если Не ПоказыватьПодобранныеТовары Тогда
			
			ТекстОповещения = Символы.ПС + НСтр("ru = 'Товар ""[Товар]"" стоимостью [Цена] [Валюта] в количестве [КоличествоУпаковок] [ЕдиницаИзмерения] добавлен в корзину'");
			
			ВставляемыеЗначения = Новый Структура("Товар, Цена, Валюта, КоличествоУпаковок, ЕдиницаИзмерения");
			
			ВставляемыеЗначения.Товар              = Строка(ТекущаяСтрока.Номенклатура) + ?(ЗначениеЗаполнено(НоваяСтрока.Характеристика)," (" + НоваяСтрока.Характеристика + ")","");
			ВставляемыеЗначения.Цена               = Формат(ТекущаяСтрока.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=");
			ВставляемыеЗначения.Валюта             = Валюта;
			ВставляемыеЗначения.ЕдиницаИзмерения   = ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка), НоваяСтрока.Упаковка, НСтр("ru = 'ед.'"));
			ВставляемыеЗначения.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок;
			
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОповещения, ВставляемыеЗначения);
			
		КонецЕсли;
		
		ТекущаяСтрока.ЗаказатьНаСклад = Истина;
		Если ЗначениеЗаполнено(ПараметрыУказанияСерий) Тогда
			Если Не ПроверитьУстановитьСтатусСерийНаКлиенте(ТекущаяСтрока, ПараметрыУказанияСерий) Тогда
				МассивИДСтрокПересчетаСтатусаСерий.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивИДСтрокПересчетаСтатусаСерий.Количество() > 0 Тогда
		ЗаполнитьСтатусыУказанияСерий(МассивИДСтрокПересчетаСтатусаСерий);
	КонецЕсли;
	
	Если НовыеСтроки.Количество() > 0 Тогда
		Элементы.Корзина.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбрабатыватьВариантОбеспеченияОсобенно = Неопределено;
	
	Возврат ТекстОповещения;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресТаблицыНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Корзина.Выгрузить(), УникальныйИдентификатор)
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыТовара, ПараметрыФормы = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПараметрыТовара) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьКоличество И Не РежимПодбораБезКоличественныхПараметров Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
			ПараметрыФормы = Новый Структура;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыТовара.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика",                    ПараметрыТовара.Характеристика);
		ПараметрыФормы.Вставить("ВидЦены",                           ПараметрыТовара.ВидЦены);
		ПараметрыФормы.Вставить("Соглашение",                        Соглашение);
		ПараметрыФормы.Вставить("Упаковка",                          ПараметрыТовара.Упаковка);
		ПараметрыФормы.Вставить("Цена",                              ПараметрыТовара.Цена);
		ПараметрыФормы.Вставить("Склад",                             ПараметрыТовара.Склад);
		ПараметрыФормы.Вставить("ДатаОтгрузки",                      ПараметрыТовара.ДатаОтгрузки);
		ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыТовара.ТипНоменклатуры);
		ПараметрыФормы.Вставить("Дата",                              Дата);
		ПараметрыФормы.Вставить("Валюта",                            Валюта);
		ПараметрыФормы.Вставить("СкрытьЦену",                        РежимПодбораБезСуммовыхПараметров Или Не ЗапрашиватьЦену);
		ПараметрыФормы.Вставить("РедактироватьВидЦены",              Элементы.КорзинаВидЦены.Видимость);
		ПараметрыФормы.Вставить("Склады",                            Склады.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",          ИспользоватьДатыОтгрузки);
		ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", РежимПодбораИспользоватьСкладыВТабличнойЧасти);
		ПараметрыФормы.Вставить("ЦенаВключаетНДС",                   Объект.ЦенаВключаетНДС);
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",              СкрыватьРучныеСкидки Или РежимПодбораБезСуммовыхПараметров Или Не ЗапрашиватьЦену);
		ПараметрыФормы.Вставить("ИспользоватьРучныеСкидкиВПродажах", ИспользоватьРучныеСкидкиВПродажах);
		ПараметрыФормы.Вставить("ВидыЦен",                           ВидыЦен.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ОтображатьОстатки",                 ОтображатьОстатки);
		ПараметрыФормы.Вставить("БезОтбораПоВключениюНДСВЦену",      БезОтбораПоВключениюНДСВЦену);
		ПараметрыФормы.Вставить("ПодборТоваров",                     Истина);
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий",            ПараметрыУказанияСерий);
		Если ЗначениеЗаполнено(ОтборПоНазначению) Тогда
			ПараметрыФормы.Вставить("Назначение",                    ОтборПоНазначению);
		Иначе
			ПараметрыФормы.Вставить("Назначение",                    Назначение);
		КонецЕсли;
		ПараметрыФормы.Вставить("Подразделение",                     Подразделение);
		ПараметрыФормы.Вставить("КоличествоОформлено",               0);
		ПараметрыФормы.Вставить("Регистратор",                       ДокументСсылка);
		ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",        ПодборВариантовОбеспечения);
		ПараметрыФормы.Вставить("ТолькоОбособленно",                 ТолькоОбособленно);
		ПараметрыФормы.Вставить("ВариантыОбеспечения",               ВариантыОбеспечения);
		ПараметрыФормы.Вставить("ОграничиватьВариантыОбеспечения",   ОграничиватьВариантыОбеспечения);

		//++Гольм А.А. (Гигабайт) 12.04.2019 12:21:48
		ГИГ_ПодборСРезервированием = Ложь;
		ПараметрыТовара.Свойство("ГИГ_ПодборСРезервированием", ГИГ_ПодборСРезервированием);
		ПараметрыФормы.Вставить("ГИГ_ПодборСРезервированием", ГИГ_ПодборСРезервированием);
		//--Гольм А.А. (Гигабайт) 12.04.2019 12:23:39
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения
			И (ПодборВариантовОбеспечения
				Или (Не (ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
				Или ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")))
				И (ПараметрыТовара.СтатусУказанияСерий <> 0
				Или Склады.Количество()>1))
			И (Не ОграничиватьВариантыОбеспечения
			Или (Не (ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
				Или ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"))))
			И Не СкрыватьКомандуОстаткиНаСкладах 
			И (ЗначениеЗаполнено(Склад) Или ОстаткиПоВсемСкладам) Тогда
			ПараметрыФормы.Вставить("Склад",                         Склад);
			ИмяФормыЗапросаКоличества = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий";
		Иначе
			Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
				ИмяФормыЗапросаКоличества = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.СоставНабора";
			Иначе
				ИмяФормыЗапросаКоличества = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.ЗапросКоличества";
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФорму(
			ИмяФормыЗапросаКоличества, 
			ПараметрыФормы, 
			ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ДобавитьВКорзинуПослеВыбораКоличества", ЭтотОбъект, ПараметрыТовара),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
		
	Иначе
		
		НовыеСтроки = Новый Массив;
		
		Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
			И (Не НеРазбиватьНаборыПоКомплектующим) Тогда
			
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, ПараметрыТовара);
			ПараметрыКомплектующих.НоменклатураНабора   = ПараметрыТовара.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = ПараметрыТовара.Характеристика;
			Если Склады.Количество() = 1 Тогда
				ПараметрыКомплектующих.Склад = Склады.Получить(0).Значение;
			КонецЕсли;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Дата", Дата);
			ДополнительныеПараметры.Вставить("Валюта", Валюта);
			ДополнительныеПараметры.Вставить("Склады", Склады.ВыгрузитьЗначения());
			ДополнительныеПараметры.Вставить("Соглашение", Соглашение);
			ДополнительныеПараметры.Вставить("Цена", ПараметрыТовара.Цена);
			ДополнительныеПараметры.Вставить("ВидЦены", ПараметрыТовара.ВидЦены);
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			
			Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
				НовыеСтроки.Добавить(ПодобранныйТовар);
			КонецЦикла;
			
		Иначе
			НоваяСтрока = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
			//++Гольм А.А. (Гигабайт) 12.04.2019 12:54:39
			ГИГ_ПодборСРезервированием = Ложь;
			ПараметрыТовара.Свойство("ГИГ_ПодборСРезервированием", ГИГ_ПодборСРезервированием);
			Если Не ЗначениеЗаполнено(НоваяСтрока.ВариантОбеспечения) И ГИГ_ПодборСРезервированием = Истина Тогда
				НоваяСтрока.ВариантОбеспечения = ?(ПараметрыТовара.ДатаОтгрузки <> НачалоДня(ТекущаяДата()), ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"), ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
			КонецЕсли;
			//--Гольм А.А. (Гигабайт) 12.04.2019 12:55:27
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
				НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
			КонецЕсли;
			Если ЭтаФорма.ИмяФормы = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Форма" тогда
				Попытка
					Попытка
						Если Элементы.СписокРасширенныйПоискНоменклатура.ТекущиеДанные.ПроцентАвтоматическойСкидкиНаценки <> 0 Тогда
							НоваяСтрока.Вставить("ПроцентАвтоматическойСкидки",Элементы.СписокРасширенныйПоискНоменклатура.ТекущиеДанные.ПроцентАвтоматическойСкидкиНаценки);
							Если  Не  Элементы.СписокРасширенныйПоискНоменклатура.ТекущиеДанные.Деактивирован   Тогда 
								НоваяСтрока.ПроцентРучнойСкидки = Элементы.СписокРасширенныйПоискНоменклатура.ТекущиеДанные.ПроцентРучнойСкидкиНаценки;
							КонецЕсли;
						иначе
							НоваяСтрока.Вставить("ПроцентАвтоматическойСкидки",0);
						КонецЕсли;
					Исключение
					КонецПопытки;
				Исключение
					Попытка 
						Если Элементы.СписокСтандартныйПоискНоменклатура.ТекущиеДанные.ПроцентАвтоматическойСкидкиНаценки <> 0 Тогда
							НоваяСтрока.Вставить("ПроцентАвтоматическойСкидки",Элементы.СписокСтандартныйПоискНоменклатура.ТекущиеДанные.ПроцентАвтоматическойСкидкиНаценки);
							НоваяСтрока.ПроцентРучнойСкидки = Элементы.СписокСтандартныйПоискНоменклатура.ТекущиеДанные.ПроцентРучнойСкидкиНаценки;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецПопытки;
				
				//Казаков М.В.
				Если ПараметрыТовара.Свойство("ГИГ_СхемаОбеспечения") Тогда
					НоваяСтрока.Вставить("ГИГ_СхемаОбеспечения", ПараметрыТовара.ГИГ_СхемаОбеспечения);
					НоваяСтрока.Вставить("ГИГ_СрокПоставки", ПараметрыТовара.ГИГ_СрокПоставки);
				Иначе
					ПараметрыТовара.Вставить("ГИГ_СхемаОбеспечения", ПредопределенноеЗначение("Справочник.СхемыОбеспечения.ПустаяСсылка"));
					ПараметрыТовара.Вставить("ГИГ_СрокПоставки", "");
				КонецЕсли;
			КонецЕсли;	
			НовыеСтроки.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьВКорзинуЗавершение(ПараметрыТовара, НовыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуПослеВыбораКоличества(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеСтроки = Новый Массив;
	
	Для Каждого ПодобранныйТовар Из Результат.ПодобранныеТовары Цикл
		
		НоваяСтрока = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
		
		//ГИГ
		Если ЭтаФорма.ИмяФормы = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Форма" тогда
				Попытка
					Попытка
						Если Элементы.СписокРасширенныйПоискНоменклатура.ТекущиеДанные.ПроцентАвтоматическойСкидкиНаценки <> 0 Тогда
							НоваяСтрока.Вставить("ПроцентАвтоматическойСкидки",Элементы.СписокРасширенныйПоискНоменклатура.ТекущиеДанные.ПроцентАвтоматическойСкидкиНаценки);
							Если  Не  Элементы.СписокРасширенныйПоискНоменклатура.ТекущиеДанные.Деактивирован   Тогда 
								НоваяСтрока.ПроцентРучнойСкидки = Элементы.СписокРасширенныйПоискНоменклатура.ТекущиеДанные.ПроцентРучнойСкидкиНаценки;
							КонецЕсли;
						иначе
							НоваяСтрока.Вставить("ПроцентАвтоматическойСкидки",0);
						КонецЕсли;
					Исключение
					КонецПопытки;
				Исключение
					Попытка 
						Если Элементы.СписокСтандартныйПоискНоменклатура.ТекущиеДанные.ПроцентАвтоматическойСкидкиНаценки <> 0 Тогда
							НоваяСтрока.Вставить("ПроцентАвтоматическойСкидки",Элементы.СписокСтандартныйПоискНоменклатура.ТекущиеДанные.ПроцентАвтоматическойСкидкиНаценки);
							НоваяСтрока.ПроцентРучнойСкидки = Элементы.СписокСтандартныйПоискНоменклатура.ТекущиеДанные.ПроцентРучнойСкидкиНаценки;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецПопытки;
				
				//Казаков М.В.
				Если ДополнительныеПараметры.Свойство("ГИГ_СхемаОбеспечения") Тогда
					НоваяСтрока.Вставить("ГИГ_СхемаОбеспечения", ДополнительныеПараметры.ГИГ_СхемаОбеспечения);
					НоваяСтрока.Вставить("ГИГ_СрокПоставки", ДополнительныеПараметры.ГИГ_СрокПоставки);
				Иначе
					ДополнительныеПараметры.Вставить("ГИГ_СхемаОбеспечения", ПредопределенноеЗначение("Справочник.СхемыОбеспечения.ПустаяСсылка"));
					ДополнительныеПараметры.Вставить("ГИГ_СрокПоставки", "");
				КонецЕсли;
			КонецЕсли;
		//ГИГ

		//++Гольм А.А. (Гигабайт) 12.04.2019 12:38:18
		Если Не ЗначениеЗаполнено(НоваяСтрока.ВариантОбеспечения) И ПодобранныйТовар.Свойство("ГИГ_ПодборСРезервированием") Тогда
			Если ПодобранныйТовар.ГИГ_ПодборСРезервированием = Истина Тогда
				НоваяСтрока.ВариантОбеспечения = ?(ПодобранныйТовар.ДатаОтгрузки <> НачалоДня(ТекущаяДата()), ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"), ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
			КонецЕсли;
		КонецЕсли;
		//--Гольм А.А. (Гигабайт) 12.04.2019 12:42:58
		НовыеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ДобавитьВКорзинуЗавершение(ДополнительныеПараметры, НовыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуЗавершение(ПараметрыТовара, НовыеСтроки)
	
	ТекстОповещения = ДобавитьВКорзинуНаКлиенте(ПараметрыТовара, НовыеСтроки);
	
	Если Не ПоказыватьПодобранныеТовары Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Товар добавлен в корзину'"), , ТекстОповещения);
	КонецЕсли;
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	Иначе
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
	// Если добавление товара в корзину производилось при заполненной строке поиска,
	// то вернуть фокус ввода на строку поиска.
	ИмяТекущегоЭлементаСтрокиПоиска = ПодборТоваровКлиент.ИмяТекущегоЭлементаСтрокиПоиска(ЭтаФорма);
	Если ЗначениеЗаполнено(ЭтаФорма[ИмяТекущегоЭлементаСтрокиПоиска]) Тогда
		ПодборТоваровКлиент.УстановитьТекущийЭлементСтрокаПоиска(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеретащитьВКорзинуНаСервере(Данные)
	
	НовыеСтроки = Новый Массив;
	Для Каждого ПараметрыТовара Из Данные Цикл
		Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
			И (Не НеРазбиватьНаборыПоКомплектующим) Тогда
			
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, ПараметрыТовара);
			ПараметрыКомплектующих.НоменклатураНабора   = ПараметрыТовара.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = ПараметрыТовара.Характеристика;
			Если Склады.Количество() = 1 Тогда
				ПараметрыКомплектующих.Склад = Склады.Получить(0).Значение;
			КонецЕсли;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Дата", Дата);
			ДополнительныеПараметры.Вставить("Валюта", Валюта);
			ДополнительныеПараметры.Вставить("Склады", Склады.ВыгрузитьЗначения());
			ДополнительныеПараметры.Вставить("Соглашение", Соглашение);
			ДополнительныеПараметры.Вставить("Цена", ПараметрыТовара.Цена);
			ДополнительныеПараметры.Вставить("ВидЦены", ПараметрыТовара.ВидЦены);
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			
			Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
				НовыеСтроки.Добавить(ПодобранныйТовар);
			КонецЦикла;
			
		Иначе
			НовыеСтроки.Добавить(ПараметрыТовара);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Если НоваяСтрока.Упаковка.Пустая() Тогда 
			НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
		КонецЕсли;
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("НоменклатураНабора",         НоваяСтрока.НоменклатураНабора);
		Отбор.Вставить("ХарактеристикаНабора",       НоваяСтрока.ХарактеристикаНабора);
		Отбор.Вставить("Номенклатура",               НоваяСтрока.Номенклатура);
		Отбор.Вставить("Характеристика",             НоваяСтрока.Характеристика);
		Отбор.Вставить("ХарактеристикиИспользуются", НоваяСтрока.ХарактеристикиИспользуются);
		Отбор.Вставить("Упаковка",                   НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",                       НоваяСтрока.Цена);
		Отбор.Вставить("ВидЦены",                    НоваяСтрока.ВидЦены);
		Отбор.Вставить("Склад",                      НоваяСтрока.Склад);
		Отбор.Вставить("ПроцентРучнойСкидки",        НоваяСтрока.ПроцентРучнойСкидки);
		Отбор.Вставить("ТипНоменклатуры",            НоваяСтрока.ТипНоменклатуры);
		
		Если ИспользоватьДатыОтгрузки Тогда
			Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		КонецЕсли;
		
		Отбор.Вставить("СрокПоставки", НоваяСтрока.СрокПоставки);
		Отбор.Вставить("ВариантОбеспечения", НоваяСтрока.ВариантОбеспечения);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		
		ДобавитьВСтруктуруДействийЗаполнениеОбеспечения(СтруктураДействий, НоваяСтрока, ДокументСсылка, ВариантыОбеспечения);
		
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 ИЛИ НоваяСтрока.Погрешность <> 0 Тогда
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
			СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", Перечисления.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", НоваяСтрока.Погрешность);
		Иначе
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		ПараметрыСтроки = Новый Структура("Номенклатура, Характеристика, ВариантОбеспечения, Упаковка, Цена, Количество, КоличествоУпаковок, Сумма, ВидЦены, Склад, ДатаОтгрузки, СрокПоставки, ИндексСовместноПродаваемыеТовары, ПроцентРучнойСкидки, СуммаРучнойСкидки");
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущаяСтрока);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ПараметрыСтроки, СтруктураДействий, Неопределено);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыСтроки);
		
		ТекущаяСтрока.ЗаказатьНаСклад = Истина;
		ЗаполнитьСтатусУказанияСерииВСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыТовараПередДобавлениеВКорзину(ПараметрыФормы)
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара(ТекущаяСтрокаНоменклатуры.Номенклатура);
	ПараметрыТовара.ХарактеристикиИспользуются = Истина;
	
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрокаНоменклатуры);
	ПараметрыТовара.ЭтоУслуга = ТекущаяСтрокаНоменклатуры.ЭтоУслуга;	
	Если ТекущаяСтрокаНоменклатуры.ЭтоТовар И Склады.Количество() = 1 Тогда
		ПараметрыТовара.Склад = Склады.Получить(0).Значение;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	ПараметрыФормыИТовараНаСервере(ПараметрыФормы, ПараметрыТовара);
	
	Возврат ПараметрыТовара
	
КонецФункции

&НаСервере
Процедура ПараметрыФормыИТовараНаСервере(ПараметрыФормы, ПараметрыТовара)
	ПараметрыФормы.Вставить("АдресТаблицыПодобраноРанее",        ПолучитьАдресТаблицыНаСервере());
	
	Если ИспользоватьРучныеСкидкиВПродажах Тогда
		АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилищеНаСервере(ПараметрыТовара);
	Иначе
		АдресВоВременномХранилище = Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	Если ПараметрыТовара <> Неопределено Тогда
		ПараметрыТовара.Вставить("СтатусУказанияСерий",0);
		Если ЗначениеЗаполнено(ПараметрыУказанияСерий) Тогда
			ЗаполнитьСтатусУказанияСерииВСтруктуре(ПараметрыТовара, ПараметрыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействийЗаполнениеОбеспечения(СтруктураДействий,Строка, ДокументСсылка, ВариантыОбеспечения)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКлиента")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Если Строка.Свойство("ДатаОтгрузки") Тогда
			ДатаОтгрузки = Строка.ДатаОтгрузки;
		Иначе
			ДатаОтгрузки = '00010101';
		КонецЕсли;
		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(
			ВариантыОбеспечения, ДатаОтгрузки);
		ПараметрыДействия.Склад = Строка.Склад;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаСборку")
		//++ НЕ УТ
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПереработчику")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство")
		//-- НЕ УТ
		//++ НЕ УТКА
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаРемонт")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаПроизводство")
		//-- НЕ УТКА
			Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
		//++ НЕ УТКА
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение",Новый Структура("ЗаполнитьОбособленно", Истина));
		//-- НЕ УТКА
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаКлиенте
Процедура ВыполнитьПоискНоменклатуры()	
	
	ПодборТоваровКлиент.ВыполнениеРасширенногоПоискаВозможно(ЭтаФорма, 
		Новый ОписаниеОповещения("ВыполнитьПоискНоменклатурыЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ВыполнитьПоискНоменклатурыНаСервере();
	
	ПодборТоваровКлиент.ПослеВыполненияПоискаНоменклатуры(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискНоменклатурыНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СнятьОтборПоСтрокеПоискаНоменклатурыНаСервере()
	
	ПодборТоваровКлиентСервер.СнятьОтборПоСтрокеПоискаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискХарактеристик()
	
	ПодборТоваровКлиент.ВыполнениеРасширенногоПоискаВозможно(ЭтаФорма, 
		Новый ОписаниеОповещения("ВыполнитьПоискХарактеристикЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискХарактеристикЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ВыполнитьПоискХарактеристикНаСервере();
	
	ПодборТоваровКлиент.ПослеВыполненияПоискаХарактеристик(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискХарактеристикНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискХарактеристик(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СнятьОтборПоСтрокеПоискаХарактеристикиНаСервере()
	
	ПодборТоваровКлиентСервер.СнятьОтборПоСтрокеПоискаХарактеристик(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВариантомНавигации

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
 	ПодборТоваровКлиент.ПриАктивизацииСтрокиСпискаВидыНоменклатуры(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		ВидНоменклатурыПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВариантНавигацииНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	НадписьВариантНавигацииНавигационнойСсылкиНаСервере(НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура НадписьВариантНавигацииНавигационнойСсылкиНаСервере(НавигационнаяСсылка, СтандартнаяОбработка)
	ПодборТоваровСервер.НадписьВариантНавигацииНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылка, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантНавигации(Команда)
	ПодборТоваровКлиент.ИзменитьВариантНавигации(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантНавигацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено 
		Или ВариантНавигации = Результат.Значение Тогда
		Возврат;
	КонецЕсли;
	
	ВариантНавигации = Результат.Значение;
	ВариантНавигацииПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ВариантНавигацииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВариантаНавигации(ЭтаФорма);
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			
			ПодборТоваровСервер.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
			ПодборТоваровСервер.УстановитьТекстыЗапросовСписковФормыПодбора(ЭтаФорма);
	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция АдресТоваровВХранилище(УникальныйИдентификаторВладельца)
	
	АдресВХранилище = Неопределено;
	
	Если ПеренестиВДокумент Тогда
		Товары = Объект.Корзина.Выгрузить();
		Если Не ПодборВариантовОбеспечения Тогда
			Товары.ЗаполнитьЗначения(Неопределено, "ВариантОбеспечения");
		КонецЕсли;

		АдресВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификаторВладельца);
		
		Если ИспользоватьДатыОтгрузки Тогда
			МаксимальнаяДатаОтгрузки = '00010101';
			Для Каждого Элемент Из Товары Цикл
				
				МаксимальнаяДатаОтгрузки = Макс(МаксимальнаяДатаОтгрузки, Элемент.ДатаОтгрузки);
				
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Процедура НастроитьПоиск(Команда)
	
	ГИГ_МодульКлиент.НастроитьПоиск(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийНаСервере

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	ПодборТоваровСервер.СохранитьНастройкиФормыПодбора(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТолькоВНаличииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборТолькоВНаличии(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииИспользованияФильтров(ЭтаФорма);
	
	Если (ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
		Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) 
		И ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		ПодборТоваровСервер.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
		ГИГ_МодульСервер.ГИГ_УстановитьТекстыЗапросовСписковФормыПодбора(ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВидаНоменклатуры(ЭтаФорма);
	
	Если ИспользоватьФильтры
			И (ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
				Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
				Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) 
			И ВидНоменклатуры = ВидНоменклатурыДоИзменения Тогда
			
			ПодборТоваровСервер.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
			ГИГ_МодульСервер.ГИГ_УстановитьТекстыЗапросовСписковФормыПодбора(ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СписокКачестваПометкаПриИзмененииНаСервере()
	
	ПодборТоваровСервер.СписокКачестваПометкаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураСАналогичнымиСвойствамиНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииОтображенияНоменклатураСАналогичнымиСвойствами(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СПодобраннойНоменклатуройСовместноПродаетсяНаСервере()
	
	ПодборТоваровСервер.ПриУстановкеОтбораПоНоменклатуреПродаваемойСовместно(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКорзиныНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииКорзины(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыДругогоКачестваНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоНоменклатуреДругогоКачества(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СброситьОтборыПоСвойствамНаСервере()
	
	ПодборТоваровСервер.СброситьОтборыПоСвойствам(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПриЗаписиНовойНоменклатурыНаСервере(НовыйЭлементНоменклатуры)
	
	ПодборТоваровСервер.ПриЗаписиНовойНоменклатуры(ЭтаФорма, НовыйЭлементНоменклатуры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормыИТовараНаСервере(ПараметрыФормы, ТоварДляДобавленияВКорзину);
	
	Возврат ПараметрыФормы
КонецФункции

&НаСервере
Функция ПриЗаписиНовойХарактеристикиНаСервере(НовыйЭлементХарактеристик)
	
	ПодборТоваровСервер.ПриЗаписиНовойХарактеристики(ЭтаФорма, НовыйЭлементХарактеристик);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормыИТовараНаСервере(ПараметрыФормы, ТоварДляДобавленияВКорзину);
	
	Возврат ПараметрыФормы
КонецФункции

&НаСервере
Функция ПараметрыСозданияНовойНоменклатурыНаСервере()
	
	Возврат ПодборТоваровСервер.ПараметрыСозданияНовойНоменклатуры(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция ПараметрыСозданияНовойХарактеристикиНаСервере()
	
	Возврат ПодборТоваровСервер.ПараметрыСозданияНовойХарактеристики(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилищеНаСервере(ПараметрыТовара)
	
	Возврат ПодборТоваровСервер.АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилище(ЭтаФорма, ПараметрыТовара);
	
КонецФункции

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатурыРасширенныйПоиск(Команда)
	
	ПодборТоваровКлиент.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатурыСтандартныйПоиск(Команда)
	
	ПодборТоваровКлиент.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры) Экспорт
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Корзина");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	Колонки.Добавить("Сумма");
	Если Не Форма.СкрыватьРучныеСкидки Тогда
		Колонки.Добавить("ПроцентРучнойСкидки");
		Колонки.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	
	Возврат Колонки;
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	Данные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Отбор = Новый Структура;
	Отбор.Вставить("НоменклатураНабора", Данные.НоменклатураНабора);
	Отбор.Вставить("ХарактеристикаНабора", Данные.ХарактеристикаНабора);
	
	СтрокиКомплекта = Объект.Корзина.НайтиСтроки(Отбор);
	
	Колонки = КолонкиНабора(ЭтаФорма);
	
	Для Каждого СтрокаТЧ Из Данные.Комплектующие Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСтроки", СтрокаТЧ.НомерСтрокиДокумента);
		
		НайденныеСтроки = Объект.Корзина.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Для Каждого Колонка Из Колонки Цикл
				НайденныеСтроки[0][Колонка] = СтрокаТЧ[Колонка];
			КонецЦикла;
			
			ИндексСтроки = СтрокиКомплекта.Найти(НайденныеСтроки[0]);
			Если Не ИндексСтроки = Неопределено Тогда
				СтрокиКомплекта.Удалить(ИндексСтроки);
			КонецЕсли;
			ЗаполнитьСтатусУказанияСерииВСтроке(НайденныеСтроки[0].ПолучитьИдентификатор());
		Иначе
			
			НоваяСтрока = Объект.Корзина.Добавить();
			НоваяСтрока.НоменклатураНабора = Данные.НоменклатураНабора;
			НоваяСтрока.ХарактеристикаНабора = Данные.ХарактеристикаНабора;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			Если (НоваяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Или
				НоваяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
				И Склады.Количество() = 1 Тогда
				
				НоваяСтрока.Склад = Склады[0].Значение;
			КонецЕсли;
			НоваяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(НоваяСтрока.НоменклатураНабора), 1, 0);
			ЗаполнитьСтатусУказанияСерииВСтроке(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКомплекта Из СтрокиКомплекта Цикл
		Объект.Корзина.Удалить(СтрокаКомплекта);
	КонецЦикла;
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	Иначе	
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Корзина", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Корзина", ДополнительныйПараметр);
	КонецЕсли;
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	Иначе	
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура КорзинаСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Корзина.ТекущиеДанные;
	ПараметрыПодбораСерий = Новый Структура;
	ПараметрыПодбораСерий.Вставить("ТолькоПросмотр", Ложь);
	ПараметрыПодбораСерий.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыПодбораСерий.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыПодбораСерий.Вставить("Количество", ТекущиеДанные.Количество);
	ПараметрыПодбораСерий.Вставить("Назначение", Назначение);
	ПараметрыПодбораСерий.Вставить("НазначениеОтправителя", ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"));
	
	ПараметрыПодбораСерий.Вставить("Серия", ТекущиеДанные.Серия);
	ПараметрыПодбораСерий.Вставить("Регистратор", ДокументСсылка);
	ПараметрыПодбораСерий.Вставить("Склад", ТекущиеДанные.Склад);
	
	ПараметрыПодбораСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыПодбораСерий.Вставить("ЗначенияПолейДляОпределенияРаспоряжения", Новый Массив);
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыПодбораСерий.Вставить("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки);
	ПараметрыПодбораСерий.Вставить("Текст", "");
	
	ОткрытьФорму("Обработка.ПодборСерийВДокументы.Форма.УказаниеСерииВСтрокеТоваров",ПараметрыПодбораСерий, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий(ИдентификаторыСтрок)
	
	Для Каждого ИД Из ИдентификаторыСтрок Цикл
		ЗаполнитьСтатусУказанияСерииВСтроке(ИД)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьУстановитьСтатусСерийНаКлиенте(Строка, ПараметрыУказанияСерий)
	
	ВариантОбеспечения = Строка.ВариантОбеспечения;
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
		Или Не ЗначениеЗаполнено(Строка.Номенклатура)
		Или Не ЗначениеЗаполнено(Строка.Склад)
		Или ПараметрыУказанияСерий.ЭтоЗаказ
			И ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
			И ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")
			И ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада") Тогда
		Строка.СтатусУказанияСерий = 0;
		Строка.Серия = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусУказанияСерииВСтроке(ИдентификаторСтрока)
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ТекущаяСтрока = Объект.Корзина.НайтиПоИдентификатору(ИдентификаторСтрока);
		Обработки.ГИГ_ПодборТоваровВДокументПродажи.ЗаполнитьСтатусУказанияСерииВСтроке(ТекущаяСтрока, ПараметрыУказанияСерий)
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтатусУказанияСерииВСтруктуре(Структура, ПараметрыУказанияСерий)
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		Обработки.ГИГ_ПодборТоваровВДокументПродажи.ЗаполнитьСтатусУказанияСерииВСтроке(Структура, ПараметрыУказанияСерий)
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КорзинаВариантОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
	ТекущиеДанные = Элементы.Корзина.ТекущиеДанные;
	
	Элементы.КорзинаВариантОбеспечения.СписокВыбора.Очистить();
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Тогда
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));
		Если Не ТолькоОбособленно Тогда
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"));
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"));
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	ИначеЕсли ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	ИначеЕсли ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
		Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ДополнительныеНастройки

&НаКлиенте
Процедура ПоискПоАртикулу(Команда)
	Отказ = Ложь;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Поиск по артикулу в справочнике Номенклатура производителей'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Валюта", Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Дата);
	ПараметрыФормы.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	ПараметрыФормы.Вставить("Артикул", СтрокаПоискаНоменклатура);
	ПараметрыФормы.Вставить("ВидЦены", ВидЦены);
	//ПараметрыФормы.Вставить("ВидыНоменклатуры", ВидыНоменклатуры);
	ПараметрыФормы.Вставить("ДокументСсылка", ДокументСсылка);
	ПараметрыФормы.Вставить("Организация", Организация);
	
	                                                               
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеНоменклатурыЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ГИГ_ФормаПоискаПоАртикулу", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещения);

	Элементы.СписокРасширенныйПоискНоменклатура.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНоменклатурыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ТекущийЭлементНоменклатуры = РезультатЗакрытия;
	СтрокаПоискаНоменклатура = "";
	СнятьОтборПоСтрокеПоискаНоменклатурыНаСервере();
	Если ЗначениеЗаполнено(ТекущийЭлементНоменклатуры) Тогда  
		Элементы.ВидыНоменклатуры.ТекущаяСтрока = ПолучитьВидТекущейСтроки(ТекущийЭлементНоменклатуры);
		ВидНоменклатурыПриИзмененииНаСервере();
		СброситьОтборыПоСвойствамНаСервере();
		Элементы.СписокРасширенныйПоискНоменклатура.ТекущаяСтрока = ТекущийЭлементНоменклатуры;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВидТекущейСтроки(ТекущийЭлементНоменклатуры)
	Возврат ТекущийЭлементНоменклатуры.ВидНоменклатуры;
КонецФункции

#КонецОбласти

&НаСервере
Процедура ГИГ_СформироватьНадписьПоЦенамТарифа(ВидЦены, Номенклатура,ЦенаСоСкидкойНаценкой)  
	НадписьПоТарифу = "";
	ПараметрыОтбора = Новый Структура("Номенклатура,ВидЦены",Номенклатура,ВидЦены);	
	ЗаписьРегистра = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ТекущаяДата(),ПараметрыОтбора);
	Если  ЗаписьРегистра <> Неопределено Тогда 
		Если ЗаписьРегистра.Валюта = ВидЦены.ВалютаЦены Тогда 
			Если ЗаписьРегистра.Цена <> 0 Тогда 
				НадписьПоТарифу = "Цена в валюте тарифа: "+ЗаписьРегистра.Цена+" "+ЗаписьРегистра.Валюта.Наименование+
				" "+Символы.ПС+"Цена со скидкой в валюте тарифа"+ " "+ЦенаСоСкидкойНаценкой+" "+ЗаписьРегистра.Валюта.Наименование;
			иначе
				НадписьПоТарифу = "Цена не установлена.";
			КонецЕсли;
		иначе
			СтруктураОтбораКурса = Новый Структура;
			СтруктураОтбораКурса.Вставить("Валюта",ЗаписьРегистра.Валюта);
			ЗаписьКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(),СтруктураОтбораКурса);
			Если  ЗаписьКурса <> Неопределено Тогда 
				Если ЗаписьКурса.Курс <> 0 Тогда 
					СуммаПересчета = Окр(ЦенаСоСкидкойНаценкой /ЗаписьКурса.Курс,2,1); 
					НадписьПоТарифу = "Цена в валюте тарифа: "+ЗаписьРегистра.Цена+" "+ЗаписьРегистра.Валюта.Наименование+
					" "+Символы.ПС+"Цена со скидкой в валюте тарифа"+ " "+СуммаПересчета+" "+ЗаписьРегистра.Валюта.Наименование;
				Иначе
					НадписьПоТарифу = ""
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоETIM(Команда)
	
	Отказ = Ложь;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Поиск по ETIM в справочнике Группы и классы ETIM'");
	
	АдресНоменклатуры = "";
	ПоместитьВХранилищеСервер(АдресНоменклатуры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНоменклатураСпискаВоВременномХранилище", АдресНоменклатуры);
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборПоВыбранномуКлассуETIM", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.Рин1_ФормаПоискаПоETIM", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещения);
	
	Элементы.СписокРасширенныйПоискНоменклатура.Обновить();	
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеСервер(АдресНоменклатуры)
	
	Схема       = Элементы.СписокРасширенныйПоискНоменклатура.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки   = Элементы.СписокРасширенныйПоискНоменклатура.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета  = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки  = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода  = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	АдресНоменклатуры = ПоместитьВоВременноеХранилище(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВыбранномуКлассуETIM(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		
		СписокНоменклатура.Отбор.Элементы.Очистить();
		НовЭлементОтбора = СписокНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Код");
		НовЭлементОтбора.ПравоеЗначение = РезультатЗакрытия;
		НовЭлементОтбора.Использование = Истина;
		НовЭлементОтбора.Представление = "Отбор по классификатору ETIM";
		
		ИспользоватьФильтры = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборПоETIM(Команда)
	ИспользоватьФильтрыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЦенаСоСкидкойПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	Если не ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		Если не ТекущаяСтрока.Цена = 0 Тогда
			ТекущаяСтрока.ПроцентОбщий = (100-100/(ТекущаяСтрока.Цена/ТекущаяСтрока.ЦенаСоСкидкой));
		Иначе 
			ТекущаяСтрока.ПроцентОбщий = 0;
		КонецЕсли;
		ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ТекущаяСтрока.ПроцентАвтоматическойСкидки;  
		ТекущаяСтрока.СуммаПроцентОбщий = (ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентОбщий))*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки; 
		
	Иначе
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
		Если не ТекущаяСтрока.Цена = 0 Тогда
			ТекущаяСтрока.ПроцентОбщий = (100-100/(ТекущаяСтрока.Цена/ТекущаяСтрока.ЦенаСоСкидкой));
		Иначе 
			ТекущаяСтрока.ПроцентОбщий = 0;
		КонецЕсли;
		ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий;	
		ТекущаяСтрока.СуммаПроцентОбщий =  (ТекущаяСтрока.Цена/(100/ТекущаяСтрока.ПроцентОбщий))*ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий;	
		
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
	
КонецПроцедуры


ВыполняетсяЗакрытие = Ложь;
