&НаСервере
Функция ОбработкаОбъект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем ОперационныеСистемы, OS1, СистемнаяИнформация, ТипПлатформы;
	
	//++ ОБЩЕЕ.
	
	ИмяОбработки 						= Параметры.ИмяОбработки + ". " + Параметры.АвторскиеПраваНаОбработку;
	КомментарийОбработки				= Параметры.КомментарийОбработки + ".";
	ВерсияОбработки						= Параметры.ВерсияОбработки;
	ДомашняяСтраницаОбработки			= Параметры.ДомашняяСтраницаОбработки;
	ФайлОбработки						= Параметры.ФайлОбработки;
	Элементы.ДомашняяСтраницаОбработки.Заголовок = ДомашняяСтраницаОбработки;
	
	ПлатформаИВерсия	 				= "1С:Предприятие, версия " + Параметры.ВерсияПриложения;
	КонфигурацияИВерсия 				= Параметры.КонфигурацияИВерсия;
	БазаДанных							= Параметры.СтрокаСоединенияИнформационнойБазы;
	
	РежимСовместимости					= Параметры.РежимСовместимости;
	ВерсияБСП	 						= Параметры.ВерсияБСП;
	РежимИспользованияМодальностиБулево	= Параметры.РежимИспользованияМодальностиБулево;
	РежимИспользованияМодальностиСтрока	= Параметры.РежимИспользованияМодальностиСтрока;
	
	РежимЗапуска1С						= ""+Параметры.ОсновнойРежимЗапускаПриложения + " / " + Параметры.ТекущийРежимЗапускаПриложения + " (" + Параметры.ТекущийРежимЗапускаКлиента + ")";

	ТекущийПользовательИБ   			= Параметры.ТекущийПользовательИБ;
	РольПолныеПраваДоступна				= Параметры.РольПолныеПраваДоступна;
	ПравоДоступаАдминистрирование		= Параметры.ПравоДоступаАдминистрирование;
	
	ИспользоватьСтандартнуюФормуВыбора	= Параметры.ИспользоватьСтандартнуюФормуВыбора;
	
	//++.
	
	// ЛЕВО.
	МонопольныйРежим						= Параметры.МонопольныйРежим;
	ОбменДаннымиЗагрузка					= Параметры.ОбменДаннымиЗагрузка;
	//ПРАВО.
	ПоказыватьСообщения						= Параметры.ПоказыватьСообщения;
	СкрыватьПустыеТаблицыДвиженийРегистров	= Параметры.СкрыватьПустыеТаблицыДвиженийРегистров;
	СкрыватьПустыеТабличныеЧасти			= Параметры.СкрыватьПустыеТабличныеЧасти;
	
	DomainComputerUser						= ОбработкаОбъект().DomainComputerUser(Ложь);
	Если ЗначениеЗаполнено(DomainComputerUser.Computer) Тогда
		Домен = DomainComputerUser.Domain;
		Компьютер = DomainComputerUser.Computer;
		Если ВРег(Домен) = ВРег(Компьютер) Тогда
			Элементы.Домен.Видимость = Ложь;
		КонецЕсли;
		ПользовательОС = DomainComputerUser.User;
	Иначе
		Компьютер = ИмяКомпьютера();
		Элементы.Домен.Видимость = Ложь;
		Элементы.ПользовательОС.Видимость = Ложь;
	КонецЕсли;
	
	ОперационныеСистемы = ОбработкаОбъект().Computer_WindowsInfo(".");
	ОперационнаяСистема = "Windows Management Instrumentation (WMI) не настроен";
	Для Каждого OS1 ИЗ ОперационныеСистемы Цикл
		Если OS1.Primary Тогда
			ОперационнаяСистема = "" + OS1.Caption + " " + OS1.CSDVersion + " " + OS1.OSArchitecture;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Обозначения	= "1. Значек ~ (тильда)   	- Означает ""ПОЧТИ"", например ~Предопределенный (для ПланаОбмена).
				  |2. Значек * (звездочка)	- Означает Предопределенный (например элемент Справочника).";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

КонецПроцедуры

&НаКлиенте
Процедура МонопольныйРежимПриИзменении(Элемент)
	
	МонопольныйРежимПриИзмененииНаСервере(ЭтаФорма.МонопольныйРежим);
	
	Попытка
		Оповестить("МонопольныйРежим", ЭтаФорма.МонопольныйРежим, ЭтаФорма);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
	Если ЭтаФорма.МонопольныйРежим Тогда
		ПредупреждениеСообщение(, "МОНОПОЛЬНЫЙ:
		|
		|""Один пашет, а семеро руками машут."" (народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	Иначе
		ПредупреждениеСообщение(, "МНОГОПОЛЬЗОВАТЕЛЬКИЙ ДОСТУП:
		|
		|""Один горюет, а артель воюет."" (народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МонопольныйРежимПриИзмененииНаСервере(Значение)
	
	Попытка
		УстановитьМонопольныйРежим(Значение);
		ЭтаФорма.МонопольныйРежим = МонопольныйРежим();
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
		ЭтаФорма.МонопольныйРежим = МонопольныйРежим();
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСообщенияПриИзменении(Элемент)
	
	Оповестить("ПоказыватьСообщения", ЭтаФорма.ПоказыватьСообщения, ЭтаФорма);
	
	Если ЭтаФорма.ПоказыватьСообщения Тогда
		ПредупреждениеСообщение(, "ПОКАЗЫВАТЬ СООБЩЕНИЯ.
		|
		|""Свой глаз - алмаз."" (народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	Иначе	
		ПредупреждениеСообщение(, "НЕ ПОКАЗЫВАТЬ СООБЩЕНИЯ.
		|
		|""Не видит око и зуб неймет."" (~ народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменДаннымиЗагрузкаПриИзменении(Элемент)
	
	Оповестить("ОбменДаннымиЗагрузка", ЭтаФорма.ОбменДаннымиЗагрузка, ЭтаФорма);
	
	Если ЭтаФорма.ОбменДаннымиЗагрузка Тогда
		ПредупреждениеСообщение(, "ОТКЛЮЧИТЬ ТРИГГЕРЫ ЗАПИСИ (<Объект изменяемый>.ОбменДанными.Загрузка = Истина):
		|
		|Изменение значения вляет только на поведение обработки, но не на сеанс работы в 1С.
		|
		|1С: Если значение данного свойства Истина, 
		|то при выполнении записи или удаления данных будет производиться минимум проверок, 
		|так как при этом делается предположение, что производится запись данных, 
		|полученных через механизмы обмена данными, и эти данные корректны.
		|
		|Триггер (Trigger) - это особый вид хранимых процедур, автоматически выполняемых 
		|при исполнении оператора Update, Insert или Delete над данными таблицы.
		|
		|""Одна мудрая голова ста голов стоит."" (народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	Иначе	
		ПредупреждениеСообщение(, "ВКЛЮЧИТЬ ТРИГГЕРЫ ЗАПИСИ (<Объект изменяемый>.ОбменДанными.Загрузка = Ложь):
		|
		|Изменение значения вляет только на поведение обработки, но не на сеанс работы в 1С.
		|
		|1С: Если значение данного свойства Истина, 
		|то при выполнении записи или удаления данных будет производиться минимум проверок, 
		|так как при этом делается предположение, что производится запись данных, 
		|полученных через механизмы обмена данными, и эти данные корректны.
		|
		|Триггер (Trigger) - это особый вид хранимых процедур, автоматически выполняемых 
		|при исполнении оператора Update, Insert или Delete над данными таблицы.
		|
		|""Одна голова хорошо, а две лучше."" (народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьПустыеТаблицыДвиженийРегистровПриИзменении(Элемент)
	
	Оповестить("СкрыватьПустыеТаблицыДвиженийРегистров", ЭтаФорма.СкрыватьПустыеТаблицыДвиженийРегистров, ЭтаФорма);

	Если ЭтаФорма.СкрыватьПустыеТаблицыДвиженийРегистров Тогда
		ПредупреждениеСообщение(, "НЕ ОТОБРАЖАТЬ ПУСТЫЕ ТАБЛИЦЫ ДВИЖЕНИЙ РЕГИСТРОВ.
		|
		|""С глаз долой - из сердца вон."" (народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	Иначе	
		ПредупреждениеСообщение(, "ОТОБРАЖАТЬ ВСЕ ТАБЛИЦЫ ДВИЖЕНИЙ РЕГИСТРОВ (в т.ч. пустые).
		|
		|""Глаза боятся, а руки делают."" (народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьПустыеТабличныеЧастиПриИзменении(Элемент)
	
	Оповестить("СкрыватьПустыеТабличныеЧасти", ЭтаФорма.СкрыватьПустыеТабличныеЧасти, ЭтаФорма);

	Если ЭтаФорма.СкрыватьПустыеТабличныеЧасти Тогда
		ПредупреждениеСообщение(, "НЕ ОТОБРАЖАТЬ ПУСТЫЕ ТАБЛИЧНЫЕ ЧАСТИ.
		|
		|""С глаз долой - из сердца вон."" (народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	Иначе	
		ПредупреждениеСообщение(, "ОТОБРАЖАТЬ ВСЕ ТАБЛИЧНЫЕ ЧАСТИ (в т.ч. пустые).
		|
		|""Глаза боятся, а руки делают."" (народная мудрость)",, "УСТАНОВЛЕН РЕЖИМ:");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДомашняяСтраницаОбработки(Команда)
	ЗапуститьПриложение(ДомашняяСтраницаОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеСообщение(Оповещение, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = "")
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Выполнить("ПоказатьПредупреждение(Оповещение, ТекстПредупрежденияСообщения, Таймаут, Заголовок)");
	КонецЕсли;;
		
КонецПроцедуры

&НаКлиенте
Функция ИспользоватьРежимМодальности()
	Возврат РежимИспользованияМодальностиСтрока = "Использовать";
КонецФункции

&НаКлиенте
Процедура ИспользоватьСтандартнуюФормуВыбораПриИзменении(Элемент)
	Оповестить("ИспользоватьСтандартнуюФормуВыбора", ЭтаФорма.ИспользоватьСтандартнуюФормуВыбора, ЭтаФорма);
КонецПроцедуры
