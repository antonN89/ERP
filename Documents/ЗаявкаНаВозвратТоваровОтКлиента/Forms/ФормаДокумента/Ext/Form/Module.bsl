&НаСервере
Функция ПолучитьМаксимальноеЗначение(Номенклатура,ТекущееЗначениеСкидкиНаценки)
	МаксСкидка = 0;
	Данные = Объект.Соглашение;
	СтруктураОтбора = Новый Структура("ЦеноваяГруппа",Номенклатура.ЦеноваяГруппа);
	МассивСтрок = Данные.ЦеновыеГруппы.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() > 0 Тогда 
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Макс(МассивСтрок[0].ПроцентРучнойСкидки,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки);
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			ПроцентНаценкиОбщий = МассивСтрок[0].ПроцентРучнойНаценки;
			ПроцентНаценкиИнд   = ?(МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки < 0,МассивСтрок[0].ПроцентИндивидуальнойСкидкиНаценки,0);
			Возврат Мин(ПроцентНаценкиОбщий,ПроцентНаценкиИнд);
		КонецЕсли;
	Иначе
		Если ТекущееЗначениеСкидкиНаценки > 0 Тогда  
			Возврат Объект.Соглашение.ПроцентРучнойСкидки;
		ИначеЕсли ТекущееЗначениеСкидкиНаценки < 0 Тогда 
			Возврат Объект.Соглашение.ПроцентРучнойНаценки;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЦеноваяГруппа",СсылкаНоменклатура.ЦеноваяГруппа);
	МассивСтрок = СтруктураТаблиц.Ограничения.НайтиСтроки(СтруктураОтбора);
	ЗначениеСкидки = 0;
	Если МассивСтрок.Количество() > 0 Тогда 
		Попытка
			Если НЕ МассивСтрок[0].Деактивирован Тогда 
				ЗначениеСкидки = ?(МассивСтрок[0].МаксимальныйПроцентРучнойСкидки = 0,МассивСтрок[0].МаксимальныйПроцентРучнойНаценки,МассивСтрок[0].МаксимальныйПроцентРучнойСкидки);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат ЗначениеСкидки;
КонецФункции

&НаСервере
Функция ТестРасчетСк()
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СписокПрименныхСкидок = Новый СписокЗначений;
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	Если ПримененныеСкидки.ДеревоСкидок.Строки.Количество() > 0 Тогда 
		Для Каждого СтрокаСписка из ПримененныеСкидки.ДеревоСкидок.Строки[0].Строки цикл
			Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий.Количество()>0  Тогда  // есть дополнительные условия по скидке... нужна на них проверка
				Если СтрокаСписка.ПараметрыУсловий.ТаблицаУсловий[0].Выполнено = Истина тогда
					СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
				КонецЕсли;
			иначе // условий нет.. все скидки - в список...
				СписокПрименныхСкидок.Добавить(СтрокаСписка.ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокПрименныхСкидок;
КонецФункции

//Работа со скидками/наценками
&НаКлиентеНаСервереБезКонтекста
Процедура ГИГ_РассчитатьПроцентОбщий(ТекущаяСтрока) 
	ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
	ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(СтрокаТабличнойЧасти)
	
	// автоматическое заполнение по скидкам / наценкам  при корректировке данных табличной части
	
	Если СтрокаТабличнойЧасти <> Неопределено тогда  
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда 
			СсылкаНоменклатура = СтрокаТабличнойЧасти.Номенклатура;
			Если  СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0 Тогда
				РассчитатьСкидкиНаценкиКлиент();
			КонецЕсли;
			Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 0 Тогда 
				РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура);
			КонецЕсли;
			ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(СтрокаТабличнойЧасти);
		КонецЕсли;
		ГИГ_РассчитатьПроцентОбщий(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
&Вместо("ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары")
Процедура Рин1_ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействий, Объект)
	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаменяющиеТовары());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуНаСервере()
	
	КвЧисла = Новый КвалификаторыЧисла(15,2);	
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("ПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.ЗаменяющиеТовары", "% общей скидки", Истина));
	нРеквизиты.Добавить(Новый РеквизитФормы("СуммаПроцентОбщий", Новый ОписаниеТипов("Число",,,КвЧисла), "Объект.ЗаменяющиеТовары", "Общая скидка", Истина));
	ИзменитьРеквизиты(нРеквизиты);
	
	нЭлемент = Элементы.Добавить("ПроцентОбщий", Тип("ПолеФормы"), Элементы.ЗаменяющиеТовары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.ЗаменяющиеТовары.ПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.ЗаменяющиеТовары, Элементы.ЗаменяющиеТовары.ПодчиненныеЭлементы.ЗаменяющиеТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменяющиеТовары.ПодчиненныеЭлементы.ПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаменяющиеТовары.ПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	
	нЭлемент = Элементы.Добавить("СуммаПроцентОбщий", Тип("ПолеФормы"), Элементы.ЗаменяющиеТовары); 
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлемент.ПутьКДанным = "Объект.ЗаменяющиеТовары.СуммаПроцентОбщий"; 
	Элементы.Переместить(нЭлемент, Элементы.ЗаменяющиеТовары, Элементы.ЗаменяющиеТовары.ПодчиненныеЭлементы.ЗаменяющиеТоварыСумма);
	нЭлемент.УстановитьДействие("ПриИзменении", "ПроцентПриИзменении");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменяющиеТовары.ПодчиненныеЭлементы.СуммаПроцентОбщий.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаменяющиеТовары.СуммаПроцентОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	Если Объект.ЗаменяющиеТовары.Количество() <> 0 Тогда 
		Для Каждого ТекущаяСтрока из Объект.ЗаменяющиеТовары цикл
			ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
			ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		КонецЦикла;	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаменяющиеТоварыВидЦеныПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	// ГИГ_Конец
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаменяющиеТоварыКоличествоУпаковокПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействий, Объект);	
	
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	// ГИГ_Конец
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	//++Гольм А.А. (Гигабайт)
	//СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаменяющиеТоварыНоменклатураПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаменяющиеТовары());
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.Заменяющие));
	
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыДействия.Склад = Объект.Склад;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ЗаменяющиеТовары"));

	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	// ГИГ_Конец
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.ЗаменяющиеТовары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаменяющиеТоварыОткрытьПодборВместо(Команда)
	
		// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаявкаНаВозвратТоваровОтКлиента.ФормаДокумента.Команда.ЗаменяющиеТоварыОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'заявку на возврат товаров от клиента'"));
	КонецЕсли;
	//++Гольм А.А. (Гигабайт)
	СкидкаПримененная = ТестРасчетСк();
	//--Гольм А.А. (Гигабайт)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",           Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация",          Объект.Организация);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтХранителя") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	
	КонецЕсли;
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",      Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС",   Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", Истина);
	ПараметрыФормы.Вставить("Склад",                Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",               Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",            ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                 Объект.Дата);
	ПараметрыФормы.Вставить("Документ",             Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.Заменяющие);
	ПараметрыФормы.Вставить("Назначение",             Объект.Назначение);
	ПараметрыФормы.Вставить("Подразделение",          Объект.Подразделение);
	//++Гольм А.А. (Гигабайт)
	ПараметрыФормы.Вставить("ПримененнаяСкидка",                       СкидкаПримененная);
	//--Гольм А.А. (Гигабайт)
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения", Истина);
	ПараметрыФормы.Вставить("ВозвращатьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	
	ПараметрыФормы.Вставить("ВариантыОбеспечения",    ВариантыОбеспечения);
	
	//++Гольм А.А. (Гигабайт)
	ОткрытьФорму("Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаменяющиеТоварыСтавкаНДСПриИзмененииВместо(Элемент)
	
		ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаменяющиеТоварыСуммаРучнойСкидкиПриИзмененииВместо(Элемент)
	
		ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы =ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	// добавлена проверка на макс ручной
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,Объект.Дата,ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
    // конец проверки
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаменяющиеТоварыЦенаПриИзмененииВместо(Элемент)
	
		ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//++Гольм А.А. (Гигабайт)
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	//--Гольм А.А. (Гигабайт)
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаменяющиеТовары());
	// ГИГ_Начало
	ГИГ_РасчетСкидки_НаценкиПоСтрокеТЧ(ТекущаяСтрока);
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	// ГИГ_Конец
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаписатьДокументВместо(Команда)
	
		//++Гольм А.А. (Гигабайт)
	Объект.СкидкиРассчитаны = Истина;
	//--Гольм А.А. (Гигабайт)
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
	//++Гольм А.А. (Гигабайт)
	ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.ЗаменяющиеТовары);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
&Вместо("КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении")
Процедура Рин1_КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	
		Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НеОтгружатьЧастями" Тогда
		НеОтгружатьЧастямиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаОтгрузки" Тогда
		ДатаОтгрузкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДокументРеализации" Тогда
		ДокументРеализацииПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПоступлениеОднойДатой" Тогда
		ПоступлениеОднойДатойПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаПоступления" Тогда
		ДатаПоступленияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЧекККМ" Тогда
		ЧекККМПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТребуетсяЗалогЗаТару" Тогда
		ТребуетсяЗалогЗаТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвратПереданнойМногооборотнойТары" Тогда
		ВозвратПереданнойМногооборотнойТарыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыНоменклатура" Тогда
		ВозвращаемыеТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыПорча" Тогда
		ВозвращаемыеТоварыПорчаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыНоменклатураОприходование" Тогда
		ВозвращаемыеТоварыНоменклатураОприходованиеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыХарактеристика" Тогда
		ВозвращаемыеТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыКоличествоУпаковок" Тогда
		ВозвращаемыеТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыУпаковка" Тогда
		ВозвращаемыеТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыВидЦены" Тогда
		ВозвращаемыеТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыЦена" Тогда
		ВозвращаемыеТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыСтавкаНДС" Тогда
		ВозвращаемыеТоварыСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращаемыеТоварыСумма" Тогда
		ВозвращаемыеТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыНоменклатура" Тогда
		ЗаменяющиеТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыХарактеристика" Тогда
		ЗаменяющиеТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыКоличествоУпаковок" Тогда
		ЗаменяющиеТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыУпаковка" Тогда
		ЗаменяющиеТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыВидЦены" Тогда
		ЗаменяющиеТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыЦена" Тогда
		ЗаменяющиеТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыСтавкаНДС" Тогда
		ЗаменяющиеТоварыСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыПроцентРучнойСкидки" Тогда
		ЗаменяющиеТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыСуммаРучнойСкидки" Тогда
		ЗаменяющиеТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыСумма" Тогда
		ЗаменяющиеТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЗаменяющиеТоварыСуммаНДС" Тогда
		ЗаменяющиеТоварыСуммаНДСПриИзменении(Элемент);
		//Добавлено начало ГИГ
	ИначеЕсли Элемент.Имя = "ПроцентОбщий" Тогда
		ПроцентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
		ПроцентПриИзменении(Элемент);
		//Добавлено конецГИГ
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение")
Процедура Рин1_НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
	
		АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.ЗаменяющиеТовары.ВыделенныеСтроки, АдресВоВременномХранилище);
		//++Гольм А.А. (Гигабайт)
		//СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		//--Гольм А.А. (Гигабайт)
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("НазначитьРучнуюСкидкуЗавершение")
Процедура Рин1_НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры)
	
		АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		//++Гольм А.А. (Гигабайт)
		//СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		//--Гольм А.А. (Гигабайт)
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОбработкаВыбораВместо(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаДокумента.Событие.ОбработкаВыбора");

	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда

		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда

		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда

		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказКлиента.Форма.РеквизитыПечати" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПечатьЗаявленияНаВозвратТоваровОтКлиента.Форма.РеквизитыПечатиЗаявленияНаВозврат" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборТоваровПоРеализациям" Тогда
		
		ОбработкаВыбораПодборПоРеализацииСервер(ВыбранноеЗначение);
		
	//++ НЕ УТ
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровПереданныхНаОтветственноеХранение.Форма.Форма" Тогда

		ОбработкаВыбораПодборПереданныхТоваров(ВыбранноеЗначение);
		
	//-- НЕ УТ
	//++Гольм А.А. (Гигабайт)	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
	//ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
	//--Гольм А.А. (Гигабайт)
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ИсточникВыбора.ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		
	КонецЕсли;
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.ЗаменяющиеТовары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
&Вместо("ОбработкаВыбораПодборНаСервере")
Процедура Рин1_ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.ЗаменяющиеТовары.Добавить();
		//++Гольм А.А. (Гигабайт)
		//ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ДатаОтгрузки, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки, ВариантОбеспечения, Серия");
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ДатаОтгрузки, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки, ПроцентАвтоматическойСкидки, СуммаАвтоматическойСкидки, ВариантОбеспечения, Серия");
		//--Гольм А.А. (Гигабайт)
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
			ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
			ПараметрыДействия.Склад = Объект.Склад;
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
			
			Если ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
				
				СтруктураДействий.Вставить("ЗаполнитьВариантОбеспеченияПоДатеОтгрузки",
					ОбеспечениеКлиентСервер.СтруктураЗаполненияВариантаОбеспечения(Объект, СтрокаТовара.ДатаОтгрузки));
				
			КонецЕсли;
		КонецЕсли;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействий, Объект);
		
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		//++Гольм А.А. (Гигабайт)
		ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
		//--Гольм А.А. (Гигабайт)
	КонецЦикла;
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.ЗаменяющиеТовары);
	
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары,СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "ЗаменяющиеТовары");
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
&Вместо("ОткрытьПодборСерий")
Процедура Рин1_ОткрытьПодборСерий(ИмяТЧ, Текст, ТекущиеДанные)
	
	ИмяЭлементаФормы = ИмяТЧ + "Товары";
	
	Если ИмяЭлементаФормы = "ЗаменяющиеТовары" И ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				//++Гольм А.А. (Гигабайт)
				"Обработка.ГИГ_ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				//"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				//--Гольм А.А. (Гигабайт)
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий[ИмяТЧ],Текст, ТекущиеДанные) Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяЭлементаФормы].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;	
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ);
		
		ЗначениеВозврата = Неопределено;

		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ИмяТЧ, ПараметрыФормыУказанияСерий", ИмяТЧ, ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Партнер <> ВыбранноеЗначение тогда
		Если Объект.ЗаменяющиеТовары.Количество() <> 0 тогда
			Параметр = Новый Структура("СтароеЗначение,НовоеЗначение",Объект.Партнер,ВыбранноеЗначение);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    ОтветНаВопрос = РезультатВопроса;
    ТекПараметр = ДополнительныеПараметры.СтароеЗначение;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
			Объект.Соглашение = ДополнительныеПараметры.НовоеЗначение;
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			СоглашениеПриИзмененииСервер();
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
		КонецЕсли;
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Партнер = ДополнительныеПараметры.НовоеЗначение;
			ПартнерПриИзмененииСервер();
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
				ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
		РассчитатьСкидкиНаценкиРучныеДляТаблЧасти();
	иначе
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
			Объект.Соглашение = ДополнительныеПараметры.СтароеЗначение;
		КонецЕсли;
		Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.Партнеры") Тогда 
			Объект.Партнер = ДополнительныеПараметры.СтароеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПриОткрытииПосле(Отказ)
	
	ДобавитьКолонкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ПровестиДокументВместо(Команда)
	
		//++Гольм А.А. (Гигабайт)
	Объект.СкидкиРассчитаны = Истина;
	//--Гольм А.А. (Гигабайт)
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	//++Гольм А.А. (Гигабайт)
	ГИГ_МодульКлиент.ПересчитатьСтрокиДокумента(Объект.ЗаменяющиеТовары);
	//--Гольм А.А. (Гигабайт)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	// тут програмно обрабатываем изменения добавленной колонки...
	Если Элемент.Имя = "ПроцентОбщий" Тогда 
		ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
		ЗначениеАвтоматической = ТекущаяСтрока.ПроцентАвтоматическойСкидки;
		Если ТекущаяСтрока.ПроцентОбщий <> 0 Тогда 
			ТекущаяСтрока.ПроцентРучнойСкидки = ТекущаяСтрока.ПроцентОбщий - ЗначениеАвтоматической;
			ЗаменяющиеТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
		Иначе
			Если ЗначениеАвтоматической <> 0 Тогда 
				ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
			КонецЕсли;	
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	ИначеЕсли Элемент.Имя = "СуммаПроцентОбщий" Тогда
		ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
		ЗначениеАвтоматической = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если  ТекущаяСтрока.СуммаПроцентОбщий <> 0 Тогда 
			ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ЗначениеАвтоматической;
			ЗаменяющиеТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
		Иначе
			Если ЗначениеАвтоматической <> 0 Тогда 
				ТекущаяСтрока.ПроцентОбщий = ЗначениеАвтоматической;
			КонецЕсли;	
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	Иначе
		Если ТекущаяСтрока <> Неопределено Тогда 
			ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("РассчитатьСкидкиНаценкиКлиент")
Процедура Рин1_РассчитатьСкидкиНаценкиКлиент()
	
		СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	Если НЕ Объект.ЗаполнятьЦеныЗаменяющихТоваровПоВозвращаемым Тогда
		//++Гольм А.А. (Гигабайт)
		//ПоказатьОповещениеПользователя(
		//	НСтр("ru = 'Скидки (наценки)'"),
		//	,
		//	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		//	БиблиотекаКартинок.Информация32);
		//--Гольм А.А. (Гигабайт)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеДляТаблЧасти()
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда 
		АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
		// добавлено ГИГ
		Если Объект.ЗаменяющиеТовары.Количество() > 0 Тогда 
			Для Каждого ТекущаяСтрока из Объект.ЗаменяющиеТовары Цикл 
				// автоматическое заполнение по скидкам / наценкам
				Если ТекущаяСтрока <> Неопределено тогда  
					Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
						СсылкаНоменклатура = ТекущаяСтрока.Номенклатура;
						РассчитатьСкидкиНаценкиКлиент();
						ТекущаяСтрока.ПроцентРучнойСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаменяющиеТовары());
						
						ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						
						ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентАвтоматическойСкидки + ТекущаяСтрока.ПроцентРучнойСкидки;	
						ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаАвтоматическойСкидки + ТекущаяСтрока.СуммаРучнойСкидки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиРучныеКлиент(СсылкаНоменклатура)
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "ЗаменяющиеТовары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;

	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	ЗначениеСкидки = РассчитатьСкидкиНаценкиРучныеСервер(АдресВоВременномХранилище,СсылкаНоменклатура);
	ТекЭлемент = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	ТекЭлемент.ПроцентРучнойСкидки = ЗначениеСкидки;	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Соглашение <> ВыбранноеЗначение тогда
		Если Объект.ЗаменяющиеТовары.Количество() <> 0 тогда
			СтандартнаяОбработка = Ложь;
			Параметр = Новый Структура("СтароеЗначение,НовоеЗначение",Объект.Соглашение,ВыбранноеЗначение);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчетТабличнойЧастиЗавершение", ЭтотОбъект,Параметр), НСтр("ru = 'При изменении соглашения с клиентом данные табличной части будут пересчитаны по условиям соглашения. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ЗаменяющиеТоварыПроцентРучнойСкидкиПриИзмененииВместо(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	// добавлена проверка на макс ручной
	ГИГ_Сервер_ОбработкаДокументов.ПроверитьПеревышениеНаСервере(ТекущаяСтрока.Номенклатура,Объект.Дата,ТекущаяСтрока.ПроцентРучнойСкидки,ТекущаяСтрока.ПроцентАвтоматическойСкидки);
	ГИГ_МодульКлиент.ПересчитатьДанныеСтроки(ТекущаяСтрока);
	// конец проверки
	
КонецПроцедуры

&НаКлиенте
Процедура ГИГ_ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	
	Если Команда.Имя = "ЗагрузитьВозвращаемыеТоварыИзВнешнегоФайла" Тогда
		ПараметрыФормы.Вставить("ИмяТЧ", "ВозвращаемыеТовары");
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
	Иначе
		ПараметрыФормы.Вставить("ИмяТЧ", "ЗаменяющиеТовары");
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтХранителя") Тогда
			ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ГИГ_ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

// + [Rineco], [Киселев А.Н.] [10.09.2021] 
// Задача: [№ 1853], [#Контроль удаленных позций в ТЧ]
&НаКлиенте
Процедура Рин1_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
	Ринэко_КонтрольУдаленныхПозицийКлиент.НачатьКонтрольУдаленныхПозиций(ЭтотОбъект,Отказ,ПараметрыЗаписи);
КонецПроцедуры
// - [Rineco], [Киселев А.Н.] [10.09.2021]








