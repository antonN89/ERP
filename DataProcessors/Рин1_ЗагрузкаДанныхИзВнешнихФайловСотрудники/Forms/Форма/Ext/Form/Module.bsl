#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Ведомость1.Ссылка = Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка() Или Параметры.ВедомостьМодифицирована Тогда
		Сообщить("Необходимо перед началом загрузки записать документ");
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧ                                = Параметры.ИмяТЧ;
	Ведомость							 = Параметры.Ведомость1.Ссылка;
	//ВедомостьФорма						 = Параметры.Ведомость1;
	ОрганизацияВедомость				 = Параметры.Ведомость1.Организация;
	Дата								 = Параметры.Ведомость1.ПериодРегистрации;
	
	ИнициализироватьТабличныйДокумент();
	УстановитьДоступностьКомандБуфераОбмена();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если Объект.ЗагружатьУпаковочныеЛисты Тогда
	//	УпаковочныеЛистыПоНомерамСтрок = Новый Соответствие;
	//	Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл
	//		
	//		ТекущаяСтрока = Объект.Товары[ТекИндекс];
	//		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
	//			И Не ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
	//			
	//			ТекстОшибки = НСтр("ru = 'Не заполнены данные по товару или упаковочному листу в строке %НомерСтроки%.';
	//								|en = 'Data on product or packing list is not populated in line %НомерСтроки%.'");
	//			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
	//			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура");
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
	//			
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
	//			Если УпаковочныеЛистыПоНомерамСтрок[ТекущаяСтрока.УпаковочныйЛист] = Неопределено Тогда
	//				УпаковочныеЛистыПоНомерамСтрок.Вставить(ТекущаяСтрока.УпаковочныйЛист, ТекущаяСтрока.НомерСтроки);
	//			Иначе
	//				ТекстОшибки = НСтр("ru = 'В строке %НомерСтроки% повторяется %УпаковочныйЛист% из строки %НомерПовторяемойСтроки%.
	//					|Измените или удалите одну из строк.';
	//					|en = '%УпаковочныйЛист% from line %НомерПовторяемойСтроки% is repeated in line %НомерСтроки%.
	//					|Change or delete one of the lines.'");
	//				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
	//				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%УпаковочныйЛист%", ТекущаяСтрока.УпаковочныйЛист);
	//				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерПовторяемойСтроки%",
	//					УпаковочныеЛистыПоНомерамСтрок[ТекущаяСтрока.УпаковочныйЛист]);
	//				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "УпаковочныйЛист");
	//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//Если СоздатьНомераГТД Или ПроверятьЗаполнениеХарактеристик Тогда
	//	Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл
	//		
	//		АдресОшибки = НСтр("ru = 'в строке %НомерСтроки% списка ""Товары""';
	//							|en = 'in line %НомерСтроки% of the Goods list'");
	//		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Объект.Товары[ТекИндекс].НомерСтроки);
	//		
	//		Если Объект.Товары[ТекИндекс].СоздатьНомерГТД И Объект.Товары[ТекИндекс].ВедетсяУчетПоГТД И Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].СтранаПроисхождения) Тогда
	//			
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//				НСтр("ru = 'Не заполнена колонка ""Страна происхождения""';
	//					|en = 'Column ""Country of origin"" is not filled in'") + АдресОшибки,
	//				,
	//				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "СтранаПроисхождения"),
	//				,
	//				Отказ);
	//			
	//		КонецЕсли;
	//		
	//		// Проверка заполнения характеристик.
	//		Если Объект.Товары[ТекИндекс].ХарактеристикиИспользуются И Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Характеристика) Тогда
	//			
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//				НСтр("ru = 'Не заполнена колонка ""Характеристика""';
	//					|en = 'Column ""Characteristic"" is not filled in'") + " " + АдресОшибки,
	//				,
	//				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Характеристика"),
	//				,
	//				Отказ);
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
КонецПроцедуры

&НаСервере
Функция ТоварыСотрудникПриИзмененииНаСервере(ТекущийСотрудник)
	// Вставить содержимое обработчика.
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.ФизическоеЛицо.Ссылка КАК ФизическоеЛицоСсылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийСотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат ВыборкаДетальныеЗаписи.ФизическоеЛицоСсылка;
	КонецЦикла;
	Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
КонецФункции

&НаКлиенте
Процедура ТоварыСотрудникПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущийСотрудник = ТекущаяСтрока.Сотрудник;
	ТекущаяСтрока.ФизЛицо = ТоварыСотрудникПриИзмененииНаСервере(ТекущийСотрудник);
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	//ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Дата));
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели);
	//
	//Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
	//	
	//	ТекущаяСтрока = Объект.Товары.Добавить();
	//	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
	//	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	//	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//КонецЦикла;
	//ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискИСопоставлениеНоменклатуры

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	
	УточнениеСотрудника.Очистить();
	ПодобраннаяНоменклатура.Очистить();
	НайденныеСтроки = ПодобраннаяНоменклатура.Выгрузить();

	Объект.Товары.Очистить();
	
	НомераКолонок = Новый Соответствие;
	НомерКолонки = 1;
	
	НомераКолонок.Вставить("КолонкаИНН", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаФИО", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаСумма", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	
	ВысотаШапки = 1;
	НомерСтроки = ВысотаШапки + 1 ;
	
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненыИНН = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаИНН")).Текст);
	ЗаполненыФИО = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаФИО")).Текст);
	ЕстьОшибкиРаспознавания = Ложь;
	
//	Пока ЗаполненыФИО Цикл

	НомерКодаСтроки = 0;
	Пока ЗаполненыИНН Цикл
		
		НоваяСтрока = УточнениеСотрудника.Добавить();
		Количество = 0;
		НомерКодаСтроки = НомерКодаСтроки + 1;
		НоваяСтрока.КодСтроки = НомерКодаСтроки;
		
		Попытка
			НоваяСтрока.ИНН = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаИНН")).Текст;
			НоваяСтрока.ФИО = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаФИО")).Текст;
			НоваяСтрока.Сумма = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСумма")).Текст;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		СтрокаПоискаИНН           = ВРег(СтрЗаменить(НоваяСтрока.ИНН, " ", "")); 
		СтрокаПоискаФИО      	  = ВРег(СтрЗаменить(НоваяСтрока.ФИО, " ", "")); 
		
		Если ЗначениеЗаполнено(НоваяСтрока.ИНН) Тогда
			
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
			|		ДанныеДляПодбораСотрудников.Сотрудник КАК Сотрудник,
			|		ДанныеДляПодбораСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|		ДанныеДляПодбораСотрудников.ФизическоеЛицо.ИНН КАК ФизическоеЛицоИНН
			|	ИЗ
			|		РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
			|	ГДЕ
			|		ДанныеДляПодбораСотрудников.Организация = &Организация
			|		И ДанныеДляПодбораСотрудников.Окончание >= &Начало
			|		И ДанныеДляПодбораСотрудников.ФизическоеЛицо.ИНН = &ИНН";
			
			Запрос.УстановитьПараметр("ИНН", НоваяСтрока.ИНН);
			Запрос.УстановитьПараметр("Организация", ОрганизацияВедомость);
			Запрос.УстановитьПараметр("Начало", Дата);
			//Запрос.УстановитьПараметр("Начало", ТекущаяДатаСеанса());
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
				//Ошибка, нет сотрудников
				// Заполнение тч Товары.
				НоваяСтрокаТовары = Объект.Товары.Добавить();
				НоваяСтрокаТовары.Сотрудник	= Справочники.Сотрудники.ПустаяСсылка();
				НоваяСтрокаТовары.ИНН		= НоваяСтрока.ИНН;
				НоваяСтрокаТовары.ФизЛицо	= НоваяСтрока.ФИО;
				НоваяСтрокаТовары.Сумма		= НоваяСтрока.Сумма;
				НоваяСтрокаТовары.КодСтроки	= НомерКодаСтроки;
				
				Сообщить("Не найдены сотрудники по Организации " + Ведомость.Организация + ", Сотрудник " + НоваяСтрока.ФИО);
				//Возврат;
				
			//ИначеЕсли ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Иначе
				ВыборкаДетальныеЗаписи.Следующий();
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
						
				// Заполнение тч Товары.
				НоваяСтрокаТовары = Объект.Товары.Добавить();
				НоваяСтрокаТовары.Сотрудник	= ВыборкаДетальныеЗаписи.Сотрудник;
				НоваяСтрокаТовары.ИНН		= НоваяСтрока.ИНН;
				НоваяСтрокаТовары.ФизЛицо	= ВыборкаДетальныеЗаписи.ФизическоеЛицо;
				НоваяСтрокаТовары.Сумма		= НоваяСтрока.Сумма;
				НоваяСтрокаТовары.КодСтроки	= НомерКодаСтроки;
				
			//Иначе
			//	// Ошибка, в базе несколько "одинаковых" сотрудников
			//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
			//	КонецЦикла;
			КонецЕсли;
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.ФИО) Тогда
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненыИНН = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаИНН")).Текст);
			ЗаполненыФИО = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаФИО")).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	УточнениеСотрудника.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.Рин1_ЗагрузкаДанныхИзВнешнихФайловСотрудники.ПолучитьМакет("МакетЗагрузкиДанных");

	ТабличныйДокумент.Очистить();
	
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ИНН");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ФИО");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Сумма");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()

	Товары = Объект.Товары.Выгрузить();
	
	//ТоварыДляПереноса = Товары.СкопироватьКолонки();
	ТоварыДляПереноса = Товары.Скопировать();
	
	ТоварыДляПереноса.Колонки.Добавить("КВыплате", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТоварыДляПереноса.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТЧ Из ТоварыДляПереноса Цикл
		
		СтрокаТЧ.КВыплате = СтрокаТЧ.Сумма;
		СтрокаТЧ.ФизическоеЛицо = СтрокаТЧ.ФизЛицо;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыДляПереноса);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C3").Текст);
			
	Если Не ЗаполненыНоменклатураКодАртикулШтрихкод Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.';
													|en = 'You must copy columns to the table from an external file.'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...';
					|en = 'Entered data is being mapped with the infobase data. Please wait...'"),,,БиблиотекаКартинок.Информация32);
	СопоставитьДанныеТабличногоДокументаСДаннымиИБ();

	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ОчиститьСообщения();
	ПеренестиТоварыСервер();
	//ВедомостьНаВыплатуЗарплаты.ЗагрузитьВыплаты(Ведомость, Зарплата, НДФЛ);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиТоварыСервер()
	
	Товары = Объект.Товары.Выгрузить();
	
	//ТоварыДляПереноса = Товары.СкопироватьКолонки();
	ТоварыДляПереноса = Товары.Скопировать();
	
	ТоварыДляПереноса.Колонки.Добавить("КВыплате", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТоварыДляПереноса.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТоварыДляПереноса.Колонки.Добавить("ПериодВзаиморасчетов", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТЧ Из ТоварыДляПереноса Цикл
		
		СтрокаТЧ.КВыплате = СтрокаТЧ.Сумма;
		СтрокаТЧ.ФизическоеЛицо = СтрокаТЧ.ФизЛицо;
		СтрокаТЧ.ПериодВзаиморасчетов = Дата;//Ведомость.ПериодРегистрации;
		
	КонецЦикла;
	
	//Ведомость = Форма.РеквизитФормыВЗначение("Объект");
	ВедомостьОбъект = Ведомость.ПолучитьОбъект();
	
	МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВедомостьОбъект.Ссылка);
	ПараметрыЗаполнения = МенеджерВедомости.ПараметрыЗаполненияПоОбъекту(ВедомостьОбъект);
	
	Зарплата = ВедомостьНаВыплатуЗарплаты.ЗарплатаКВыплате(
		ПараметрыЗаполнения.ОписаниеОперации,
		ПараметрыЗаполнения.ОтборСотрудников,
		ПараметрыЗаполнения.ПараметрыРасчетаЗарплаты,
		ПараметрыЗаполнения.Финансирование,
		ВедомостьОбъект.Ссылка);
		
	НДФЛ = ВедомостьНаВыплатуЗарплаты.НалогиКУдержанию(
		Зарплата, 
		ПараметрыЗаполнения.ОписаниеОперации, 
		ПараметрыЗаполнения.ПараметрыРасчетаНДФЛ, 
		ПараметрыЗаполнения.Финансирование,
		ВедомостьОбъект.Ссылка);
		
	Зарплата.Очистить();
	НДФЛ.Очистить();
	
	Для Каждого СтрокаТЧ Из ТоварыДляПереноса Цикл
		
		НоваяСтрока = Зарплата.Добавить();
		НоваяСтрока.КВыплате = СтрокаТЧ.Сумма;
		НоваяСтрока.ФизическоеЛицо = СтрокаТЧ.ФизЛицо;
		НоваяСтрока.ПериодВзаиморасчетов = СтрокаТЧ.ПериодВзаиморасчетов;
		НоваяСтрока.Сотрудник = СтрокаТЧ.Сотрудник;
		
	КонецЦикла;
	
	//НДФЛ = ВедомостьНаВыплатуЗарплаты.НалогиКУдержанию(
	//	Зарплата, 
	//	ПараметрыЗаполнения.ОписаниеОперации, 
	//	ПараметрыЗаполнения.ПараметрыРасчетаНДФЛ, 
	//	ПараметрыЗаполнения.Финансирование,
	//	ВедомостьОбъект.Ссылка);
	
	ВедомостьОбъект.ЗагрузитьВыплаты(Зарплата, НДФЛ);
	
	ВедомостьОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//Форма.ОбработатьСообщенияПользователю();
	
	//Форма.ЗначениеВРеквизитФормы(Ведомость, "Объект");
	
	//Форма.ПриПолученииДанныхНаСервере(Ведомость);	
	
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиТоварыФрагмент()
	
	Перем СтруктураВыбора;
	
	Закрыть();
	СтруктураВыбора = Новый Структура();
	СтруктураВыбора.Вставить("АдресТоваровВХранилище", ПоместитьТоварыВХранилище());
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		СтруктураВыбора.Вставить("ИмяТЧ", ИмяТЧ);
	КонецЕсли;
	ОповеститьОВыборе(СтруктураВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	//КоличествоТоваровДоВставки = Объект.Товары.Количество();
	//
	//ПолучитьСтрокиИзБуфераОбмена();
	//
	//КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	//КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Сотрудник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Сотрудники.ПустаяСсылка();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти
