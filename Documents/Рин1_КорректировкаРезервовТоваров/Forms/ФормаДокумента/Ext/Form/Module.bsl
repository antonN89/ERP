
&НаКлиенте
Процедура ЗаполнитьНоменклатурой(Команда)
	
	Если Объект.ОбработкаВыполнена Тогда
		Сообщить("Корректировка уже выполнена. Изменения запрещены!");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТЧ();
	ЭтотОбъект.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧ()
	

	// + [Rineco], [Киселев А.] [09.12.2021] 
	// Задача: [№ 23417], [#Перезаполнение для ЭтаповПроизводства]
	
	// Было:
	//ДокументОбъект = РеквизитФормыВЗначение("Объект");
	//ДокументОбъект.ЗаполнитьТЧ();
	//ЗначениеВДанныеФормы(ДокументОбъект,Объект);
	// Стало:
	
	Если ЗначениеЗаполнено(Объект.ЗаказИнициатор) И ТипЗнч(Объект.ЗаказИнициатор) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьТЧ();
		ЗначениеВДанныеФормы(ДокументОбъект,Объект);
		
	Иначе 
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьТЧПоЭтапамПроизводства(Объект.ЗаказИнициатор);
		ЗначениеВДанныеФормы(ДокументОбъект,Объект);
	КонецЕсли;
	
	// - [Rineco], [Киселев А.] [09.12.2021]
	
	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаказИнициаторПриИзменении(Элемент)
	
	Если не Объект.Товары.Количество() = 0 Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличная часть будет очищена.Продолжить выполнение операции?';"
		+ " en = 'Do you want to continue?'"), Режим, 0);
		
	Иначе 
		
		ЗаполнитьТЧ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	ЗаполнитьТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоТребуемоеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОтборИнициатора = Новый Структура("НомерСтрокиТЧ,Инициатор",ТекущиеДанные.Родитель,Истина);
	МассивИнициатора = Объект.Товары.НайтиСтроки(ОтборИнициатора);
	Если Не МассивИнициатора.Количество() = 0 Тогда
		
		КоличествоИнициатора = МассивИнициатора[0].Количество;
		
		//берем одну строку по всем родителям
		ОтборСпонсора = Новый Структура("НомерСтрокиТЧ,Заказ,Инициатор",ТекущиеДанные.НомерСтрокиТЧ,ТекущиеДанные.Заказ,Ложь);
		
		МассивСпонсора = Объект.Товары.НайтиСтроки(ОтборСпонсора);
		Если не МассивСпонсора.Количество() = 0 Тогда
			
			КоличествоТребуемое = 0;
			Для Каждого Строка Из МассивСпонсора Цикл
		
			//{{20210118 ГлазуновДВ
				ОтборИнициатораОтСпонсора = Новый Структура("НомерСтрокиТЧ, Инициатор", Строка.Родитель, Истина);
				МассивИнициатораОтСпонсора = Объект.Товары.НайтиСтроки(ОтборИнициатораОтСпонсора);
				Если МассивИнициатораОтСпонсора.Количество() > 0 Тогда
					УпаковкаЗаказЧислитель = ПолучитьЧислительУпаковки(МассивИнициатораОтСпонсора[0].УпаковкаЗаказ);
					УпаковкаЗаказЗнаменатель = ПолучитьЗнаменательУпаковки(МассивИнициатораОтСпонсора[0].УпаковкаЗаказ);
					Если УпаковкаЗаказЧислитель > 1 Тогда
					//Отработаем кратность по Упаковкам
						Строка.КоличествоТребуемое = Цел(Строка.КоличествоТребуемое / УпаковкаЗаказЧислитель * УпаковкаЗаказЗнаменатель) * УпаковкаЗаказЧислитель / УпаковкаЗаказЗнаменатель;
						Строка.УпаковкаЗаказ = МассивИнициатораОтСпонсора[0].УпаковкаЗаказ;
					КонецЕсли;
				КонецЕсли;
			//}}20210118 ГлазуновДВ
		
				КоличествоТребуемое = КоличествоТребуемое + Строка.КоличествоТребуемое;
			КонецЦикла;
			
//Исходное			Если КоличествоТребуемое > КоличествоИнициатора Тогда 
		//{{20210118 ГлазуновДВ
			Если КоличествоТребуемое > КоличествоИнициатора И ТекущиеДанные.КоличествоТребуемое > КоличествоИнициатора Тогда
		//}}20210118 ГлазуновДВ
				ТекущиеДанные.КоличествоТребуемое = КоличествоИнициатора;
				КоличествоТребуемое = 0;
				Для Каждого Строка Из МассивСпонсора Цикл
					КоличествоТребуемое = КоличествоТребуемое + Строка.КоличествоТребуемое;
				КонецЦикла;
			КонецЕсли;
			
			Если КоличествоТребуемое > МассивСпонсора[0].Количество Тогда
				
//Исходное				ТекущиеДанные.КоличествоТребуемое = МассивСпонсора[0].Количество - (КоличествоТребуемое - ТекущиеДанные.КоличествоТребуемое);
			//{{20210118-20210121 ГлазуновДВ
			//Сортировка Массива
			    Для Просмотр = 0 По МассивСпонсора.Количество()-1 Цикл

					ПросмотрУпаковкаЗаказЧислитель = ПолучитьЧислительУпаковки(МассивСпонсора[Просмотр].УпаковкаЗаказ);
					ПросмотрУпаковкаЗаказЗнаменатель = ПолучитьЗнаменательУпаковки(МассивСпонсора[Просмотр].УпаковкаЗаказ);
					
			        Для Индекс = 0 По МассивСпонсора.Количество()-1 Цикл
			            Если Индекс = МассивСпонсора.Количество()-1 Тогда
			                Прервать;
						КонецЕсли;
						
						ИндексУпаковкаЗаказЧислитель = ПолучитьЧислительУпаковки(МассивСпонсора[Индекс].УпаковкаЗаказ);
						ИндексУпаковкаЗаказЗнаменатель = ПолучитьЗнаменательУпаковки(МассивСпонсора[Индекс].УпаковкаЗаказ);
						
			            Если ПросмотрУпаковкаЗаказЧислитель / ПросмотрУпаковкаЗаказЗнаменатель > ИндексУпаковкаЗаказЧислитель / ИндексУпаковкаЗаказЗнаменатель Тогда
			                СтаршийЭлемент = МассивСпонсора[Просмотр];
			                МладшийЭлемент = МассивСпонсора[Индекс];
			                МассивСпонсора[Просмотр] = МладшийЭлемент;
			                МассивСпонсора[Индекс] = СтаршийЭлемент;
			            КонецЕсли;
			        КонецЦикла;
				КонецЦикла;
				
			//Распределение по кратности	
				КоличествоРаспределить = МассивСпонсора[0].Количество - ТекущиеДанные.КоличествоТребуемое;
				КоличествоПодобраноОсталось = КоличествоРаспределить;
				КоличествоДляПодбора = 0;
				
				Для Каждого СтрокаМассива Из МассивСпонсора Цикл
					Если СтрокаМассива.НомерСтроки = ТекущиеДанные.НомерСтроки Тогда
						Продолжить;
					КонецЕсли;
					
					Если КоличествоПодобраноОсталось < СтрокаМассива.КоличествоТребуемое Тогда
					//Отработаем кратность по Упаковкам
						УпаковкаЗаказЧислитель = ПолучитьЧислительУпаковки(СтрокаМассива.УпаковкаЗаказ);
						УпаковкаЗаказЗнаменатель = ПолучитьЗнаменательУпаковки(СтрокаМассива.УпаковкаЗаказ);
						СтрокаМассива.КоличествоТребуемое = Цел(КоличествоПодобраноОсталось / УпаковкаЗаказЧислитель * УпаковкаЗаказЗнаменатель) * УпаковкаЗаказЧислитель / УпаковкаЗаказЗнаменатель;
					КонецЕсли;
					КоличествоПодобраноОсталось = КоличествоПодобраноОсталось - СтрокаМассива.КоличествоТребуемое;
					Если КоличествоПодобраноОсталось < 0 Тогда
						СтрокаМассива.КоличествоТребуемое = 0;
					КонецЕсли;
				КонецЦикла;
			//}}20210118-20200121 ГлазуновДВ
			КонецЕсли;
		КонецЕсли;
		
		//берем все строки по родителю
		ОтборСпонсоров = Новый Структура("Родитель,Инициатор",ТекущиеДанные.Родитель,Ложь);
		
		МассивСпонсоров = Объект.Товары.НайтиСтроки(ОтборСпонсоров);
		Если не МассивСпонсоров.Количество() = 0 Тогда
			
//Исходное			КоличествоТребуемое = 0;
//Исходное			Для Каждого Строка Из МассивСпонсоров Цикл
//Исходное				КоличествоТребуемое = КоличествоТребуемое + Строка.КоличествоТребуемое;
//Исходное			КонецЦикла;
			
//Исходное			Если КоличествоТребуемое > КоличествоИнициатора Тогда 
//Исходное				ТекущиеДанные.КоличествоТребуемое = КоличествоИнициатора - (КоличествоТребуемое - ТекущиеДанные.КоличествоТребуемое);
//Исходное			КонецЕсли;

		//{{20210118 ГлазуновДВ
			КоличествоТребуемое = ТекущиеДанные.КоличествоТребуемое;
			Для Каждого Строка Из МассивСпонсоров Цикл
				Если ТекущиеДанные.НомерСтроки = Строка.НомерСтроки Тогда
				    Продолжить;
				КонецЕсли;
				КоличествоТребуемое = КоличествоТребуемое + Строка.КоличествоТребуемое;
				Если КоличествоТребуемое >=  КоличествоИнициатора Тогда
					Строка.КоличествоТребуемое = КоличествоИнициатора - КоличествоТребуемое + Строка.КоличествоТребуемое;
				КонецЕсли;
			КонецЦикла;
		//}}20210118 ГлазуновДВ
		КонецЕсли;
		//
	КонецЕсли;
	//{{20200121 ГлазуновДВ
//Вывод "Итого"	по "Инициатору" в колонку "КоличествоТребуемое"
	Для Каждого Строка Из Объект.Товары Цикл
		Если Строка.Инициатор Тогда
			ОтборСпонсоров = Новый Структура("Родитель, Инициатор", Строка.НомерСтрокиТЧ, Ложь);
			МассивСпонсоров = Объект.Товары.НайтиСтроки(ОтборСпонсоров);
			Строка.КоличествоТребуемое = 0;
			Для Каждого СтрокаСпонсор Из МассивСпонсоров Цикл
				СтрокаСпонсор.УпаковкаЗаказ = Неопределено;
				Строка.КоличествоТребуемое = Строка.КоличествоТребуемое + СтрокаСпонсор.КоличествоТребуемое;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//}}20200121 ГлазуновДВ
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКорректировку(Команда)
	
	Если Объект.ОбработкаВыполнена Тогда
		Сообщить("Корректировка уже выполнена. Изменения запрещены!");
		Возврат;
	КонецЕсли;
	
	ВыполнитьКорректировкуНаСервере();
	
	Если Объект.ОбработкаВыполнена Тогда
		ЭтаФорма.ТолькоПросмотр  = Истина;
	Иначе
		ЭтаФорма.ТолькоПросмотр  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ОбработкаВыполнена Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Сообщить("Корректировка уже выполнена. Изменения запрещены!");
	КонецЕсли;
	
//{{20210126 ГлазуновДВ	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
//}}20210126 ГлазуновДВ	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКорректировкуНаСервере()
	
	Если Объект.ОбработкаВыполнена Тогда
		ОбщегоНазначения.СообщитьПользователю("Повторное выполнение обработки запрещено!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Итог("КоличествоТребуемое") = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Для выполнения необходимо указать требуемое количество!");
		Возврат;
	КонецЕсли; 
	
	НачатьТранзакцию();
	//{{20201009 ГлазуновДВ Добавили, чтобы разрешить пользователю выполнить полную операцию корректировки	
	УстановитьПривилегированныйРежим(Истина);
	//}}20201009
	
	ТЗ_Корректировка = ?(ТипЗнч(Объект.ЗаказИнициатор) = Тип("ДокументСсылка.ЭтапПроизводства2_2"),Объект.ЗаказИнициатор.ОбеспечениеМатериаламиИРаботами.Выгрузить(),Объект.ЗаказИнициатор.Товары.Выгрузить());
	ТЗ_Корректировка.Очистить();
	
	ОбъектИнициатор = Объект.ЗаказИнициатор.ПолучитьОбъект();
	ОбработкаВозможна = Истина;
	
	Попытка
		ОбъектИнициатор.Заблокировать();
	Исключение
		//записать предупреждение в журнал регистрации
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое обновление имен файлов'", Метаданные.ОсновнойЯзык.КодЯзыка),
		УровеньЖурналаРегистрации.Предупреждение,, Объект.ЗаказИнициатор, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(Строка(Объект.ЗаказИнициатор) + " заблокирован. Обработка не возможна!");
		ОбработкаВозможна = Ложь;
	КонецПопытки;
	
	Если ОбработкаВозможна Тогда
		
		Попытка
			
			Для Каждого Строка Из Объект.Товары Цикл
				Если Строка.Инициатор Тогда
					
					КоличествоИнициатора = Строка.Количество;
					
					ОтборСпонсоров = Новый Структура("Родитель,Инициатор",Строка.НомерСтрокиТЧ,Ложь);
					МассивСпонсоров = Объект.Товары.НайтиСтроки(ОтборСпонсоров);
					
					Если Не МассивСпонсоров.Количество() = 0 Тогда
						
						ТребуетсяКоличествоВсего = 0;
						ТребуетсяСтрокВсего  = 0;
						Для Каждого СтрокаМассива Из МассивСпонсоров Цикл							
							
							ТребуетсяКоличествоВсего = ТребуетсяКоличествоВсего + СтрокаМассива.КоличествоТребуемое;
							Если Не СтрокаМассива.КоличествоТребуемое = 0 Тогда
								ТребуетсяСтрокВсего = ТребуетсяСтрокВсего + 1;
							КонецЕсли;
						КонецЦикла;
						
						//нечего обрабатывать
						Если ТребуетсяКоличествоВсего = 0 Тогда
							Продолжить;
						КонецЕсли;
						
					//{{20210119 ГлазуновДВ
						Если ТребуетсяКоличествоВсего > КоличествоИнициатора Тогда
							Продолжить;
							ОбщегоНазначения.СообщитьПользователю("Неверно подобрано количество по строке " + Строка.НомерСтрокиТЧ);
						КонецЕсли;
					//}}20210119 ГлазуновДВ
						
					Если ТребуетсяКоличествоВсего > 0 Тогда
							// + [Rineco], [Киселев А.] [08.12.2021] 
							// Задача: [№ 23417], [#Адаптация]
							СтрокаТабЧастиИнициатора = ?(ТипЗнч(ОбъектИнициатор) = Тип("ДокументОбъект.ЭтапПроизводства2_2"),ОбъектИнициатор.ОбеспечениеМатериаламиИРаботами.Найти(Строка.НомерСтрокиТЧ,"НомерСтроки"),ОбъектИнициатор.Товары.Найти(Строка.НомерСтрокиТЧ,"НомерСтроки"));
							// - [Rineco], [Киселев А.] [08.12.2021]
							Если Не СтрокаТабЧастиИнициатора = Неопределено Тогда
							//{{20210119 ГлазуновДВ
								ЧислительЗаказа = ПолучитьЧислительУпаковки(СтрокаТабЧастиИнициатора.Упаковка);
								ЗнаменательЗаказа = ПолучитьЗнаменательУпаковки(СтрокаТабЧастиИнициатора.Упаковка);
								ПредыдущееВариантОбеспечения = СтрокаТабЧастиИнициатора.ВариантОбеспечения;
								// + [Rineco], [Киселев А.] [08.12.2021] 
								// Задача: [№ 23417], [#Адаптация]
								Если ТипЗнч(ОбъектИнициатор) <> Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
									ПредыдущееНазначение = СтрокаТабЧастиИнициатора.ГИГ_Назначение;	
								КонецЕсли;
								// - [Rineco], [Киселев А.] [08.12.2021]

								
							//{{20210122 ГлазуновДВ Нельзя скидывать дату отгрузки при разделении строк
								ПредыдущееДатаОтгрузки		 = СтрокаТабЧастиИнициатора.ДатаОтгрузки;
							//}}20210122 ГлазуновДВ
								ОтборСтрок = Новый Структура("Родитель",Строка.НомерСтрокиТЧ);
								МассивНайденныхСтрок = Объект.Товары.НайтиСтроки(ОтборСтрок);								
								Если не МассивНайденныхСтрок = 0 Тогда
				                   	ОсталосьРаспределить = КоличествоИнициатора;
									ПерваяСтрока = Истина;
									Для Каждого СтрокаСпонсора Из МассивНайденныхСтрок Цикл
										Если Не СтрокаСпонсора.КоличествоТребуемое = 0 Тогда
											ДатаОтгрузки = ТекущаяДата();
							                Если ОсталосьРаспределить > 0 И ПерваяСтрока Тогда
											//Обработка строки Заказа
												ПерваяСтрока = Ложь;
												СтрокаТабЧастиИнициатора.ВариантОбеспечения = СтрокаСпонсора.ВариантОбеспечения;
												СтрокаТабЧастиИнициатора.ДатаОтгрузки = ДатаОтгрузки;
												Количество = СтрокаСпонсора.КоличествоТребуемое;
												СтрокаТабЧастиИнициатора.Количество = Количество;
												СтрокаТабЧастиИнициатора.КоличествоУпаковок = Количество / ЧислительЗаказа * ЗнаменательЗаказа;
												//
												Если ТипЗнч(СтрокаСпонсора.Заказ) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
													СтрокаТабЧастиИнициатора.ГИГ_Назначение = СтрокаСпонсора.Заказ.Назначение;
													СтрокаТабЧастиИнициатора.ГИГ_НазначениеУстановлено = Истина;
												КонецЕсли;
												ОбработатьСтрокуТЧ(ОбъектИнициатор, СтрокаТабЧастиИнициатора);
												
											//Запоняем ТЗ для КорректировкиНазначения	
												НоваяСтрока = ТЗ_Корректировка.Добавить();
												ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧастиИнициатора);
												НоваяСтрока.ВариантОбеспечения = СтрокаСпонсора.ВариантОбеспечения;
												НоваяСтрока.ДатаОтгрузки = ДатаОтгрузки;
												Количество = СтрокаСпонсора.КоличествоТребуемое;
												НоваяСтрока.Количество = Количество;
												НоваяСтрока.КоличествоУпаковок = Количество / ЧислительЗаказа * ЗнаменательЗаказа;
												//
												Если ТипЗнч(СтрокаСпонсора.Заказ) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
													НоваяСтрока.ГИГ_Назначение = СтрокаСпонсора.Заказ.Назначение;
													НоваяСтрока.ГИГ_НазначениеУстановлено = Истина;
												КонецЕсли;
												//
						                        ОсталосьРаспределить = ОсталосьРаспределить - Количество;
											ИначеЕсли ОсталосьРаспределить > 0  Тогда
											//Обработка строки Заказа
												НоваяСтрока = ?(ТипЗнч(ОбъектИнициатор) = Тип("ДокументОбъект.ЭтапПроизводства2_2"),ОбъектИнициатор.ОбеспечениеМатериаламиИРаботами.Добавить(),ОбъектИнициатор.Товары.Добавить());
												ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧастиИнициатора);
												НоваяСтрока.КодСтроки = 0;
												НоваяСтрока.ВариантОбеспечения = СтрокаСпонсора.ВариантОбеспечения;
												НоваяСтрока.ДатаОтгрузки = ДатаОтгрузки;
												Количество = СтрокаСпонсора.КоличествоТребуемое;
												НоваяСтрока.Количество = Количество;
												НоваяСтрока.КоличествоУпаковок = Количество / ЧислительЗаказа * ЗнаменательЗаказа;
												//
												Если ТипЗнч(СтрокаСпонсора.Заказ) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
													НоваяСтрока.ГИГ_Назначение = СтрокаСпонсора.Заказ.Назначение;
													НоваяСтрока.ГИГ_НазначениеУстановлено = Истина;
												КонецЕсли;
   												ОбработатьСтрокуТЧ(ОбъектИнициатор, НоваяСтрока);

											//Запоняем ТЗ для КорректировкиНазначения
												НоваяСтрока = ТЗ_Корректировка.Добавить();
												ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧастиИнициатора);
												НоваяСтрока.ВариантОбеспечения = СтрокаСпонсора.ВариантОбеспечения;
												НоваяСтрока.ДатаОтгрузки = ДатаОтгрузки;
												Количество = СтрокаСпонсора.КоличествоТребуемое;
												НоваяСтрока.Количество = Количество;
												НоваяСтрока.КоличествоУпаковок = Количество / ЧислительЗаказа * ЗнаменательЗаказа;
												//
												Если ТипЗнч(СтрокаСпонсора.Заказ) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
													НоваяСтрока.ГИГ_Назначение = СтрокаСпонсора.Заказ.Назначение;
													НоваяСтрока.ГИГ_НазначениеУстановлено = Истина;
												КонецЕсли;
												//
						                        ОсталосьРаспределить = ОсталосьРаспределить - Количество;
											КонецЕсли;
									//Обработка Заказа Спонсора	
											Если ТипЗнч(СтрокаСпонсора.Заказ) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
												//ЗаказНаВнутреннееПотребление = делаем корректировку - каждый раз новую тк может быть выбран разный спонсор
												СтрокаТабЧастиСпонсора = СтрокаСпонсора.Заказ.Товары.Найти(СтрокаСпонсора.НомерСтрокиТЧ,"НомерСтроки");
												Если не СтрокаТабЧастиСпонсора = Неопределено Тогда
												//{{20201006 ГлазуновДВ Убираем из Потребности строку Назначения с количеством, если Потребность "Однократная"
													ПроводитьДокумент = Ложь;
													ДокументОбъект = СтрокаСпонсора.Заказ.ПолучитьОбъект();
													Если СтрокаСпонсора.Заказ.Рин1_ОЕМ_однократная Тогда
														СтрокаДокумент = ДокументОбъект.Товары.Найти(СтрокаТабЧастиСпонсора.НомерСтроки, "НомерСтроки");
//Исходное														Если СтрокаСпонсора.КоличествоТребуемое = СтрокаДокумент.КоличествоУпаковок Тогда
													//{{20201208 ГлазуновДВ
														Если СтрокаСпонсора.КоличествоТребуемое = СтрокаДокумент.Количество Тогда
													//}}20201208 ГлазуновДВ
															СтрокаДокумент.Отменено = Истина;
														Иначе
															СтрокаДокумент.Количество = СтрокаДокумент.Количество - СтрокаСпонсора.КоличествоТребуемое;
//Исходное															СтрокаДокумент.КоличествоУпаковок = СтрокаДокумент.КоличествоУпаковок - СтрокаСпонсора.КоличествоТребуемое;
														//{{20201208 ГлазуновДВ
															СтрокаДокумент.КоличествоУпаковок = СтрокаДокумент.Количество / ?(СтрокаДокумент.Упаковка.Числитель = 0, 1, СтрокаДокумент.Упаковка.Числитель) * ?(СтрокаДокумент.Упаковка.Знаменатель = 0, 1, СтрокаДокумент.Упаковка.Знаменатель);
														//}}20201208 ГлазуновДВ	
														//ДелимСтроку	
															НоваяСтрокаОЕМ = ДокументОбъект.Товары.Добавить();
															ЗаполнитьЗначенияСвойств(НоваяСтрокаОЕМ, СтрокаДокумент);
															НоваяСтрокаОЕМ.Количество = СтрокаСпонсора.КоличествоТребуемое;
//Исходное															НоваяСтрокаОЕМ.КоличествоУпаковок = СтрокаСпонсора.КоличествоТребуемое;
														//{{20201208 ГлазуновДВ
															НоваяСтрокаОЕМ.КоличествоУпаковок = НоваяСтрокаОЕМ.Количество / ?(НоваяСтрокаОЕМ.Упаковка.Числитель = 0, 1, НоваяСтрокаОЕМ.Упаковка.Числитель) * ?(НоваяСтрокаОЕМ.Упаковка.Знаменатель = 0, 1, НоваяСтрокаОЕМ.Упаковка.Знаменатель);
														//}}20201208 ГлазуновДВ	
															НоваяСтрокаОЕМ.Отменено = Истина;
														КонецЕсли;
														ПроводитьДокумент = Истина;
													КонецЕсли;
													Если ПроводитьДокумент Тогда
														Попытка
															ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
														Исключение
															ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
															Прервать;
														КонецПопытки;
													КонецЕсли;
												//}}20201006 ГлазуновДВ	
												КонецЕсли;
												//
											Иначе			
												//ЗаказКлиента = поменяем значения в строке												
												ОбъектСпонсор = СтрокаСпонсора.Заказ.ПолучитьОбъект();
												ОбъектСпонсор.Заблокировать();
												СтрокаТабЧастиСпонсора = ?(ТипЗнч(ОбъектИнициатор) = Тип("ДокументОбъект.ЭтапПроизводства2_2"),ОбъектСпонсор.ОбеспечениеМатериаламиИРаботами.Найти(СтрокаСпонсора.НомерСтрокиТЧ, "НомерСтроки"),ОбъектСпонсор.Товары.Найти(СтрокаСпонсора.НомерСтрокиТЧ, "НомерСтроки"));
												Если Не СтрокаТабЧастиСпонсора = Неопределено Тогда
													//количество по строке может быть больше чем требуется
													Если Не СтрокаСпонсора.Количество = СтрокаСпонсора.КоличествоТребуемое Тогда
														//создаем новую строку - но менять будем в ней, что бы текущая строка осталась на своей позиции для дальнейшей обработки
														НовСтр = ?(ТипЗнч(ОбъектИнициатор) = Тип("ДокументОбъект.ЭтапПроизводства2_2"),ОбъектСпонсор.ОбеспечениеМатериаламиИРаботами.Добавить(),ОбъектСпонсор.Товары.Добавить());
														ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТабЧастиСпонсора,, "КодСтроки");
														Количество = СтрокаСпонсора.КоличествоТребуемое;
														НовСтр.Количество = Количество;
//Исходное														НовСтр.КоличествоУпаковок = Количество;
													//{{20201208 ГлазуновДВ
														НовСтр.КоличествоУпаковок = Количество / ?(НовСтр.Упаковка.Числитель = 0, 1, НовСтр.Упаковка.Числитель) * ?(НовСтр.Упаковка.Знаменатель = 0, 1, НовСтр.Упаковка.Знаменатель);
													//}}20201208 ГлазуновДВ	
														НовСтр.ВариантОбеспечения = Строка.ВариантОбеспечения;
														НовСтр.ДатаОтгрузки = Строка.ДатаОтгрузки;
														ОбработатьСтрокуТЧ(ОбъектСпонсор,НовСтр);
														//поменяем значения в текущей строке
														Количество = СтрокаТабЧастиСпонсора.Количество - СтрокаСпонсора.КоличествоТребуемое;
														СтрокаТабЧастиСпонсора.Количество = Количество;
//Исходное													СтрокаТабЧастиСпонсора.КоличествоУпаковок = Количество;
													//{{20201208 ГлазуновДВ
														СтрокаТабЧастиСпонсора.КоличествоУпаковок = Количество / ?(СтрокаТабЧастиСпонсора.Упаковка.Числитель = 0, 1, СтрокаТабЧастиСпонсора.Упаковка.Числитель) * ?(СтрокаТабЧастиСпонсора.Упаковка.Знаменатель = 0, 1, СтрокаТабЧастиСпонсора.Упаковка.Знаменатель);
													//}}20201208 ГлазуновДВ	
														ОбработатьСтрокуТЧ(ОбъектСпонсор, СтрокаТабЧастиСпонсора);
													Иначе  
														СтрокаТабЧастиСпонсора.ВариантОбеспечения = Строка.ВариантОбеспечения;
														СтрокаТабЧастиСпонсора.ДатаОтгрузки = Строка.ДатаОтгрузки;
													КонецЕсли;
													Попытка
														ОбъектСпонсор.Записать(РежимЗаписиДокумента.Проведение);//нужно только так иначе ошибка
													Исключение
														ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
														Прервать;
													КонецПопытки;	
												КонецЕсли;
												ОбъектСпонсор.Разблокировать();
											//
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									//Нераспределенный остаток
									Если ОсталосьРаспределить > 0 Тогда 
									//Обработка строки Заказа
										НоваяСтрока = ?(ТипЗнч(ОбъектИнициатор) = Тип("ДокументОбъект.ЭтапПроизводства2_2"),ОбъектИнициатор.ОбеспечениеМатериаламиИРаботами.Добавить(),ОбъектИнициатор.Товары.Добавить());
										ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧастиИнициатора);
										НоваяСтрока.КодСтроки = 0;
										Количество = ОсталосьРаспределить;
										НоваяСтрока.Количество = Количество;
										НоваяСтрока.КоличествоУпаковок = Количество / ЧислительЗаказа * ЗнаменательЗаказа;
										НоваяСтрока.ВариантОбеспечения = ПредыдущееВариантОбеспечения;
										// Задача: [№ 23417], [#Адаптация]
										Если ТипЗнч(ОбъектИнициатор) <> Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
											НоваяСтрока.ГИГ_Назначение = ПредыдущееНазначение;
											НоваяСтрока.ГИГ_НазначениеУстановлено = Ложь;
										КонецЕсли;
										// - [Rineco], [Киселев А.] [08.12.2021]

										
									//{{20210122 ГлазуновДВ Нельзя скидывать дату отгрузки при разделении строк
										НоваяСтрока.ДатаОтгрузки = ПредыдущееДатаОтгрузки;
									//}}20210122 ГлазуновДВ
										ОбработатьСтрокуТЧ(ОбъектИнициатор, НоваяСтрока);
									КонецЕсли;
								КонецЕсли;
							//}}20210119 ГлазуновДВ							
							Иначе 
								ОбщегоНазначения.СообщитьПользователю("Не удалось выполнить обработку. Сообщите в поддержку!");
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
			
			СоздатьКорректировкуНазначения(Объект.ЗаказИнициатор, ,ТЗ_Корректировка);
			
			Попытка
//Исходное				ОбъектИнициатор.Записать();
			//{{20201224 ГлазуновДВ
				ОбъектИнициатор.Записать(РежимЗаписиДокумента.Проведение);
			//}}20201224 ГлазуновДВ
				ОбъектИнициатор.Разблокировать();
				ОбщегоНазначения.СообщитьПользователю("Корректировка выполнена успешно!");
				Объект.ОбработкаВыполнена = Истина;
				ЭтотОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				Объект.ОбработкаВыполнена = Ложь;
			КонецПопытки;
			
			//{{20201009 ГлазуновДВ Добавили, чтобы разрешить пользователю выполнить полную операцию корректировки	
			УстановитьПривилегированныйРежим(Ложь);
			//}}20201009 ГлазуновДВ
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			//{{20201009 ГлазуновДВ Добавили, чтобы разрешить пользователю выполнить полную операцию корректировки	
			УстановитьПривилегированныйРежим(Ложь);
			//}}20201009 ГлазуновДВ
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"),УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение НСтр("ru = 'Транзакция не выполнена. Сообщите в поддержку!'");
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//Исходное Процедура СоздатьКорректировкуНазначения(СсылкаИнициатор, СсылкаСпонсор, ТЗ_Корректировка) //20210119 ГлазуновДВ
Процедура СоздатьКорректировкуНазначения(СсылкаИнициатор, СсылкаСпонсор = Неопределено, ТЗ_Корректировка)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
	"ПересчитатьКоличествоУпаковок",
	ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ДокументКорректировкаНазначения = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		ДокументКорректировкаНазначения.Дата = ТекущаяДата();
		ДокументКорректировкаНазначения.Организация = СсылкаИнициатор.Организация;
//Новый Механизм создания Документа		ДокументКорректировкаНазначения.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
//Новый Механизм создания Документа		ДокументКорректировкаНазначения.Назначение = СсылкаСпонсор.Назначение;
	//{{20201217 ГлазуновДВ Новый Механизм создания Документа
		ДокументКорректировкаНазначения.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать");
		ЗаказКлиента = СсылкаИнициатор.Назначение.Заказ;
		НовоеНазначение = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(ЗаказКлиента);
		ДокументКорректировкаНазначения.Назначение = НовоеНазначение;
		ДокументКорректировкаНазначения.Комментарий = "Корректировка резерва сверх потребности для " + Строка(ЗаказКлиента);
	//}}20201217 ГлазуновДВ
		ДокументКорректировкаНазначения.ВидыЗапасовУказаныВручную = Ложь;
		ДокументКорректировкаНазначения.ДокументПоРаспоряжению = Истина;
		
//{{20201210 ГлазуновДВ Отбираем по серийным номерам, если есть.
		Для Каждого Строка Из ТЗ_Корректировка Цикл
//Новый Механизм создания Документа			Назначение = СсылкаСпонсор.Назначение;
// Задача: [№ 23417], [#Адаптация]
Если ТипЗнч(СсылкаИнициатор) <> Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
	Назначение = Строка.ГИГ_Назначение;	
Иначе 
	Назначение = Строка.Назначение;
КонецЕсли;
// - [Rineco], [Киселев А.] [08.12.2021]
Если Не ЗначениеЗаполнено(Назначение)  Тогда
<<<<<<< HEAD
	// + [Rineco], [Шерстюк Ю.Ю.] [23.12.2021]
	// Задача: [№ 25513 ], [#Если передаются резервы необособленные и обособленные, то необособленные нужно пропустить, а обособленные обработать]
	//Возврат;
	Продолжить;
	// - [Rineco], [Шерстюк Ю.Ю.] [23.12.2021]
=======
	Возврат;
>>>>>>> parent of 7be3d8f (Задача 00000 (в коммите много задач))
КонецЕсли;
			
			Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение,"Заказ");
//Новый Механизм создания Документа			ЗаказКлиента = СсылкаИнициатор.Назначение.Заказ;
//Новый Механизм создания Документа			НовоеНазначение = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(ЗаказКлиента);
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Организация");
//Новый Механизм создания Документа			ВидОперации = ДокументКорректировкаНазначения.ВидОперации;
		//{{20201217 ГлазуновДВ Новый Механизм создания Документа
			ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
		//}}20201217 ГлазуновДВ
			СнятиеРезерва = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
				Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
			ТолькоСкладОтгрузки = Не СнятиеРезерва И Документы.КорректировкаНазначенияТоваров.КонтролироватьПревышениеПотребностиПоЗаказу(Назначение);
			
			СтруктураЗаполнения = ЗаполнитьТаблицуСнятияУстановкиРезервов(ВидОперации, Назначение, Заказ, ДокументКорректировкаНазначения, ТолькоСкладОтгрузки, Организация);
			Таблица = СтруктураЗаполнения.ТаблицаЗаполненияКорректировки;
			
			Для Каждого СтрокаТаб Из Таблица Цикл
				Если СтрокаТаб.Номенклатура = Строка.Номенклатура Тогда
					СтрокаТаб.Отметка = Истина;
					Если СтрокаТаб.СвободныйОстаток <= 0 Тогда
						СтрокаТаб.СвободныйОстаток = Строка.Количество;
					КонецЕсли;
					Если СтрокаТаб.Количество <= 0 Тогда
						СтрокаТаб.Количество = Строка.Количество;
					КонецЕсли;
				КонецЕсли;
				Если СтрокаТаб.Номенклатура <> Строка.Номенклатура Тогда
					СтрокаТаб.Отметка = Ложь;
				КонецЕсли;
			КонецЦикла;
		
			Ссылка = Документы.КорректировкаНазначенияТоваров.ПустаяСсылка();
			ТаблицаПомещенияЯчейки = Документы.КорректировкаНазначенияТоваров.ТаблицаПомещенияЯчейкиПоТоварам(Таблица, Ссылка);
				
			// В Таблица на данном этапе количество соответствует единице измерения номенклатуры.
			Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
			СлитьТаблицыПоСкладуИПомещениям(Таблица, ТаблицаПомещенияЯчейки);
			
			СтрокиКУдалению = Новый Массив();
			
			Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
				ИндексСКонца = Таблица.Количество() - ИндексСтроки - 1;
				Если Таблица[ИндексСКонца].Количество <= 0 Тогда
					СтрокиКУдалению.Добавить(Таблица[ИндексСКонца]);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Таблица.Удалить(СтрокаКУдалению);
			КонецЦикла;
		
			Для Каждого СтрокаТаб Из Таблица Цикл
				Если СтрокаТаб.Отметка Тогда
					НовСтрока = ДокументКорректировкаНазначения.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаб);
					НовСтрока.Помещение = Справочники.СкладскиеПомещения.НайтиПоНаименованию("Ручной отбор (мезонин)");
	//Новый Механизм создания Документа				НовСтрока.ИсходноеНазначение = Назначение;
	//Новый Механизм создания Документа				НовСтрока.НовоеНазначение = НовоеНазначение;
				//{{20201217 ГлазуновДВ Новый Механизм создания Документа
					НовСтрока.ИсходноеНазначение = СтрокаТаб.ИсходноеНазначение;   //Заказ с ОЕМ
					НовСтрока.НовоеНазначение = НовоеНазначение; //ЗаказКлиента
				//}}20201217 ГлазуновДВ
					НовСтрока.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ДокументКорректировкаНазначения.Товары, СтруктураДействий, Неопределено);
		
		ПараметрыУказанияСерийКорректировка = Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(ДокументКорректировкаНазначения);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументКорректировкаНазначения, ПараметрыУказанияСерийКорректировка);
		
//}}20201210 ГлазуновДВ		
		
		ДокументКорректировкаНазначения.Записать(РежимЗаписиДокумента.Проведение);
		ТЗ_Корректировка.Очистить();
		Сообщить("Операция передачи резерва выполнена, создан документ: " + ДокументКорректировкаНазначения);
	Исключение
		//ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	//{{20201215 ГлазуновДВ
		//ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить("Операция передачи резерва отменена, " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//}}20201215 ГлазуновДВ
	КонецПопытки;
	
КонецПроцедуры // СоздатьКорректировкуНазначения()

//{{20201210 ГлазуновДВ Отбираем по серийным номерам, если есть.
Процедура СлитьТаблицыПоСкладуИПомещениям(ТаблицаПоСкладамВЦелом, ТаблицаПомещенияЯчейки)
	
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Серия") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	КонецЕсли;
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Помещение") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Помещение", Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	КонецЕсли;
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Ячейка") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Назначение, Номенклатура, Характеристика, Склад");
	
	СтрокиКУдалению = Новый Массив();
	
	Для ИндексСтроки = 0 По ТаблицаПоСкладамВЦелом.Количество() - 1 Цикл
		
		Строка = ТаблицаПоСкладамВЦелом[ИндексСтроки];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтруктураПоиска.Назначение = Строка.ИсходноеНазначение;
		
		НайденныеСтроки = ТаблицаПомещенияЯчейки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			КоличествоОстаток = Строка.Количество;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока = ТаблицаПоСкладамВЦелом.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "Помещение, Ячейка, Серия, Упаковка, Количество");
				
				Если НайденнаяСтрока.Обеспечено > КоличествоОстаток Тогда
					НоваяСтрока.Количество = КоличествоОстаток;
					КоличествоОстаток = 0;
				Иначе
					НоваяСтрока.Количество = НайденнаяСтрока.Обеспечено;
					КоличествоОстаток = КоличествоОстаток - НайденнаяСтрока.Обеспечено;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокиКУдалению.Добавить(Строка); // Текущая строка заменена на строки из таблицы по помещениям
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПоСкладамВЦелом.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу товаров по заказу для которых производится обособленное обеспечение.
//
// Параметры:
//  ВидОперации							 - ПеречислениеСсылка.ВидыОперацийКорректировкиНазначения - Вид операции заказа
//  Назначение							 - Назначение, по которому необходимо получить данные обособленного обеспечения
//  Заказ								 - ДокументСсылка - Заказ, по товарам которого необходимо ограничить полученный список потребности назначения
//  ТекущаяКорректировка				 - ДокументСсылка.КорректировкаНазначенияТоваров - текущий документ корректировки, задается для того что бы
// 													исключить его движения из расчетов
//  ТолькоПоСкладуОтгрузки				 - Булево - При виде операции резервирование, будут ли помещены
//													в результирующую таблицу остатки по складам не указанным в заказе
//  Организация							 - СправочникСсылка.Организации -
//  СнятьИзлишекРезервов                 - Булево - Признак необходимости снятия только излишка для операций снятия
//                                                  резерва, если передано Ложь -- выполняется снятие всей потребности.
//
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значения с колонками:
//		* Заказ						 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение,
//			ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ переданный как входящий параметр функции
//		* ЗаказИсточник				 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение,
//			ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ который зарезервировал тот же товар который нужен заказу
//				переданному как входящий параметр функции
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* НовоеНазначение			 - СправочникСсылка.Назначения - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* ЕдиницаИзмерения			 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* СкладОтгрузки				 - СправочникСсылка.Склады - склад указанный в заказе, склад потребности
//		* Потребность				 - Число - количество необеспеченного товара по заказу
//		* Обеспечено				 - Число - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* ПотребностьОсновногоСклада - Булево - признак того что текущий склад соответствует складу отгрузки
//		* Количество				 - Число - всегда 0
//		* Отметка					 - Булево - всегда Ложь
//		* СортировкаСклада			 - Число - данные для сортировки складов
//		* ЭтоОстатокЗаказа			 - Булево - признак того что в колонке СвободныйОстаток не остаток склада, а резерв заказа.
//
Функция ЗаполнитьТаблицуСнятияУстановкиРезервов(ВидОперации, Назначение, Заказ, ТекущаяКорректировка, ТолькоПоСкладуОтгрузки, Организация, СнятьИзлишекРезервов = Истина) Экспорт
	
	СнятиеРезерва = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	КорректировкаРезерваИныхЗаказов = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать);
	
	ТребуемыеТовары = МатериалыИзТабличнойЧастиДокумента(Заказ);
	
	Отборы = Новый Структура();
	Отборы.Вставить("Назначение",      Назначение);
	Отборы.Вставить("Организация",     Организация);
	Отборы.Вставить("ТребуемыеТовары", ТребуемыеТовары);
	
	СтруктураВозврата = ТаблицаЗаполненияКорректировки(ВидОперации, ТолькоПоСкладуОтгрузки, Отборы, ТекущаяКорректировка);
	Таблица = СтруктураВозврата.ТаблицаЗаполненияКорректировки;
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Булево"));
	
	Если СнятиеРезерва Тогда
		
		СнятьРезервы(Таблица, СнятьИзлишекРезервов);
		
	//Иначе
	//	
	//	УстановитьРезервы(Таблица);
	//	
	КонецЕсли;
	
	Таблица.Колонки.Добавить("СкладЗаказИсточник", Новый ОписаниеТипов("Строка"));
	Для Каждого Строка Из Таблица Цикл
		
		Строка.СкладЗаказИсточник = ?(Строка.ИсточникПредставление = "", "", Строка.ИсточникПредставление + ", ") + Строка.СкладПредставление;
		
		Если Не СнятиеРезерва Тогда
			Строка.ИсходноеНазначение = Строка.НазначениеИсточник; // Пустое значение (со склада) или назначение конкретного заказа
		Иначе
			Строка.ИсходноеНазначение = Строка.Назначение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Восстановление сортировки после изменения таблицы, по строковому представлению
	Таблица.Сортировать("ИсходноеНазначение, Номенклатура, Характеристика, СортировкаСклада УБЫВ, НазначениеИсточник, Потребность УБЫВ, ВНаличии УБЫВ");
	
	СтруктураВозврата.Вставить("ТаблицаЗаполненияКорректировки", Таблица);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МатериалыИзТабличнойЧастиДокумента(Заказ)
	
	ТребуемыеТовары = Новый ТаблицаЗначений();
	ТребуемыеТовары.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТребуемыеТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	//++ НЕ УТ
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЗаказПереработчику.Материалы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Заказ";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТребуемыхТоваров = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТребуемыхТоваров, ТребуемыеТовары);
	КонецЕсли;
	//-- НЕ УТ
	//++ НЕ УТКА
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЗаказДавальца.Материалы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Заказ";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТребуемыхТоваров = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТребуемыхТоваров, ТребуемыеТовары);
	
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Заказ
		|	И НЕ Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТребуемыхТоваров = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТребуемыхТоваров, ТребуемыеТовары);
	
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат ТребуемыеТовары;
	
КонецФункции

Функция ТаблицаЗаполненияКорректировки(ВидОперации, ТолькоСкладОтгрузки, Отборы, ТекущаяКорректировка)
	
	//ЭтоНовыйДокумент = Не ЗначениеЗаполнено(ТекущаяКорректировка);
	//ЕстьОтборПоОрганизации = ЗначениеЗаполнено(Отборы.Организация);
	//ЕстьОтборПоНоменклатуре = ЗначениеЗаполнено(Отборы.ТребуемыеТовары);
	ЭтоНовыйДокумент = Истина;
	ЕстьОтборПоОрганизации = Истина;
	ЕстьОтборПоНоменклатуре = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяКорректировка", ТекущаяКорректировка);
	Для Каждого Свойство Из Отборы Цикл
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ЭтоНовыйДокумент Тогда
		ТекстЗапроса = ВременнаяТаблицаОбеспечениеЗаказовОстатки(ВидОперации, ЕстьОтборПоОрганизации, ЕстьОтборПоНоменклатуре);
	//Иначе
	//	ТекстЗапроса = ВременнаяТаблицаОбеспечениеЗаказовОстаткиСУчетомКорректировки(ВидОперации, ЕстьОтборПоОрганизации, ЕстьОтборПоНоменклатуре);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Если ЭтоНовыйДокумент Тогда
		БлокТекста = ВременнаяТаблицаСвободныеОстатки() + ТекстРазделителяЗапросов()
			+ ВременнаяТаблицаОбеспечениеЗаказовОстаткиНазначений(ВидОперации, ЕстьОтборПоОрганизации) + ТекстРазделителяЗапросов();
	//Иначе
	//	БлокТекста = ВременнаяТаблицаСвободныеОстаткиСУчетомКорректировки() + ТекстРазделителяЗапросов()
	//		+ ВременнаяТаблицаОбеспечениеЗаказовОстаткиНазначенийСУчетомКорректировки(ВидОперации, ЕстьОтборПоОрганизации) + ТекстРазделителяЗапросов();
	КонецЕсли;
	
	ТекстЗапроса = БлокТекста
		+ РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспеченияВсехСкладов(Перечисления.ТипыОбеспечения.Перемещение);

	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = ВременнаяТаблицаСкладыОтгрузки() + ТекстРазделителяЗапросов()
		+ ВременнаяТаблицаСводнаяРезервыОстатки() + ТекстРазделителяЗапросов()
		+ ТаблицаИсточниковОбеспеченияПеремещением();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = ТекстЗапроса;
	ТаблицаИсточниковОбеспеченияПеремещением = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РассчитатьИерархиюСкладов(ТаблицаИсточниковОбеспеченияПеремещением);
	Запрос.УстановитьПараметр("ТаблицаИерархииСкладов", ТаблицаИсточниковОбеспеченияПеремещением);
	
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса + ВременнаяТаблицаСортировкаСкладов() + ТекстРазделителяЗапросов();
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Таблица.НазначениеИсточник  КАК НазначениеИсточник,
	|	Таблица.Назначение          КАК Назначение,
	|	Таблица.Номенклатура        КАК Номенклатура,
	|	Таблица.Характеристика      КАК Характеристика,
	|	Таблица.Склад               КАК Склад,
	|	Таблица.СкладПредставление     КАК СкладПредставление,
	|	Таблица.ИсточникПредставление  КАК ИсточникПредставление,
	|	
	|	Таблица.Доступно            КАК СвободныйОстаток,
	|	Таблица.ВНаличии            КАК ВНаличии,
	|	Таблица.Обеспечено
	|		- Таблица.ВНаличии      КАК ОбеспеченоОжидается,
	|	Таблица.Потребность         КАК Потребность,
	|	
	|	ВЫБОР КОГДА ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL ТОГДА
	|				ЛОЖЬ
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ                   КАК ПотребностьОсновногоСклада,
	|	
	|	ЕСТЬNULL(ТаблицаСортировкиСкладов.ПриоритетСклада, 0) КАК СортировкаСклада,
	|
	|	Таблица.Назначение.Заказ              КАК Заказ,
	|	Таблица.ЗаказИсточник                 КАК ЗаказИсточник,
	|	&ВыражениеНовоеНазначение             КАК НовоеНазначение,
	|	&ВыражениеИсходноеНазначение          КАК ИсходноеНазначение
	|
	|ИЗ
	|	ВтСводнаяРезервыОстатки КАК Таблица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСортировкаСкладов КАК ТаблицаСортировкиСкладов
	|		ПО ТаблицаСортировкиСкладов.Склад          = Таблица.Склад
	|		 И ТаблицаСортировкиСкладов.Назначение     = Таблица.Назначение
	|		 И ТаблицаСортировкиСкладов.Номенклатура   = Таблица.Номенклатура
	|		 И ТаблицаСортировкиСкладов.Характеристика = Таблица.Характеристика
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСкладыОтгрузки КАК ТаблицаСкладовОтгрузки
	|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
	|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
	|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
	|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
	|ГДЕ
	|	&УсловиеОтбораСкладовОтгрузки
	|	И &УсловиеОтбораПоНаличию
	|УПОРЯДОЧИТЬ ПО
	|	Назначение, Номенклатура, Характеристика,
	|	СортировкаСклада УБЫВ,
	|	НазначениеИсточник,
	|	Потребность УБЫВ, ВНаличии УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Назначение          КАК Назначение,
	|	Таблица.Номенклатура        КАК Номенклатура,
	|	Таблица.Характеристика      КАК Характеристика,
	|	Таблица.Склад               КАК Склад,
	|	
	|	МАКСИМУМ(Таблица.ВНаличии)    КАК НаСкладе,
	|	МАКСИМУМ(Таблица.Обеспечено)  КАК Обеспечено,
	|	МАКСИМУМ(Таблица.Потребность) КАК Потребность,
	|	
	|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL ТОГДА
	|				ЛОЖЬ
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ)                   КАК ПотребностьОсновногоСклада,
	|	
	|	МАКСИМУМ(Таблица.Назначение.Заказ) КАК Заказ
	|
	|ИЗ
	|	ВтСводнаяРезервыОстатки КАК Таблица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСкладыОтгрузки КАК ТаблицаСкладовОтгрузки
	|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
	|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
	|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
	|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
	|ГДЕ
	|	&УсловиеОтбораСкладовОтгрузки
	|	И &УсловиеОтбораПоНаличию
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Назначение, Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад
	|УПОРЯДОЧИТЬ ПО
	|	Назначение, Номенклатура, Характеристика,
	|	Потребность УБЫВ,
	|	НаСкладе УБЫВ";
	
	Если ТолькоСкладОтгрузки Тогда
		
		УсловиеОтбораСкладовОтгрузки = "НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL";
		
	Иначе
		
		УсловиеОтбораСкладовОтгрузки = "ИСТИНА";
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
		
		УсловиеОтбораПоНаличию = "Таблица.ВНаличии > 0";
		
		ВыражениеИсходноеНазначение = "Таблица.Назначение";
		ВыражениеНовоеНазначение    = "НЕОПРЕДЕЛЕНО";
		
	Иначе
		
		УсловиеОтбораПоНаличию = "ИСТИНА";
		
		ВыражениеИсходноеНазначение = "Таблица.НазначениеИсточник";
		ВыражениеНовоеНазначение    = "Таблица.Назначение";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСкладовОтгрузки", УсловиеОтбораСкладовОтгрузки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоНаличию",       УсловиеОтбораПоНаличию);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИсходноеНазначение",  ВыражениеИсходноеНазначение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеНовоеНазначение",     ВыражениеНовоеНазначение);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВсегоТаблиц = Результат.Количество();
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТаблицаЗаполненияКорректировки", Результат[ВсегоТаблиц - 2].Выгрузить());
	СтруктураВозврата.Вставить("ТаблицаИтогов", Результат[ВсегоТаблиц - 1].Выгрузить());
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура СнятьРезервы(Таблица, СнятьИзлишекРезервов = Истина) Экспорт
	
	СтруктураКлючевыхПолей = Новый Структура("ИсходноеНазначение, Номенклатура, Характеристика, Склад");
	Потребность = 0;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если СнятьИзлишекРезервов Тогда
			
			// Снять излишние резервы
			// Таблица отсортирована по приоритетности складов. На первых складах необходимо оставить максимальное количество товара.
			Если Не (СтруктураКлючевыхПолей.ИсходноеНазначение = Строка.ИсходноеНазначение
				И СтруктураКлючевыхПолей.Номенклатура = Строка.Номенклатура
				И СтруктураКлючевыхПолей.Характеристика = Строка.Характеристика
				И СтруктураКлючевыхПолей.Склад = Строка.Склад)
				И Строка.ПотребностьОсновногоСклада = Истина Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураКлючевыхПолей, Строка);
				Потребность = Строка.Потребность;
			КонецЕсли;
			
			Если Потребность > 0 Тогда
				Строка.Количество = Строка.ВНаличии - Потребность;
				Потребность = Потребность - Строка.ВНаличии;
			Иначе
				Строка.Количество = Строка.ВНаличии;
			КонецЕсли;
			
			Если Строка.Количество > 0 Тогда
				Строка.Отметка = Истина;
			Иначе
				Строка.Отметка = Ложь;
			КонецЕсли;
		Иначе
			
			// Снять все резервы
			Строка.Количество = Строка.ВНаличии;
			Если Строка.Количество > 0 Тогда
				Строка.Отметка = Истина;
			Иначе
				Строка.Отметка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВременнаяТаблицаОбеспечениеЗаказовОстатки(ВидОперации, ЕстьОтборПоОрганизации, ЕстьОтборПоНоменклатуре)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОстатков.Назначение             КАК Назначение,
		|	ТаблицаОстатков.Номенклатура           КАК Номенклатура,
		|	ТаблицаОстатков.Характеристика         КАК Характеристика,
		|	ТаблицаОстатков.Склад                  КАК Склад,
		|	ТаблицаОстатков.НаличиеПодЗаказОстаток КАК НаличиеПодЗаказ,
		|	ТаблицаОстатков.КЗаказуОстаток         КАК КЗаказу,
		|	ТаблицаОстатков.ПотребностьОстаток     КАК Потребность
		|ПОМЕСТИТЬ ВТОбеспечениеЗаказовОстатки
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, &ПараметрыВиртуальнойТаблицы) КАК ТаблицаОстатков
		|ГДЕ
		|	&УсловиеТаблицаОстатков";
		
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям И ЕстьОтборПоОрганизации Тогда
		
		УсловиеТаблицаОстатков      = "ТаблицаОстатков.Назначение.Заказ.Организация = &Организация И ТаблицаОстатков.НаличиеПодЗаказОстаток > 0";
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ " И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			  |		  И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		ПараметрыВиртуальнойТаблицы = "ИСТИНА";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям И Не ЕстьОтборПоОрганизации Тогда
		
		УсловиеТаблицаОстатков      = "ТаблицаОстатков.НаличиеПодЗаказОстаток > 0";
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ " И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			  |		  И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		ПараметрыВиртуальнойТаблицы = "ИСТИНА";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв Тогда
		
		УсловиеТаблицаОстатков      = "ТаблицаОстатков.НаличиеПодЗаказОстаток > 0";
		//++ НЕ УТКА
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ " И НЕ (ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
			  |		  И ТаблицаОстатков.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
		//-- НЕ УТКА
		
		ПараметрыВиртуальнойТаблицы = "Назначение = &Назначение";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
		
		УсловиеТаблицаОстатков      = "ИСТИНА";
		ПараметрыВиртуальнойТаблицы = "Назначение = &Назначение";
		
	КонецЕсли;
	
	Если ЕстьОтборПоНоменклатуре Тогда
		
		ТекстЗапросаВТТребуемыеТовары = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТТребуемыеТовары
		|ИЗ
		|	&ТребуемыеТовары КАК Товары
		|
		|;
		|";
		
		ТекстЗапроса = ТекстЗапросаВТТребуемыеТовары + ТекстЗапроса;
		
		УсловиеТаблицаОстатков = УсловиеТаблицаОстатков
			+ " И (ТаблицаОстатков.Номенклатура, ТаблицаОстатков.Характеристика) В (ВЫБРАТЬ Товары.Номенклатура, Товары.Характеристика ИЗ ВТТребуемыеТовары КАК Товары)";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицаОстатков",      УсловиеТаблицаОстатков);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрыВиртуальнойТаблицы", ПараметрыВиртуальнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ВременнаяТаблицаСвободныеОстатки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	ВтОбеспечениеЗаказовОстатки КАК ТаблицаОтбора
		|;
		|/////////////////////////////////
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.Номенклатура      КАК Номенклатура,
		|	Набор.Характеристика    КАК Характеристика,
		|	Набор.Склад             КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтСвободныеОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		СвободныеОстатки.Номенклатура   КАК Номенклатура,
		|		СвободныеОстатки.Характеристика КАК Характеристика,
		|		СвободныеОстатки.Склад          КАК Склад,
		|		СвободныеОстатки.ВНаличииОстаток - СвободныеОстатки.ВРезервеСоСкладаОстаток - СвободныеОстатки.ВРезервеПодЗаказОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.СвободныеОстатки.Остатки(,
		|			(Номенклатура, Характеристика) В(
		|				ВЫБРАТЬ
		|					ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика КАК Характеристика
		|				ИЗ
		|					ВтТовары КАК ТаблицаОтбора)) КАК СвободныеОстатки
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|			ТаблицаОтбора.Характеристика КАК Характеристика,
		|			РезервыИзЗаказов.Склад       КАК Склад,
		|			РезервыИзЗаказов.Количество  КАК Количество
		|		ИЗ
		|			ВтТовары КАК ТаблицаОтбора
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК РезервыИзЗаказов
		|				ПО РезервыИзЗаказов.Номенклатура = ТаблицаОтбора.Номенклатура
		|				 И РезервыИзЗаказов.Характеристика = ТаблицаОтбора.Характеристика
		|				 И РезервыИзЗаказов.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
		|				 И РезервыИзЗаказов.Количество < 0) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ТекстРазделителяЗапросов()
	
	Возврат 
	"
	|	
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции
Функция ВременнаяТаблицаОбеспечениеЗаказовОстаткиНазначений(ВидОперации, ЕстьОтборПоОрганизации)
	
	// Обращение к ссылке заказа через точку позволяет отработать механизмам RLS.
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОстатков.Назначение              КАК Назначение,
		|	ТаблицаОстатков.Номенклатура            КАК Номенклатура,
		|	ТаблицаОстатков.Характеристика          КАК Характеристика,
		|	ТаблицаОстатков.Склад                   КАК Склад,
		|	ТаблицаОстатков.НаличиеПодЗаказОстаток  КАК НаличиеПодЗаказ,
//++ НЕ УТКА
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаОстатков.Назначение.Заказ КАК Документ.ЗаказДавальца).Партнер,
		|		ЕСТЬNULL(ТаблицаОстатков.Назначение.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)))             КАК Партнер,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаОстатков.Назначение.Заказ КАК Документ.ЗаказДавальца).Договор,
		|		ЕСТЬNULL(ТаблицаОстатков.Назначение.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))) КАК Договор,
//-- НЕ УТКА
		|	ЕСТЬNULL(ТаблицаОстатков.Назначение.Заказ.Ссылка, НЕОПРЕДЕЛЕНО) КАК Заказ
		|
		|ПОМЕСТИТЬ ВтОбеспечениеЗаказовОстаткиНазначений
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|		Назначение <> &Назначение
		|		И (Номенклатура, Характеристика) В(
		|			ВЫБРАТЬ
		|				ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|				ТаблицаОтбора.Характеристика КАК Характеристика
		|			ИЗ
		|				ВтТовары КАК ТаблицаОтбора)) КАК ТаблицаОстатков
		|ГДЕ
		|	ТаблицаОстатков.НаличиеПодЗаказОстаток > 0
		|	И &ЭтоОперацияРезервироватьИКорректировать
		|	И &УсловиеТаблицыОстатков
		// Назначение под заказ или под партнера.
		|	И (НЕ ТаблицаОстатков.Назначение.Заказ ЕСТЬ NULL
		|		ИЛИ ТаблицаОстатков.Назначение.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
//++ НЕ УТКА
		// При использовании давальческих назначений необходимо
		// проверить что оба назначения относятся к одной версии производства.
		|	И (
		//	Заказ задан, но не является Заказом давальца.
		|		(НЕ ТаблицаОстатков.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца)
		// Производство 2.1.
		|		ИЛИ (ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|			И ТаблицаОстатков.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21))
		// Производство 2.2.
		|		ИЛИ (ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).ТипНазначения В (ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|																				ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
		|			И ТаблицаОстатков.Назначение.ТипНазначения В (ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|															ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22)))
		|	)
//-- НЕ УТКА
		|";
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
		ЭтоОперацияРезервироватьИКорректировать = "ИСТИНА";
	Иначе
		ЭтоОперацияРезервироватьИКорректировать = "ЛОЖЬ";
	КонецЕсли;
	
	Если ЕстьОтборПоОрганизации Тогда
		УсловиеТаблицыОстатков = "(ТаблицаОстатков.Назначение.Заказ.Организация = &Организация
									|ИЛИ ТаблицаОстатков.Назначение.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
	Иначе
		УсловиеТаблицыОстатков = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоОперацияРезервироватьИКорректировать", ЭтоОперацияРезервироватьИКорректировать);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицыОстатков", УсловиеТаблицыОстатков);
	
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ВременнаяТаблицаСкладыОтгрузки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение     КАК Назначение
		|ПОМЕСТИТЬ ВтСкладыОтгрузки
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, 
		|			(Назначение, Склад, Номенклатура, Характеристика)
		|			В (ВЫБРАТЬ 
		|					Т.Назначение, 
		|					Т.Склад, 
		|					Т.Номенклатура, 
		|					Т.Характеристика 
		|				ИЗ ВтОбеспечениеЗаказовОстатки КАК Т)
		|			И НЕ Склад ЕСТЬ NULL) КАК Таблица
		|ГДЕ
		|	
		|	Таблица.ПотребностьОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение";
		
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ВременнаяТаблицаСводнаяРезервыОстатки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//++ НЕ УТКА
		|	ЕСТЬNULL(Таблица.Назначение.Заказ, НЕОПРЕДЕЛЕНО)                                                  КАК Заказ,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(Таблица.Назначение.Заказ КАК Документ.ЗаказДавальца).Партнер,
		|		ЕСТЬNULL(Таблица.Назначение.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)))             КАК Партнер,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(Таблица.Назначение.Заказ КАК Документ.ЗаказДавальца).Договор,
		|		ЕСТЬNULL(Таблица.Назначение.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))) КАК Договор,
//-- НЕ УТКА
		|	Таблица.Назначение КАК Назначение
		|ПОМЕСТИТЬ ВтНазначения
		|ИЗ
		|	ВтОбеспечениеЗаказовОстатки КАК Таблица
		|;
		|/////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Набор.Назначение         КАК Назначение,
		|	Набор.НазначениеИсточник КАК НазначениеИсточник,
		|	Набор.Номенклатура       КАК Номенклатура,
		|	Набор.Характеристика     КАК Характеристика,
		|	ПРЕДСТАВЛЕНИЕ(Набор.Склад) КАК СкладПредставление,
		|	Набор.ИсточникПредставление КАК ИсточникПредставление,
		|	Набор.Склад              КАК Склад,
		|	СУММА(Набор.ВНаличии)    КАК ВНаличии,
		|	СУММА(Набор.Обеспечено)  КАК Обеспечено,
		|	СУММА(Набор.Доступно)    КАК Доступно,
		|	СУММА(Набор.Потребность) КАК Потребность,
		|
		|	МАКСИМУМ(Набор.ЗаказИсточник) КАК ЗаказИсточник
		|
		|ПОМЕСТИТЬ ВтСводнаяРезервыОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК НазначениеИсточник,
		|		НЕОПРЕДЕЛЕНО                  КАК ЗаказИсточник,
		|		""""                          КАК ИсточникПредставление,
		|		Таблица.Назначение            КАК Назначение,
		|		Таблица.Номенклатура          КАК Номенклатура,
		|		Таблица.Характеристика        КАК Характеристика,
		|		Таблица.Склад                 КАК Склад,
		|		Таблица.НаличиеПодЗаказ       КАК ВНаличии,
		|		Таблица.Потребность
		|			- Таблица.КЗаказу         КАК Обеспечено,
		|		Таблица.Потребность           КАК Потребность,
		|		0                             КАК Доступно
		|	ИЗ
		|		ВтОбеспечениеЗаказовОстатки КАК Таблица
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК НазначениеИсточник,
		|		НЕОПРЕДЕЛЕНО                  КАК ЗаказИсточник,
		|		""""                          КАК ИсточникПредставление,
		|		ТаблицаНазначений.Назначение  КАК Назначение,
		|		Таблица.Номенклатура          КАК Номенклатура,
		|		Таблица.Характеристика        КАК Характеристика,
		|		Таблица.Склад                 КАК Склад,
		|		0                             КАК ВНаличии,
		|		0                             КАК Обеспечено,
		|		0                             КАК Потребность,
		|		Таблица.Количество            КАК Доступно
		|	ИЗ
		|		ВтНазначения КАК ТаблицаНазначений
		|		
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК Таблица
		|			ПО ИСТИНА
		|	ГДЕ
		|		НЕ Таблица.Номенклатура ЕСТЬ NULL
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		ТаблицаНазначенийИсточников.Назначение      КАК НазначениеИсточник,
		|		ТаблицаНазначенийИсточников.Заказ           КАК ЗаказИсточник,
		|		
		|		ВЫБОР КОГДА ТаблицаНазначенийИсточников.Заказ <> НЕОПРЕДЕЛЕНО ТОГДА
		|						ПРЕДСТАВЛЕНИЕ(ТаблицаНазначенийИсточников.Заказ)
		|					ИНАЧЕ
		|						ПРЕДСТАВЛЕНИЕ(ТаблицаНазначенийИсточников.Назначение)
		|			КОНЕЦ                                        КАК ИсточникПредставление,
		|		
		|		ТаблицаНовыхНазначений.Назначение           КАК Назначение,
		|		ТаблицаНазначенийИсточников.Номенклатура    КАК Номенклатура,
		|		ТаблицаНазначенийИсточников.Характеристика  КАК Характеристика,
		|		ТаблицаНазначенийИсточников.Склад           КАК Склад,
		|		0                                           КАК ВНаличии,
		|		0                                           КАК Обеспечено,
		|		0                                           КАК Потребность,
		|		ТаблицаНазначенийИсточников.НаличиеПодЗаказ КАК Доступно
		|	ИЗ
		|		ВтНазначения КАК ТаблицаНовыхНазначений
		|		
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказовОстаткиНазначений КАК ТаблицаНазначенийИсточников
		|			ПО ИСТИНА
		|			
//++ НЕ УТКА
		|	ГДЕ
		// При резервировании из других заказов, если назначения - давальческие,
		// необходимо проверить что у них совпадают ключевые поля шапки.
		|		ТаблицаНазначенийИсточников.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ИЛИ ТаблицаНазначенийИсточников.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)
		|			ИЛИ (ТаблицаНовыхНазначений.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				И ТаблицаНовыхНазначений.Назначение.ТипНазначения В (ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|																	ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
		|				И ТаблицаНазначенийИсточников.Партнер = ТаблицаНовыхНазначений.Партнер
		|				И ТаблицаНазначенийИсточников.Договор = ТаблицаНовыхНазначений.Договор)
		
//-- НЕ УТКА
		|	
		|	) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Назначение,
		|	Набор.НазначениеИсточник,
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад,
		|	Набор.ИсточникПредставление";
		
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ТаблицаИсточниковОбеспеченияПеремещением()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	
		|	Таблица.Склад          КАК СкладПолучатель,
		|	Таблица.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей КАК СкладОтправитель,
		|
		|	1 КАК Уровень
		|ИЗ
		|	ВтСпособыОбеспечения КАК Таблица
		|ГДЕ
		|	Таблица.Склад <> Таблица.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика,
		|	СкладОтправитель, СкладПолучатель";
		
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ВременнаяТаблицаСортировкаСкладов()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	
		|	Таблица.СкладПолучатель  КАК Склад,
		|	Таблица.СкладОтправитель КАК КорневойИсточник,
		|	Таблица.Уровень          КАК Уровень
		|ПОМЕСТИТЬ ВтИерархияСкладов
		|ИЗ
		|	&ТаблицаИерархииСкладов КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Назначение     КАК Назначение,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	МАКСИМУМ(ЕСТЬNULL(ИерархияСкладов.Уровень, 0)
		|		+ ВЫБОР КОГДА ИерархияСкладов.КорневойИсточник = ИерархияСкладовСкладДокумента.КорневойИсточник
		|			И ИерархияСкладов.Уровень <= ИерархияСкладовСкладДокумента.Уровень ТОГДА
		|					1000
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ) КАК ПриоритетСклада
		|ПОМЕСТИТЬ ВтСортировкаСкладов
		|ИЗ
		|	ВтСводнаяРезервыОстатки КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказовОстатки КАК ТаблицаДокумента
		|		ПО ТаблицаДокумента.Назначение     = Таблица.Назначение
		|		 И ТаблицаДокумента.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаДокумента.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИерархияСкладов КАК ИерархияСкладовСкладДокумента
		|		ПО ИерархияСкладовСкладДокумента.Номенклатура   = Таблица.Номенклатура
		|		 И ИерархияСкладовСкладДокумента.Характеристика = Таблица.Характеристика
		|		 И ИерархияСкладовСкладДокумента.Склад          = ТаблицаДокумента.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИерархияСкладов КАК ИерархияСкладов
		|		ПО ИерархияСкладов.Номенклатура   = Таблица.Номенклатура
		|		 И ИерархияСкладов.Характеристика = Таблица.Характеристика
		|		 И ИерархияСкладов.Склад          = Таблица.Склад
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Назначение, Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение, Номенклатура, Характеристика, Склад";
		
	Возврат ТекстЗапроса;
	
КонецФункции
Процедура РассчитатьИерархиюСкладов(ТаблицаИсходная)
	
	ГруппировкиПоТоварам = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ТаблицаИсходная, "Номенклатура, Характеристика", "");
	Для Каждого ГруппировкаСтрока Из ГруппировкиПоТоварам Цикл
		
		Таблица = ГруппировкаСтрока.Таблица;
		Таблица.Индексы.Добавить("СкладПолучатель");
		
		ОбработкаЗавершена = Ложь;
		Пока Не ОбработкаЗавершена Цикл
			
			ОбработкаЗавершена = Истина;
			Для Каждого СтрокаТаблицы Из ГруппировкаСтрока.Таблица Цикл
				
				НайденнаяСтрока = Таблица.Найти(СтрокаТаблицы.СкладОтправитель, "СкладПолучатель");
				Если НайденнаяСтрока <> Неопределено Тогда
					
					ОбработкаЗавершена = Ложь;
					СтрокаТаблицы.Уровень = СтрокаТаблицы.Уровень + НайденнаяСтрока.Уровень;
					СтрокаТаблицы.СкладОтправитель = НайденнаяСтрока.СкладОтправитель;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаИсходная.Очистить();
	Для Каждого ГруппировкаСтрока Из ГруппировкиПоТоварам Цикл
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаИсходная, ГруппировкаСтрока.Таблица);
	КонецЦикла;
	
КонецПроцедуры
//}}20201210 ГлазуновДВ		

&НаСервере
Процедура ОбработатьСтрокуТЧ(Объект_,Стр)
	
	Если ТипЗнч(Объект_) = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") ИЛИ ТипЗнч(Объект_) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		Возврат;
	КонецЕсли;
	
	//СтруктураДействий = Новый Структура;							
	//СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	//СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");							
	//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект_);
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));							
	//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Стр, СтруктураДействий, Неопределено);
	
	
	ТекущаяСтрока = Стр;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_0_3");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_1_1");
	//
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2");
	СтруктураДействий.Вставить("РассчитатьРеквизитыТЧ_2_0");
	
	//ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(),СтруктураДействий);
	ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока, СтруктураДействий, Объект_);
	
КонецПроцедуры

//20200820 ГлазуновДВ Добавлено для расчета по "Нашей" логике
/////////////////////////////////////////////////////////
&НаСервере
Процедура ОбработатьСтрокуТЧНаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ, Объект_)
	
	//ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИндСтр);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	//
	//ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок * ПолучитьЧислительУпаковки(ТекущаяСтрока.Упаковка);
	
	//0 цена по соглашению+условия продаж
	РассчитатьРеквизитыТЧ_0_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ);
	//1 цена со скидкой+скидки+пересчеты
	РассчитатьРеквизитыТЧ_1_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ);	
	//2 ндс+зависимые реквизиты
	РассчитатьРеквизитыТЧ_2_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ, Объект_);
	//
	
КонецПроцедуры

/////////////////////////////////////////////////////////

&НаСервере
Процедура РассчитатьРеквизитыТЧ_0_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ)
	
	Попытка
		//обновляем полностью строку - скидки, цены и тд.
		Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0") Тогда
			
			СтруктураДействий = Новый Структура;
			//**
			//Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_1") Тогда //изменение: упаковки, вид цены 
			//	
			//	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			//	
			//	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
			//		
			//		СтруктураЗаполненияЦены = Неопределено;
			//		Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_1_1") Тогда
			//			СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_1_1",СтруктураЗаполненияЦены);
			//		Иначе 
			//			СтруктураЗаполненияЦены = СтруктураЗаполненияЦеныВСтрокеТЧСервер(Объект);
			//		КонецЕсли;
			//		
			//		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
			//	ИначеЕсли ТекущаяСтрока.Количество > 0 Тогда
			//		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
			//	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			//		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
			//	КонецЕсли;
			//	
			//КонецЕсли;
			////**
			//Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_2") Тогда //изменение: номенклатуры
			//	
			//	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			//	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			//	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
			//	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			//		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
			//		ПрименныеСкидки = ПолучитьОбработатьСкидки(ТекущаяСтрока.Номенклатура);
			//		ПрименныеСкидки.Свойство("АвтоСкидка",ТекущаяСтрока.ПроцентАвтоматическойСкидки);
			//		ПрименныеСкидки.Свойство("РучнаяСкидка",ТекущаяСтрока.ПроцентРучнойСкидки);	
			//	Иначе
			//		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦеныВСтрокеТЧСервер(Объект));
			//	КонецЕсли;
			//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, ПоДатеОтгрузки", Объект.НалогообложениеНДС, Объект.Дата, Истина));
			//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
			//	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			//	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			//	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
			//	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
			//	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
			//	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
			//	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
			//	
			//	Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_2_1") Тогда //изменяем обеспечение
			//		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
			//		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
			//	КонецЕсли;
			//	
			//КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_0_3") Тогда  //все
				
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
				СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));	
				
			КонецЕсли;
			//**
			Если не СтруктураДействий.Количество() = 0 Тогда
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
			Иначе
				Сообщить("РассчитатьРеквизитыТЧ_0 пустая структура действий!");
			КонецЕсли;
			
		КонецЕсли;
	Исключение
	//описание	
	КонецПопытки;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура РассчитатьРеквизитыТЧ_1_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ)
	
	Если ТекущаяСтрока.Цена = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Попытка
		Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1") Тогда
			//*
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_0") Тогда //общие изменения
				
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой * ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_1") Тогда //изменение цены со скидкой
				
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой * ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_2") Тогда //изменение суммы ручной скидки
				
				ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СуммаРучнойСкидки -  ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;

				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_3") Тогда //изменение % общей скидки
				
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок*ТекущаяСтрока.ПроцентОбщий/100;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки;  
				ТекущаяСтрока.Сумма =  ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СуммаРучнойСкидки - ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;				
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_4") Тогда //изменение суммы общей скидки
				
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки;  
				ТекущаяСтрока.Сумма =  ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СуммаРучнойСкидки - ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;	
								
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_5") Тогда //изменение суммы
				
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма/ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
				
			КонецЕсли;
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_1_6") Тогда  //изменение % ручной скидки
							
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок*(ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки)/100;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.СуммаПроцентОбщий - ТекущаяСтрока.СуммаАвтоматическойСкидки;  
				ТекущаяСтрока.Сумма =  ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.СуммаРучнойСкидки - ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Сумма /ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.ЦенаСоСкидкой*ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаРучнойСкидки = ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАвтоматическойСкидки;
				ТекущаяСтрока.ПроцентРучнойСкидки =  ТекущаяСтрока.СуммаРучнойСкидки*100/(ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоУпаковок); 
				ТекущаяСтрока.СуммаПроцентОбщий = ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки; 
				ТекущаяСтрока.ПроцентОбщий = ТекущаяСтрока.ПроцентРучнойСкидки + ТекущаяСтрока.ПроцентАвтоматическойСкидки;
				
			КонецЕсли;

		КонецЕсли;
		
	Исключение
	//описание	
	КонецПопытки;
	
КонецПроцедуры //

&НаСервере
Процедура РассчитатьРеквизитыТЧ_2_НаСервере(ТекущаяСтрока,СтруктураДействийОбработкиТЧ, Объект_)
	
	Попытка
		Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_2") Тогда
			//**
			Если СтруктураДействийОбработкиТЧ.Свойство("РассчитатьРеквизитыТЧ_2_0") Тогда
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект_);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
				
			КонецЕсли;
			
		КонецЕсли;
	Исключение
	//описание	
	КонецПопытки;
	
КонецПроцедуры //

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки");
	
КонецФункции

//{{20201223 ГлазуновДВ	
&НаСервере
Функция ПолучитьЧислительУпаковки(Упаковка)
	
	Возврат ?(Упаковка.Числитель = 0, 1, Упаковка.Числитель);	
	
КонецФункции // ПолучитьЧислительУпаковки()

&НаСервере
Функция ПолучитьЗнаменательУпаковки(Упаковка)
	
	Возврат ?(Упаковка.Знаменатель = 0, 1, Упаковка.Знаменатель);	
	
КонецФункции // ПолучитьЗнаменательУпаковки()
//}}20201223 ГлазуновДВ	

//{{20210126 ГлазуновДВ	
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Вставить содержимое обработчика
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры
//}}20210126 ГлазуновДВ	
