
Функция ОтветственноеЛицоСПравомПодписи() Экспорт 
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо.Фамилия + "" "" + ПОДСТРОКА(ОтветственныеЛицаОрганизаций.ФизическоеЛицо.Имя, 1, 1) + ""."" + ПОДСТРОКА(ОтветственныеЛицаОрганизаций.ФизическоеЛицо.Отчество, 1, 1) + ""."" КАК ФИО_СОКР,
	|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
	|	ОтветственныеЛицаОрганизаций.ДокументПраваПодписи + "" № "" + ОтветственныеЛицаОрганизаций.НомерДокументаПраваПодписи + "" от "" КАК ПриказНачало,
	|	ОтветственныеЛицаОрганизаций.ДатаДокументаПраваПодписи КАК Дата
	|ИЗ
	|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФизическоеЛицо
	|	И ОтветственныеЛицаОрганизаций.ПравоПодписиПоДоверенности
	|	И ОтветственныеЛицаОрганизаций.ДатаНачала <= &ТекущаяДата
	|	И ОтветственныеЛицаОрганизаций.ДатаОкончания >= &ТекущаяДата
	|	И НЕ ОтветственныеЛицаОрганизаций.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ТекущийПользователь.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеЛица = Новый Структура;
			ДанныеЛица.Вставить("Должность",СокрЛП(ВыборкаДетальныеЗаписи.Должность));
			ДанныеЛица.Вставить("ФИО_СОКР",СокрЛП(ВыборкаДетальныеЗаписи.ФИО_СОКР));
			ДанныеЛица.Вставить("Приказ",СокрЛП(ВыборкаДетальныеЗаписи.ФИО_СОКР) + " " + ВыборкаДетальныеЗаписи.ПриказНачало + " " + Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=dd.MM.yyyy") + " г.");
			Возврат ДанныеЛица;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ОтветственныеЛицаСПравомПодписи()

Функция ПолучитьДанные(Ссылка, ИмяРеквизита) Экспорт
	Возврат Ссылка[ИмяРеквизита];
КонецФункции

Функция ЕстьПравоНаИзменениеДоговора() Экспорт
	//bercut задача 132п2
	Если не РольДоступна("ПолныеПрава") и не РольДоступна("Рин1_ИзменениеДоговоров") Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции // ЕстьПравоНаИзменениеДоговора()

// Осуществляет поиск ссылки по УИД(GUID) или массиву УИДов(GUID)
//
// Параметры:
//   УИД - Строка - Идентификатор строкой.
//       - Массив - Массив идентификаторов строкой.
//
//Возвращаемое значение:
//	- Неопределено - Если не удалось определить ни одну ссылку по параметру УИД.
//	- ЛюбаяСсылка - Если в параметр "УИД" была передана строка.
//	- ТаблицаЗначений  - Если в параметр "УИД" был передан массив строк.
//		* УИД - Строка - Содержит идентифкатор строкой по которому удалось определить ссылку.
//		* Ссылка - ЛюбаяСсылка - Содержит ссылку на объект.
//
// Пример:
// РезультатПоиска = НайтиСсылкуПоУИД("31f35109-f60a-4777-a555-f8a46c5a165d") ...
//
Функция НайтиСсылкуПоУИД(знач УИД) Экспорт
    
    ЭтоМассив = ТипЗнч(УИД) = Тип("Массив");
    
    МассивУидов = Новый Массив;
    Если ЭтоМассив Тогда
        МассивУидов = УИД;
    Иначе
        МассивУидов.Добавить(УИД);
    КонецЕсли;
    
	Результат = Неопределено;
    
    МассивМетаданных = Новый Массив;    
	МассивМетаданных.Добавить(Справочники);
	МассивМетаданных.Добавить(Документы);
	МассивМетаданных.Добавить(ПланыВидовХарактеристик);
	МассивМетаданных.Добавить(ПланыСчетов);
	МассивМетаданных.Добавить(ПланыВидовРасчета);
	МассивМетаданных.Добавить(ПланыОбмена);
	МассивМетаданных.Добавить(БизнесПроцессы);
	МассивМетаданных.Добавить(Задачи);
    
    МассивТипов = Новый Массив; 
    
    Для Каждого СтрМетаданное Из МассивМетаданных Цикл
        Для Каждого Стр Из СтрМетаданное.ТипВсеСсылки().Типы() Цикл
            МассивТипов.Добавить(Стр);
        КонецЦикла;
    КонецЦикла;
        
    ТаблицаСсылок = Новый ТаблицаЗначений;
    ТаблицаСсылок.Колонки.Добавить("УИД"    , Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
    ТаблицаСсылок.Колонки.Добавить("Ссылка" , Новый ОписаниеТипов(МассивТипов));
    
    Для Каждого СтрМетаданное Из МассивМетаданных Цикл
        Для Каждого Менеджер Из СтрМетаданное Цикл   
            Для Каждого СтрУИД Из МассивУидов Цикл
                Попытка
                    НовСтр = ТаблицаСсылок.Добавить();
                    НовСтр.Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрУИД));
                    НовСтр.УИД    = СтрУИД;
                Исключение
                КонецПопытки;
            КонецЦикла;
        КонецЦикла;
    КонецЦикла;
            
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ТаблицаСсылок.Ссылка КАК Ссылка,
        |   ТаблицаСсылок.УИД КАК УИД
        |ПОМЕСТИТЬ ВТ
        |ИЗ
        |   &ТаблицаСсылок КАК ТаблицаСсылок
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТ.Ссылка КАК Ссылка,
        |   ВТ.УИД КАК УИД
        |ИЗ
        |   ВТ КАК ВТ
        |ГДЕ
        |   НЕ ВТ.Ссылка.ПометкаУдаления ЕСТЬ NULL";
    
    Запрос.УстановитьПараметр("ТаблицаСсылок",ТаблицаСсылок);
    РезультатЗапроса = Запрос.Выполнить();
    
    Если Не РезультатЗапроса.Пустой() Тогда
        Если ЭтоМассив Тогда
            Результат = РезультатЗапроса.Выгрузить(); 
        Иначе
            ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
            ВыборкаДетальныеЗаписи.Следующий();
            
            Результат = ВыборкаДетальныеЗаписи.Ссылка;
        КонецЕсли;
    КонецЕсли;
    
	Возврат Результат;
		
КонецФункции // НайтиСсылкуПоУИД 

//Пример использования функции ниже.
//Процедура ПроверитьСвойствоДокумента()
//	
//	РеквизитыДокумента = Метаданные.Документы.ТестовыйДокумент.Реквизиты;
//	ИмяРеквизита = "Комментарий";
//	
//	Если ПеременнаяСодержитСвойство(РеквизитыДокумента, ИмяРеквизита) Тогда
//		Сообщить("Реквизит """ + ИмяРеквизита + """ найден!"); 
//	Иначе
//		Сообщить("Реквизит """ + ИмяРеквизита + """ НЕ найден!");
//	КонецЕсли;	
//	
//КонецПроцедуры
//
//результатом будет сообщение:
//>> Реквизит "Комментарий" найден!
Функция ПеременнаяСодержитСвойство(Переменная, ИмяСвойства)  Экспорт
	
	// Инициализируем структуру для теста 
	// с ключом (значение переменной "ИмяСвойства") 
	// и значением произвольного GUID'а
	GUIDПроверка = Новый УникальныйИдентификатор;
	СтруктураПроверка = Новый Структура;
	СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);
	
	// Заполняем созданную структуру из переданного 
	// значения переменной
	ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);
	
	// Если значение для свойства структуры осталось 
	// NULL, то искомое свойство не найдено, 
	// и наоборот.
	
	Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ЭтоЧисло(Слово) Экспорт
	
	Цифры = "1234567890";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//нужно для контроля закрытия заказа по приходным ордерам - что бы готов к закрытию ставилось только полученный весь товар ордерами
Функция ИмеютсяНеПолученныеТоварыПоЗаказуПоставщика(ЗаказПоставщику)  Экспорт
	
	Если  не ЗаказПоставщику.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
		
		//!!! не добавляй в расширение критерии отбора!!! смотри в консоле запросов в пользовательском режиме
		//почему? добавится кча ненужных объектов и расширение станут тяжелым
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ЗаказПоставщику",ЗаказПоставщику);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязанныеДокументы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Приобретения
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗаказПоставщику) КАК СвязанныеДокументы
		|ГДЕ
		|	СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПриобретениеТоваровУслуг
		|	И СвязанныеДокументы.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	СУММА(ТоварыКПоступлениюОстаткиИОбороты.КОформлениюПоступленийПоОрдерамПриход) КАК КОформлениюПоступленийПоОрдерамПриход,
		|	ТоварыКПоступлениюОстаткиИОбороты.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ОстаткиПоОрдерам
		|ИЗ
		|	ВТ_Приобретения КАК ВТ_Приобретения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(, , , , ) КАК ТоварыКПоступлениюОстаткиИОбороты
		|		ПО ВТ_Приобретения.Ссылка = ТоварыКПоступлениюОстаткиИОбороты.ДокументПоступления
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлениюОстаткиИОбороты.Номенклатура,
		|	ТоварыКПоступлениюОстаткиИОбороты.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ЗаказыПоставщикамОстаткиИОбороты.Характеристика КАК Характеристика,
		//++Шерстюк Ю.Ю. 05.05.2021 Задача 8071 при закрытии заказа поставщику по неордерному складу выдает сообщение, что не все пришло на склад
		//хотя ПТУ является фактом прихода
		//|	СУММА(ЗаказыПоставщикамОстаткиИОбороты.КОформлениюПриход) КАК КОформлениюПриход
		|	СУММА(ВЫБОР
		|	КОГДА ЗаказыПоставщикамОстаткиИОбороты.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|			И ЗаказыПоставщикамОстаткиИОбороты.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику.Дата
		|		ТОГДА ЗаказыПоставщикамОстаткиИОбороты.КОформлениюПриход
		|	ИНАЧЕ ЗаказыПоставщикамОстаткиИОбороты.КОформлениюКонечныйОстаток
		|	КОНЕЦ) КАК КОформлениюПриход
		//--Шерстюк Ю.Ю.
		|ПОМЕСТИТЬ ВТ_ОстаткиЗаказ
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(, , Авто, , ЗаказПоставщику = &ЗаказПоставщику) КАК ЗаказыПоставщикамОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикамОстаткиИОбороты.Номенклатура,
		|	ЗаказыПоставщикамОстаткиИОбороты.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиЗаказ.Номенклатура КАК Номенклатура,
		|	ВТ_ОстаткиЗаказ.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ВТ_ОстаткиЗаказ.КОформлениюПриход, 0) - ЕСТЬNULL(ВТ_ОстаткиПоОрдерам.КОформлениюПоступленийПоОрдерамПриход, 0) КАК НеДооформлено
		|ИЗ
		|	ВТ_ОстаткиЗаказ КАК ВТ_ОстаткиЗаказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоОрдерам КАК ВТ_ОстаткиПоОрдерам
		|		ПО ВТ_ОстаткиЗаказ.Номенклатура = ВТ_ОстаткиПоОрдерам.Номенклатура
		|			И ВТ_ОстаткиЗаказ.Характеристика = ВТ_ОстаткиПоОрдерам.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ВТ_ОстаткиЗаказ.КОформлениюПриход, 0) - ЕСТЬNULL(ВТ_ОстаткиПоОрдерам.КОформлениюПоступленийПоОрдерамПриход, 0) > 0";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		//если нет приобретений у заказа нет смысла тут дальше обрабатывать
		ТаблицаПриобретений = Запрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().выгрузить();
		Если ТаблицаПриобретений.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		//значит есть не поступивший по приходным ордерам товар
		Если не РезультатЗапроса.Пустой() Тогда	
			Возврат Истина;	
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат Ложь;	
	
КонецФункции // ()



Функция РольДоступнаСервер(ИмяРоли) Экспорт
	Возврат РольДоступна(ИмяРоли);	
КонецФункции
