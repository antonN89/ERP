#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ПримерExcel.Картинка = Элементы.БиблиотекаКартинокУКО_Excel.Картинка;
	
	Шаг = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолноеИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Каталог = ПолноеИмяФайла;
	ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяФайла;
	ДиалогВыбораФайла.Фильтр = ФильтрЗагрузкиДанныхИзТабличногоДокумента();
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор файла'; en = 'Select file'");
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗакончен", ЭтаФорма));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПримерMXL(Команда)
	
	ПолучитьФайл(ПримерФайлаMXL(), НСтр("ru = 'Пример.mxl'; en = 'Sample.mxl'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерExcel(Команда)
	
	ПолучитьФайл(ПримерФайлаExcel(), НСтр("ru = 'Пример.xlsx'; en = 'Sample.xlsx'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Шаг = Шаг - 1;
	ОбновитьЭлементыУправления()
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Шаг = 1 Тогда
		
		Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда 
			ЗагрузкаДанныхФайла();
		Иначе
			ТекстОшибки = НСтр("ru = 'Не выбран файл'; en = 'No file selected'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ПоказатьПредупреждение(,ТекстОшибки,,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
			ТекущийЭлемент = Элементы.ПолноеИмяФайла;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Шаг = Шаг + 1;
	ОбновитьЭлементыУправления()
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Закрыть(ЗагрузкаДанныхСервер());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПримерФайлаMXL()
	
	ПримерФайлаДвоичныеДанные = ОбъектОбработки().ПолучитьМакет("УКО_ПримерФайлаMXLДляЗагрузкиВТаблицуЗначений_ru");
	Возврат ПоместитьВоВременноеХранилище(ПримерФайлаДвоичныеДанные);
	
КонецФункции

&НаСервере
Функция ПримерФайлаExcel()
	
	ПримерФайлаДвоичныеДанные = ОбъектОбработки().ПолучитьМакет("УКО_ПримерФайлаExcelДляЗагрузкиВТаблицуЗначений_ru");
	Возврат ПоместитьВоВременноеХранилище(ПримерФайлаДвоичныеДанные);
	
КонецФункции

&НаКлиенте
Функция ФильтрЗагрузкиДанныхИзТабличногоДокумента()
	
	ПоддерживаемыеФорматы = Новый СписокЗначений;
	ПоддерживаемыеФорматы.Добавить("*.mxl", НСтр("ru = 'Файлы табличных документов от 1С'; en = 'Files of tabular documents from 1C'"));
	ПоддерживаемыеФорматы.Добавить("*.xls; *.xlsx", НСтр("ru = 'Файлы Excel'; en = 'Files Excel'"));
	
	Возврат УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайлов(ПоддерживаемыеФорматы);
	
КонецФункции

&НаКлиенте
Процедура ВыборФайлаЗакончен(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыУправления()
	
	ПоследнийШаг = 2;
	
	Если Шаг = 1 Тогда
		ЗаголовокШага = НСтр("ru = 'Выбор файла'; en = 'Select file'");
	ИначеЕсли Шаг = 2 Тогда
		ЗаголовокШага = НСтр("ru = 'Загрузка данных'; en = 'Data loading'");
	КонецЕсли;
	
	УКО_ФормыКлиентСервер_Заголовок(ЭтаФорма, СтрШаблон("Шаг %1/%2. %3 : %4",
												Шаг, ПоследнийШаг, ЗаголовокШага, НСтр("ru = 'Загрузка в таблицу значений'; en = 'Loading in the table of values'")));
	
	Элементы.ФормаНазад.Видимость = (Шаг > 1);
	Элементы.ФормаДалее.Видимость = (Шаг < ПоследнийШаг);
	Элементы.ФормаЗагрузить.Видимость = (Шаг = ПоследнийШаг);
	
	Элементы.ФормаДалее.КнопкаПоУмолчанию = (Шаг = 1);
	Элементы.ФормаЗагрузить.КнопкаПоУмолчанию = (Шаг = ПоследнийШаг);
	
	Элементы.СтраницаЗагрузкаФайла.Видимость = (Шаг = 1);
	Элементы.СтраницаЗагрузкаДанных.Видимость = (Шаг = 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхФайла()
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = УКО_ВременноеХранилищеВызовСервера_Поместить(ДвоичныеДанныеФайла, УникальныйИдентификатор, АдресФайла);
	
	ЗагрузкаДанныхКолонокСервер()

КонецПроцедуры

&НаСервере
Процедура ЗагрузкаДанныхКолонокСервер()
	
	ТабличныйДокумент = ТабличныйДокументФайла();
	
	ЗагружаемыеКолонки.Очистить();
	
	// Считываем колонки
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл 
		
		Область = ТабличныйДокумент.Область(1, НомерКолонки);
		ИмяКолонки = Область.Текст;
		
		НоваяКолонка = ЗагружаемыеКолонки.Добавить();
		НоваяКолонка.Идентификатор = ИмяКолонки;
		НоваяКолонка.Загружать = Истина;
		НоваяКолонка.НомерКолонки = НомерКолонки;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТабличныйДокументФайла()
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Расширение = ВРег(Файл.Расширение);
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТипФайлаТаблицы = Неопределено;
	
	ЧтениеПотоком = Ложь;
	Если Расширение = ".MXL" Тогда
		ЧтениеПотоком = Истина;
		ТипФайлаТаблицы = ТипФайлаТабличногоДокумента.MXL;
	ИначеЕсли Расширение = ".XLS" Тогда
		ТипФайлаТаблицы = ТипФайлаТабличногоДокумента.XLS;
	ИначеЕсли Расширение = ".XLSX" Тогда
		ТипФайлаТаблицы = ТипФайлаТабличногоДокумента.XLSX;
	КонецЕсли;
	
	Если ЧтениеПотоком Тогда
		ОбъектЧтения = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
	Иначе 
		ОбъектЧтения = ПолноеИмяФайла;
	КонецЕсли;
	
	ТабличныйДокумент.Прочитать(ОбъектЧтения, СпособЧтенияЗначенийТабличногоДокумента.Значение, ТипФайлаТаблицы);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ЗагрузкаДанныхСервер()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТабличныйДокумент = ТабличныйДокументФайла();
	
	// Загрузка колонок
	Для Каждого Колонка Из ЗагружаемыеКолонки Цикл 
		
		Если Не Колонка.Загружать Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаЗначений.Колонки.Добавить(Колонка.Идентификатор, УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока());
		
	КонецЦикла;
	
	// Загрузка строк
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл 
			
		НоваяСтрока = ТаблицаЗначений.Добавить();
		
		Для Каждого Колонка Из ЗагружаемыеКолонки Цикл 
			
			Если Не Колонка.Загружать Тогда
				Продолжить;
			КонецЕсли;
			
			Область = ТабличныйДокумент.Область(НомерСтроки, Колонка.НомерКолонки);
			НоваяСтрока[Колонка.Идентификатор] = Область.Текст;
			
		КонецЦикла;
				
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗначений);
	
КонецФункции

#КонецОбласти


&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаСервере
// Помещает значение во временное хранилище
//
// Параметры:
//  Значение  - Произвольный - Произвольное значение
//  УникальныйИдентификатор  - УникальныйИдентификатор - Уникальный идентификатор
//  Адрес  - Строка - Адрес во временном хранилище
//
// Возвращаемое значение:
//   Строка - Адрес во временном хранилище
//
Функция УКО_ВременноеХранилищеВызовСервера_Поместить(Значение, УникальныйИдентификатор, Адрес = Неопределено) Экспорт
	
	Возврат ОбъектОбработки().УКО_ВременноеХранилище_Поместить(Значение, УникальныйИдентификатор, Адрес);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает Описание типов строка)
// Параметры:
//   ДлинаСтроки - Число - Длина строки
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов строка
Функция УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(ДлинаСтроки = 0) Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Обновляет заголовок формы
//
// Параметры:
//  Форма - Форма - Форма
//  Заголовок - Строка - Заголовок формы
//  Дополнение - Булево - Дополнять заголовок названием расширения
//
Процедура УКО_ФормыКлиентСервер_Заголовок(Форма, Заголовок, Дополнение = Ложь) Экспорт
	
	НовыйЗаголовок = Заголовок;
	
	Если Дополнение Тогда
		НовыйЗаголовок = НовыйЗаголовок + " : " + УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения();
	КонецЕсли;
	
	Форма.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает строку фильтра для диалога выбора файла
//
// Параметры:
//   ПоддерживаемыеФорматы - СписокЗначений - Формат (Представление..., Значение - Расширение)
//   ВключаяВсеФайлы - Булево - Включать все файлы
//
// Возвращаемое значение:
//   Строку - Фильтр для диалога выбора файла
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайлов(ПоддерживаемыеФорматы, ВключаяВсеФайлы = Истина) Экспорт
	
	Фильтры = Новый Массив;
	
	Если ПоддерживаемыеФорматы.Количество() > 1 Тогда
		Фильтры.Добавить(УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(НСтр("ru = 'Все поддерживаемые форматы'; en = 'All supported format'"), СтрСоединить(ПоддерживаемыеФорматы.ВыгрузитьЗначения(), ";")));
	КонецЕсли;
	
	Для Каждого ПоддерживаемыйФормат Из ПоддерживаемыеФорматы Цикл 
		Фильтры.Добавить(УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(ПоддерживаемыйФормат.Представление, ПоддерживаемыйФормат.Значение));
	КонецЦикла;

	Если ВключаяВсеФайлы Тогда
		Фильтры.Добавить(УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(НСтр("ru = 'Все файлы'; en = 'All files'"), ПолучитьМаскуВсеФайлы()));
	КонецЕсли;
	
	Возврат СтрСоединить(Фильтры, "|");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(Представление, Расширение)
	
	Возврат СтрШаблон("%1 (%2)|%2", Представление, Расширение);
	
КонецФункции
