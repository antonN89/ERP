//++Шерстюк Ю.Ю. обновление на 2.4.13.227 код процедуры совпадает с типовым
//&НаКлиенте
//&Вместо("ЗаполнитьЭтапыГрафикаОплаты")
//Процедура Рин1_ЗаполнитьЭтапыГрафикаОплаты()

//	ВариантыОтветов = Новый СписокЗначений;
//	ВариантыОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Перезаполнить этапы оплаты';
//														|en = 'Refill payment steps'"));
//	ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить';
//															|en = 'Cancel'"));
//	
//	ТекстВопроса = "";
//	
//	ПараметрыЗаполнения = Новый Структура;
//	ПараметрыЗаполнения.Вставить("ГрафикЗаполнен", ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(ГрафикОплаты));
//	ПараметрыЗаполнения.Вставить("ЗаполнитьДату",  УпрощенныйРежим И Не ЕстьПредоплата);
//	ПараметрыЗаполнения.Вставить("РаспределитьСумму", Ложь);
//	ПараметрыЗаполнения.Вставить("ПерезаполнитьЭтапы", Ложь);
//	
//	Если Не ПараметрыЗаполнения.ЗаполнитьДату Тогда
//		
//		Если УпрощенныйРежим Тогда
//			СуммаОплатыПоЭтапам    = СуммаПлатежаПредоплата + СуммаПлатежаКредит;
//			СуммаЗалогаПоЭтапам    = СуммаЗалогаЗаТаруПредоплата + СуммаЗалогаЗаТаруКредит;
//			ЭтапыОплатыНеЗаполнены = СуммаПлатежаПредоплата = 0 И СуммаПлатежаКредит = 0 И СуммаЗалогаПоЭтапам = 0;
//		Иначе
//			СуммаОплатыПоЭтапам    = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
//			СуммаЗалогаПоЭтапам    = ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
//			ЭтапыОплатыНеЗаполнены = ЭтапыГрафикаОплаты.Количество() = 0;
//		КонецЕсли;
//		
//		Если СуммаОплатыПоДокументу = 0 И СуммаЗалогаПоДокументу = 0 Тогда
//			
//			Если ЭтапыОплатыНеЗаполнены Тогда
//				
//				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Сумма неотмененных строк заказа нулевая. Заполнение этапов оплаты не требуется.';
//															|en = 'Amount of uncanceled order lines is zero. It is not required to fill in payment steps.'"));
//				Возврат;
//				
//			КонецЕсли;
//			
//			ЭтапыГрафикаОплаты.Очистить();
//			СуммаПлатежаПредоплата      = 0;
//			СуммаПлатежаКредит          = 0;
//			СуммаЗалогаЗаТаруПредоплата = 0;
//			СуммаЗалогаЗаТаруКредит     = 0;
//			ЭтапыОплатыКлиент.ОповеститьОНевозможностиЗаполненияЭтаповГрафикаОплаты();
//			РассчитатьИтоговыеПоказатели(ЭтаФорма);
//			Возврат;
//		
//		КонецЕсли;
//		
//		Если СуммаОплатыПоДокументу = СуммаОплатыПоЭтапам  И СуммаЗалогаПоДокументу = СуммаЗалогаПоЭтапам Тогда
//		
//			ТекстВопроса = НСтр("ru = 'Сумма заказанных строк совпадает с суммой этапов оплаты';
//								|en = 'Amount of order lines is equal to the amount of payment steps'") + Символы.ПС +
//								НСтр("ru = 'Перезаполнить этапы оплаты %ИсточникЗаполнения%?';
//									|en = 'Refill steps of payment %ИсточникЗаполнения%?'");
//		
//		ИначеЕсли Не ЭтапыОплатыНеЗаполнены Тогда
//		
//			ВариантыОтветов.Вставить(1, КодВозвратаДиалога.Нет, НСтр("ru = 'Распределить сумму';
//																	|en = 'Divide amount'"));
//			
//			ТекстВопроса = НСтр("ru = 'Этапы оплаты заполнены';
//								|en = 'Payment steps are filled in'")+ Символы.ПС +
//							НСтр("ru = 'Перезаполнить этапы оплаты %ИсточникЗаполнения% или распределить сумму по имеющимся этапам?';
//								|en = 'Refill payment steps %ИсточникЗаполнения% or allocate the amount to steps?'");
//		
//		Иначе
//			ПараметрыЗаполнения.ПерезаполнитьЭтапы = Истина;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если Не ПустаяСтрока(ТекстВопроса) Тогда
//		
//		Если ПараметрыЗаполнения.ГрафикЗаполнен Тогда 
//			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИсточникЗаполнения%", НСтр("ru = 'по графику';
//																					|en = 'on schedule'"));
//		ИначеЕсли ГрафикСоглашенияЗаполнен Тогда
//			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИсточникЗаполнения%", НСтр("ru = 'по соглашению';
//																					|en = 'by agreement'"));
//		Иначе
//			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИсточникЗаполнения%", НСтр("ru = 'по умолчанию';
//																					|en = 'default'"));
//		КонецЕсли;
//		
//		Оповещение = Новый ОписаниеОповещения("ВыборИсточникаЗаполненияЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
//		ПоказатьВопрос(Оповещение , ТекстВопроса, ВариантыОтветов);
//		Возврат;
//		
//	КонецЕсли;
//	
//	ЗаполнитьЭтапыГрафикаОплатыФрагмент(ПараметрыЗаполнения);
//	
//КонецПроцедуры
//--Шерстюк Ю.Ю.
&НаКлиенте
Процедура Рин1_ЭтапыГрафикаОплатыСдвигПриИзмененииВместо(Элемент)
	ТекущиеДанные = Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные;		
	//++Шерстюк Ю.Ю. 21.01.21
   пПустаяСсылкаГрафик = ПредопределенноеЗначение("Справочник.ГрафикиОплаты.ПустаяСсылка");
   
   Если ТекущиеДанные <> Неопределено Тогда
		пГрафик = ПолучитьГрафикОплаты(ЭтотОбъект.ГрафикОплаты,ТекущиеДанные.Заказ);
		//Если ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) Тогда
		//	ТекущиеДанные.ДатаПлатежа = ЖелаемаяДатаОтгрузки + 86400 * ТекущиеДанные.Сдвиг;
		//Иначе
		Если пГрафик = пПустаяСсылкаГрафик Тогда 
			ТекущиеДанные.ДатаПлатежа = Дата + 86400 * ТекущиеДанные.Сдвиг;
		Иначе
			 пДатаСУчетомСдвига = ПолучитьДатуПоКалендарю(пГрафик, Дата, ТекущиеДанные.Сдвиг);
			 Если пДатаСУчетомСдвига <> Дата(1,1,1) Тогда 
			 	ТекущиеДанные.ДатаПлатежа = пДатаСУчетомСдвига;
			 Иначе 
				  ТекущиеДанные.ДатаПлатежа = Дата + 86400 * ТекущиеДанные.Сдвиг;
			КонецЕсли;
		КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	//--Шерстюк Ю.Ю.
	СортироватьЭтапыОплаты();
КонецПроцедуры
//++Шерстюк Ю.Ю. 21.01.21
&НаСервере
Функция ПолучитьДатуПоКалендарю(пГрафик,пДата,пСдвиг)
	Если ЗначениеЗаполнено(пГрафик.Календарь) Тогда
		Возврат КалендарныеГрафики.ДатаПоКалендарю(пГрафик.Календарь, пДата, пСдвиг);
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьГрафикОплаты(пГрафикНаФорме,пЗаказ)
	   пПустаяСсылкаГрафик = ПредопределенноеЗначение("Справочник.ГрафикиОплаты.ПустаяСсылка");
	   пПустаяСсылкаДоговор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	   пПустаяСсылкаСоглашение = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
	   
	   Если ЭтотОбъект.ГрафикОплаты <> пПустаяСсылкаГрафик Тогда 
		   Возврат ЭтотОбъект.ГрафикОплаты;
	   КонецЕсли;
	   
	   Если пЗаказ <> Неопределено Тогда 
		   Если пЗаказ.ГрафикОплаты <> пПустаяСсылкаГрафик Тогда 
			   Возврат пЗаказ.ГрафикОплаты;
	       КонецЕсли;
	   КонецЕсли;
	   
	   Если ЭтотОбъект.Договор <> пПустаяСсылкаДоговор Тогда 
		  Если ЭтотОбъект.Договор.ГрафикОплаты <> пПустаяСсылкаГрафик Тогда 
			  Возврат ЭтотОбъект.Договор.ГрафикОплаты;
		  КонецЕсли;  
	   КонецЕсли;
	  
	   Если ЭтотОбъект.Соглашение <> пПустаяСсылкаГрафик Тогда 
		  Возврат ЭтотОбъект.Соглашение.ГрафикОплаты;
	   Иначе
		  Возврат пПустаяСсылкаГрафик;
	   КонецЕсли;
	  
		   //
		   //ТипЗнч(пЗаказ) = Тип(Справочники.ДоговорыКонтрагентов) Тогда
		   //Возврат пЗаказ.ГрафикиОплаты;
	
	   //ИначеЕсли пЗаказ <> Неопределено Тогда 
	   //    
	   //    Если ТипЗнч(пЗаказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
	   // 	   Если пЗаказ.ГрафикОплаты <> пПустаяСсылкаГрафик Тогда 
	   // 		   Возврат пЗаказ.ГрафикОплаты; 
	   // 	   КонецЕсли;
	   //    КонецЕсли;
	   //    
	   //    Если пЗаказ.Договор <> пПустаяСсылкаДоговор Тогда 
	   // 	   Если пЗаказ.Договор.ГрафикОплаты <> пПустаяСсылкаГрафик Тогда 
	   // 		   Возврат пЗаказ.Договор.ГрафикОплаты;
	   // 	   КонецЕсли;
	   //    КонецЕсли;
	   //    
	   //    Если пЗаказ.Соглашение <> пПустаяСсылкаСоглашение Тогда
	   // 	    Если пЗаказ.Соглашение.ГрафикОплаты <> пПустаяСсылкаГрафик Тогда 
	   // 		   Возврат пЗаказ.Соглашение.ГрафикОплаты;
	   // 	   КонецЕсли;
	   //    Иначе
	   // 	   Возврат пПустаяСсылкаГрафик;
	   //    КонецЕсли;
		   
	   //КонецЕсли;
КонецФункции

&НаКлиенте
&Вместо("ВыборИсточникаЗаполненияЗавершение")
Процедура Рин1_ВыборИсточникаЗаполненияЗавершение(РезультатВопроса, ПараметрыЗаполнения)
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаполнения.ПерезаполнитьЭтапы = Истина;
		//++Шерстюк Ю.Ю. 28.01.21
		ПараметрыЗаполнения.РаспределитьСумму = Истина;
        //--Шерстюк Ю.Ю.
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПараметрыЗаполнения.РаспределитьСумму = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЭтапыГрафикаОплатыФрагмент(ПараметрыЗаполнения);

КонецПроцедуры
   
//--Шерстюк Ю.Ю. 21.01.21

//&НаСервереБезКонтекста
//Функция ГИГ_РасчитатьДатуПлатежа(График,Дата,Сдвиг)
//	
//	Календарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(График,"Календарь");

//	Если ЗначениеЗаполнено(Календарь) Тогда
//		Возврат КалендарныеГрафики.ДатаПоКалендарю(График,Дата,Сдвиг);
//	Иначе
//		Возврат Дата+Сдвиг*86400;
//	Конецесли

//КонецФункции

//&НаСервере
//Процедура ГИГ_ДополнитьФормуЭтапыОплатыКлиентом()
//	
//	Форма = Этаформа;
//	
//	
//	//Добавление реквизитов формы
//	ДобРеквизиты = Новый Массив();

//	НовРеквизитДокРасчетов = Новый РеквизитФормы("ГИГ_ДокументРасчетов",Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"),"ЭтапыГрафикаОплаты","Документ расчетов");
//	ДобРеквизиты.Добавить(НовРеквизитДокРасчетов);
//	
//	НовРеквизитПроцентДляРасчета = Новый РеквизитФормы("ГИГ_ПроцентПлатежаРасчетный",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,2)),"ЭтапыГрафикаОплаты","% платежа (от реализации)");
//	ДобРеквизиты.Добавить(НовРеквизитПроцентДляРасчета);
//	
//	НовРеквизитСдвигДляРасчета = Новый РеквизитФормы("ГИГ_Сдвиг",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10)),"ЭтапыГрафикаОплаты","Срок (дн)");
//	ДобРеквизиты.Добавить(НовРеквизитСдвигДляРасчета);

//	НовРеквизитРучнаяКорректировка = Новый РеквизитФормы("ГИГ_РучнаяКорректировка",Новый ОписаниеТипов("Булево"),"ЭтапыГрафикаОплаты","Руч.");
//	ДобРеквизиты.Добавить(НовРеквизитРучнаяКорректировка);

//	//служебные реквизиты
//	НовРеквизитПроцентСлужебный = Новый РеквизитФормы("ГИГ_ПроцентСлужебный",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,2)),"ЭтапыГрафикаОплаты");
//	ДобРеквизиты.Добавить(НовРеквизитПроцентСлужебный);
//	НовРеквизитСуммаСлужебный = Новый РеквизитФормы("ГИГ_СуммаСлужебный",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)),"ЭтапыГрафикаОплаты");
//	ДобРеквизиты.Добавить(НовРеквизитСуммаСлужебный);

//	
//	
//	
//	НовРеквизитОграниченныйРежимРедактирования = Новый РеквизитФормы("ГИГ_ОграниченныйРежимРедактирования",Новый ОписаниеТипов("Булево"));
//	ДобРеквизиты.Добавить(НовРеквизитОграниченныйРежимРедактирования);

//	Форма.ИзменитьРеквизиты(ДобРеквизиты);
//	
//	//Добавление полей формы
//	
//	нЭлемент = Форма.Элементы.Добавить("ЭтапыГрафикаОплатыГИГ_ПроцентПлатежаРасчетный", Тип("ПолеФормы"), Форма.Элементы.ЭтапыГрафикаОплаты); 
//	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
//	нЭлемент.ПутьКДанным = "ЭтапыГрафикаОплаты.ГИГ_ПроцентПлатежаРасчетный";
//	нЭлемент.ТолькоПросмотр = Истина;
//	
//	нЭлемент = Форма.Элементы.Добавить("ЭтапыГрафикаОплатыГИГ_Сдвиг", Тип("ПолеФормы"), Форма.Элементы.ЭтапыГрафикаОплаты); 
//	нЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
//	нЭлемент.ПутьКДанным = "ЭтапыГрафикаОплаты.ГИГ_Сдвиг";
//	НЭлемент.УстановитьДействие("ПриИзменении","ГИГ_ЭтапыГрафикаОплатыСдвигПриИзменении");
//	Форма.Элементы.Переместить(нЭлемент,Форма.Элементы.ЭтапыГрафикаОплаты,Элементы.ЭтапыОплатыДатаПлатежа);

//	нЭлемент = Форма.Элементы.Добавить("ЭтапыГрафикаОплатыГИГ_РучнаяКорректировка", Тип("ПолеФормы"), Форма.Элементы.ЭтапыГрафикаОплаты); 
//	нЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
//	//нЭлемент.ТолькоПросмотр = Истина;
//	нЭлемент.КартинкаЗначений = БиблиотекаКартинок.Изменить;
//	нЭлемент.ПутьКДанным = "ЭтапыГрафикаОплаты.ГИГ_РучнаяКорректировка";
//	нЭлемент.Подсказка = "Этап оплаты измене вручную и не будет пересчитываться при перепроведении реализации";
//	Форма.Элементы.Переместить(нЭлемент,Форма.Элементы.ЭтапыГрафикаОплаты,Элементы.ЭтапыОплатыВариантОплаты);

//	нЭлемент = Форма.Элементы.Добавить("ЭтапыГрафикаОплатыГИГ_ДокументРасчетов", Тип("ПолеФормы"), Форма.Элементы.ЭтапыГрафикаОплаты); 
//	нЭлемент.Вид = ВидПоляФормы.ПолеНадписи; 
//	нЭлемент.ПутьКДанным = "ЭтапыГрафикаОплаты.ГИГ_ДокументРасчетов";
//	нЭлемент.ГиперссылкаЯчейки = Истина;

//	//Подключение дополнительных обработчиков событий
//	Форма.Элементы.ЭтапыГрафикаОплаты.УстановитьДействие("Выбор","ГИГ_ЭтапыГрафикаОплатыВыбор");

//	//Добавление условного оформления
//	
//	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();

//	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ЭтапыГрафикаОплатыГИГ_ДокументРасчетов.Имя);
//	
//	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ВариантОплаты");
//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;

//	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ГИГ_ДокументРасчетов");
//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
//			
//	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Остаток по заказу>'"));
//	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ГИГ_ЗаполнитьПоляДляРасчета()
//	
//	Если НЕ ЭтаФорма.ГИГ_ОграниченныйРежимРедактирования Тогда
//		Для Каждого Строка из ЭтапыГрафикаОплаты Цикл
//			Строка.ГИГ_ПроцентПлатежаРасчетный = Строка.ПроцентПлатежа;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ГИГ_ЗаполнитьСлужебныеПоляЭтапов()
//	
//	Для Каждого Строка из ЭтапыГрафикаОплаты Цикл
//		Строка.ГИГ_СуммаСлужебный = Строка.СуммаПлатежа;
//	КонецЦикла;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ГИГ_УстановитьРежимРедактирования()
//	

//	ОбщиеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("ГИГ_ДокументРасчетов",  ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка")));
//	Этаформа.ГИГ_ОграниченныйРежимРедактирования = ОбщиеСтроки.Количество() <> ЭтапыГрафикаОплаты.Количество();
//	
//	Если Этаформа.ГИГ_ОграниченныйРежимРедактирования Тогда
//		
//		Элементы.ЭтапыГрафикаОплатыГИГ_Сдвиг.Видимость = Ложь;
//		
//		Элементы.ГрафикОплаты.ТолькоПросмотр = Истина;
//		Элементы.ЗаполнитьЭтапыГрафикаОплатыТаблица.Доступность = Ложь;
//		Элементы.ЭтапыГрафикаОплаты.ИзменятьСоставСтрок = Ложь;
//		
//		Элементы.ЭтапыОплатыПроцентПлатежа.ТолькоПросмотр = Истина;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ГИГ_ЭтапыГрафикаОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
//	
//	Если Поле.Имя = "ЭтапыГрафикаОплатыГИГ_ДокументРасчетов" Тогда
//		ПоказатьЗначение(,ЭтапыГрафикаОплаты.НайтиПоИдентификатору(ВыбраннаяСтрока).ГИГ_ДокументРасчетов);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ГИГ_ЭтапыГрафикаОплатыСдвигПриИзменении(Элемент)

//	ТекДанные = Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные;
//	
//	ТекДанные.ДатаПлатежа = ГИГ_РасчитатьДатуПлатежа(ГрафикОплаты,Дата,ТекДанные.ГИГ_Сдвиг);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ГИГ_ЭтапыГрафикаОплатыСуммаПлатежаПриИзменении(Элемент)
//	
//	ТекДанные = Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные;
//	
//	Если ЭтаФорма.ГИГ_ОграниченныйРежимРедактирования Тогда
//		
//		ИндексТекущейСтроки = ЭтапыГрафикаОплаты.Индекс(ЭтапыГрафикаОплаты.НайтиПоИдентификатору(Элементы.ЭтапыГрафикаОплаты.ТекущаяСтрока));
//		
//		Если ЗначениеЗаполнено(ТекДанные.ГИГ_ДокументРасчетов) Тогда
//			ТекДанные.ГИГ_РучнаяКорректировка = Истина;
//			
//			Строки = ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("ГИГ_ДокументРасчетов",ТекДанные.ГИГ_ДокументРасчетов));
//			
//			ЭтапПересчитан = Ложь;
//			Для Каждого Строка из Строки Цикл
//				Если ЭтапыГрафикаОплаты.Индекс(Строка) > ИндексТекущейСтроки Тогда
//					Строка.СуммаПлатежа = Строка.СуммаПлатежа + (ТекДанные.ГИГ_СуммаСлужебный - ТекДанные.СуммаПлатежа); 
//					Строка.ГИГ_РучнаяКорректировка = Истина;
//					ТекДанные.ГИГ_СуммаСлужебный = ТекДанные.СуммаПлатежа;
//									
//					ЭтапПересчитан = Истина;
//					Прервать;
//	            КонецЕсли;	
//			КонецЦикла;
//			
//			Если ЭтапПересчитан Тогда
//				
//				ТекДанные.ПроцентПлатежа = ТекДанные.СуммаПлатежа/СуммаОплатыПоДокументу*100;
//				Строка.ПроцентПлатежа = Строка.СуммаПлатежа/СуммаОплатыПоДокументу*100;
//				
//				//Обработка погрешности пересчета;
//				ПроцентИтог =  ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа"); 
//				Если ПроцентИтог <> 100 Тогда
//					Строка.ПроцентПлатежа = Строка.ПроцентПлатежа+100-ПроцентИтог;  	
//				КонецЕсли;

//				
//			Иначе	
//				Сообщение = Новый СообщениеПользователю;
//				Сообщение.Текст = "Нет доступного этапа оплаты для отражения разницы";
//				Сообщение.Поле = "ЭтапыГрафикаОплаты["+Строка(ИндексТекущейСтроки)+"].СуммаПлатежа";
//				Сообщение.Сообщить();
//				ТекДанные.СуммаПлатежа = ТекДанные.ГИГ_СуммаСлужебный; //возвращаем старое значение 
//				
//			КонецЕсли;
//		
//		Иначе
//			
//			Сообщение = Новый СообщениеПользователю;
//			Сообщение.Текст = "Редактирование данного этапа не допускается";
//			Сообщение.Поле = "ЭтапыГрафикаОплаты["+Строка(ИндексТекущейСтроки)+"].СуммаПлатежа";
//			Сообщение.Сообщить();
//			ТекДанные.СуммаПлатежа = ТекДанные.ГИГ_СуммаСлужебный; //возвращаем старое значение 
//		КонецЕсли;
//					
//	КонецЕсли;
//		
//КонецПроцедуры


//&НаКлиенте
//Процедура Рин1_ГрафикОплатыПриИзмененииПосле(Элемент)
//	
//	//Расчет этапов графика оплат
//	ГИГ_ЗаполнитьПоляДляРасчета();
//	ГИГ_ЗаполнитьСлужебныеПоляЭтапов();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПриОткрытии(Отказ)
//	ГИГ_УстановитьРежимРедактирования();
//	ГИГ_ЗаполнитьСлужебныеПоляЭтапов();
//КонецПроцедуры

//&НаСервере
//Процедура Рин1_ПриСозданииНаСервереВместо(Отказ, СтандартнаяОбработка)
//	
//	УстановитьУсловноеОформление();
//	
//	//<++ Гигабайт Казаков М.В.
//	ГИГ_ДополнитьФормуЭтапыОплатыКлиентом(); 
//	//++> Гигабайт Казаков М.В.
//	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
//		Возврат;
//	КонецЕсли;
//	
//	ИспользоватьГрафикиОплаты               = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
//	ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
//		ПолучитьФункциональнуюОпцию("ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров");
//	
//	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(ВалютаРеглУчета);
//	
//	Параметры.ЗакрыватьПриВыборе            = Истина;
//	Параметры.ЗакрыватьПриЗакрытииВладельца = Ложь;
//	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры);
//	
//	УпрощенныйРежимИсходноеСостояние = Параметры.УпрощенныйРежим;
//	
//	Если ЗначениеЗаполнено(Параметры.АдресВоВременномХранилище) Тогда
//		ЭтапыГрафикаОплаты.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище));
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Параметры.АдресТЧВоВременномХранилище) Тогда
//		ТаблицаДокумента = ПолучитьИзВременногоХранилища(Параметры.АдресТЧВоВременномХранилище);
//		ТаблицаДокумента.Колонки[Параметры.ИмяПоляЗаказ].Имя = "Заказ";
//		ТабличнаяЧасть.Загрузить(ТаблицаДокумента);
//	КонецЕсли;
//	
//	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
//		Соглашение = Неопределено;
//	КонецЕсли;
//	
//	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
//		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
//	КонецЕсли;
//	
//	ИдентификаторВызывающейФормы        = Параметры.УникальныйИдентификатор;
//	
//	ГрафикСоглашенияЗаполнен = ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);
//	ГрафикИсполненияДоговора = ?(ЗначениеЗаполнено(Договор),
//								ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ГрафикИсполненияДоговора"),
//								Документы.ГрафикИсполненияДоговора.ПустаяСсылка());
//	
//	Если Не Параметры.ИспользоватьОтрицательныеСуммыПлатежа Тогда
//		ОграничитьТипЭлементовСуммыПлатежа();
//	КонецЕсли;
//	
//	Если Параметры.ПараметрыВыбораРеквизитов <> Неопределено Тогда
//		Для Каждого ЭлНастройки Из Параметры.ПараметрыВыбораРеквизитов Цикл
//			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлНастройки.Ключ, "ПараметрыВыбора", ЭлНастройки.Значение);
//		КонецЦикла;
//	КонецЕсли;
//	
//	ЗаполнитьСписокВыбораФормыОплаты();
//	УстановитьДоступностьЭлементовПоФормеОплаты();
//	ОбновитьСлужебныеРеквизиты();
//	
//	УстановитьСпециальныеЗаголовкиЭтаповДляВозврата();
//	НастроитьЭлементыФормы();
//	УстановитьТекстКнопкиЗаполнения(ЭтаФорма);
//	
//	РассчитатьИтоговыеПоказатели(ЭтаФорма);

//	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
//	
//	УстановитьСвойстваЭлементаПорядокРасчетов();
//	УстановитьПараметрыВыбораКассыСчета();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Рин1_РаспределитьСуммуПосле(Команда)
//	
//	//Расчет этапову графика оплат
//	ГИГ_ЗаполнитьПоляДляРасчета();
//	ГИГ_ЗаполнитьСлужебныеПоляЭтапов();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Рин1_ЭтапыОплатыПроцентПлатежаПриИзмененииПосле(Элемент)
//	
//		//Расчет этапову графика оплат
//	ГИГ_ЗаполнитьПоляДляРасчета();
//	ГИГ_ЗаполнитьСлужебныеПоляЭтапов();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Рин1_ЭтапыГрафикаОплатыСуммаПлатежаПриИзмененииПосле(Элемент)
//	
//		//Расчет этапов графика оплат	
//	ГИГ_ЭтапыГрафикаОплатыСуммаПлатежаПриИзменении(Элемент);
//	
//КонецПроцедуры


