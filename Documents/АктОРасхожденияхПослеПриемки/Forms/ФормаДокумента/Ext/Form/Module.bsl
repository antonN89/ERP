//{{20201012 ГлазуновДВ
&НаКлиенте
&Вместо("ОформитьДокументыНажатие")
Процедура Рин1_ОформитьДокументыНажатие(Элемент)
	// Вставить содержимое метода.
	//ПродолжитьВызов(Элемент);
	Рин1_ОформитьДокументыНажатие999(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОформитьДокументыНажатие999(Форма)
	
	СтандартнаяОбработка = Ложь;
	
	Если Форма.Модифицированность Тогда
		
		Если Форма.Объект.Проведен Тогда
			СтрокаДействие = НСтр("ru = 'перепроведение';
									|en = 'reposting'");
		Иначе
			СтрокаДействие = НСтр("ru = 'запись';
									|en = 'record'");
		КонецЕсли;
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("Рин1_ОформитьДокументыНажатиеЗавершение999", ЭтотОбъект, Новый Структура("Форма", Форма));
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Акт о расхождениях был изменен. Выполнить %1 документа?';
										|en = 'Discrepancy certificate was changed. %1 document?'"), СтрокаДействие);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Рин1_ОткрытьОформляемыеДокументы999(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОформитьДокументыНажатиеЗавершение999(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Форма.Записать();
	
	Если Не Форма.Модифицированность Тогда
		Рин1_ОткрытьОформляемыеДокументы999(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рин1_ОткрытьОформляемыеДокументы999(Форма)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АктОРасхождениях", Форма.Объект.Ссылка);
	ОткрытьФорму("Обработка.Рин1_РаботаСАктамиРасхождений.Форма.ОформляемыеДокументы", ПараметрыФормы, Форма);
	
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьПоПриемкеСервер")
Функция Рин1_ЗаполнитьПоПриемкеСервер()
	// Вставить содержимое метода.
	//Результат = ПродолжитьВызов();
	//Возврат Результат;
	
	ТекстРазделителя = НакладныеСервер.ТекстРазделителяЗапросов();
	
	ПараметрыЗаполнения = Документы.АктОРасхожденияхПослеПриемки.ПараметрыЗаполненияДокумента();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОрдернаяСхемаПриПриемке = ОрдернаяСхемаПриПриемке();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаНакладная = Объект.Товары.Выгрузить();
	ТаблицаНакладная.Колонки.Добавить("КоличествоВЗаказе", Новый ОписаниеТипов("Число"));
	ТаблицаНакладная.Колонки.Добавить("КоличествоВОрдере", Новый ОписаниеТипов("Число"));
	ТаблицаНакладная.Колонки.Добавить("Распоряжение");
	Для каждого СтрокаТовары Из ТаблицаНакладная Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.ЗаказПоставщику) Тогда
			СтрокаТовары.Распоряжение = СтрокаТовары.ЗаказПоставщику;
		Иначе
			СтрокаТовары.Распоряжение = СтрокаТовары.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	МассивЗаказов = ТаблицаНакладная.ВыгрузитьКолонку("Распоряжение");
	МассивЗаказов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗаказов);
	
	РаспоряженияДляОрдеров = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивЗаказов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РаспоряженияДляОрдеров, ТаблицаНакладная.ВыгрузитьКолонку("ДокументОснование"));
	
	ИсключаемыеНакладные = ТаблицаНакладная.ВыгрузитьКолонку("ДокументОснование");
	ИсключаемыеНакладные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсключаемыеНакладные);
	
	// Заказы
	
	ТекстОбъединитьВсе = 
	"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ссылка", "Распоряжения");
	
	Если Объект.ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг
		//++ НЕ УТ
		Или Объект.ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПриемкаТоваровНаХранение
		//-- НЕ УТ
		Тогда
		
		ТекстЗапросаЗаказ = Документы.ЗаказПоставщику.ТекстЗапросаТоварыДокумента(Отбор);
		
		Отбор = Новый Структура();
		Отбор.Вставить("ЗаказПоставщику", "Распоряжения");
		
		ТекстЗапросаРегистраЗаказы = РегистрыНакопления.ЗаказыПоставщикам.ТекстЗапросаОстатки(
			"ВтДанныеУчета",
			Отбор,
			"КОформлению <> 0");

	Иначе
		
		ТекстЗапросаЗаказ = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ТекстЗапросаТоварыДокумента(Отбор);
		
		Отбор = Новый Структура();
		Отбор.Вставить("ЗаявкаНаВозвратТоваровОтКлиента", "Распоряжения");
		
		ТекстЗапросаРегистраЗаказы = РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.ТекстЗапросаОстатки(
			"ВтДанныеУчета",
			Отбор,
			"КОформлению <> 0");
			
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаРегистраЗаказы
					+ ТекстРазделителя
					+ ТекстЗапросаЗаказ;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Распоряжения", МассивЗаказов);
	Запрос.УстановитьПараметр("Регистратор",  ИсключаемыеНакладные);
	
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаказы.Колонки.КОформлению.Имя = "КоличествоВЗаказе";
	ТаблицаЗаказы.Колонки.ЗаказПоставщику.Имя = "Заказ";
	
	// Ордера
	Запрос = Новый Запрос();
	
	ТекстЗапросаОсталосьОформить = РегистрыНакопления.ТоварыКПоступлению.ТекстЗапросаОсталосьОформитьПоОрдерам();
	
	Запрос.Текст = ТекстЗапросаОсталосьОформить;
	
	Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляОрдеров);
	Запрос.УстановитьПараметр("Регистратор",  ИсключаемыеНакладные);
	
	ТаблицаОрдера = Объект.Товары.Выгрузить(Новый Массив()).СкопироватьКолонки();
	
	ТипыРаспоряжений = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, 
		|ДокументСсылка.ВозвратТоваровОтКлиента, ДокументСсылка.ПриобретениеТоваровУслуг");
	//++ НЕ УТ
	ТипыРаспоряжений = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, 
		|ДокументСсылка.ВозвратТоваровОтКлиента, ДокументСсылка.ПриобретениеТоваровУслуг, 
		|ДокументСсылка.ПриемкаТоваровНаХранение");
	//-- НЕ УТ
	
	ТаблицаОрдера.Колонки.Добавить("Распоряжение", ТипыРаспоряжений);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ТаблицаОрдера);
	
	ТаблицаОрдера = ДополнитьТаблицуСпособомСоединения(ТаблицаОрдера, ПараметрыУказанияСерий, ОрдернаяСхемаПриПриемке);
	
	ТаблицаОрдера.Колонки.Количество.Имя = "КоличествоВОрдере";
	
	// Распределение полученных таблиц
	ТаблицаЗаказы.Колонки.Заказ.Имя = "Распоряжение";
	
	ТаблицаНакладная.Индексы.Добавить(ПараметрыЗаполнения.КлючевыеПоля);
	
	// Добавление количества заказов
	Ключ = "Распоряжение, КодСтроки";
	
	Условие = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаЗаказы, ТаблицаНакладная, "КоличествоВЗаказе", Ключ, Условие, Истина);
	
	// Добавление отдельными строками нераспределенного количества заказов
	НакладныеСервер.ДополнитьТаблицу(ТаблицаЗаказы, ТаблицаНакладная, "КоличествоВЗаказе");
	
	ТаблицаНакладная = ДополнитьТаблицуСпособомСоединения(ТаблицаНакладная, ПараметрыУказанияСерий, ОрдернаяСхемаПриПриемке);
	
	// Добавление количества ордеров.
	
	// Разделение таблиц ТаблицаНакладная и ТаблицаПолученоОстаток на несколько по полю "СпособСоединения".
	ТаблицыНакладных = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ТаблицаНакладная, "СпособСоединения");
	ТаблицыПолученных = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ТаблицаОрдера, "СпособСоединения");
	
	// Формирование структуры действий с разделенными таблицами
	ДействияСПолученнымиТаблицами = Новый Структура();
	
	Для Каждого КлючЗначение Из ТаблицыНакладных Цикл
		
		Ключ = КлючЗначение.Ключ.СпособСоединения;
		СтруктураДействий = Новый Структура("ТаблицаНакладная, ТаблицаПолученоОстаток", КлючЗначение.Таблица, ТаблицаОрдера.СкопироватьКолонки());
		ДействияСПолученнымиТаблицами.Вставить(Ключ, СтруктураДействий);
		
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ТаблицыПолученных Цикл
		
		Ключ = КлючЗначение.Ключ.СпособСоединения;
		
		Если ДействияСПолученнымиТаблицами.Свойство(Ключ) Тогда
			СтруктураДействий = ДействияСПолученнымиТаблицами[Ключ];
			СтруктураДействий.ТаблицаПолученоОстаток = КлючЗначение.Таблица;
		Иначе
			СтруктураДействий = Новый Структура("ТаблицаНакладная, ТаблицаПолученоОстаток", ТаблицаНакладная.СкопироватьКолонки(), КлючЗначение.Таблица);
			ДействияСПолученнымиТаблицами.Вставить(Ключ, СтруктураДействий);
		КонецЕсли;
		
	КонецЦикла;

	РезультирующаяТаблица      = ТаблицаНакладная.СкопироватьКолонки();
	РезультирующаяТаблицаСерии = ТаблицаНакладная.СкопироватьКолонки();
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Объект.ВариантПриемкиТоваров);
	
	Для Каждого КлючЗначение Из ДействияСПолученнымиТаблицами Цикл
		
		Действие = КлючЗначение.Ключ;
		СтруктураДействий = КлючЗначение.Значение;
		
		ТаблицаНакладнойПоДействию = СтруктураДействий.ТаблицаНакладная;
		ТаблицаОрдераПоДействию    = СтруктураДействий.ТаблицаПолученоОстаток;
		
		Если НакладнаяЯвляетсяРаспоряжением Тогда
			Ключ = "Номенклатура, Характеристика, Серия, Назначение";
		Иначе
			Ключ = "Распоряжение, Номенклатура, Характеристика, Серия, Назначение";
		КонецЕсли;
		
		Если Действие = "А0" Или Действие = "А3" Тогда
			Ключ = СтрЗаменить(Ключ, ", Серия", "")
		КонецЕсли;
		
		// Есть накладные и заказы
		Условие = "[Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
		НакладныеСервер.РаспределитьКоличество(ТаблицаОрдераПоДействию, ТаблицаНакладнойПоДействию, "КоличествоВОрдере", Ключ, Условие, Ложь);
		
		// Есть заказы, нет накладных
		Условие = "НЕ [Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
		НакладныеСервер.РаспределитьКоличество(ТаблицаОрдераПоДействию, ТаблицаНакладнойПоДействию, "КоличествоВОрдере", Ключ, Условие, Ложь);
		
		// Есть накладные, нет заказов
//Исходное		Условие = "[Количество], НЕ [КоличествоВЗаказе]";
	//{{20210120 ГлазуновДВ Задача 3817 п.2
		Условие = "[Количество], ПО [Количество]";
	//}}20210120 ГлазуновДВ
		НакладныеСервер.РаспределитьКоличество(ТаблицаОрдераПоДействию, ТаблицаНакладнойПоДействию, "КоличествоВОрдере", Ключ, Условие, Истина);
		
		// Добавление отдельными строками нераспределенного количества ордеров
		НакладныеСервер.ДополнитьТаблицу(ТаблицаОрдераПоДействию, ТаблицаНакладнойПоДействию, "КоличествоВОрдере");
		
		// Отнесение новых строк на заказы и документы основания
		ПараметрыОтбора = Новый Структура("ЗаказПоставщику", Документы.ЗаказПоставщику.ПустаяСсылка());
		СтрокиСПустымЗаказом = ТаблицаНакладнойПоДействию.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из СтрокиСПустымЗаказом Цикл
			Если ТипЗнч(Строка.Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Строка.ЗаказПоставщику = Строка.Распоряжение;
				ПараметрыОтбора.ЗаказПоставщику = Строка.Распоряжение;
				СтрокиСДокументомОснованием = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиСДокументомОснованием.Количество() > 0 Тогда
					Строка.ДокументОснование = СтрокиСДокументомОснованием[0].ДокументОснование;
				КонецЕсли;
			Иначе
				Строка.ДокументОснование = Строка.Распоряжение;
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНакладнойПоДействию, РезультирующаяТаблица);
		
	КонецЦикла;
	
	РезультирующаяТаблица.Колонки.Количество.Имя             = "КоличествоДоИзменения";
	РезультирующаяТаблица.Колонки.КоличествоВОрдере.Имя      = "Количество";
	
	РезультирующаяТаблицаСерии.Колонки.Количество.Имя        = "КоличествоДоИзменения";
	РезультирующаяТаблицаСерии.Колонки.КоличествоВОрдере.Имя = "Количество";
	
	// Удаление пустых строк
	СтрокиНеПоДокументу = РезультирующаяТаблица.НайтиСтроки(Новый Структура("КоличествоПоДокументу", 0));
	Для каждого Строка Из СтрокиНеПоДокументу Цикл
		Если Строка.Количество = 0 Тогда
			РезультирующаяТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Объект.Товары.Загрузить(РезультирующаяТаблица);
	Объект.Серии.Загрузить(РезультирующаяТаблицаСерии);
	
	// Обновление статусов указания серий.
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(Объект, ПараметрыУказанияСерий);
	Документы.АктОРасхожденияхПослеПриемки.ОбновитьЗависимыеРеквизитыПослеЗаполненияФактаПоПриемке(Объект);
	
	РасхожденияСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(Объект);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.ДокументОснование) Тогда
			СамообслуживаниеКлиентСервер.ЗаполнитьДокументОснованиеВСтроке(СтрокаТовары, ДокументыОснования, Ложь);
		КонецЕсли;
	КонецЦикла;

//{{20201022 ГлазуновДВ - Исправлено 20201218 ГлазуновДВ
	//ПараметрыОтбора = Новый Структура("ЕстьРасхождения", Истина);
	ПараметрыОтбора = Новый Структура("ЗаказПоставщику", Неопределено);
	СтрокиСРасхождениями = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Строка Из СтрокиСРасхождениями Цикл
		Если ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			Если Строка.ЗаказПоставщику = Неопределено Тогда
				ПараметрыОтбора1 = Новый Структура("Номенклатура", Строка.Номенклатура);
				СтрокиСНоменклатурой = Объект.Товары.НайтиСтроки(ПараметрыОтбора1);
				Строка.ЗаказПоставщику = Строка.ДокументОснование.Товары[0].ЗаказПоставщику;
				Для Каждого СтрокаНоменклатура Из СтрокиСНоменклатурой Цикл
					Если СтрокаНоменклатура.ЗаказПоставщику <> Неопределено И СтрокаНоменклатура.ЗаказПоставщику <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
						Строка.ЗаказПоставщику = СтрокаНоменклатура.ЗаказПоставщику;
						Строка.Цена = СтрокаНоменклатура.Цена;
						Строка.НомерГТД = СтрокаНоменклатура.НомерГТД;
						Строка.СтранаПроисхождения = СтрокаНоменклатура.СтранаПроисхождения;
						
						ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Строка.СтавкаНДС);
						Строка.Сумма = Окр(Строка.Цена * Строка.КоличествоУпаковок, 2, РежимОкругления.Окр15как20);
						Строка.СуммаРасхождения = Окр(Строка.Цена * Строка.КоличествоУпаковокРасхождения, 2, РежимОкругления.Окр15как20);
						Если Объект.ЦенаВключаетНДС Тогда
							Строка.СуммаНДС = Окр(Строка.Сумма * ТекПроцентНДС / (100 + ТекПроцентНДС), 2, РежимОкругления.Окр15как20);
							Строка.СуммаСНДС = Строка.Сумма;
							Строка.СуммаНДСРасхождения = Окр(Строка.СуммаРасхождения * ТекПроцентНДС / (100 + ТекПроцентНДС), 2, РежимОкругления.Окр15как20);
							Строка.СуммаСНДСРасхождения = Строка.СуммаРасхождения;
						Иначе
							Строка.СуммаНДС = Окр(Строка.Сумма * ТекПроцентНДС / 100, 2, РежимОкругления.Окр15как20);
							Строка.СуммаСНДС = Строка.Сумма + Строка.СуммаНДС;
							Строка.СуммаНДСРасхождения = Окр(Строка.СуммаРасхождения * ТекПроцентНДС / 100, 2, РежимОкругления.Окр15как20);
							Строка.СуммаСНДСРасхождения = Строка.СуммаРасхождения + Строка.СуммаНДСРасхождения;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
//}}20201022 ГлазуновДВ - Исправлено 20201218 ГлазуновДВ
	
	// Постобработка индивидуальная для документа
	РасхожденияКлиентСервер.РассчитатьИтоговыеПоказателиФормы(ЭтаФорма);

	Возврат Истина;
	
КонецФункции
//}}20201012 ГлазуновДВ

//20200817 ГлазуновДВ Вставили отмену проверки по дате запрета и возможность записывать без перепроведения
&НаСервере
&После("ПриЧтенииНаСервере")
Процедура Рин1_ПриЧтенииНаСервере(ТекущийОбъект)
	// Вставить содержимое метода.
	//ТекущийОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
	//ЭтотОбъект.ПриЗаписиПерепроводить = Ложь;
	
//{{20201204 ГлазуновДВ
	Если ЭтаФорма.ТолькоПросмотр = Истина Тогда
		ЭтаФорма.ТолькоПросмотр = Ложь;
		Для Каждого СтрокаЭлементы Из ЭтаФорма.Элементы Цикл
			Если ТипЗнч(СтрокаЭлементы) = Тип("ПолеФормы") Или ТипЗнч(СтрокаЭлементы) = Тип("КнопкаФормы") Тогда
				 СтрокаЭлементы.Доступность = Ложь;
			КонецЕсли;
		КонецЦикла;
		ЭтаФорма.Элементы.Статус.Доступность = Истина;
		ЭтаФорма.Элементы.ФормаЗаписать.Доступность = Истина;
		ЭтаФорма.Элементы.ГруппаТоварыЗаполнить.Доступность = Ложь;
		ЭтаФорма.Элементы.ОформитьДокументы.Доступность = Ложь;
	КонецЕсли;
//}}20201204 ГлазуновДВ

//{{20210120 ГлазуновДВ Задача 3905 добавили для Заполнения колонки "СпецНазначение" в ТЧ "Товары"
	Для Каждого ТекущаяСтрока Из ЭтаФорма.Объект.Товары Цикл
		Если ТекущаяСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.Рин1_ОжидатьДопоставкуПоАкту Тогда
			Попытка
				ТекущаяСтрока.СпецНазначение = Справочники.Назначения.ЗаменаБрака;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
//}}20210120 ГлазуновДВ

КонецПроцедуры

//{{20201204 ГлазуновДВ
&НаСервере
&После("ПередЗаписьюНаСервере")
Процедура Рин1_ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое метода.
	Если Не ЭтаФорма.Элементы.ФормаПровестиИЗакрыть.Доступность Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("СтатусПриИзменении")
Процедура Рин1_СтатусПриИзменении(Элемент)
	// Вставить содержимое метода.
	//ПродолжитьВызов(Элемент);
	СтатусВСсылке = ПолучениеСтатусВСсылке();
	Если Не ЭтаФорма.Элементы.ФормаПровестиИЗакрыть.Доступность Тогда
		Если (СтатусВСсылке = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.Отработано")
			ИЛИ СтатусВСсылке = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.Рин1_Отказано"))
			И
			(Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.НеСогласовано")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.Согласовано")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.КВыполнению")) Тогда
			Сообщить("Отсутствует право на изменение статуса. Обратитесь к пользователю с полными правами!");
			Объект.Статус = СтатусВСсылке;
			Возврат;
		ИначеЕсли СтатусВСсылке = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.КВыполнению")
			И
			(Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.НеСогласовано")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.Согласовано")) Тогда
			Сообщить("Отсутствует право на изменение статуса. Обратитесь к пользователю с полными правами!");
			Объект.Статус = СтатусВСсылке;
			Возврат;
		ИначеЕсли СтатусВСсылке = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.Согласовано")
			И
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.НеСогласовано") Тогда
			Сообщить("Отсутствует право на изменение статуса. Обратитесь к пользователю с полными правами!");
			Объект.Статус = СтатусВСсылке;
			Возврат;
		КонецЕсли;
	Иначе	
		РасхожденияКлиентСервер.УправлениеДоступностью(ЭтотОбъект);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучениеСтатусВСсылке()
	Возврат Объект.Ссылка.Статус; 
КонецФункции
//}}20201204 ГлазуновДВ

//{{20210114 ГлазуновДВ Задача 3905 добавили для вывода колонки "СпецНазначение" в ТЧ "Товары"
&НаСервере
&После("ПриСозданииНаСервере")
Процедура Рин1_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое метода.
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("СпецНазначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "Объект.Товары",, Истина));
	
	ИзменитьРеквизиты(нРеквизиты);
	
	нЭлемент = Элементы.Добавить("СпецНазначение", Тип("ПолеФормы"), Элементы.Товары);
	нЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	нЭлемент.ПутьКДанным = "Объект.Товары.СпецНазначение";
	нЭлемент.Доступность = Ложь;
	Элементы.Переместить(нЭлемент, Элементы.Товары, Элементы.Товары.ПодчиненныеЭлементы.ТоварыНазначение);
	
	Для Каждого ТекущаяСтрока Из ЭтаФорма.Объект.Товары Цикл
		Если ТекущаяСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.Рин1_ОжидатьДопоставкуПоАкту Тогда
			Попытка
				ТекущаяСтрока.СпецНазначение = Справочники.Назначения.ЗаменаБрака;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
&Вместо("ВыборДействияЗавершение")
Процедура Рин1_ВыборДействияЗавершение(Результат, ДополнительныеПараметры)
	// Вставить содержимое метода.
	//ПродолжитьВызов(Результат, ДополнительныеПараметры);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоУпаковок < ТекущиеДанные.КоличествоУпаковокПоДокументу Тогда
		ТекущиеДанные.Действие = Результат.ДействиеНедостачи;
		ТекущиеДанные.ПоВинеСтороннейКомпании = Результат.ПоВинеСтороннейКомпании;
	ИначеЕсли ТекущиеДанные.КоличествоУпаковок > ТекущиеДанные.КоличествоУпаковокПоДокументу Тогда
		ТекущиеДанные.Действие = Результат.ДействиеИзлишки;
		ТекущиеДанные.ПоВинеСтороннейКомпании = Ложь;
	КонецЕсли;
	
//{{20210114 ГлазуновДВ Задача 3905 добавили для Заполнения колонки "СпецНазначение" в ТЧ "Товары"
	Если ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.Рин1_ОжидатьДопоставкуПоАкту") Тогда
		ТекущиеДанные.СпецНазначение = ПредопределенноеЗначение("Справочник.Назначения.ЗаменаБрака");
	Иначе	
		ТекущиеДанные.СпецНазначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
	КонецЕсли;
//{{20210114 ГлазуновДВ
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Элементы.Товары.ТекущаяСтрока, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
	РасхожденияКлиентСервер.УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
&Перед("ПослеЗаписиНаСервере")
Процедура Рин1_ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое метода.
//{{20210114 ГлазуновДВ Задача 3905 добавили для Заполнения колонки "Назначение" в ТЧ "Товары" При Копировании строки
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		Если ТекущаяСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.Рин1_ОжидатьДопоставкуПоАкту Тогда
			ТекущаяСтрока.СпецНазначение = Справочники.Назначения.ЗаменаБрака;
		КонецЕсли;
	КонецЦикла;
//{{20210114 ГлазуновДВ
КонецПроцедуры
//}}20210114 ГлазуновДВ


&НаКлиенте
Процедура Рин1_ПартнерПриИзмененииПосле(Элемент)
	//++Шерстюк Ю.Ю. Задача 7625 менеджер и подразделение по договору
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
	//--Шерстюк Ю.Ю.
КонецПроцедуры

&НаКлиенте
Процедура Рин1_КонтрагентПриИзмененииПосле(Элемент)
		//++Шерстюк Ю.Ю. Задача 7625 менеджер и подразделение по договору
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
	//--Шерстюк Ю.Ю.

КонецПроцедуры

&НаКлиенте
Процедура Рин1_ДоговорПриИзмененииПосле(Элемент)
	//++Шерстюк Ю.Ю. Задача 7625 менеджер и подразделение по договору
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Менеджер");
		Объект.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Договор,"Подразделение"); 
	КонецЕсли;
	//--Шерстюк Ю.Ю.

КонецПроцедуры
