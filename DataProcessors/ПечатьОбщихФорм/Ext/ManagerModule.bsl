
&Вместо("ЗаполнитьРеквизитыПодвалаТОРГ12")
Функция Рин1_ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),
	НСтр("ru = 'г.';
	|en = 'year'", Метаданные.Языки.Русский.КодЯзыка),
	НСтр("ru = 'года';
	|en = 'year'", Метаданные.Языки.Русский.КодЯзыка));
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = СтрНайти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = СтрНайти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """");
	СтруктураПараметров.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
	СтруктураПараметров.Вставить("ДатаДокументаГод", Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
	
	//bercut240120
	Если не ЗначениеЗаполнено(ДанныеПечати.Ссылка.Руководитель) и не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ГлавныйБухгалтер) Тогда
		//поля пустые
		ДанныеЛица = Рин1_ОбщийМодуль2.ОтветственноеЛицоСПравомПодписи();
		Если не ДанныеЛица = Неопределено Тогда   //текущий пользователь с приказом
			// Главный бухгалтер
			СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ДанныеЛица.Приказ);
			
			// Отпуск товара разрешил
			СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеЛица.Приказ);
			СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеЛица.Должность);
			
			СтруктураПараметров.Вставить("ФИОКладовщика", ДанныеЛица.ФИО_СОКР);
			СтруктураПараметров.Вставить("ДолжностьКладовщика", "");
		Иначе                                    //если нет у текущего пользователя приказа то выводим основных руководителя и гл буха
			 ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ДанныеПечати.Организация,ТекущаяДата());
			
			// Главный бухгалтер
			СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ОтветственныеЛица.ГлавныйБухгалтер.Фамилия + " " + Лев(ОтветственныеЛица.ГлавныйБухгалтер.Имя,1) + "." + Лев(ОтветственныеЛица.ГлавныйБухгалтер.Отчество,1) + ".");//ОтветственныеЛица.ГлавныйБухгалтер.Наименование);
			
			// Отпуск товара разрешил
			СтруктураПараметров.Вставить("ФИОРуководителя", ОтветственныеЛица.Руководитель.Фамилия + " " + Лев(ОтветственныеЛица.Руководитель.Имя,1) + "." + Лев(ОтветственныеЛица.Руководитель.Отчество,1) + ".");//ОтветственныеЛица.Руководитель.Наименование);
			СтруктураПараметров.Вставить("ДолжностьРуководителя", ОтветственныеЛица.РуководительДолжностьПредставление);
			
			СтруктураПараметров.Вставить("ФИОКладовщика", "");
			СтруктураПараметров.Вставить("ДолжностьКладовщика", "");
		КонецЕсли;
	Иначе
		//поля заполнены
		// Главный бухгалтер
		СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ДанныеПечати.Ссылка.ГлавныйБухгалтер.Наименование);  
		
		// Отпуск товара разрешил
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Ссылка.Руководитель.Наименование);
		СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.Ссылка.Руководитель.Должность);
		
		СтруктураПараметров.Вставить("ФИОКладовщика", "");
		СтруктураПараметров.Вставить("ДолжностьКладовщика", "");
		
	КонецЕсли;
	//
	//Если не ДанныеЛица = Неопределено Тогда
	//	// Главный бухгалтер
	//	СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ДанныеЛица.Приказ);
	//	
	//	// Отпуск товара разрешил
	//	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеЛица.Приказ);
	//	СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеЛица.Должность);
	//	
	//	СтруктураПараметров.Вставить("ФИОКладовщика", ДанныеЛица.ФИО_СОКР);
	//	СтруктураПараметров.Вставить("ДолжностьКладовщика", "");
	//Иначе 
	//	// Главный бухгалтер
	//	СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	//	
	//	// Отпуск товара разрешил
	//	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	//	СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.ДолжностьРуководителя);
	//	
	//	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	//	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	//КонецЕсли;
	//
	
	// Доверенность
	СтруктураПараметров.Вставить("ДоверенностьНомер", ДанныеПечати.ДоверенностьНомер);
	СтруктураПараметров.Вставить("ДоверенностьДата", Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"));
	СтруктураПараметров.Вставить("ДоверенностьВыдана", ДанныеПечати.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьЧерезКого", ДанныеПечати.ДоверенностьЛицо);
	
	Если ИтоговыеСуммы.ИтогоКоличествоМест > 0 Тогда
		СтруктураПараметров.Вставить("ВсегоМестПрописью", ЧислоПрописью(ИтоговыеСуммы.ИтогоКоличествоМест, ,",,,,,,,,0"));
	КонецЕсли;
	
	Если ИтоговыеСуммы.ИтогоМассаНетто > 0 Тогда
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаНетто, КоэффициентПересчетаВТонны);
		СтруктураПараметров.Вставить("МассаНеттоПрописью", ЧислоПрописью(
		ИтоговыеСуммы.ИтогоМассаНетто * ПараметрыМассыПрописью.Коэффициент,
		"ДП=Истина",
		ПараметрыМассыПрописью.Формат));
	КонецЕсли;
	
	Если ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаНетто, КоэффициентПересчетаВТонны);
		СтруктураПараметров.Вставить("МассаБруттоПрописью", ЧислоПрописью(
		ИтоговыеСуммы.ИтогоМассаБрутто * ПараметрыМассыПрописью.Коэффициент,
		"ДП=Истина",
		ПараметрыМассыПрописью.Формат));
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью);
	СтруктураПараметров.Вставить("СуммаПрописью", ИтоговыеСуммы.СуммаПрописью);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Возврат ОбластьМакета;
	
КонецФункции

&Вместо("ЗаполнитьРеквизитыПодвалаСчетФактура")
Процедура Рин1_ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации)
	
	СтруктураПараметров = Новый Структура;	
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		//bercut240120
		Если не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.Руководитель) и не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.ГлавныйБухгалтер) Тогда
			//поля пустые
			ДанныеЛица = Рин1_ОбщийМодуль2.ОтветственноеЛицоСПравомПодписи();
			Если не ДанныеЛица = Неопределено Тогда   //текущий пользователь с приказом
				// Главный бухгалтер
				СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеЛица.Приказ);
				
				// Отпуск товара разрешил
				СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеЛица.Приказ);
			Иначе                                    //если нет у текущего пользователя приказа то выводим основных руководителя и гл буха
				ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ДанныеПечати.Организация,ТекущаяДата());
				
				// Главный бухгалтер
				СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ОтветственныеЛица.ГлавныйБухгалтер.Фамилия + " " + Лев(ОтветственныеЛица.ГлавныйБухгалтер.Имя,1) + "." + Лев(ОтветственныеЛица.ГлавныйБухгалтер.Отчество,1) + ".");//);
				
				// Отпуск товара разрешил
				СтруктураПараметров.Вставить("ФИОРуководителя", ОтветственныеЛица.Руководитель.Фамилия + " " + Лев(ОтветственныеЛица.Руководитель.Имя,1) + "." + Лев(ОтветственныеЛица.Руководитель.Отчество,1) + ".");// ОтветственныеЛица.Руководитель.Наименование);
			КонецЕсли;
		Иначе
			//поля заполнены
			// Главный бухгалтер
			СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.Ссылка.ДокументОснование.ГлавныйБухгалтер.Наименование);  
			
			// Отпуск товара разрешил
			СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Ссылка.ДокументОснование.Руководитель.Наименование);
			
		КонецЕсли;
		//
		//Если не ДанныеЛица = Неопределено Тогда
		//	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеЛица.Приказ);
		//	СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеЛица.Приказ);
		//Иначе 
		//	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		//	СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		//КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

&Вместо("ЗаполнитьРеквизитыПодвалаУПД")
Процедура Рин1_ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации, ДанныеКонтрагентов)
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
		
	СтруктураПараметров = Новый Структура;
	
	//bercut240120
	Если не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.Руководитель) и не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.ГлавныйБухгалтер) Тогда
		//поля пустые
		ДанныеЛица = Рин1_ОбщийМодуль2.ОтветственноеЛицоСПравомПодписи();
		Если не ДанныеЛица = Неопределено Тогда   //текущий пользователь с приказом
			// Отпуск товара разрешил
			СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеЛица.Приказ);
			СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеЛица.Должность);
		Иначе                                    //если нет у текущего пользователя приказа то выводим основных руководителя и гл буха
			 ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ДанныеПечати.Организация,ТекущаяДата());
			
			// Отпуск товара разрешил
			СтруктураПараметров.Вставить("ФИОРуководителя", ОтветственныеЛица.Руководитель.Фамилия + " " + Лев(ОтветственныеЛица.Руководитель.Имя,1) + "." + Лев(ОтветственныеЛица.Руководитель.Отчество,1) + ".");//ОтветственныеЛица.Руководитель.Наименование);
			СтруктураПараметров.Вставить("ДолжностьРуководителя", ОтветственныеЛица.РуководительДолжностьПредставление);
		КонецЕсли;
	Иначе
		//поля заполнены
		
		// Отпуск товара разрешил
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Ссылка.ДокументОснование.Руководитель.Наименование);
		СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.Ссылка.ДокументОснование.Руководитель.Должность);
		
	КонецЕсли;
	//

	//Если не ДанныеЛица = Неопределено Тогда
	//	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеЛица.Приказ);
	//	СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеЛица.Должность);
	//Иначе 
	//	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	//КонецЕсли;
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		//bercut240120
		Если не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.Руководитель) и не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.ГлавныйБухгалтер) Тогда
			//поля пустые
			ДанныеЛица = Рин1_ОбщийМодуль2.ОтветственноеЛицоСПравомПодписи();
			Если не ДанныеЛица = Неопределено Тогда   //текущий пользователь с приказом
				// Главный бухгалтер
				СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеЛица.Приказ);
				
				// Отпуск товара разрешил
				СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеЛица.Приказ);
			Иначе                                    //если нет у текущего пользователя приказа то выводим основных руководителя и гл буха
				ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ДанныеПечати.Организация,ТекущаяДата());
				
				// Главный бухгалтер
				СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ОтветственныеЛица.ГлавныйБухгалтер.Фамилия + " " + Лев(ОтветственныеЛица.ГлавныйБухгалтер.Имя,1) + "." + Лев(ОтветственныеЛица.ГлавныйБухгалтер.Отчество,1) + ".");//ОтветственныеЛица.ГлавныйБухгалтер.Наименование);
				
				// Отпуск товара разрешил
				СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ОтветственныеЛица.Руководитель.Фамилия + " " + Лев(ОтветственныеЛица.Руководитель.Имя,1) + "." + Лев(ОтветственныеЛица.Руководитель.Отчество,1) + ".");//ОтветственныеЛица.Руководитель.Наименование);
			КонецЕсли;
		Иначе
			//поля заполнены
			// Главный бухгалтер
			СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.Ссылка.ДокументОснование.ГлавныйБухгалтер.Наименование);  
			
			// Отпуск товара разрешил
			СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеПечати.Ссылка.ДокументОснование.Руководитель.Наименование);
			
		КонецЕсли;
		//
		//Если не ДанныеЛица = Неопределено Тогда
		//	СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеЛица.Приказ);
		//	СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеЛица.Приказ);
		//Иначе 
		//	СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеПечати.Руководитель);
		//	СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		//КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	//bercut240120
	Если не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.Руководитель) и не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.ГлавныйБухгалтер) Тогда
		//поля пустые
		ДанныеЛица = Рин1_ОбщийМодуль2.ОтветственноеЛицоСПравомПодписи();
		Если не ДанныеЛица = Неопределено Тогда   //текущий пользователь с приказом
			СтруктураПараметров.Вставить("ФИОКладовщика", ДанныеЛица.ФИО_СОКР);
			СтруктураПараметров.Вставить("ДолжностьКладовщика", "");
		Иначе                                    //если нет у текущего пользователя приказа то выводим основных руководителя и гл буха
			СтруктураПараметров.Вставить("ФИОКладовщика", "");
			СтруктураПараметров.Вставить("ДолжностьКладовщика", "");
		КонецЕсли;
	Иначе
		//поля заполнены
		СтруктураПараметров.Вставить("ФИОКладовщика", "");
		СтруктураПараметров.Вставить("ДолжностьКладовщика", "");		
	КонецЕсли;
	//
	//Если не ДанныеЛица = Неопределено Тогда
	//	СтруктураПараметров.Вставить("ФИОКладовщика", ДанныеЛица.ФИО_СОКР);
	//	СтруктураПараметров.Вставить("ДолжностьКладовщика", "");
	//Иначе 
	//	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	//	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	//КонецЕсли;
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),НСтр("ru = 'г.';
	|en = 'year'", Метаданные.Языки.Русский.КодЯзыка),"");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
	ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '""%1"" %2года';
	|en = '""%1"" %2'", Метаданные.Языки.Русский.КодЯзыка),
	Лев(ПолнаяДатаДокумента, ПозицияРазделителя -1),
	Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПозицияРазделителя));
	
	СтруктураПараметров.Вставить("ДатаДокумента", ПредставлениеДаты);
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3';
		|en = '%1, TIN/CRTR %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
		СведенияОбОрганизации.ОфициальноеНаименование,
		ИННПоставщика,
		ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2';
		|en = '%1, TIN %2'", Метаданные.Языки.Русский.КодЯзыка),
		СведенияОбОрганизации.ОфициальноеНаименование,
		ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ОфициальноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	ПредставлениеКонтрагента    = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
		ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
		ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь);
		Если Не ПустаяСтрока(СтрокаТаблицы.КПП) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2, ИНН/КПП %3/%4';
			|en = '%1; %2, TIN/CRTR %3/%4'", Метаданные.Языки.Русский.КодЯзыка),
			ПредставлениеКонтрагента,
			ПолноеНаименование,
			ИННПокупателя,
			СтрокаТаблицы.КПП);
		ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2, ИНН %3';
			|en = '%1; %2, TIN %3'", Метаданные.Языки.Русский.КодЯзыка),
			ПредставлениеКонтрагента,
			ПолноеНаименование,
			ИННПокупателя);
		Иначе
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2';
			|en = '%1; %2'"),
			ПредставлениеКонтрагента,
			ПолноеНаименование);
		КонецЕсли;
		
	КонецЦикла;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", Сред(ПредставлениеКонтрагента, 3));
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата)
		И (ЗначениеЗаполнено(ДанныеПечати.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьЛицо)) Тогда
		
		ТекстОснования = СокрЛП(ДанныеПечати.Основание) + "; "
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по доверенности №%1 от %2, выданной %3 %4';
		|en = 'against the letter of authority No. %1 from %2 issued by %3 to %4'", Метаданные.Языки.Русский.КодЯзыка),
		ДанныеПечати.ДоверенностьНомер,
		Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"),
		ДанныеПечати.ДоверенностьВыдана,
		ДанныеПечати.ДоверенностьЛицо);
		СтруктураПараметров.Вставить("Основание", ТекстОснования);
		
	КонецЕсли;
	//++Шерстюк Ю.Ю. 24.03.2021 Задача № 5465
	Если ТипЗнч(ДанныеПечати.Ссылка.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ДанныеПечати.Ссылка.ДокументОснование.Рин1_ПечатьОснованияКакВДиадок Тогда
			 СтруктураПараметров.Вставить("Основание",ДанныеПечати.Ссылка.ДокументОснование.ОснованиеКакВДиадок); 
		КонецЕсли;
	КонецЕсли;
	//--Шерстюк Ю.Ю.
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

//{{20201202 ГлазуновДВ
&Вместо("ЗаполнитьРеквизитыПодвалаУКД")
Процедура Рин1_ЗаполнитьРеквизитыПодвалаУКД(ОбластьПодвала, ДанныеПечати, ДанныеОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати)
	// Вставить содержимое метода.
//	ПродолжитьВызов(ОбластьПодвала, ДанныеПечати, ДанныеОснований, СведенияОбОрганизации, СведенияОКонтрагенте);
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	
//{{20201202 ГлазуновДВ
	//bercut240120
	Если не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.Руководитель) и не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.ГлавныйБухгалтер) Тогда
		//поля пустые
		ДанныеЛица = Рин1_ОбщийМодуль2.ОтветственноеЛицоСПравомПодписи();
		Если не ДанныеЛица = Неопределено Тогда   //текущий пользователь с приказом
			// Отпуск товара разрешил
			СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеЛица.Приказ);
			СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеЛица.Должность);
			СтруктураПараметров.Вставить("ФИООтветственного", ДанныеЛица.Приказ);
		Иначе                                    //если нет у текущего пользователя приказа то выводим основных руководителя и гл буха
			 ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ДанныеПечати.Организация,ТекущаяДата());
			
			// Отпуск товара разрешил
			СтруктураПараметров.Вставить("ФИОРуководителя", ОтветственныеЛица.Руководитель.Фамилия + " " + Лев(ОтветственныеЛица.Руководитель.Имя,1) + "." + Лев(ОтветственныеЛица.Руководитель.Отчество,1) + ".");//ОтветственныеЛица.Руководитель.Наименование);
			СтруктураПараметров.Вставить("ДолжностьРуководителя", ОтветственныеЛица.РуководительДолжностьПредставление);
			СтруктураПараметров.Вставить("ФИООтветственного", ОтветственныеЛица.Руководитель.Фамилия + " " + Лев(ОтветственныеЛица.Руководитель.Имя,1) + "." + Лев(ОтветственныеЛица.Руководитель.Отчество,1) + ".");
		КонецЕсли;
	Иначе
		//поля заполнены
		
		// Отпуск товара разрешил
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Ссылка.ДокументОснование.Руководитель.Наименование);
		СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.Ссылка.ДокументОснование.Руководитель.Должность);
		СтруктураПараметров.Вставить("ФИООтветственного",  ДанныеПечати.Ссылка.ДокументОснование.Руководитель.Наименование);
		
	КонецЕсли;
	//
//}}20201202 ГлазуновДВ
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
//Исходное		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
//Исходное		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	//{{20201202 ГлазуновДВ
		Если не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.Руководитель) и не ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.ГлавныйБухгалтер) Тогда
			//поля пустые
			ДанныеЛица = Рин1_ОбщийМодуль2.ОтветственноеЛицоСПравомПодписи();
			Если не ДанныеЛица = Неопределено Тогда   //текущий пользователь с приказом
				// Главный бухгалтер
				СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеЛица.Приказ);
				
				// Отпуск товара разрешил
				СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеЛица.Приказ);
				
				// Ответственный
				СтруктураПараметров.Вставить("ФИООтветственного", ДанныеЛица.Приказ);
			Иначе                                    //если нет у текущего пользователя приказа то выводим основных руководителя и гл буха
				ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ДанныеПечати.Организация,ТекущаяДата());
				
				// Главный бухгалтер
				СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ОтветственныеЛица.ГлавныйБухгалтер.Фамилия + " " + Лев(ОтветственныеЛица.ГлавныйБухгалтер.Имя,1) + "." + Лев(ОтветственныеЛица.ГлавныйБухгалтер.Отчество,1) + ".");//ОтветственныеЛица.ГлавныйБухгалтер.Наименование);
				
				// Отпуск товара разрешил
				СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ОтветственныеЛица.Руководитель.Фамилия + " " + Лев(ОтветственныеЛица.Руководитель.Имя,1) + "." + Лев(ОтветственныеЛица.Руководитель.Отчество,1) + ".");//ОтветственныеЛица.Руководитель.Наименование);
				
				// Ответственный
				СтруктураПараметров.Вставить("ФИООтветственного", ОтветственныеЛица.Руководитель.Фамилия + " " + Лев(ОтветственныеЛица.Руководитель.Имя,1) + "." + Лев(ОтветственныеЛица.Руководитель.Отчество,1) + ".");
			КонецЕсли;
		Иначе
			//поля заполнены
			// Главный бухгалтер
			СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.Ссылка.ДокументОснование.ГлавныйБухгалтер.Наименование);  
			
			// Отпуск товара разрешил
			СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеПечати.Ссылка.ДокументОснование.Руководитель.Наименование);
				
			// Ответственный
			СтруктураПараметров.Вставить("ФИООтветственного", ДанныеПечати.Ссылка.ДокументОснование.Руководитель.Наименование);
		КонецЕсли;
	//}}20201202 ГлазуновДВ
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3';
																								|en = '%1, TIN/CRTR %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ОфициальноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2';
																								|en = '%1, TIN %2'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ОфициальноеНаименование,
			ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ОфициальноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ИНН,", Ложь);
	КПППокупателя = ?(ПустаяСтрока(ДанныеПечати.КПППокупателя),СведенияОКонтрагенте.КПП, ДанныеПечати.КПППокупателя);
	Если ЗначениеЗаполнено(КПППокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3';
																								|en = '%1, TIN/CRTR %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя,
			КПППокупателя);
	ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2';
																								|en = '%1, TIN %2'", Метаданные.Языки.Русский.КодЯзыка),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя);
	Иначе
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь);
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	
	РеквизитыПередаточныхДокументов = "";

	Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
	
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ДанныеОснований.НайтиСледующий(СтруктураПоиска);
		СтрокиОснований = ДанныеОснований.Выбрать();
			
		Пока СтрокиОснований.СледующийПоЗначениюПоля("ИсходныйДокумент") Цикл
			РеквизитыПередаточныхДокументов = РеквизитыПередаточныхДокументов +
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ', Универсальный передаточный документ № %1 от %2';
						|en = ', Universal transfer document No. %1 dated %2'", Метаданные.Языки.Русский.КодЯзыка),
					НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения),
					Формат(СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=D; ДП=--"));
		КонецЦикла;
		
		Если Не ПустаяСтрока(РеквизитыПередаточныхДокументов) Тогда
			РеквизитыПередаточныхДокументов = Сред(РеквизитыПередаточныхДокументов, 3);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

////Функция ПараметрыМассыПрописью(Масса, КоэффициентПересчетаВТонны) 
////	//++Шерстюк Ю.Ю. 02.07.2021
////	//Обработка полностью перенесена из 2.5.6.195 для поддержания работоспособности на текущем релизе 2.4.12.109 добавлено
////	МассаТонны = Масса * КоэффициентПересчетаВТонны;
////	Если МассаТонны >= 1 Тогда
////		Коэффициент = 1;
////		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
////	ИначеЕсли МассаТонны * 1000 >= 1 Тогда
////		Коэффициент = 1000;
////		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
////	Иначе
////		Коэффициент = 1000000;
////		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
////	КонецЕсли;
////	
////	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент*КоэффициентПересчетаВТонны);
////	//--Шерстюк Ю.Ю.
////КонецФункции

////&Вместо("ЗаполнитьРеквизитыСтрокиТовара")
////Процедура Рин1_ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, ВыводитьКодНоменклатуры, ВыводитьКодТНВД, ВыводитьСерии, СчетФактураНаАванс)
////		ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
////	
////	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
////	
////	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
////	
////	СтруктураПараметров = Новый Структура;
////	СтруктураПараметров.Вставить("КоличествоМест", 0);
////	СтруктураПараметров.Вставить("КоличествоВОдномМесте", 0);
////	СтруктураПараметров.Вставить("НоменклатураКод", "");
////	СтруктураПараметров.Вставить("КодТНВЭД", "--");
////	
////	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
////	ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
////	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
////	
////	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
////	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;	
////	//++Шерстюк Ю.Ю. Обработка из 2.5.6.195 не срабатывает на 2.4.12.195 убираю, после обновления удалить
////	//ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
////	//++Шерстюк Ю.Ю.
////	Если ВыводитьКодТНВД <> Неопределено Тогда
////		ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(НЕ ВыводитьКодТНВД.ВыводитьВКолонке И ВыводитьКодТНВД.ВыводитьВСтроке, СтрокаТовары.КодТНВЭД, "");
////		Если НЕ ВыводитьКодТНВД.ВыводитьВКолонке Тогда
////			СтруктураПараметров.КодТНВЭД = "--";
////		КонецЕсли;
////	КонецЕсли;
////	СерияНаименование = Неопределено;
////	Если ВыводитьСерии Тогда
////		СерияНаименование = СтрокаТовары.СерияНаименование;
////	КонецЕсли;	
////	ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
////		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
////			Строка(СтрокаТовары.НоменклатураНаименование),
////			СтрокаТовары.ХарактеристикаНаименование,
////			,
////			СерияНаименование,
////			ДополнительныеПараметрыПолученияНаименованияДляПечати)
////		+ ПрефиксИПостфикс.Постфикс;
////	
////	СтруктураПараметров.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
////		
////	Если Не ВыводитьКодНоменклатуры Тогда
////		СтруктураПараметров.НоменклатураКод = "";
////	КонецЕсли;
////	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
////	
////	Если ИспользоватьНаборы
////		И СтрокаТовары.ЭтоКомплектующие
////		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
////		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
////		   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
////		// Область должна остаться незаполненной
////		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
////	ИначеЕсли ИспользоватьНаборы
////		И СтрокаТовары.ЭтоНабор
////		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
////		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих
////			ИЛИ СчетФактураНаАванс) Тогда
////		// Область должна остаться незаполненной
////		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
////    КонецЕсли;
////КонецПроцедуры

////&Вместо("ЗаполнитьТабличныйДокументТОРГ4")
////Процедура Рин1_ЗаполнитьТабличныйДокументТОРГ4(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
////		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
////	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
////					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
////	
////	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
////	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	
////	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ4_ru");
////	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
////	
////	ПервыйДокумент = Истина;
////	
////	Пока ДанныеПечати.Следующий() Цикл
////		
////		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
////		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
////			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = 'В документе %1 отсутствуют товары. Печать акта о приемке товара не требуется';
////					|en = 'Goods are missing in document %1. Printing of the certificate of goods receiving is not required'"),
////				ДанныеПечати.Ссылка);
////				
////			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////				Текст,
////				ДанныеПечати.Ссылка);
////			Продолжить;
////		КонецЕсли;
////		
////		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
////		
////		ВыборкаПоСкладам = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////		
////		Пока ВыборкаПоСкладам.Следующий() Цикл
////			
////			Если Не ПервыйДокумент Тогда
////				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////			КонецЕсли;
////			
////			ПервыйДокумент = Ложь;
////			
////			ЗаполнитьРеквизитыШапкиТОРГ4(ДанныеПечати, ВыборкаПоСкладам, Макет, ТабличныйДокумент);
////			
////			НомерСтраницы = 1;
////			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
////			
////			// Создаем массив для проверки вывода
////			МассивВыводимыхОбластей = Новый Массив;
////			
////			// Выводим многострочную часть докмента
////			ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
////			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
////			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
////			ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
////			ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
////			
////			ЗаполнитьРеквизитыПодвалаТОРГ4(ОбластьПодвала, ДанныеПечати);
////			
////			СтрокаТовары = ВыборкаПоСкладам.Выбрать();
////			КоличествоСтрок = СтрокаТовары.Количество();
////			НомерСтроки = 0;
////			Пока СтрокаТовары.Следующий() Цикл
////				
////				НомерСтроки = НомерСтроки + 1;
////				
////				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
////				
////				ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
////				ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;
////				//++Шерстюк Ю.Ю. Обработка из 2.5.6.195 не срабатывает на 2.4.12.195 убираю, после обновления удалить
////				//ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
////				//--Шерстюк Ю.Ю.
////				СерияНаименование = Неопределено;
////				Если ВыводитьСерии Тогда
////					СерияНаименование = СтрокаТовары.СерияНаименование;
////				КонецЕсли;
////				
////				ТоварНаименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
////					СтрокаТовары.ТоварНаименование,
////					СтрокаТовары.Характеристика,
////					СерияНаименование,
////					,
////					ДополнительныеПараметрыПолученияНаименованияДляПечати);
////				
////				СтруктураПараметров = Новый Структура;
////				СтруктураПараметров.Вставить("ТоварНаименование", ТоварНаименование);
////					
////				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
////				
////				Если НомерСтроки = 1 Тогда // первая строка
////					
////					СтруктураПараметров = Новый Структура;
////					СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
////					ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
////					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
////					
////				Иначе
////					
////					МассивВыводимыхОбластей.Очистить();
////					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
////					МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
////					
////					Если НомерСтроки = КоличествоСтрок Тогда
////						
////						МассивВыводимыхОбластей.Добавить(ОбластьВсего);
////						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
////						
////					КонецЕсли;
////					
////					Если НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
////						
////						ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
////						ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
////						
////						// Очистим итоги по странице.
////						ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
////						
////						НомерСтраницы = НомерСтраницы + 1;
////						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////						СтруктураПараметров = Новый Структура;
////						СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
////						ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
////						ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
////						
////					КонецЕсли;
////					
////				КонецЕсли;
////				
////				ТабличныйДокумент.Вывести(ОбластьМакета);
////				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
////				
////			КонецЦикла;
////			
////			// Выводим итоги по последней странице
////			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
////			ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
////			
////			ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
////			
////			// Выводим итоги по документу в целом
////			ОбластьМакета = Макет.ПолучитьОбласть("Всего");
////			ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
////			
////			ТабличныйДокумент.Вывести(ОбластьМакета);
////			
////			// Выводим подвал документа
////			ТабличныйДокумент.Вывести(ОбластьПодвала);
////			
////		КонецЦикла;
////		
////		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
////		
////	КонецЦикла;

////КонецПроцедуры

////&Вместо("ЗаполнитьТабличныйДокументМ4")
////Процедура Рин1_ЗаполнитьТабличныйДокументМ4(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
////		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
////	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
////					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
////	
////	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
////	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	
////	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_М4_ru");
////	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
////	
////	ПервыйДокумент = Истина;
////	
////	Пока ДанныеПечати.Следующий() Цикл
////		
////		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
////		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
////			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = 'В документе %1 отсутствуют товары. Печать приходного ордера не требуется';
////					|en = 'Goods are missing in document %1. Printing of the goods receipt note is not required'"),
////				ДанныеПечати.Ссылка);
////				
////			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////				Текст,
////				ДанныеПечати.Ссылка);
////			Продолжить;
////		КонецЕсли;
////		
////		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
////		
////		ВыборкаПоСкладам = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////		
////		Пока ВыборкаПоСкладам.Следующий() Цикл
////			
////			Если Не ПервыйДокумент Тогда
////				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////			КонецЕсли;
////			
////			ПервыйДокумент = Ложь;
////			
////			ЗаполнитьРеквизитыШапкиМ4(ДанныеПечати, ВыборкаПоСкладам, Макет, ТабличныйДокумент);
////			
////			// Выводим заголовок таблицы
////			ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
////			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
////			
////			НомерСтраницы = 1;
////			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
////			
////			// Создаем массив для проверки вывода
////			МассивВыводимыхОбластей = Новый Массив;
////			
////			// Выводим многострочную часть докмента
////			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
////			ОбластьПодвалСтрок      = Макет.ПолучитьОбласть("ПодвалСтрок");
////			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("Итого");
////			ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
////			
////			ЗаполнитьРеквизитыПодвалаМ4(ОбластьПодвала, ДанныеПечати);
////			
////			СтрокаТовары = ВыборкаПоСкладам.Выбрать();
////			КоличествоСтрок = СтрокаТовары.Количество();
////			НомерСтроки = 0;
////			Пока СтрокаТовары.Следующий() Цикл
////				
////				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
////				
////				НомерСтроки = НомерСтроки + 1;
////				
////				ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
////				ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;	
////				//++Шерстюк Ю.Ю. Обработка из 2.5.6.195 не срабатывает на 2.4.12.195 убираю, после обновления удалить
////				//ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
////				//--Шерстюк Ю.Ю.
////				СерияНаименование = Неопределено;
////				Если ВыводитьСерии Тогда
////					СерияНаименование = СтрокаТовары.СерияНаименование;
////				КонецЕсли;
////				
////				ТоварНаименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
////					СтрокаТовары.ТоварНаименование,
////					СтрокаТовары.Характеристика,
////					СерияНаименование,
////					,
////					ДополнительныеПараметрыПолученияНаименованияДляПечати);
////				
////				СтруктураПараметров = Новый Структура;
////				СтруктураПараметров.Вставить("ТоварНаименование", ТоварНаименование);
////				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
////				
////				МассивВыводимыхОбластей.Очистить();
////				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
////				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
////				
////				Если НомерСтроки = КоличествоСтрок Тогда
////					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
////				КонецЕсли;
////				
////				Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
////					НомерСтраницы = НомерСтраницы + 1;
////					ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
////					ТабличныйДокумент.Вывести(ПодвалСтрок);
////					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////					СтруктураПараметров = Новый Структура;
////					СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
////					ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
////					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
////				КонецЕсли;
////				
////				ТабличныйДокумент.Вывести(ОбластьМакета);
////				
////				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
////				
////			КонецЦикла;
////			
////			// Выводим итоги по документу
////			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
////			
////			СтруктураПараметров = Новый Структура;
////			СтруктураПараметров.Вставить("ИтогоКоличествоПринято", ИтоговыеСуммы.ИтогоКоличество);
////			СтруктураПараметров.Вставить("ИтогоСуммаБезНДС", ИтоговыеСуммы.ИтогоСуммаБезНДС);
////			СтруктураПараметров.Вставить("ИтогоСуммаНДС", ИтоговыеСуммы.ИтогоСуммаНДС);
////			СтруктураПараметров.Вставить("ИтогоСуммаСНДС", ИтоговыеСуммы.ИтогоСуммаСНДС);
////			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
////			ТабличныйДокумент.Вывести(ОбластьМакета);
////			
////			// Выводим подвал документа
////			ТабличныйДокумент.Вывести(ОбластьПодвала);
////			
////		КонецЦикла; // Конец цикла обхода выборки "ВыборкаПоСкладам"
////		
////		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
////		
////	КонецЦикла; // Конец цикла обхода выборки "ДанныеПечати"

////КонецПроцедуры

////&Вместо("ЗаполнитьТабличныйДокументУПД")
////Процедура Рин1_ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
////		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
////	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
////					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
////	
////	МакетУПД = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_ru");
////	МакетУПД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_625_ru");
////	МакетУПД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент981_ru");
////	МакетУПД_534 = УправлениеПечатью.МакетПечатнойФормы(
////						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент534_ru");
////	
////	ОпцииПечати = Новый Структура;
////	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
////	
////	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
////	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
////		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	Иначе
////		ВыборкаКонтрагентов = Неопределено;
////	КонецЕсли;
////	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
////		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	Иначе
////		ВыборкаОснований = Неопределено;
////	КонецЕсли;
////	
////	ЕстьПостановление534 = Ложь;
////	ЕстьПостановление981 = ЛОЖЬ;
////	ЕстьПостановление1137_625 = ЛОЖЬ;
////	ЕстьПостановление1137 = ЛОЖЬ;
////	
////	ПервыйДокумент = Истина;
////	Пока ДанныеПечати.Следующий() Цикл
////		
////		Если ДанныеПечати.СтатусУПД = 2
////			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
////			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
////			И НЕ ДанныеПечати.ЭтоПередачаНаКомиссию
////			И ДанныеПечати.ТребуетсяНаличиеСФ Тогда
////			
////			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = 'Для документа %1 не введен %2';
////					|en = '%2 is not entered for document %1'"),
////				ДанныеПечати.Ссылка,
////				ДанныеПечати.ПредставлениеДокумента);
////			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////				Текст,
////				ДанныеПечати.Ссылка,
////				,
////				"ТекстСчетФактура");
////				
////			Продолжить;
////		КонецЕсли;
////		
////		Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
////			Макет = МакетУПД_534;
////			ЕстьПостановление534 = Истина;
////		ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
////			Макет = МакетУПД_981;
////			ЕстьПостановление981 = Истина;
////		ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
////			Макет = МакетУПД_625;
////			ЕстьПостановление1137_625 = Истина;
////		Иначе
////			Макет = МакетУПД;
////			ЕстьПостановление1137 = Истина;
////		КонецЕсли;
////		Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
////		
////		Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
////			
////			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
////				|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.';
////				|en = 'Cannot print universal transfer documents
////				|generated both before and after the commencement date of RF Government decree No.625 dated 05/25/2017 at the same time'");
////			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////				Текст,
////				ДанныеПечати.Ссылка);
////			
////			ТабличныйДокумент.Очистить();
////			Прервать;
////			
////		КонецЕсли;
////		
////		Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
////			
////			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
////				|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.';
////				|en = 'Cannot print universal transfer documents
////				|generated both before and after the commencement date of RF Government decree No.981 dated 08/19/2017 at the same time'");
////			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////				Текст,
////				ДанныеПечати.Ссылка);
////			
////			ТабличныйДокумент.Очистить();
////			Прервать;
////			
////		ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
////				И ЕстьПостановление534 Тогда
////			
////			ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
////			|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.';
////			|en = 'Недоступна одновременная печать универсальных передаточных документов,
////			|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.'");
////			
////			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);
////			
////			ТабличныйДокумент.Очистить();
////			Прервать;
////			
////		КонецЕсли;
////		
////		
////		Если Не ПервыйДокумент Тогда
////			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////		КонецЕсли;
////		ПервыйДокумент = Ложь;
////		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
////		
////		Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
////			И ДанныеПечати.ПеревыставленныйСчетФактура Тогда
////			ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////		КонецЕсли;
////		
////			
////		// Выводим общие реквизиты шапки
////		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
////		ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов, Макет, ТабличныйДокумент, ВыборкаПоставщиков, ОпцииПечати);
////		
////		// Выводим заголовок таблицы
////		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
////		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
////		
////		НомерСтраницы = 1;
////		
////		// Инициализация итогов в документе
////		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
////		
////		// Создаем массив для проверки вывода
////		МассивВыводимыхОбластей = Новый Массив;
////		
////		// Выводим многострочную часть документа
////		ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
////		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
////		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
////		
////		ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
////		
////		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
////			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
////		Иначе
////			ВыводитьКодНоменклатуры = Истина;
////		КонецЕсли;
////		
////		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
////		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
////			
////		ИспользоватьНаборы = Ложь;
////		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
////			ИспользоватьНаборы = Истина;
////			ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
////			ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
////		КонецЕсли;
////		
////		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);
////		
////		ОперацияОблагаетсяНДСУПокупателя = Ложь;
////		Если ДанныеПечати.СтатусУПД = 1
////		И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
////			ОперацияОблагаетсяНДСУПокупателя = Истина;
////		КонецЕсли;
////		
////		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
////		КоличествоСтрок = СтрокаТовары.Количество();
////		ТолькоСтавкаБезНДС = Истина;
////		НомерСтроки = 0;
////		Пока СтрокаТовары.Следующий() Цикл
////			
////			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
////				ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
////				Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
////					И СтрокаТовары.Покупатель <> НЕОПРЕДЕЛЕНО Тогда
////						Продолжить;
////				КонецЕсли;
////			КонецЕсли;
////			
////			Если СтрокаТовары.Количество = 0 
////				И СтрокаТовары.СуммаСНДС = 0 Тогда
////				Продолжить;
////			КонецЕсли;
////			
////			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
////				ОбластьСтрока = ОбластьСтрокаНабор;
////			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
////				ОбластьСтрока = ОбластьСтрокаКомплектующие;
////			Иначе
////				ОбластьСтрока = ОбластьСтрокаСтандарт;
////			КонецЕсли;
////			
////			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
////				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД, ВыводитьСерии);
////			Иначе
////				НомерСтроки = НомерСтроки + 1;
////				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД, ВыводитьСерии);
////				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
////			КонецЕсли;
////			
////			СтруктураПараметров = Новый Структура;
////			Если ОперацияОблагаетсяНДСУПокупателя Тогда
////				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
////																|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
////				СтруктураПараметров.Вставить("СуммаСНДС", "--");
////				ТолькоСтавкаБезНДС = Ложь;
////			//++Шерстюк Ю.Ю. 02.07.2021 взято из 2.5.6.196 на 2.4.12.195 не работает
////			//ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
////			ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
////			//--Шерстюк Ю.Ю.
////				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
////																|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////				СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
////																|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////			//++Шерстюк Ю.Ю. 02.07.2021 взято из 2.5.6.196 на 2.4.12.195 не работает
////			//ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
////			ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
////			//--Шерстюк Ю.Ю.
////				СтруктураПараметров.Вставить("СуммаНДС", 0);
////				ТолькоСтавкаБезНДС = Ложь;
////			Иначе
////				ТолькоСтавкаБезНДС = Ложь;
////			КонецЕсли;
////			Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
////				СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
////															|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
////			КонецЕсли;
////			ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
////			
////			МассивВыводимыхОбластей.Очистить();
////			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
////			
////			Если НомерСтроки = КоличествоСтрок Тогда
////				МассивВыводимыхОбластей.Добавить(ОбластьИтого);
////				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
////			КонецЕсли;
////			
////			Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
////				
////				НомерСтраницы = НомерСтраницы + 1;
////				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////				
////				ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
////				Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
////					ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
////				Иначе
////					ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
////				КонецЕсли;
////				ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
////				ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
////				
////				ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
////				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
////				
////			КонецЕсли;
////			
////			ТабличныйДокумент.Вывести(ОбластьСтрока);
////			
////			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
////				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
////			КонецЕсли;
////		КонецЦикла;
////		// Выводим итоги по документу
////		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
////		
////		Если ТолькоСтавкаБезНДС Тогда
////			ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
////												|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
////		КонецЕсли;
////		
////		Если ОперацияОблагаетсяНДСУПокупателя Тогда
////			ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
////			ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
////		КонецЕсли;
////		
////		ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
////		ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
////		ТабличныйДокумент.Вывести(ОбластьИтого);
////		
////		КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = 'Документ составлен на %1 %2';
////				|en = 'Document is created on %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
////			НомерСтраницы,
////			ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
////				НСтр("ru = 'листе';
////					|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
////				НСтр("ru = 'листах';
////					|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
////				НСтр("ru = 'листах';
////					|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
////		СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
////		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
////		ТабличныйДокумент.Вывести(ОбластьПодвал);
////		
////		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
////			ДанныеПечати.Ссылка);
////			
////	КонецЦикла;

////КонецПроцедуры

////&Вместо("ЗаполнитьТабличныйДокументУКД")
////Процедура Рин1_ЗаполнитьТабличныйДокументУКД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
////		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
////	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
////						И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
////		
////	МакетУКД     = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент_ru");
////	МакетУКД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент_625_ru");
////	МакетУКД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент981_ru");
////	МакетУКД_534 = УправлениеПечатью.МакетПечатнойФормы(
////						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент534_ru");
////	
////	ЕстьПостановление1137_625 = ЛОЖЬ;
////	ЕстьПостановление1137 = ЛОЖЬ;
////	ЕстьПостановление981 = ЛОЖЬ;
////	ЕстьПостановление534 = Ложь;
////	
////	ОпцииПечати = Новый Структура;
////	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
////	
////	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
////	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	ВыборкаОснований    = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	
////	ПервыйДокумент = Истина;
////	Пока ДанныеПечати.Следующий() Цикл
////		
////		Если ДанныеПечати.ПечатьНеТребуется Тогда
////			
////			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = 'Для документа %1 универсальный корректировочный документ не применяется.';
////					|en = 'Universal adjustment document is not used for document %1.'"),
////					ДанныеПечати.Ссылка);
////			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////				Текст,
////				ДанныеПечати.Ссылка);
////				
////		ИначеЕсли НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
////			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
////			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
////			И (ДанныеПечати.СтатусУПД = 2 ИЛИ ДанныеПечати.Номер = Неопределено) Тогда
////			
////			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = 'Для документа %1 не введен %2';
////					|en = '%2 is not entered for document %1'"),
////				ДанныеПечати.Ссылка,
////				НСтр("ru = 'счет-фактура';
////					|en = 'tax invoice'"));
////			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////				Текст,
////				ДанныеПечати.Ссылка,
////				,
////				"ТекстСчетФактура");
////	
////		Иначе
////			
////			Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
////				Макет = МакетУКД_534;
////				ЕстьПостановление534 = Истина;
////			ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
////				Макет = МакетУКД_981;
////				ЕстьПостановление981 = Истина;
////			ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
////				Макет = МакетУКД_625;
////				ЕстьПостановление1137_625 = Истина;
////			Иначе
////				Макет = МакетУКД;
////				ЕстьПостановление1137 = Истина;
////			КонецЕсли;
////			Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
////			
////			Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
////				
////				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
////					|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.)';
////					|en = 'Cannot print universal adjustment documents
////					|generated both before and after the commencement date of RF Government decree No.625 dated 05/25/2017 at the same time'");
////				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////					Текст,
////					ДанныеПечати.Ссылка);
////				
////				ТабличныйДокумент.Очистить();
////				Прервать;
////				
////			КонецЕсли;
////			
////			Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
////				
////				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
////					|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.)';
////					|en = 'Cannot print universal adjustment documents
////					|generated both before and after the commencement date of RF Government decree No.981 dated 08/19/2017 at the same time'");
////				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////					Текст,
////					ДанныеПечати.Ссылка);
////				
////				ТабличныйДокумент.Очистить();
////				Прервать;
////				
////			ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
////					И ЕстьПостановление534 Тогда
////				
////				ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
////				|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.';
////				|en = 'Недоступна одновременная печать универсальных корректировочных документов,
////				|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.'");
////				
////				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);
////				
////				ТабличныйДокумент.Очистить();
////				Прервать;
////				
////			КонецЕсли;
////			
////			Если Не ПервыйДокумент Тогда
////				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////			КонецЕсли;
////			
////			ПервыйДокумент = Ложь;
////			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
////			
////			// Выводим общие реквизиты шапки
////			СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
////			СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
////			ЗаполнитьРеквизитыШапкиУКД(ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, Макет, ТабличныйДокумент, ОпцииПечати);
////			
////			// Выводим заголовок таблицы
////			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
////			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
////			
////			НомерСтраницы = 1;
////			
////			// Инициализация итогов в документе
////			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
////			
////			// Создаем массив для проверки вывода
////			МассивВыводимыхОбластей = Новый Массив;
////			
////			// Выводим многострочную часть документа
////			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
////			ОбластьИтого  = Макет.ПолучитьОбласть("Итого");
////			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
////			
////			ЗаполнитьРеквизитыПодвалаУКД(ОбластьПодвал, ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати);
////			
////			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
////			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
////			
////			ИспользоватьНаборы = Ложь;
////			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
////				ИспользоватьНаборы = Истина;
////			КонецЕсли;
////			
////			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);
////			
////			ОперацияОблагаетсяНДСУПокупателя = Ложь;
////			Если ДанныеПечати.СтатусУПД = 1
////			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
////				ОперацияОблагаетсяНДСУПокупателя = Истина;
////			КонецЕсли;
////		
////			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
////			КоличествоСтрок = СтрокаТовары.Количество();
////			ТолькоСтавкаБезНДС = Истина;
////			НомерСтроки = 0;
////			ПрефиксНабора = "";
////			ТекущаяНоменклатураНабора = Справочники.Номенклатура.ПустаяСсылка();
////			ТекущаяХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
////			Пока СтрокаТовары.Следующий() Цикл
////				
////				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
////					КоличествоСтрок = КоличествоСтрок - 1;
////					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
////												   ОбластьСтрока, 
////												   Неопределено,, 
////												   ВыводитьКодыТНВЭД,
////												   ВыводитьСерии);
////												   
////					Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
////						ПрефиксНабора = ОбластьСтрока.Параметры.ПредставлениеНоменклатуры;
////						ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
////						ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
////					КонецЕсли;
////				Иначе
////					НомерСтроки = НомерСтроки + 1;
////					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
////												   ОбластьСтрока, 
////												   НомерСтроки,, 
////												   ВыводитьКодыТНВЭД,
////												   ВыводитьСерии);
////					ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
////					
////					Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
////						И ПрефиксНабора <> ""
////						И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
////						И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
////						ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПрефиксНабора
////																			+ Символы.ПС
////																			+ ОбластьСтрока.Параметры.ПредставлениеНоменклатуры;
////					КонецЕсли;
////				КонецЕсли;
////				
////				СтруктураПараметров = Новый Структура;
////				Если ОперацияОблагаетсяНДСУПокупателя Тогда
////					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
////																	|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
////					СтруктураПараметров.Вставить("СуммаСНДС", "--");
////					СтруктураПараметров.Вставить("СуммаСНДСДо", "--");
////					СтруктураПараметров.Вставить("РазницаСНДСУвеличение", "--");
////					СтруктураПараметров.Вставить("РазницаСНДСУменьшение", "--");
////					ТолькоСтавкаБезНДС = Ложь;
////				//++Шерстюк Ю.Ю. 02.07.2021 взято из 2.5.6.196 на 2.4.12.195 не работает
////				//ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
////				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
////				//--Шерстюк Ю.Ю.
////					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
////																	|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////					СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
////																	|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////					СтруктураПараметров.Вставить("СуммаНДСДо", НСтр("ru = 'без НДС';
////																	|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////				//++Шерстюк Ю.Ю. 02.07.2021 взято из 2.5.6.196 на 2.4.12.195 не работает
////				//ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
////				 ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
////				//--Шерстюк Ю.Ю.
////					СтруктураПараметров.Вставить("СуммаНДС", 0);
////					СтруктураПараметров.Вставить("СуммаНДСДо", 0);
////					ТолькоСтавкаБезНДС = Ложь;
////				Иначе
////					ТолькоСтавкаБезНДС = Ложь;
////				КонецЕсли;
////				СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
////															|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
////				
////				МассивВыводимыхОбластей.Очистить();
////				
////				Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
////			
////					ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
////					МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
////					
////					Если НомерСтроки = КоличествоСтрок Тогда
////						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
////						МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
////					КонецЕсли;
////					
////					Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
////						
////						НомерСтраницы = НомерСтраницы + 1;
////						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////						
////						ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
////						Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
////							ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
////						Иначе
////							ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
////						КонецЕсли;
////						ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
////						ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
////							
////						ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
////						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
////						
////					КонецЕсли;
////				
////					ТабличныйДокумент.Вывести(ОбластьСтрока);
////				КонецЕсли;
////				
////				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
////					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
////				КонецЕсли;
////				
////			КонецЦикла;
////			
////			// Выводим итоги по документу
////			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
////			
////			Если ТолькоСтавкаБезНДС Тогда
////				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
////													|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
////				ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", НСтр("ru = 'без НДС';
////																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////				ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", НСтр("ru = 'без НДС';
////																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////			КонецЕсли;
////			
////			Если ОперацияОблагаетсяНДСУПокупателя Тогда
////				ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличение", "--");
////				ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшение", "--");
////				ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличениеНаСтранице", "--");
////				ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшениеНаСтранице", "--");
////			КонецЕсли;
////		
////			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
////			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
////			ТабличныйДокумент.Вывести(ОбластьИтого);
////			
////			КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = 'Документ составлен на %1 %2';
////					|en = 'Document is created on %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
////				НомерСтраницы,
////				ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
////					НСтр("ru = 'листе';
////						|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
////					НСтр("ru = 'листах';
////						|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
////					НСтр("ru = 'листах';
////						|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
////			СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
////			ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
////			ТабличныйДокумент.Вывести(ОбластьПодвал);
////			
////			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
////				ДанныеПечати.Ссылка);
////			
////		КонецЕсли;
////		
////	КонецЦикла;

////КонецПроцедуры

////&Вместо("ЗаполнитьТабличныйДокументСчетФактура")
////Процедура Рин1_ЗаполнитьТабличныйДокументСчетФактура(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ОпцииПечатиСчетаФактуры)
////		Перем ВыборкаОснований, ВыборкаКонтрагентов, ВыборкаПоставщиков;
////	
////	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
////	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
////					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
////					
////	Макет451      = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура451_ru");
////	Макет1137     = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_ru");
////	Макет1137_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_625_ru");
////	Макет981      = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура981_ru");
////	Макет534      = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура534_ru");
////	МакетКорр     = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_ru");
////	МакетКорр_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_625_ru");
////	МакетКорр_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный981_ru");
////	МакетКорр_534 = УправлениеПечатью.МакетПечатнойФормы(
////						"Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный534_ru");
////	
////	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
////	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
////		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	КонецЕсли;
////	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
////		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////	КонецЕсли;
////	
////	ЕстьПостановление914 = ЛОЖЬ;
////	ЕстьПостановление534 = Ложь;
////	ЕстьПостановление981 = ЛОЖЬ;
////	ЕстьПостановление1137_625 = ЛОЖЬ;
////	ЕстьПостановление1137 = ЛОЖЬ;
////	
////	ПервыйДокумент = Истина;
////	Пока ДанныеПечати.Следующий() Цикл
////		
////		Если ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
////			И ОпцииПечатиСчетаФактуры.ПечатьВВалюте
////			И ДанныеПечати.ВалютаСчетаФактуры = ВалютаРегламентированногоУчета Тогда
////			
////			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = 'Для %1 указана валюта: рубли. Не требуется печатать счет-фактуру в иностранной валюте.';
////					|en = 'Currency is specified for %1: rubles. No need to print a tax invoice in a foreign currency.'"),
////				ДанныеПечати.Ссылка);
////			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////				Текст,
////				ДанныеПечати.Ссылка);
////			
////		ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
////			И НЕ ОпцииПечатиСчетаФактуры.ПечатьВВалюте
////			И ДанныеПечати.ВалютаСчетаФактуры <> ВалютаРегламентированногоУчета  Тогда
////			
////			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = 'Для %1 указана иностранная валюта. Не требуется печатать счет-фактуру в рублях.';
////					|en = 'Foreign currency is specified for %1. No need to print the tax invoice in rubles.'"),
////				ДанныеПечати.Ссылка);
////			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////				Текст,
////				ДанныеПечати.Ссылка);
////			
////		Иначе
////			
////			ДействующиеПостановления = Новый Структура;
////			ДействующиеПостановления.Вставить("Постановление914",  Ложь);
////			ДействующиеПостановления.Вставить("Постановление1137", Истина);
////			ДействующиеПостановления.Вставить("Постановление1137_625", ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
////			ДействующиеПостановления.Вставить("Постановление981", ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
////			ДействующиеПостановления.Вставить(
////				"Постановление534",
////				ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления));
////			
////			ОпцииПечатиСчетаФактуры.Вставить("ДействующиеПостановления", ДействующиеПостановления);
////			
////			Если ДанныеПечати.КорректировочныйСчетФактура Тогда
////				Если ДействующиеПостановления.Постановление534 Тогда
////					Макет = МакетКорр_534;
////					ЕстьПостановление534 = Истина;
////				ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
////					Макет = МакетКорр_981;
////					ЕстьПостановление981 = Истина;
////				ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
////					Макет = МакетКорр_625;
////					ЕстьПостановление1137_625 = Истина;
////				Иначе
////					Макет = МакетКорр;
////					ЕстьПостановление1137 = Истина;
////				КонецЕсли;
////			ИначеЕсли ДействующиеПостановления.Постановление914 Тогда
////				Макет = Макет451;
////				ЕстьПостановление914 = Истина;
////			ИначеЕсли ДействующиеПостановления.Постановление534 Тогда
////				Макет = Макет534;
////				ЕстьПостановление534 = Истина;
////			ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
////				Макет = Макет981;
////				ЕстьПостановление981 = Истина;
////			ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
////				Макет = Макет1137_625;
////				ЕстьПостановление1137_625 = Истина;
////			Иначе
////				Макет = Макет1137;
////				ЕстьПостановление1137 = Истина;
////			КонецЕсли;
////			Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
////			
////			Если (ЕстьПостановление914 И ЕстьПостановление1137)
////				ИЛИ (ЕстьПостановление914 И ЕстьПостановление981)
////				ИЛИ ((ЕстьПостановление1137 ИЛИ ЕстьПостановление1137_625) И ЕстьПостановление981)
////				Или ЕстьПостановление534 И (ЕстьПостановление914
////											Или ЕстьПостановление1137
////											Или ЕстьПостановление1137_625
////											Или ЕстьПостановление981) Тогда
////				
////				Текст = НСтр("ru = 'Недоступна одновременная печать счетов-фактур, сформированных по разным постановлениям Правительства РФ';
////							|en = 'Cannot print tax invoices generated by different decrees of the RF Government at the same time'");
////				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
////					Текст,
////					ДанныеПечати.Ссылка);
////				
////				ТабличныйДокумент.Очистить();
////				Прервать;
////				
////			КонецЕсли;
////			
////			ОпцииПечатиСчетаФактуры.Вставить("Макет", Макет);
////			
////			Если Не ПервыйДокумент Тогда
////				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////			КонецЕсли;
////			
////			ПервыйДокумент = Ложь;
////			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
////			
////			ТекстПредставленияКомиссионера = "";
////			ВыборкаПоставщиков = Неопределено;
////			Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
////				И ДанныеПечати.ПеревыставленныйСчетФактура
////				И (ЕстьПостановление981 Или ЕстьПостановление534) Тогда
////				ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
////				СведенияОКомиссионере = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
////				
////				ДополнительноеПредставление = "";
////				Если ДействующиеПостановления.Постановление914 И СведенияОКомиссионере.ОфициальноеНаименование <> СведенияОКомиссионере.ПолноеНаименование Тогда
////					ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////						НСтр("ru = '(%1)';
////							|en = '(%1)'"),
////						ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ПолноеНаименование"));
////				КонецЕсли;
////				
////				ПредставлениеКомиссионера = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////					НСтр("ru = '%1 %2';
////						|en = '%1 %2'"),
////					СведенияОКомиссионере.ПолноеНаименование,
////					ДополнительноеПредставление));
////					
////				АдресКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////					НСтр("ru = '%1';
////						|en = '%1'"),
////					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес"));
////					
////				ИННКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////					НСтр("ru = '%1/%2';
////						|en = '%1/%2'"),
////					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН", Ложь),
////					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "КПП", Ложь));

////				ТекстПредставленияКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////					НСтр("ru = 'Составлен комиссионером (агентом):%1, %2, ИНН/КПП: %3';
////						|en = 'Completed by consignee (agent):%1, %2, TIN/CRTR: %3'"),
////					ПредставлениеКомиссионера, АдресКомиссионера, ИННКомиссионера);
////			КонецЕсли;
////			
////			// Выводим общие реквизиты шапки
////			СведенияОбОрганизации = Новый Структура;
////			ЗаполнитьРеквизитыШапкиСчетФактура(
////				ДанныеПечати,
////				ВыборкаОснований,
////				СведенияОбОрганизации,
////				ВыборкаКонтрагентов,
////				ТабличныйДокумент,
////				ОпцииПечатиСчетаФактуры,
////				ВыборкаПоставщиков);
////			
////			// Выводим заголовок таблицы
////			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
////			Если ДействующиеПостановления.Постановление914 И Не ДанныеПечати.КорректировочныйСчетФактура Тогда
////				СтруктураПараметров = Новый Структура;
////				Если ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
////					СтруктураПараметров.Вставить("Валюта", ДанныеПечати.Валюта)
////				Иначе
////					СтруктураПараметров.Вставить("Валюта", ВалютаРегламентированногоУчета);
////				КонецЕсли;
////				ЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
////			КонецЕсли;
////			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
////			
////			НомерСтраницы = 1;
////			
////			// Инициализация итогов в документе
////			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
////			
////			// Создаем массив для проверки вывода
////			МассивВыводимыхОбластей = Новый Массив;
////			
////			// Выводим многострочную часть документа
////			Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс И ДанныеПечати.КорректировочныйСчетФактура Тогда
////				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("СтрокаАвансы");
////			Иначе
////				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("Строка");
////			КонецЕсли;
////			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
////			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
////			ВыводитьОбластьКомиссионера = Ложь;
////			
////			Если Не ПустаяСтрока(ТекстПредставленияКомиссионера) Тогда
////				ОбластьКомиссионера = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
////				СтруктураПараметров = Новый Структура();
////				СтруктураПараметров.Вставить("ПредставлениеКомиссионера",ТекстПредставленияКомиссионера);
////				ОбластьКомиссионера.Параметры.Заполнить(СтруктураПараметров);
////				ВыводитьОбластьКомиссионера = Истина;
////			КонецЕсли;
////			
////			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
////			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
////			
////			ИспользоватьНаборы = Ложь;
////			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
////				ИспользоватьНаборы = Истина;
////				ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
////				ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
////			КонецЕсли;
////			
////			ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации);
////			
////			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ДействующиеПостановления.Постановление981);
////			
////			ОперацияОблагаетсяНДСУПокупателя = Ложь;
////			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати,"НалогообложениеНДС") 
////				И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
////				ОперацияОблагаетсяНДСУПокупателя = Истина;
////			КонецЕсли;
////			
////			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
////			КоличествоСтрок = СтрокаТовары.Количество();
////			ТолькоСтавкаБезНДС = Истина;
////			НомерСтроки = 0;
////			ПрефиксНабора = "";
////			ТекущаяНоменклатураНабора = Справочники.Номенклатура.ПустаяСсылка();
////			ТекущаяХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
////			Пока СтрокаТовары.Следующий() Цикл
////				
////				Если ДанныеПечати.КорректировочныйСчетФактура Тогда
////					ОбластьМакета = ОбластьМакетаСтандарт;
////				ИначеЕсли НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
////					ОбластьМакета = ОбластьМакетаНабор;
////				ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
////					ОбластьМакета = ОбластьМакетаКомплектующие;
////				Иначе
////					ОбластьМакета = ОбластьМакетаСтандарт;
////				КонецЕсли;
////				
////				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
////					КоличествоСтрок = КоличествоСтрок - 1;
////					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
////												   ОбластьМакета, 
////												   Неопределено, 
////												   ДанныеПечати.КорректировочныйСчетФактура, 
////												   ВыводитьКодыТНВЭД, 
////												   ВыводитьСерии,
////												   ОпцииПечатиСчетаФактуры.СчетФактураНаАванс);
////												   
////					Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) 
////						И ДанныеПечати.КорректировочныйСчетФактура Тогда
////						ПрефиксНабора = ОбластьМакета.Параметры.ПредставлениеНоменклатуры;
////						ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
////						ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
////					КонецЕсли;
////				Иначе
////					НомерСтроки = НомерСтроки + 1;
////					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
////												   ОбластьМакета, 
////												   СтрокаТовары.НомерСтроки, 
////												   ДанныеПечати.КорректировочныйСчетФактура, 
////												   ВыводитьКодыТНВЭД, 
////												   ВыводитьСерии,
////												   ОпцииПечатиСчетаФактуры.СчетФактураНаАванс);
////					ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета);
////					
////					Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
////						И ПрефиксНабора <> ""
////						И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
////						И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
////						ОбластьМакета.Параметры.ПредставлениеНоменклатуры = ПрефиксНабора
////																			+ Символы.ПС
////																			+ ОбластьМакета.Параметры.ПредставлениеНоменклатуры;
////					КонецЕсли;
////					
////				КонецЕсли;
////				
////				СтруктураПараметров = Новый Структура;
////				Если ОперацияОблагаетсяНДСУПокупателя Тогда
////					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
////																	|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
////					СтруктураПараметров.Вставить("СуммаНДС", "--");
////					СтруктураПараметров.Вставить("СуммаНДСДо", "--");
////					СтруктураПараметров.Вставить("РазницаНДСУменьшение", "--");
////					СтруктураПараметров.Вставить("РазницаНДСУвеличение", "--");
////					СтруктураПараметров.Вставить("СуммаСНДС", "--");
////					СтруктураПараметров.Вставить("СуммаСНДСДо", "--");
////					СтруктураПараметров.Вставить("РазницаСНДСУменьшение", "--");
////					СтруктураПараметров.Вставить("РазницаСНДСУвеличение", "--");
////					Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
////						СтруктураПараметров.Вставить("СуммаБезНДС", СтрокаТовары.СуммаСНДС);
////					КонецЕсли;
////				//++Шерстюк Ю.Ю. 02.07.2021 взято из 2.5.6.196 на 2.4.12.195 не работает
////				//ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
////				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
////				//--Шерстюк Ю.Ю.
////					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
////																	|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////					СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
////																	|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////					СтруктураПараметров.Вставить("СуммаНДСДо", НСтр("ru = 'без НДС';
////																	|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////				//++Шерстюк Ю.Ю. 02.07.2021 взято из 2.5.6.196 на 2.4.12.195 не работает	
////				//ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
////				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
////				//--Шерстюк Ю.Ю.
////					СтруктураПараметров.Вставить("СуммаНДС", 0);
////					СтруктураПараметров.Вставить("СуммаНДСДо", 0);
////					ТолькоСтавкаБезНДС = Ложь;
////				Иначе
////					ТолькоСтавкаБезНДС = Ложь;
////				КонецЕсли;
////				
////				Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
////					Если ДействующиеПостановления.Постановление914 
////						ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс
////						ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
////						СтруктураПараметров.Вставить("Акциз", "--");
////					Иначе
////						СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
////																	|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
////					КонецЕсли;
////				КонецЕсли;
////				
////				МассивВыводимыхОбластей.Очистить();
////				
////				Если Не(НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) 
////					И ДанныеПечати.КорректировочныйСчетФактура) Тогда
////			
////					ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
////					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
////					
////					Если НомерСтроки = КоличествоСтрок Тогда
////						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
////						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
////						
////						Если ВыводитьОбластьКомиссионера Тогда
////							МассивВыводимыхОбластей.Добавить(ОбластьКомиссионера);
////						КонецЕсли;
////						
////					КонецЕсли;
////					
////					Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
////						
////						НомерСтраницы = НомерСтраницы + 1;
////						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
////						
////						Если Не ДействующиеПостановления.Постановление914 Тогда
////							
////							ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
////							Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
////								ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
////							Иначе
////								ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
////							КонецЕсли;
////							ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
////							ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
////							
////							ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
////							
////						КонецЕсли;
////						
////						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
////						
////					КонецЕсли;
////				
////					ТабличныйДокумент.Вывести(ОбластьМакета);
////				КонецЕсли;
////				
////				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
////					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
////				КонецЕсли;
////				
////			КонецЦикла;
////			
////			// Выводим итоги по документу
////			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
////			
////			Если ДействующиеПостановления.Постановление1137
////				И (НЕ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
////				И (НЕ ДанныеПечати.КорректировочныйСчетФактура)
////				И ТолькоСтавкаБезНДС Тогда
////				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
////													|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
////			КонецЕсли;
////			
////			Если ДанныеПечати.КорректировочныйСчетФактура
////				И ТолькоСтавкаБезНДС Тогда
////				ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", НСтр("ru = 'без НДС';
////																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////				ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", НСтр("ru = 'без НДС';
////																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
////			КонецЕсли;
////			
////			Если ОперацияОблагаетсяНДСУПокупателя Тогда
////				Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
////					ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДС", ИтоговыеСуммы.ИтогоСуммаСНДС);
////					ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДСНаСтранице", ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице);
////				КонецЕсли;
////				ИтоговыеСуммы.Вставить("ИтогоСуммаНДС", "--");
////				ИтоговыеСуммы.Вставить("ИтогоСуммаНДСНаСтранице", "--");
////				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
////				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
////				Если ИтоговыеСуммы.ИтогоРазницаСНДСУменьшение <> 0 Тогда
////					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшение", "--");
////					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшениеНаСтранице", "--");
////					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", "--");
////					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшениеНаСтранице", "--");
////				КонецЕсли;
////				Если ИтоговыеСуммы.ИтогоРазницаСНДСУвеличение <> 0 Тогда
////					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличение", "--");
////					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличениеНаСтранице", "--");
////					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", "--");
////					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличениеНаСтранице", "--");
////				КонецЕсли;
////			КонецЕсли;
////			
////			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
////			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
////			ТабличныйДокумент.Вывести(ОбластьИтого);
////			
////			ТабличныйДокумент.Вывести(ОбластьПодвала);
////			
////			Если ВыводитьОбластьКомиссионера Тогда
////				ТабличныйДокумент.Вывести(ОбластьКомиссионера);
////			КонецЕсли;
////			
////			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
////			
////		КонецЕсли;
////		
////	КонецЦикла;
////КонецПроцедуры


////&Вместо("ЗаполнитьРеквизитыШапкиСчетФактура")
////Процедура Рин1_ЗаполнитьРеквизитыШапкиСчетФактура1(ДанныеПечати, ДанныеОснований, СведенияОПоставщике, ДанныеКонтрагентов, ТабличныйДокумент, ОпцииПечатиСчетаФактуры, ДанныеПоставщиков)
////	ДействующиеПостановления = ОпцииПечатиСчетаФактуры.ДействующиеПостановления;
////	
////	Макет = ОпцииПечатиСчетаФактуры.Макет;
////	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
////	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
////	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
////	
////	НомераДаты = Новый Структура("Номер, Дата, НомерИсправления, ДатаИсправления, РеквизитыОснований");
////	
////	Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
////		НомераДаты.Номер = ДанныеПечати.Номер;
////	Иначе
////		НомераДаты.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
////	КонецЕсли;
////	НомераДаты.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД");
////	НомераДаты.НомерИсправления = ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--");
////	НомераДаты.ДатаИсправления =  ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--");
////	
////	Если ДанныеПечати.КорректировочныйСчетФактура Тогда
////		
////		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
////		ДанныеОснований.НайтиСледующий(СтруктураПоиска);
////		СтрокиОснований = ДанныеОснований.Выбрать();
////		
////		РеквизитыОснований = "";
////		
////		Пока СтрокиОснований.СледующийПоЗначениюПоля("ИсходныйДокумент") Цикл
////			
////			Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
////				НомерСчетаФактурыОснования = СтрокиОснований.НомерСчетаФактуры;
////			Иначе
////				НомерСчетаФактурыОснования = НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения);
////			КонецЕсли;
////			
////			ТекстИсходнойСФ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = ', № %1 от %2, с учетом исправления № %3 от %4';
////					|en = ', No. %1 dated %2, considering correction No. %3 dated %4'", Метаданные.Языки.Русский.КодЯзыка),
////				НомерСчетаФактурыОснования,
////				Формат(СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--"),
////				?(ЗначениеЗаполнено(СтрокиОснований.НомерИсправленияСчетаФактуры), СтрокиОснований.НомерИсправленияСчетаФактуры, "--"),
////				Формат(СтрокиОснований.ДатаИсправленияСчетаФактуры, "ДЛФ=ДД; ДП=--"));
////				
////			РеквизитыОснований = РеквизитыОснований + ТекстИсходнойСФ;
////			
////		КонецЦикла;
////		
////		Если Не ПустаяСтрока(РеквизитыОснований) Тогда
////			РеквизитыОснований = Сред(РеквизитыОснований, 3);
////		КонецЕсли;
////		НомераДаты.РеквизитыОснований = РеквизитыОснований;
////		
////	КонецЕсли;
////	
////	ОбластьМакета.Параметры.Заполнить(НомераДаты);
////	
////	СтруктураПараметров = Новый Структура;
////	
////	// Выводим данные о поставщике.

////	Если ДанныеПоставщиков = Неопределено Тогда

////		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
////		СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
////		
////		ДополнительноеПредставление = "";
////		Если ДействующиеПостановления.Постановление914 И СведенияОПоставщике.ОфициальноеНаименование <> СведенияОПоставщике.ПолноеНаименование Тогда
////			ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '(%1)';
////					|en = '(%1)'"),
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование"));
////		КонецЕсли;
////		
////		ПредставлениеПоставщика = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1 %2';
////				|en = '%1 %2'"),
////			СведенияОПоставщике.ПолноеНаименование,
////			ДополнительноеПредставление));
////			
////		АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
////			
////		ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1%2';
////				|en = '%1%2'"),
////			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
////			?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
////			
////		СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
////		СтруктураПараметров.Вставить("АдресПоставщика", АдресПоставщика);
////		СтруктураПараметров.Вставить("ИННПоставщика", ИННПоставщика);
////		
////		Если НЕ ДанныеПечати.КорректировочныйСчетФактура Тогда
////			
////			// Выводим данные грузоотправителя.
////			ТекстГрузоотправителя = "";
////			Если ДанныеПечати.ТолькоУслуги 
////			 ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
////			 ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
////				ТекстГрузоотправителя = "--";
////			ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель 
////			 ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
////				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
////						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП") Тогда
////				ТекстГрузоотправителя = НСтр("ru = 'он же';
////											|en = 'same'", Метаданные.Языки.Русский.КодЯзыка);
////			Иначе
////				ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
////					СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
////			КонецЕсли;
////			
////			ПредставлениеГрузоотправителя = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1';
////					|en = '%1'"),
////				ТекстГрузоотправителя));
////			
////			СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
////			
////			
////		КонецЕсли;
////	
////	Иначе
////		
////		ПредставлениеПоставщика       = "";
////		ПредставлениеАдресПоставщика = "";
////		ПредставлениеИННПоставщика = "";
////		ПредставлениеГрузоотправителя  = "";

////		ЕстьГрузоотправитель = НЕ ДанныеПечати.КорректировочныйСчетФактура 
////				И НЕ ДанныеПечати.ТолькоУслуги 
////				И НЕ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
////				И НЕ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент;
////		
////		ТаблицаПоставщиков = ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков);
////		Для Каждого СтрокаТаблицы Из ТаблицаПоставщиков Цикл
////			
////			СведенияОПоставщике = СтрокаТаблицы.СведенияОПоставщике;
////			
////			ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1; %2';
////					|en = '%1; %2'"),
////				ПредставлениеПоставщика,
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование", Ложь));
////			
////			ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1; %2';
////					|en = '%1; %2'"),
////				ПредставлениеАдресПоставщика,
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес", Ложь));
////				
////			ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1; %2%3';
////					|en = '%1; %2%3'"),
////				ПредставлениеИННПоставщика,
////				СтрокаТаблицы.ИНН,
////				?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
////				
////				
////			Если ЕстьГрузоотправитель Тогда
////					СведенияОГрузоотправителе = СтрокаТаблицы.СведенияОГрузоотправителе;
////					ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////					НСтр("ru = '%1; %2';
////						|en = '%1; %2'"),
////					ПредставлениеГрузоотправителя,
////					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес", Ложь));
////			КонецЕсли;
////			
////		КонецЦикла;
////		
////		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			Сред(ПредставлениеПоставщика, 3));
////		
////		ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			Сред(ПредставлениеАдресПоставщика, 3));
////		
////		ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			Сред(ПредставлениеИННПоставщика, 3));
////			
////		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			?(ЕстьГрузоотправитель, Сред(ПредставлениеГрузоотправителя, 3), "--"));
////			
////		СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
////		СтруктураПараметров.Вставить("АдресПоставщика", ПредставлениеАдресПоставщика);
////		СтруктураПараметров.Вставить("ИННПоставщика", ПредставлениеИННПоставщика);
////		СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
////		
////	КонецЕсли;
////	
////			СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
////				НСтр("ru = '-- от --';
////					|en = '-- dated --'", Метаданные.Языки.Русский.КодЯзыка),
////				ДанныеПечати.СтрокаПоДокументу));
////		
////		СтруктураПараметров.Вставить("ПоДокументу", СтрокаПоДокументу);
////	//++Шерстюк Ю.Ю. 08.07.2021 Задача 11917 т.к. обработка взята из 2.5.6.195, там алгоритм сбора строки представления сложный и затрагивает измененные реквизиты СФ, 
////	//которых в нашем релизе нет (если перенести и СФ, 
////	//возможно, потянет за собой еще какие-то объекты, поэтому временный вариант сформируем сами, после обновления можно и нужно удалить
////	//ПоДокументуОтгрузки = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "ПредставлениеСтроки5а")
////	//							И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеСтроки5а),
////	//						ДанныеПечати.ПредставлениеСтроки5а,
////	//						НСтр("ru = '-- от --';
////	//							|en = '-- dated --'"));
////	//
////	Если ДействующиеПостановления.Постановление534 Тогда
////		пКоличествоСтрок = ДанныеПечати.Ссылка.ДокументОснование.ВидыЗапасов.Количество();
////		Если пКоличествоСтрок = 1 Тогда 
////	    	ПоДокументуОтгрузки	= "№ п/п 1 №" + ДанныеПечати.Номер + " от " + Формат(ДанныеПечати.Дата,"ДФ=dd.MM.yyyy") + " г.";
////		ИначеЕсли пКоличествоСтрок > 1 Тогда 
////			ПоДокументуОтгрузки	= "№ п/п 1-" + Строка(пКоличествоСтрок) +" №" + ДанныеПечати.Номер + " от " + Формат(ДанныеПечати.Дата,"ДФ=dd.MM.yyyy") + " г.";
////		Иначе
////			 ПоДокументуОтгрузки = "-- от --";
////		КонецЕсли;
////	Иначе
////	     ПоДокументуОтгрузки = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "ПредставлениеСтроки5а")
////								И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеСтроки5а),
////							ДанныеПечати.ПредставлениеСтроки5а,
////							НСтр("ru = '-- от --';
////								|en = '-- dated --'"));
////	КонецЕсли;
////	//--Шерстюк Ю.Ю.					
////	СтруктураПараметров.Вставить("ПоДокументуОтгрузки", ПоДокументуОтгрузки);
////	
////	ЕстьГрузополучатель = Не ДанныеПечати.КорректировочныйСчетФактура
////		И НЕ (ДанныеПечати.ТолькоУслуги
////		ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
////		ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент);
////	
////	ПредставлениеПокупателя       = "";
////	ПредставлениеАдресаПокупателя = "";
////	ПредставлениеИННКПППокупателя = "";
////	ПредставлениеГрузополучателя  = "";
////	
////	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
////	
////	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
////		
////		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
////		
////		ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1; %2';
////				|en = '%1; %2'"),
////			ПредставлениеПокупателя,
////			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
////		
////		ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1; %2';
////				|en = '%1; %2'"),
////			ПредставлениеАдресаПокупателя,
////			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
////			
////		ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1; %2%3';
////				|en = '%1; %2%3'"),
////			ПредставлениеИННПокупателя,
////			СтрокаТаблицы.ИНН,
////			?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
////		
////		Если ЕстьГрузополучатель Тогда
////			СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
////			ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1; %2';
////					|en = '%1; %2'"),
////				ПредставлениеГрузополучателя,
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
////		КонецЕсли;
////		
////	КонецЦикла;
////	
////	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		Сред(ПредставлениеПокупателя, 3));
////	
////	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		Сред(ПредставлениеАдресаПокупателя, 3));
////	
////	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		Сред(ПредставлениеИННПокупателя, 3));
////		
////	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3), "--"));
////		
////	СтруктураПараметров.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
////	СтруктураПараметров.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
////	СтруктураПараметров.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
////	Если Не ДанныеПечати.КорректировочныйСчетФактура Тогда
////		СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
////	КонецЕсли;
////	
////	Если ДействующиеПостановления.Постановление1137 И ЗначениеЗаполнено(ДанныеПечати.Валюта) 
////		И ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
////		
////		СтруктураПараметров.Вставить("Валюта", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1, %2';
////				|en = '%1, %2'"),
////			ДанныеПечати.ВалютаНаименованиеПолное,
////			ДанныеПечати.ВалютаКод));
////			
////	ИначеЕсли ДействующиеПостановления.Постановление1137 Тогда
////		СтруктураПараметров.Вставить("Валюта", НСтр("ru = 'Российский рубль, 643';
////													|en = 'Russian ruble, 643'", Метаданные.Языки.Русский.КодЯзыка));
////	КонецЕсли;
////	
////	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
////	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
////	Если ДействующиеПостановления.Постановление981 Тогда
////		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
////	Иначе
////		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
////	КонецЕсли;
////	СтруктураПараметров.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
////	
////	Если ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
////		// для печати подвала берем сведения об организации из сведений о покупателе
////		СведенияОПоставщике = СведенияОПокупателе;
////	КонецЕсли;
////	
////	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
////	ТабличныйДокумент.Вывести(ОбластьМакета);


////КонецПроцедуры

////&Вместо("ЗаполнитьРеквизитыШапкиУПД")
////Процедура Рин1_ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОПоставщике, ДанныеКонтрагентов, Макет, ТабличныйДокумент, ДанныеПоставщиков, ОпцииПечати)
////	
////	СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
////	ВыводитьДанныеПоставщика = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
////	ВыводитьДанныеПокупателя = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
////	
////	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
////	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
////		ДанныеПечати.Ссылка);
////	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
////	
////	ПараметрыШапки = Новый Структура;
////	
////	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
////		ПараметрыШапки.Вставить("Номер", ДанныеПечати.Номер);
////	Иначе
////		ПараметрыШапки.Вставить("Номер", НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения));
////	КонецЕсли;
////	
////	ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=ДД"));
////	ПараметрыШапки.Вставить("НомерИсправления", ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--"));
////	ПараметрыШапки.Вставить("ДатаИсправления",
////		?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--"));
////	
////	// Выводим данные о поставщике.
////	
////	Если ДанныеПоставщиков = Неопределено Тогда
////		
////		ПредставлениеПоставщика = "--";
////		ПредставлениеАдресПоставщика = "--";
////		ПредставлениеИННПоставщика = "--";
////		
////		Если ВыводитьДанныеПоставщика Тогда
////			ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1';
////					|en = '%1'"),
////				СведенияОПоставщике.ПолноеНаименование);
////			
////			ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1';
////					|en = '%1'"),
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
////			
////			ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1%2';
////					|en = '%1%2'"),
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
////				?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
////		КонецЕсли;
////			
////		// Выводим данные грузоотправителя.
////		ТекстГрузоотправителя = "";
////		Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.Грузоотправитель = Неопределено Тогда
////			ТекстГрузоотправителя = "--";
////		ИначеЕсли ВыводитьДанныеПоставщика
////			И (ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель
////				ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
////				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
////					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП")) Тогда
////			ТекстГрузоотправителя = НСтр("ru = 'он же';
////										|en = 'same'", Метаданные.Языки.Русский.КодЯзыка);
////		Иначе
////			ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
////				СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
////		КонецЕсли;
////		
////		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			ТекстГрузоотправителя);
////	
////	Иначе
////	
////		ПредставлениеПоставщика       = "";
////		ПредставлениеАдресПоставщика = "";
////		ПредставлениеИННПоставщика = "";
////		ПредставлениеГрузоотправителя  = "";

////		ЕстьГрузоотправитель = НЕ ДанныеПечати.ТолькоУслуги;
////		
////		ТаблицаПоставщиков = ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков);
////		Для Каждого СтрокаТаблицы Из ТаблицаПоставщиков Цикл
////			
////			Если ВыводитьДанныеПоставщика Тогда
////				СведенияОПоставщикеВрем = СтрокаТаблицы.СведенияОПоставщике;
////				
////				ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////					НСтр("ru = '%1; %2';
////						|en = '%1; %2'"),
////					ПредставлениеПоставщика,
////					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщикеВрем, "ПолноеНаименование", Ложь));
////				
////				ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////					НСтр("ru = '%1; %2';
////						|en = '%1; %2'"),
////					ПредставлениеАдресПоставщика,
////					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщикеВрем, "ЮридическийАдрес", Ложь));
////					
////				ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////					НСтр("ru = '%1; %2%3';
////						|en = '%1; %2%3'"),
////					ПредставлениеИННПоставщика,
////					СтрокаТаблицы.ИНН,
////					?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
////			КонецЕсли;
////				
////			Если ЕстьГрузоотправитель Тогда
////				СведенияОГрузоотправителе = СтрокаТаблицы.СведенияОГрузоотправителе;
////				ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1; %2';
////					|en = '%1; %2'"),
////				ПредставлениеГрузоотправителя,
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес", Ложь));
////			КонецЕсли;
////			
////		КонецЦикла;
////		
////		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			?(ВыводитьДанныеПоставщика, Сред(ПредставлениеПоставщика, 3), "--"));
////		
////		ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			?(ВыводитьДанныеПоставщика, Сред(ПредставлениеАдресПоставщика, 3), "--"));
////		
////		ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			?(ВыводитьДанныеПоставщика, Сред(ПредставлениеИННПоставщика, 3), "--"));
////			
////		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			?(ЕстьГрузоотправитель, Сред(ПредставлениеГрузоотправителя, 3), "--"));
////			
////	КонецЕсли;
////	
////	ПараметрыШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
////	ПараметрыШапки.Вставить("АдресПоставщика", ПредставлениеАдресПоставщика);
////	ПараметрыШапки.Вставить("ИННПоставщика", ПредставлениеИННПоставщика);
////	ПараметрыШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
////	
////	// Выводим данные грузополучателя и покупателя.
////	ТекстГрузополучателя = "--";
////	
////	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		ТекстГрузополучателя);
////	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
////			НСтр("ru = '-- от --';
////				|en = '-- dated --'", Метаданные.Языки.Русский.КодЯзыка),
////			ДанныеПечати.СтрокаПоДокументу));
////	
////	ПараметрыШапки.Вставить("ПоДокументу", СтрокаПоДокументу);
////	
////	//++Шерстюк Ю.Ю. 08.07.2021 Задача 11917 т.к. обработка взята из 2.5.6.195, там алгоритм сбора строки представления сложный и затрагивает измененные реквизиты СФ, 
////	//которых в нашем релизе нет (если перенести и СФ, 
////	//возможно, потянет за собой еще какие-то объекты, поэтому временный вариант сформируем сами, после обновления можно и нужно удалить
////	//ПоДокументуОтгрузки = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "ПредставлениеСтроки5а")
////	//							И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеСтроки5а),
////	//						ДанныеПечати.ПредставлениеСтроки5а,
////	//						НСтр("ru = '-- от --';
////	//							|en = '-- dated --'"));
////	//
////	
////	// + [Rineco], [Киселев А.] [27.07.2021] 
////	// Задача: [№ 13349], [#Ошибка печати УПД]
////	
////	Если ТипЗнч(ДанныеПечати.Ссылка.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
////	
////		пКоличествоСтрок = ДанныеПечати.Ссылка.ДокументОснование.ВидыЗапасов.Количество();
////		
////	ИначеЕсли ТипЗнч(ДанныеПечати.Ссылка.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
////		
////		пКоличествоСтрок = ДанныеПечати.Ссылка.ДокументОснование.ДокументОснование.ВидыЗапасов.Количество();
////		
////	КонецЕсли;
////	
////	// - [Rineco], [Киселев А.] [27.07.2021]
////	
////	
////	Если пКоличествоСтрок = 1 Тогда 
////	   	ПоДокументуОтгрузки	= "№ п/п 1 №" + ДанныеПечати.Номер + " от " + Формат(ДанныеПечати.Дата,"ДФ=dd.MM.yyyy") + " г.";
////	ИначеЕсли пКоличествоСтрок > 1 Тогда 
////		ПоДокументуОтгрузки	= "№ п/п 1-" + Строка(пКоличествоСтрок) +" №" + ДанныеПечати.Номер + " от " + Формат(ДанныеПечати.Дата,"ДФ=dd.MM.yyyy") + " г.";
////	Иначе
////		 ПоДокументуОтгрузки = "-- от --";
////	КонецЕсли;
////	//--Шерстюк Ю.Ю.		
////	ПараметрыШапки.Вставить("ПоДокументуОтгрузки", ПоДокументуОтгрузки);
////	
////	ЕстьГрузополучатель = Не ДанныеПечати.ТолькоУслуги;
////	
////	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
////	
////	ПредставлениеПокупателя       = "";
////	ПредставлениеАдресаПокупателя = "";
////	ПредставлениеИННПокупателя    = "";
////	ПредставлениеГрузополучателя  = "";
////	
////	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
////		
////		Если ВыводитьДанныеПокупателя Тогда
////			СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
////			
////			ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1; %2';
////					|en = '%1; %2'"),
////				ПредставлениеПокупателя,
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
////			
////			ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1; %2';
////					|en = '%1; %2'"),
////				ПредставлениеАдресаПокупателя,
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
////				
////			ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1; %2%3';
////					|en = '%1; %2%3'"),
////				ПредставлениеИННПокупателя,
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь),
////				?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
////		КонецЕсли;
////		
////		Если ЕстьГрузополучатель Тогда
////			СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
////			ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////				НСтр("ru = '%1; %2';
////					|en = '%1; %2'"),
////				ПредставлениеГрузополучателя,
////				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
////		КонецЕсли;
////		
////	КонецЦикла;
////	
////	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		?(ВыводитьДанныеПокупателя, Сред(ПредставлениеПокупателя, 3), "--"));
////	
////	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		?(ВыводитьДанныеПокупателя, Сред(ПредставлениеАдресаПокупателя, 3), "--"));
////	
////	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		?(ВыводитьДанныеПокупателя, Сред(ПредставлениеИННПокупателя, 3), "--"));
////		
////	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		НСтр("ru = '%1';
////			|en = '%1'"),
////		?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3), "--"));
////		
////	ПараметрыШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
////	ПараметрыШапки.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
////	ПараметрыШапки.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
////	ПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
////	ПараметрыШапки.Вставить("Валюта", НСтр("ru = 'Российский рубль, 643';
////											|en = 'Russian ruble, 643'", Метаданные.Языки.Русский.КодЯзыка));
////	
////	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
////	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
////	Если ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления) Тогда
////		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
////	Иначе
////		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////			НСтр("ru = '%1';
////				|en = '%1'"),
////			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
////	КонецЕсли;
////	ПараметрыШапки.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
////	
////	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
////	
////	ТабличныйДокумент.Вывести(ОбластьМакета);

////КонецПроцедуры

//&Вместо("ЗаполнитьТабличныйДокументУКД")
//Процедура Рин1_ЗаполнитьТабличныйДокументУКД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
//	
//	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
//	
//	МакетУКД     = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент_ru");
//	МакетУКД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент_625_ru");
////Исходное	МакетУКД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент981_ru");
////{{20201202 ГлазуновДВ
//	МакетУКД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент981_ru1");
////}}20201202 ГлазуновДВ
//	
//	ЕстьПостановление1137_625 = ЛОЖЬ;
//	ЕстьПостановление1137 = ЛОЖЬ;
//	ЕстьПостановление981 = ЛОЖЬ;
//	
//	ОпцииПечати = Новый Структура;
//	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
//	
//	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
//	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	ВыборкаОснований    = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	ПервыйДокумент = Истина;
//	Пока ДанныеПечати.Следующий() Цикл
//		
//		Если ДанныеПечати.ПечатьНеТребуется Тогда
//			
//			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Для документа %1 универсальный корректировочный документ не применяется.';
//					|en = 'Universal adjustment document is not used for document %1.'"),
//					ДанныеПечати.Ссылка);
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//				Текст,
//				ДанныеПечати.Ссылка);
//				
//		ИначеЕсли НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
//			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
//			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
//			И (ДанныеПечати.СтатусУПД = 2 ИЛИ ДанныеПечати.Номер = Неопределено) Тогда
//			
//			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Для документа %1 не введен %2';
//					|en = '%2 is not entered for document %1'"),
//				ДанныеПечати.Ссылка,
//				НСтр("ru = 'счет-фактура';
//					|en = 'tax invoice'"));
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//				Текст,
//				ДанныеПечати.Ссылка,
//				,
//				"ТекстСчетФактура");
//	
//		Иначе
//			
//			Если ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
//				Макет = МакетУКД_981;
//				ЕстьПостановление981 = Истина;
//			ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
//				Макет = МакетУКД_625;
//				ЕстьПостановление1137_625 = Истина;
//			Иначе
//				Макет = МакетУКД;
//				ЕстьПостановление1137 = Истина;
//			КонецЕсли;
//			Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
//			
//			Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
//				
//				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
//					|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.)';
//					|en = 'Cannot print universal adjustment documents
//					|generated both before and after the commencement date of RF Government decree No.625 dated 05/25/2017 at the same time'");
//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//					Текст,
//					ДанныеПечати.Ссылка);
//				
//				ТабличныйДокумент.Очистить();
//				Прервать;
//				
//			КонецЕсли;
//			
//			Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
//				
//				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
//					|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.)';
//					|en = 'Cannot print universal adjustment documents
//					|generated both before and after the commencement date of RF Government decree No.981 dated 08/19/2017 at the same time'");
//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//					Текст,
//					ДанныеПечати.Ссылка);
//				
//				ТабличныйДокумент.Очистить();
//				Прервать;
//				
//			КонецЕсли;
//			
//			Если Не ПервыйДокумент Тогда
//				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//			КонецЕсли;
//			
//			ПервыйДокумент = Ложь;
//			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
//			
//			// Выводим общие реквизиты шапки
//			СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
//			СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
//			ЗаполнитьРеквизитыШапкиУКД(ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, Макет, ТабличныйДокумент, ОпцииПечати);

//			
//			// Выводим заголовок таблицы
//			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
//			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
//			
//			НомерСтраницы = 1;
//			
//			// Инициализация итогов в документе
//			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
//			
//			// Создаем массив для проверки вывода
//			МассивВыводимыхОбластей = Новый Массив;
//			
//			// Выводим многострочную часть документа
//			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
//			ОбластьИтого  = Макет.ПолучитьОбласть("Итого");
//			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
//			
//			ЗаполнитьРеквизитыПодвалаУКД(ОбластьПодвал, ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати);
//			
//			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
//			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
//			
//			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати,ЕстьПостановление981);
//			
//			ОперацияОблагаетсяНДСУПокупателя = Ложь;
//			Если ДанныеПечати.СтатусУПД = 1
//			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
//				ОперацияОблагаетсяНДСУПокупателя = Истина;
//			КонецЕсли;
//		
//			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
//			КоличествоСтрок = СтрокаТовары.Количество();
//			ТолькоСтавкаБезНДС = Истина;
//			НомерСтроки = 0;
//			Пока СтрокаТовары.Следующий() Цикл
//				
//				НомерСтроки = НомерСтроки + 1;
//				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД);
//				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
//				
//				СтруктураПараметров = Новый Структура;
//				Если ОперацияОблагаетсяНДСУПокупателя Тогда
//					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
//																	|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
//					СтруктураПараметров.Вставить("СуммаСНДС", "--");
//					СтруктураПараметров.Вставить("СуммаСНДСДо", "--");
//					СтруктураПараметров.Вставить("РазницаСНДСУвеличение", "--");
//					СтруктураПараметров.Вставить("РазницаСНДСУменьшение", "--");
//					ТолькоСтавкаБезНДС = Ложь;
//				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
//					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
//																	|en = 'excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
//					СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
//																	|en = 'excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
//					СтруктураПараметров.Вставить("СуммаНДСДо", НСтр("ru = 'без НДС';
//																	|en = 'excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
//				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
//					СтруктураПараметров.Вставить("СуммаНДС", 0);
//					СтруктураПараметров.Вставить("СуммаНДСДо", 0);
//					ТолькоСтавкаБезНДС = Ложь;
//				Иначе
//					ТолькоСтавкаБезНДС = Ложь;
//				КонецЕсли;
//				СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
//															|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
//				ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
//				
//				МассивВыводимыхОбластей.Очистить();
//				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
//				
//				Если НомерСтроки = КоличествоСтрок Тогда
//					МассивВыводимыхОбластей.Добавить(ОбластьИтого);
//					МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
//				КонецЕсли;
//				
//				Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
//					
//					НомерСтраницы = НомерСтраницы + 1;
//					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//					
//					ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
//					Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
//						ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
//					Иначе
//						ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
//					КонецЕсли;
//					ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
//					ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
//					
//					ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
//					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
//					
//				КонецЕсли;
//				
//				ТабличныйДокумент.Вывести(ОбластьСтрока);
//				
//				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
//				
//			КонецЦикла;
//			
//			// Выводим итоги по документу
//			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
//			
//			Если ТолькоСтавкаБезНДС Тогда
//				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
//													|en = 'excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
//				ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", НСтр("ru = 'без НДС';
//																		|en = 'excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
//				ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", НСтр("ru = 'без НДС';
//																		|en = 'excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
//			КонецЕсли;
//			
//			Если ОперацияОблагаетсяНДСУПокупателя Тогда
//				ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличение", "--");
//				ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшение", "--");
//				ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличениеНаСтранице", "--");
//				ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшениеНаСтранице", "--");
//			КонецЕсли;
//		
//			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
//			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
//			ТабличныйДокумент.Вывести(ОбластьИтого);
//			
//			КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Документ составлен на %1 %2';
//					|en = 'Document is created on %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
//				НомерСтраницы,
//				ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
//					НСтр("ru = 'листе';
//						|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
//					НСтр("ru = 'листах';
//						|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
//					НСтр("ru = 'листах';
//						|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
//			СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
//			ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
//			ТабличныйДокумент.Вывести(ОбластьПодвал);
//			
//			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
//				ДанныеПечати.Ссылка);
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры
//}}20201202 ГлазуновДВ
