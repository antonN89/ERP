// Проверка доступных ролей пользователя
Функция НужноКонтролироватьКратностьПартии() Экспорт
	
	Возврат Не РольДоступна("ГИГ_НеКонтролироватьКратностьПартии") И Не РольДоступна("ПолныеПрава");
	
КонецФункции

Процедура УстановитьУсловноеОформление(Форма, ИмяТЧ, ПутьКДанным) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "КратностьПартии"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СвободныйОстаток"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "КратностьЗаказу"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "КратностьОстаткам"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	Если Элементы.Найти(ИмяТЧ + "Количество") = Неопределено Тогда
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "КоличествоУпаковок"].Имя);
	Иначе
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "Количество"].Имя);
	КонецЕсли; 
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КратностьЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КратностьОстаткам");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "КоличествоНеКратно"].Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КоличествоНеКратно");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;

	//Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "!");
	//
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "КоличествоНеКратно"].Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КоличествоНеКратно");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;

	//Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	///--> Гигабайт (Чернов А.С.) 
	
КонецПроцедуры

Функция ПолучитьДанныеКратностиПартии(Объект, ТекущаяСтрока, КэшДанныеНоменклатуры) Экспорт
	
	ОтборПоНоменклатуре = Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	НайденныеСтроки = КэшДанныеНоменклатуры.НайтиСтроки(ОтборПоНоменклатуре);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// если ничего не нашли значит нужно обновить кэш
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.Производитель КАК Производитель,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ГИГ_ИспользоватьКратностьПартии
		|			ТОГДА СпрНоменклатура.ГИГ_КратностьПартии
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КратностьПартии,
		|	ЕСТЬNULL(СвободныеОстатки.СвободныйОстаток, 0) КАК СвободныйОстаток
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|			СУММА(ВложенныйЗапрос.ВНаличии) - СУММА(ВложенныйЗапрос.ВРезервеСоСклада) - СУММА(ВложенныйЗапрос.ВРезервеПодЗаказ) - СУММА(ВложенныйЗапрос.ВРезервеГрафика) КАК СвободныйОстаток
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
		|				СвободныеОстаткиОстатки.ВНаличииОстаток КАК ВНаличии,
		|				СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада,
		|				СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток КАК ВРезервеПодЗаказ,
		|				0 КАК ВРезервеГрафика
		|			ИЗ
		|				РегистрНакопления.СвободныеОстатки.Остатки(
		|						,
		|						Склад = &Склад
		|							И Номенклатура В (&СписокНоменклатуры)) КАК СвободныеОстаткиОстатки
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ДоступныеОстаткиПланируемыхПоступлений.Номенклатура,
		|				0,
		|				0,
		|				0,
		|				-ДоступныеОстаткиПланируемыхПоступлений.Количество
		|			ИЗ
		|				РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений
		|			ГДЕ
		|				ДоступныеОстаткиПланируемыхПоступлений.Номенклатура В(&СписокНоменклатуры)
		|				И ДоступныеОстаткиПланируемыхПоступлений.Склад = &Склад
		|				И ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
		|				И ДоступныеОстаткиПланируемыхПоступлений.Количество < 0
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				СвободныеОстатки.Номенклатура,
		|				ВЫБОР
		|					КОГДА СвободныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						ТОГДА СвободныеОстатки.ВНаличии
		|					ИНАЧЕ -СвободныеОстатки.ВНаличии
		|				КОНЕЦ,
		|				ВЫБОР
		|					КОГДА СвободныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						ТОГДА СвободныеОстатки.ВРезервеСоСклада
		|					ИНАЧЕ -СвободныеОстатки.ВРезервеСоСклада
		|				КОНЕЦ,
		|				ВЫБОР
		|					КОГДА СвободныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						ТОГДА СвободныеОстатки.ВРезервеПодЗаказ
		|					ИНАЧЕ -СвободныеОстатки.ВРезервеПодЗаказ
		|				КОНЕЦ,
		|				0
		|			ИЗ
		|				РегистрНакопления.СвободныеОстатки КАК СвободныеОстатки
		|			ГДЕ
		|				СвободныеОстатки.Регистратор = &Регистратор
		|				И СвободныеОстатки.Номенклатура В(&СписокНоменклатуры)) КАК ВложенныйЗапрос
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВложенныйЗапрос.Номенклатура) КАК СвободныеОстатки
		|		ПО СпрНоменклатура.Ссылка = СвободныеОстатки.Номенклатура
		|ГДЕ
		|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры);";
		
		Запрос.УстановитьПараметр("СписокНоменклатуры", Объект.Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		
		КэшДанныеНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
		
		НайденныеСтроки = КэшДанныеНоменклатуры.НайтиСтроки(ОтборПоНоменклатуре);
		
	КонецЕсли;

	Результат = Новый Структура;
//{{20200812 ГлазуновДВ проверка на пустые строки
	Если НайденныеСтроки.Количество() > 0 Тогда
//}}20200812 ГлазуновДВ
		Результат.Вставить("Артикул",             НайденныеСтроки[0].Артикул);
		Результат.Вставить("Производитель",       НайденныеСтроки[0].Производитель);
		Результат.Вставить("КратностьПартии",     НайденныеСтроки[0].КратностьПартии);
		Результат.Вставить("СвободныйОстаток",    НайденныеСтроки[0].СвободныйОстаток);
		
		Результат.Вставить("КратностьЗаказу",     ?(Результат.КратностьПартии = 0, 0, ТекущаяСтрока.Количество % Результат.КратностьПартии));
		Результат.Вставить("КратностьОстаткам",   ?(Результат.КратностьПартии = 0, 0, Результат.СвободныйОстаток % Результат.КратностьПартии));
		Результат.Вставить("КоличествоНеКратно",  ?(Результат.КратностьПартии = 0, Ложь, (Результат.КратностьЗаказу > Результат.КратностьОстаткам)));
//{{20200812 ГлазуновДВ проверка на пустые строки
	КонецЕсли;
//}}20200812
	
	Возврат Результат;
	
КонецФункции