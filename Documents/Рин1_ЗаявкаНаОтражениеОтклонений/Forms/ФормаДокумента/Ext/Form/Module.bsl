#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; // Используется механизмом обработки изменения реквизитов ТЧ.

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

&НаКлиенте
Перем РедактируетсяСерияОприходование; // Используется для определения, что форма подбора серий вызвана для серии, указанной в шапке.

#КонецОбласти


&НаСервере
Процедура ПомещениеПриИзмененииНаСервере(ВызовПриЧтенииСоздании = Ложь)
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение", Объект.Склад, Объект.Помещение));
	
	Элементы.Помещение.Видимость = СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад,Объект.Дата);
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ТоварыУпаковка, ТоварыЯчейка", "Видимость", ИспользоватьАдресноеХранение);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеИзлишковТоваров));
	
	Если Не ВызовПриЧтенииСоздании Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		Если Не(ИспользоватьАдресноеХранение) Тогда
			Для Каждого Строка Из Объект.Товары Цикл
				Строка.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				Строка.Количество = Строка.КоличествоУпаковок;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
ПриИзмененииСкладаПомещенияДаты();

	//ПомещениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаПриИзменении(Элемент)
	пЕстьОрдер = ЗначениеЗаполнено(Объект.ОрдерОтклонений);
	пЕстьДокументФинУчета = ЗначениеЗаполнено(Объект.ОтклоненияПоФинУчету);

	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.Рин1_ОперацииОтраженияВУчете.ПоСкладу") и пЕстьДокументФинУчета Тогда
		ЗаполнитьРеквизитНаСервере(Объект.Операция,ПредопределенноеЗначение("Перечисление.Рин1_ОперацииОтраженияВУчете.ПоСкладуИФинансовомуУчету"));
		Сообщить("По заявке уже оформлен документ фин. учета");
	ИначеЕсли  Объект.Операция = ПредопределенноеЗначение("Перечисление.Рин1_ОперацииОтраженияВУчете.ПоФинансовомуУчету") и пЕстьОрдер Тогда
		ЗаполнитьРеквизитНаСервере(Объект.Операция,ПредопределенноеЗначение("Перечисление.Рин1_ОперацииОтраженияВУчете.ПоСкладуИФинансовомуУчету"));
		Сообщить("По заявке уже оформлен ордер");
	КонецЕсли;
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьРеквизитНаСервере(пОбъект,пЗначение)
	 пОбъект = пЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ВидОтклоненияПриИзменении(Элемент)
	ЭтоПересортица = ПолучитьВидОтклонения(Объект.ВидОтклонения);
	Если Не ЭтоПересортица Тогда  //Недостача или излишек, скрываем в ТЧ колонки с пересортом
		Элементы.ТоварыНоменклатураОприходование.Видимость = Ложь;
		Элементы.ТоварыХарактеристикаОприходование.Видимость = Ложь;
		Элементы.ТоварыКоличествоОприходование.Видимость = Ложь;
		Элементы.ТоварыНазначениеОприходование.Видимость = Ложь;
		Элементы.ТоварыУпаковкаОприходование.Видимость = Ложь;
		Элементы.ТоварыСерияОприходование.Видимость = Ложь;
		Элементы.ТоварыНоменклатураОприходованиеЕдиницаИзмерения.Видимость = Ложь;
		Элементы.Оприходование.Видимость = Ложь;
		Элементы.ТоварыГруппа1.Заголовок = "";

		//Элементы.ТоварыСтатусУказанияСерийОприходование.Видимость = Ложь;
	Иначе
		Элементы.ТоварыНоменклатураОприходование.Видимость = Истина;
		Элементы.ТоварыХарактеристикаОприходование.Видимость = Истина;
		Элементы.ТоварыКоличествоОприходование.Видимость = Истина;
		Элементы.ТоварыНазначениеОприходование.Видимость = Истина;
		Элементы.ТоварыУпаковкаОприходование.Видимость = Истина;
		Элементы.ТоварыСерияОприходование.Видимость = Истина;
		Элементы.ТоварыНоменклатураОприходованиеЕдиницаИзмерения.Видимость = Истина;
		Элементы.Оприходование.Видимость = Истина;
		Элементы.ТоварыГруппа1.Заголовок = "Списание";

		//Элементы.ТоварыСтатусУказанияСерийОприходование.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОтклонения(пВидОтклонения)
	Если пВидОтклонения = Перечисления.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Пересортица Тогда
		Возврат Истина;
	Иначе Возврат Ложь;
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
	Если Объект.Статус = Перечисления.Рин1_СтатусыЗаявокОтклонений.НеСогласовано или Объект.Статус = Перечисления.Рин1_СтатусыЗаявокОтклонений.ПустаяСсылка() Тогда 
		Элементы.Товары.Доступность = Истина;
	Иначе
		 Элементы.Товары.Доступность = Ложь;
    КонецЕсли;	
		
	
	Если Объект.Ссылка.Пустая() Тогда 
		Объект.Статус = Перечисления.Рин1_СтатусыЗаявокОтклонений.НеСогласовано;
		Объект.Ответственный = Пользователи.ТекущийПользователь();
		Объект.ВидОтклонения = Перечисления.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Недостача;
		Объект.Операция = Перечисления.Рин1_ОперацииОтраженияВУчете.ПоСкладу;
	КонецЕсли;
	
	ЭтоПересортица = ПолучитьВидОтклонения(Объект.ВидОтклонения);
	Если Не ЭтоПересортица Тогда  //Недостача или излишек, скрываем в ТЧ колонки с пересортом
		Элементы.ТоварыНоменклатураОприходование.Видимость = Ложь;
		Элементы.ТоварыХарактеристикаОприходование.Видимость = Ложь;
		Элементы.ТоварыКоличествоОприходование.Видимость = Ложь;
		Элементы.ТоварыНазначениеОприходование.Видимость = Ложь;
		Элементы.ТоварыУпаковкаОприходование.Видимость = Ложь;
		Элементы.ТоварыСерияОприходование.Видимость = Ложь;
		Элементы.ТоварыНоменклатураОприходованиеЕдиницаИзмерения.Видимость = Ложь;
		Элементы.Оприходование.Видимость = Ложь;
		Элементы.ТоварыГруппа1.Заголовок = "";
		//Элементы.ТоварыСтатусУказанияСерийОприходование.Видимость = Ложь;
	Иначе
		Элементы.ТоварыНоменклатураОприходование.Видимость = Истина;
		Элементы.ТоварыХарактеристикаОприходование.Видимость = Истина;
		Элементы.ТоварыКоличествоОприходование.Видимость = Истина;
		Элементы.ТоварыНазначениеОприходование.Видимость = Истина;
		Элементы.ТоварыУпаковкаОприходование.Видимость = Истина;
		Элементы.ТоварыСерияОприходование.Видимость = Истина;
		Элементы.ТоварыНоменклатураОприходованиеЕдиницаИзмерения.Видимость = Истина;
		Элементы.Оприходование.Видимость = Истина;
		Элементы.ТоварыГруппа1.Заголовок = "Списание";

		//Элементы.ТоварыСтатусУказанияСерийОприходование.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СоздатьОрдер(Команда)
	Если Объект.Ссылка.Пустая() Тогда 
		Сообщить("Запишите документ Заявка на отражение отклонений");
	ИначеЕсли Объект.Статус <> ПредопределенноеЗначение("Перечисление.Рин1_СтатусыЗаявокОтклонений.Согласован") Тогда
		Сообщить("Создание ордера возможно только в статусе Согласован");
		
	ИначеЕсли Объект.Проведен и Не ЗначениеЗаполнено(Объект.ОрдерОтклонений) Тогда
	   Если Объект.Операция <> ПредопределенноеЗначение("Перечисление.Рин1_ОперацииОтраженияВУчете.ПоФинансовомуУчету") Тогда	
	       пСсылка = СоздатьОрдерНасервере();
		   Оповестить("Запись_ОрдерНаОтражение", , пСсылка);
	   ИначеЕсли ЗначениеЗаполнено(Объект.ОрдерОтклонений) Тогда
           Сообщить("По документу уже создан ордер");
	   Иначе
		   Сообщить("Не требуется создание ордера, операция выполняется только по финансовому учету...");
	   КонецЕсли;
   Иначе
	   Сообщить("Документ не создан, проведите, пожалуйста, заявку и повторите попытку");
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_ОрдерНаОтражениеНедостачТоваров" или ИмяСобытия = "Запись_ОрдерНаОтражениеИзлишковТоваров" 
		или ИмяСобытия = "Запись_ОрдерНаОтражениеПересортицыТоваров" или ИмяСобытия = "Запись_ОрдерНаОтражение" Тогда
		 ОбновитьНаСервереОрдер(Источник);
		 ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	 ИначеЕсли ИмяСобытия = "Запись_СписаниеНедостачТоваров" или ИмяСобытия = "Запись_ОприходованиеИзлишковТоваров" или ИмяСобытия = "Запись_ОприходованиеИзлишковТоваров" Тогда
		 ОбновитьНаСервереФинУчет(Источник);
	     ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервереОрдер(пЗначение)
	Объект.ОрдерОтклонений = пЗначение;
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ОрдерОтклонений",Объект.ОрдерОтклонений));
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервереФинУчет(пЗначение)
	Объект.ОтклоненияПоФинУчету = пЗначение;
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ОтклоненияПоФинУчету",Объект.ОтклоненияПоФинУчету));

КонецПроцедуры

&НаСервере
Функция  СоздатьОрдерНасервере()
	Если Объект.ВидОтклонения = Перечисления.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Недостача Тогда
		пНовыйДокумент = Документы.ОрдерНаОтражениеНедостачТоваров.СоздатьДокумент();
	ИначеЕсли Объект.ВидОтклонения = Перечисления.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Излишек Тогда
		пНовыйДокумент = Документы.ОрдерНаОтражениеИзлишковТоваров.СоздатьДокумент();
	Иначе
		пНовыйДокумент = Документы.ОрдерНаОтражениеПересортицыТоваров.СоздатьДокумент();
	КонецЕсли;
	
	Попытка
		пНовыйДокумент.Дата = ТекущаяДата();
		пНовыйДокумент.Склад = Объект.Склад;
		пНовыйДокумент.Помещение = Объект.Помещение;
		пНовыйДокумент.Товары.Загрузить(Объект.Товары.Выгрузить());
		пНовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		пНовыйДокумент.Комментарий = "Создан автоматически из документа " + Строка(Объект.Ссылка);
		Возврат пНовыйДокумент.Ссылка; 
	Исключение
		Сообщить("Не удалось провести ордер");
		Возврат 0;
	КонецПопытки;

КонецФункции


&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаПомещенияДаты(ВызовПриЧтенииСоздании = Ложь)
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад,Помещение",Объект.Склад,Объект.Помещение));
	
	Элементы.Помещение.Видимость = СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад,Объект.Дата);
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ТоварыУпаковка, ТоварыЯчейка", "Видимость", ИспользоватьАдресноеХранение);
	Если Объект.ВидОтклонения = Перечисления.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Недостача Тогда 
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеНедостачТоваров));
	ИначеЕсли Объект.ВидОтклонения = Перечисления.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Излишек Тогда 
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеИзлишковТоваров));
	ИначеЕсли Объект.ВидОтклонения = Перечисления.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Пересортица Тогда 
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеПересортицыТоваров));
    КонецЕсли;

	
	Если Не ВызовПриЧтенииСоздании Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		Если Не(ИспользоватьАдресноеХранение) Тогда
			Для Каждого Строка Из Объект.Товары Цикл
				Строка.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				Строка.Количество = Строка.КоличествоУпаковок;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции


&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные) Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение",
														ЭтотОбъект,
														Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий));

		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,
					ПараметрыФормыУказанияСерий,
					ЭтаФорма,
					,
					,
					,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
     
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ДополнительныеПараметры.ПараметрыФормыУказанияСерий, КэшированныеЗначения);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, КэшированныеЗначения)
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	Действия.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	Действия.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	Действия.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Действия.Вставить("ПересчитатьВесОбъем");
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий",
																				Объект.Склад, ПараметрыУказанияСерий));
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,Действия,КэшированныеЗначения);
	
КонецПроцедуры



&НаСервере
Процедура УстановитьУсловноеОформление()

		УсловноеОформление.Элементы.Очистить();
	
	// Установка условного оформления для элементов списываемой номенклатуры табличной части 'Товары'.
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма);
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
	
	// Установка условного оформления для элементов приходуемой номенклатуры табличной части 'Товары'.
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
		"ТоварыХарактеристикаОприходование", "Объект.Товары.ХарактеристикиИспользуютсяОприходование");
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма,
		"ТоварыНазначениеОприходование", "Объект.Товары.ТипНоменклатурыОприходование");
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары",
		"ТоварыСерияОприходование", "Объект.Товары.СтатусУказанияСерийОприходование",
		"Объект.Товары.ТипНоменклатурыОприходование");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
		"ТоварыНоменклатураОприходованиеЕдиницаИзмерения", "Объект.Товары.УпаковкаОприходование");
	
	// Установка цвета текста для элемента 'Упаковка' табличной части 'Товары'.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	// Установка цвета текста для элемента 'УпаковкаОприходование' табличной части 'Товары'.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковкаОприходование.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковкаОприходование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатурыОприходование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	// Установка отметки незаполненного для элемента 'Упаковка' табличной части 'Товары'.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипИзмеряемойВеличины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Установка отметки незаполненного для элемента 'УпаковкаОприходование' табличной части 'Товары'.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковкаОприходование.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатурыОприходование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипИзмеряемойВеличиныОприходование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Установка условного оформления для элемента 'Вес' табличной части 'Товары'.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВес.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Установка условного оформления для элемента 'Объем' табличной части 'Товары'.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОбъем.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Установка условного оформления для элемента 'ЕдиницаИзмеренияВеса' табличной части 'Товары'.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмеренияВеса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Установка условного оформления для элемента 'ЕдиницаИзмеренияОбъема' табличной части 'Товары'.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмеренияОбъема.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	Перем ТекущаяСтрока;
	Перем СтруктураДействий;

	Если Не ЗначениеЗаполнено(Объект.Склад) и Не ЗначениеЗаполнено(Объект.Помещение) Тогда
		Сообщить("Необходимо заполнить Склад и Помещение на закладке Основное");
	Иначе
		ПриИзмененииСкладаПомещенияДаты();
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		Если ИспользоватьАдресноеХранение Тогда
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу" , ТекущаяСтрока.Упаковка);
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
		СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
		СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
		СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
		СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
		СтруктураДействий.Вставить("ПересчитатьВесОбъем");
		
		СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
			ЭтаФорма.ИмяФормы, "Товары"));

		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	РедактируетсяСерияОприходование = Ложь;
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВесПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоВесу");
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбъемПриИзменении(Элемент)
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоОбъему");
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ПриИзмененииСкладаПомещенияДаты();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОприходованиеПриИзменении(Элемент)
	ПриИзмененииСкладаПомещенияДаты();
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Номенклатура",                       ТекущиеДанные.НоменклатураОприходование);
	ТекущаяСтрока.Вставить("НоменклатураОприходование",          ТекущиеДанные.НоменклатураОприходование);
	ТекущаяСтрока.Вставить("АртикулОприходование",               ТекущиеДанные.АртикулОприходование);
	ТекущаяСтрока.Вставить("ТипНоменклатурыОприходование",       ТекущиеДанные.ТипНоменклатурыОприходование);
	ТекущаяСтрока.Вставить("ТипИзмеряемойВеличиныОприходование", ТекущиеДанные.ТипИзмеряемойВеличиныОприходование);
	ТекущаяСтрока.Вставить("НоменклатураОприходованиеХарактеристика",                     ТекущиеДанные.ХарактеристикаОприходование);
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются",         ТекущиеДанные.ХарактеристикиИспользуютсяОприходование);
	ТекущаяСтрока.Вставить("Упаковка",                           ТекущиеДанные.УпаковкаОприходование);
	ТекущаяСтрока.Вставить("Серия",                              ТекущиеДанные.СерияОприходование);
	ТекущаяСтрока.Вставить("СтатусУказанияСерий",                ТекущиеДанные.СтатусУказанияСерийОприходование);
	ТекущаяСтрока.Вставить("Количество",                         ТекущиеДанные.КоличествоОприходование);
	ТекущаяСтрока.Вставить("КоличествоУпаковок",                 ТекущиеДанные.КоличествоУпаковок);
	//ТекущаяСтрока.Вставить("КоличествоУпаковок",                 ТекущиеДанные.КоличествоУпаковок);
	
	ЗаполнитьПризнакАртикул               = Новый Структура("НоменклатураОприходование", "АртикулОприходование");
	ЗаполнитьПризнакТипНоменклатуры       = Новый Структура("НоменклатураОприходование", "ТипНоменклатурыОприходование");
	ПроверитьСериюРассчитатьСтатус        = Новый Структура("Склад, ПараметрыУказанияСерий",
										Объект.Склад, ПараметрыУказанияСерий);
	ЗаполнитьПризнакТипИзмеряемойВеличины = Новый Структура("НоменклатураОприходование",
										"ТипИзмеряемойВеличиныОприходование");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",               ЗаполнитьПризнакАртикул);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",       ЗаполнитьПризнакТипНоменклатуры);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", ЗаполнитьПризнакТипИзмеряемойВеличины);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекущаяСтрока.НоменклатураОприходованиеХарактеристика);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",        ПроверитьСериюРассчитатьСтатус);
	
	Если ИспользоватьАдресноеХранение Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущиеДанные.АртикулОприходование                    = ТекущаяСтрока.АртикулОприходование;
	ТекущиеДанные.ТипНоменклатурыОприходование            = ТекущаяСтрока.ТипНоменклатурыОприходование;
	ТекущиеДанные.ТипИзмеряемойВеличиныОприходование      = ТекущаяСтрока.ТипИзмеряемойВеличиныОприходование;
	ТекущиеДанные.ХарактеристикаОприходование             = ТекущаяСтрока.НоменклатураОприходованиеХарактеристика;
	ТекущиеДанные.ХарактеристикиИспользуютсяОприходование = ТекущаяСтрока.ХарактеристикиИспользуются;
	ТекущиеДанные.УпаковкаОприходование                   = ТекущаяСтрока.Упаковка;
	ТекущиеДанные.СерияОприходование                      = ТекущаяСтрока.Серия;
	ТекущиеДанные.СтатусУказанияСерийОприходование        = ТекущаяСтрока.СтатусУказанияСерий;
	ТекущиеДанные.КоличествоОприходование                 = ТекущаяСтрока.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОприходованиеПриИзменении(Элемент)
	ТекущаяСтрока     = Новый Структура;
	ТекущиеДанные     = Элементы.Товары.ТекущиеДанные;
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение                   = ТекущиеДанные.СерияОприходование;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ТекущаяСтрока.Вставить("Серия",               ТекущиеДанные.СерияОприходование);
	ТекущаяСтрока.Вставить("СтатусУказанияСерий", ТекущиеДанные.СтатусУказанияСерийОприходование);
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение, ТекущаяСтрока);
	
	ТекущиеДанные.СерияОприходование               = ТекущаяСтрока.Серия;
	ТекущиеДанные.СтатусУказанияСерийОприходование = ТекущаяСтрока.СтатусУказанияСерий;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОприходованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Новый Структура;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока.Вставить("ИдентификаторТекущейСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ТекущаяСтрока.Вставить("Номенклатура",               ТекущиеДанные.НоменклатураОприходование);
	ТекущаяСтрока.Вставить("Характеристика",             ТекущиеДанные.ХарактеристикаОприходование);
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются", ТекущиеДанные.ХарактеристикиИспользуютсяОприходование);
	ТекущаяСтрока.Вставить("Назначение",                 ТекущиеДанные.НазначениеОприходование);
	ТекущаяСтрока.Вставить("Упаковка",                   ТекущиеДанные.УпаковкаОприходование);
	ТекущаяСтрока.Вставить("Серия",                      ТекущиеДанные.СерияОприходование);
	ТекущаяСтрока.Вставить("СтатусУказанияСерий",        ТекущиеДанные.СтатусУказанияСерийОприходование);
	ТекущаяСтрока.Вставить("Количество",                 ТекущиеДанные.КоличествоОприходование);
	ТекущаяСтрока.Вставить("КоличествоУпаковок",         ТекущиеДанные.КоличествоУпаковок);
	
	ОткрытьПодборСерийОприходование(Истина, Элемент.ТекстРедактирования, ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийОприходование(ЭтоСерияОприходование, Текст = "", ТекущиеДанные = Неопределено)
	
	РедактируетсяСерияОприходование = ЭтоСерияОприходование;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст, ТекущиеДанные) Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.';
								|en = 'An error occurred when attempting to specify series. No server call is required to specify series in this document.'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		Если РедактируетсяСерияОприходование Тогда
			
			ТекущиеДанные = Элементы.Товары.ДанныеСтроки(РезультатВыбора.ИдентификаторТекущейСтроки);
			
			ТекущаяСтрока = Новый Структура;
			ТекущаяСтрока.Вставить("Серия",               ТекущиеДанные.СерияОприходование);
			ТекущаяСтрока.Вставить("СтатусУказанияСерий", ТекущиеДанные.СтатусУказанияСерийОприходование);
			
			НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, РезультатВыбора, ТекущаяСтрока);
			
			ТекущиеДанные.СерияОприходование               = ТекущаяСтрока.Серия;
			ТекущиеДанные.СтатусУказанияСерийОприходование = ТекущаяСтрока.СтатусУказанияСерий;
			
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, РезультатВыбора);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Назначения.Форма.ФормаВыбора" Тогда
		
		Если Элементы.Товары.ТекущийЭлемент.Имя = "ТоварыНазначение" Тогда
			Элементы.Товары.ТекущиеДанные.Назначение = РезультатВыбора;
		ИначеЕсли Элементы.Товары.ТекущийЭлемент.Имя = "ТоварыНазначениеОприходование" Тогда
			Элементы.Товары.ТекущиеДанные.НазначениеОприходование = РезультатВыбора;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументФинУчета(Команда)
	Если Объект.Ссылка.Пустая() и Не Объект.Проведен  и Объект.Статус <> ПредопределенноеЗначение("Перечисление.Рин1_СтатусыЗаявокОтклонений.Согласован") Тогда 
		Сообщить("Для создания связанных документов необходимо провести текущий документ в статусе Согласован");
	ИначеЕсли Объект.Статус <> ПредопределенноеЗначение("Перечисление.Рин1_СтатусыЗаявокОтклонений.Согласован") Тогда
		Сообщить("Создание документа фин.учета возможно только в статусе Согласован");
	
	ИначеЕсли  ЗначениеЗаполнено(Объект.ОтклоненияПоФинУчету) Тогда 
		Сообщить("Документ отражения в финансовом учете уже создан");
	ИначеЕсли Объект.Операция <> ПредопределенноеЗначение("Перечисление.Рин1_ОперацииОтраженияВУчете.ПоСкладу") Тогда
	   
		Если Объект.ВидОтклонения = ПредопределенноеЗначение("Перечисление.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Недостача") Тогда 
		   //++Шерстюк Ю.Ю. 16.02.2021 по задаче 5519 нужно добавить реквизиты Статья расходов, Аналитика и Подразделение, но
			//в расширении нет возможности указать у аналитики расходов тип Характеристика.СтатьяРасходов ошибка платформы 8.3.18.1334
			//поэтому меняем логику, открываем документ, чтобы пользователь заполнил самостоятельно
			//пСсылка = СоздатьСписаниеНедостачиНаСервере();
		   //Оповестить("Запись_СписаниеНедостачи", , пСсылка);
		   пФорма = ПолучитьФорму("Документ.СписаниеНедостачТоваров.ФормаОбъекта");
		   пДанныеФормы = пФорма.Объект;
		   пДанныеФормы = ЗаполнитьсписаниеНедостачиНаСервере(пДанныеФормы);
		   КопироватьДанныеФормы(пДанныеФормы,пФорма.Объект);
		   пФорма.Открыть();
		    //--Шерстюк Ю.Ю.
	   ИначеЕсли Объект.ВидОтклонения = ПредопределенноеЗначение("Перечисление.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Излишек") Тогда 
		   пФорма = ПолучитьФорму("Документ.ОприходованиеИзлишковТоваров.ФормаОбъекта");
		   пДанныеФормы = пФорма.Объект;
		   пДанныеФормы = ЗаполнитьОприходованиеИзлишковНаСервере(пДанныеФормы);
		   КопироватьДанныеФормы(пДанныеФормы,пФорма.Объект);
		   пФорма.Открыть();
	    ИначеЕсли Объект.ВидОтклонения = ПредопределенноеЗначение("Перечисление.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Пересортица") Тогда 
		   пФорма = ПолучитьФорму("Документ.ПересортицаТоваров.ФормаОбъекта");
		   пДанныеФормы = пФорма.Объект;
		   пДанныеФормы = ЗаполнитьОприходованиеИзлишковНаСервере(пДанныеФормы);
		   КопироватьДанныеФормы(пДанныеФормы,пФорма.Объект);
		   пФорма.Открыть();
	    КонецЕсли;
   	Иначе
	     Сообщить("По выбранной операции не требуется создание документов отклонений по финансовому учету...");

	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаСервере
Функция ЗаполнитьсписаниеНедостачиНаСервере(пДанныеФормы)
	пДанныеФормы.Склад = Объект.Склад;
	пДанныеФормы.Организация = Объект.Организация;
	пДанныеФормы.Комментарий = "Создан автоматически из документа " + Строка(Объект.Ссылка);
	пДанныеФормы.Ответственный = Пользователи.ТекущийПользователь();
	пДанныеФормы.Товары.Загрузить(Объект.Товары.Выгрузить());
	
	Возврат пДанныеФормы;

КонецФункции

&НаСервере
Функция ЗаполнитьОприходованиеИзлишковНаСервере(пДанныеФормы)
	пДанныеФормы.Склад = Объект.Склад;
	пДанныеФормы.Организация = Объект.Организация;
	пДанныеФормы.Комментарий = "Создан автоматически из документа " + Строка(Объект.Ссылка);
	пДанныеФормы.Ответственный = Пользователи.ТекущийПользователь();
	пДанныеФормы.Товары.Загрузить(Объект.Товары.Выгрузить());
	Если Объект.ВидОтклонения = Перечисления.Рин1_ВидОтклоненияИзлишекНедостачаПересортица.Пересортица Тогда 
		Для Каждого Стр из пДанныеФормы.Товары Цикл
			Стр.ВедетсяУчетПоГТД = Стр.НоменклатураОприходование.ВестиУчетПоГТД;
		КонецЦикла;
	Иначе 
		 Для Каждого Стр из пДанныеФормы.Товары Цикл
			Стр.ВедетсяУчетПоГТД = Стр.Номенклатура.ВестиУчетПоГТД;
		КонецЦикла;
	КонецЕсли;
	Возврат пДанныеФормы;
КонецФункции

&НаСервере
Функция СоздатьСписаниеНедостачиНаСервере()
		пНовыйДокумент = Документы.СписаниеНедостачТоваров.СоздатьДокумент();
		пНовыйДокумент.Организация = Объект.Организация;
		пНовыйДокумент.Склад = Объект.Склад;
		пНовыйДокумент.Дата = ТекущаяДата();
		пНовыйДокумент.Комментарий = "Создан автоматическип из документа " + Строка(Объект.Ссылка);
		пНовыйДокумент.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
		пНовыйДокумент.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		пНовыйДокумент.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("00-000004");
		пНовыйДокумент.Ответственный = Пользователи.ТекущийПользователь();
		пНовыйДокумент.Товары.Загрузить(Объект.Товары.Выгрузить());
		пНовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Возврат пНовыйДокумент.Ссылка;
КонецФункции

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.Рин1_СтатусыЗаявокОтклонений.Согласован") Тогда
		Элементы.Товары.Доступность = Ложь;
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Товары",Объект.Товары));

		Если Не РазрешеноМенятьСтатус() Тогда 
			 Объект.Статус = ПредопределенноеЗначение("Перечисление.Рин1_СтатусыЗаявокОтклонений.НеСогласовано");
			 Сообщить("Нет прав на изменение статуса документа");
		 Иначе
			  ИзменитьСогласующегоНаСервере();
		  КонецЕсли;
	  Иначе
		  Элементы.Товары.Доступность = Истина;
          УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Товары",Объект.Товары));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьСогласующегоНаСервере()
	Если Не ЗначениеЗаполнено(Объект.Согласовал) Тогда 
		Объект.Согласовал = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
	
&НаСервере
Функция РазрешеноМенятьСтатус()
	Если РольДоступна("ДобавлениеИзменениеПриобретенийТоваровУслугВозвратовПоставщикам") Тогда 
		Возврат Истина;
	ИначеЕсли РольДоступна("ПолныеПрава") Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
			ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПровестиНаСервере(Провести = Истина)
	пДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
	Если Провести или пДокументОбъект.Проведен Тогда
		пДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		пДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
			ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
			ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидОтклоненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.ОрдерОтклонений) или ЗначениеЗаполнено(Объект.ОтклоненияПоФинУчету) Тогда 
		СтандартнаяОбработка = Ложь;
		Сообщить("По заявке уже созданы связанные документы");
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.Рин1_СтатусыЗаявокОтклонений.Согласован") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьОрдер(Команда)
	Если ЗначениеЗаполнено(Объект.ОрдерОтклонений) Тогда
		ПроведениеОтменено = ОтменитьПроведение(Объект.ОрдерОтклонений);
		Если ПроведениеОтменено Тогда 
			ОбновитьНаСервереОрдер(ПредопределенноеЗначение("Документ.ОрдерНаОтражениеИзлишковТоваров.ПустаяСсылка"));
			ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
		Иначе
			 Сообщить("В процессе отмены проведения ордера возникли ошибки, отмена не выполнена");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОтменитьПроведение(пОбъект)
	 пДокументОбъект = пОбъект.Ссылка.ПолучитьОбъект();
	 Попытка
	 	пДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура УдалитьДокументФинУчета(Команда)
	Если ЗначениеЗаполнено(Объект.ОтклоненияПоФинУчету) Тогда
		ПроведениеОтменено = ОтменитьПроведение(Объект.ОтклоненияПоФинУчету);
		Если ПроведениеОтменено Тогда 
			ОбновитьНаСервереФинУчет(ПредопределенноеЗначение("Документ.ОприходованиеИзлишковТоваров.ПустаяСсылка"));
			ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
		Иначе
			 Сообщить("В процессе отмены проведения документа фин.учета возникли ошибки, отмена не выполнена");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


// + [Rineco], [Киселев А.] [28.07.2021] 
// Задача: [№ 13085], [#ЗаявкаНаОтражение]

&НаКлиенте
Процедура ИзменитьДокументФинУчета(Команда)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеНедостачТоваров"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПересортицаТоваров"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОприходованиеИзлишковТоваров"));
	СтрокаКолонок = "Номенклатура, Характеристика, Назначение, Количество"; 
	ВвестиЗначениеДокумента(МассивТипов,"ОтклоненияПоФинУчету",СтрокаКолонок);
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьОрдер(Команда)
	 
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ОрдерНаОтражениеИзлишковТоваров"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОрдерНаОтражениеПересортицыТоваров"));
	СтрокаКолонок = "Номенклатура, Характеристика, Назначение, Упаковка, Количество, КоличествоУпаковок";
	ВвестиЗначениеДокумента(МассивТипов,"ОрдерОтклонений",СтрокаКолонок);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЗначениеДокумента(МассивТипов,ИмяРеквизита,СтрокаКолонок)
	
	Перем ВведенноеЗначение;
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяРеквизита",ИмяРеквизита);
	ПараметрыОповещения.Вставить("СтрокаКолонок",СтрокаКолонок);
	Оповещение = Новый ОписаниеОповещения("ПослеВводаЗначенияОрдер",ЭтотОбъект,ПараметрыОповещения);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	 ПоказатьВводЗначения(
        Оповещение,
        ВведенноеЗначение,
        "Введите значение",
        ОписаниеТипов
    );

	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначенияОрдер(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТабличныеЧастиСовпадают = ТабличныеЧастиСовпадают(Результат,Параметры.СтрокаКолонок);
		
		Если ТабличныеЧастиСовпадают Тогда 			
			Объект[Параметры.ИмяРеквизита] = Результат;
			Модифицированность = Истина;
		Иначе 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Товары в ордере отличаются от текущих");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТабличныеЧастиСовпадают(Результат,СтрокаКолонок)
	
	Возврат ТабличныеЧастиСовпадаютСервер(Результат,СтрокаКолонок);
		
КонецФункции

&НаСервере
Функция ТабличныеЧастиСовпадаютСервер(Результат,СтрокаКолонок)
		
		ТаблицаЗаявкаНаОтражение = Объект.Товары.Выгрузить(,СтрокаКолонок);
		ТаблицаОрдера = Результат.Товары.Выгрузить(,СтрокаКолонок);
	
	Возврат ОбщегоНазначения.ДанныеСовпадают(ТаблицаЗаявкаНаОтражение,ТаблицаОрдера);
	
КонецФункции


// - [Rineco], [Киселев А.] [28.07.2021]





