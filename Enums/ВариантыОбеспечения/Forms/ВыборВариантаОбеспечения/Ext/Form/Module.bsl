
&НаСервере
Процедура Рин1_ПриСозданииНаСервереВместо(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.Обеспечивать.Доступность = Не Параметры.ТолькоОбособленно;
	
	ЗаполнитьСписокДоступныхВариантовОбеспечения();
	
	СтрокаОбособлена = Параметры.ТекущийВариант.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно")
	Или Параметры.ТекущийВариант.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно");
	
	КоличествоОтгружено = Параметры.КоличествоОформлено;
	//bercut190220 обнаружена ошибка при распределении, см кодстроки
	КоличествоТребуется = Параметры.ТекущийВариант.Количество - КоличествоОтгружено;
	
	ФорматЧислоНоль = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Все)';
	|en = '%1 (All)'"),
	Формат(КоличествоТребуется, "ЧДЦ=3; ЧН=0.000"));
	Элементы.Количество.Формат = "ЧН=" + "'" + ФорматЧислоНоль + "'";
	Элементы.КоличествоОбособленно.Формат = "ЧН=" + "'" + ФорматЧислоНоль + "'";
	
	Если Не ЗначениеЗаполнено(Упаковка) Тогда
		ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Отбор.Номенклатура, "ЕдиницаИзмерения");
		ПредставлениеЕдиницыИзмерения = Строка(ЕдиницаИзмерения);
	Иначе
		ПредставлениеЕдиницыИзмерения = Строка(Упаковка);
	КонецЕсли;
	
	// Заполнение таблицы отборов по параметрам, переданным в форму.
	Отбор = ТаблицаАналитикиПотребности(Параметры);
	
	// Корректировочная таблица календаря обеспечения.
	Корректировка = ПолучитьИзВременногоХранилища(Параметры.АдресКорректировки);
	УдалитьИзВременногоХранилища(Параметры.АдресКорректировки);
	
	ДоступныеОстатки = ОбеспечениеСервер.ДоступныеОстатки(Отбор, Корректировка);
	ПлановыеПоставки = ОбеспечениеСервер.ПлановыеПоставки(Отбор);
	
	ТипНоменклатуры = Параметры.Отбор.ТипНоменклатуры;
	КоличествоОтгрузитьОбособленно = 0;
	ОбеспечениеСверхДопустимо = ПолучитьФункциональнуюОпцию("РазрешитьОбособлениеТоваровСверхПотребности");
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга И КоличествоТребуется > 0 Тогда
		
		ЗагрузитьДействияУслуг(СписокВариантов, Действия);
		
	ИначеЕсли КоличествоТребуется > 0 Тогда
		
		// Заполнение обособленных действий
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			
			КоличествоПодНазначение = ЗагрузитьДействияРабот(СписокВариантов,
			ДействияОбособленные, ДоступныеОстатки.Работы, КоличествоТребуется);
			
			ЗагрузитьПлановыеПоставки(СписокВариантов,
			ДействияОбособленные, ПлановыеПоставки, Перечисления.ВариантыОбеспечения.Обособленно);
			
		ИначеЕсли ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			
			Если Параметры.ОтгружатьЕслиПоступилоПодНазначениеПолностью Тогда
				ЭлементОтгрузить = СписокВариантов.НайтиПоЗначению(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно);
				Если ЭлементОтгрузить <> Неопределено 
					И ДоступныеОстатки.ТоварыОбособленные.Итог("Количество") < КоличествоТребуется Тогда
					СписокВариантов.Удалить(ЭлементОтгрузить);
				КонецЕсли;
			КонецЕсли;
			
			КоличествоПодНазначение = ЗагрузитьДействияОбособленные(СписокВариантов,
			ДействияОбособленные, ДоступныеОстатки.ТоварыОбособленные, КоличествоОтгрузитьОбособленно);
			
			Если НЕ Параметры.ОтгружатьЕслиПоступилоПодНазначениеПолностью
				ИЛИ КоличествоОтгружено = 0 Тогда
				
				ЗагрузитьПлановыеПоставки(СписокВариантов,
				ДействияОбособленные, ПлановыеПоставки, Перечисления.ВариантыОбеспечения.Обособленно);
				
			КонецЕсли; 
			
		Иначе
			КоличествоПодНазначение = 0;
		КонецЕсли;
		
		// Заполнение необособленных действий
		Если КоличествоПодНазначение < КоличествоТребуется Или ОбеспечениеСверхДопустимо Тогда
			
			Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				Если СписокВариантов.НайтиПоЗначению(Перечисления.ВариантыОбеспечения.Отгрузить) <> Неопределено Тогда
					НоваяСтрока = Действия.Добавить();
					НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
					НоваяСтрока.Количество = КоличествоТребуется - КоличествоПодНазначение;
				КонецЕсли;
				
			Иначе
				
				ЗагрузитьДействия(СписокВариантов, Действия, ДоступныеОстатки.Товары);
				
			КонецЕсли;
			
			ЗагрузитьПлановыеПоставки(СписокВариантов, Действия, ПлановыеПоставки, Перечисления.ВариантыОбеспечения.Требуется);
			
			Если КоличествоПодНазначение > 0 И Не ОбеспечениеСверхДопустимо Тогда
				Для Каждого Строка Из Действия Цикл
					Если Строка.Количество = 0 Или Строка.Количество > КоличествоТребуется - КоличествоПодНазначение Тогда
						Строка.КоличествоДоступно = Строка.Количество;
						Строка.Количество = КоличествоТребуется - КоличествоПодНазначение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СписокВариантов.НайтиПоЗначению(Перечисления.ВариантыОбеспечения.НеТребуется) <> Неопределено Тогда
				
				НоваяСтрока = Действия.Добавить();
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
				НоваяСтрока.Количество = КоличествоТребуется - ?(ОбеспечениеСверхДопустимо, 0, КоличествоПодНазначение);
				
				НоваяСтрока.Склад = Параметры.ТекущийВариант.Склад;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаОбособлена Или (КоличествоПодНазначение > 0 И Не ОбеспечениеСверхДопустимо) Тогда
		
		ВариантПоУмолчанию = Перечисления.ВариантыОбеспечения.Обособленно;
		
	ИначеЕсли СписокВариантов.НайтиПоЗначению(Перечисления.ВариантыОбеспечения.Требуется) <> Неопределено Тогда
		
		ВариантПоУмолчанию = Перечисления.ВариантыОбеспечения.Требуется;
		
	Иначе
		
		ВариантПоУмолчанию = Перечисления.ВариантыОбеспечения.НеТребуется;
		
	КонецЕсли;
	
	ТекущийВариант = Параметры.ТекущийВариант;
	ИсходнаяСтрокаОбособлена = ТекущийВариант.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
	Или ТекущийВариант.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	
	Таблица = ?(ИсходнаяСтрокаОбособлена, ДействияОбособленные, Действия);
	ИдентификаторСтроки = НайтиИдентификаторСтроки(Таблица, ТекущийВариант.ВариантОбеспечения, ТекущийВариант.ДатаДоступности);
	Если ИдентификаторСтроки = Неопределено И Таблица.Количество() > 0 Тогда
		ИдентификаторСтроки = Таблица[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Для Каждого Строка Из Действия Цикл
		ОформитьСтроку(Строка, КоличествоТребуется, СписокВариантов);
	КонецЦикла;
	
	Для Каждого Строка Из ДействияОбособленные Цикл
		ОформитьСтроку(Строка, КоличествоТребуется, СписокВариантов);
	КонецЦикла;
	
	Действия.Сортировать("ПорядокСортировки, ДатаДоступности, Склад");
	ДействияОбособленные.Сортировать("ПорядокСортировки, ДатаДоступности, Склад");
	
	ТаблицаФормы = Элементы[?(ИсходнаяСтрокаОбособлена, "ДействияОбособленные", "Действия")];
	ТаблицаФормы.ТекущаяСтрока = ИдентификаторСтроки;
	
	//bercut120520
	Если СтрНайти(НРег(Строка(Параметры.ТекущийВариант.ВариантОбеспечения)),"обособленно") = 0 Тогда
		Обеспечивать = НСтр("ru = 'Не обособленно';
		|en = 'Not separately'");
	Иначе 		
		Обеспечивать = ?(ИсходнаяСтрокаОбособлена Или КоличествоПодНазначение > 0,
		НСтр("ru = 'Обособленно';
		|en = 'Separately'"), НСтр("ru = 'Не обособленно';
		|en = 'Not separately'"));		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.Обеспечивать.Видимость = Ложь;
	ИначеЕсли ДействияОбособленные.Количество() = 0 Тогда
		Элементы.Обеспечивать.Доступность = Ложь;
	КонецЕсли;
	
	Если КоличествоПодНазначение >= КоличествоТребуется И Не ОбеспечениеСверхДопустимо Тогда
		Элементы.Обеспечивать.Доступность = Ложь;
	КонецЕсли;
	
	СкладВидимость = Справочники.Склады.ЭтоГруппа(Параметры.ГруппаСкладов);
	Элементы.Склад.Видимость = СкладВидимость;
	Элементы.СкладОбособленно.Видимость = СкладВидимость;
	
	Элементы.СтраницыДействия.ТекущаяСтраница = ?(Обеспечивать = "Обособленно",
	Элементы.СтраницаДействияОбособленные, Элементы.СтраницаДействия);
	
	ХарактеристикаТекст = ?(ЗначениеЗаполнено(Параметры.Отбор.Характеристика), ", " + Параметры.Отбор.Характеристика, "");
	ШаблонЗаголовка = НСтр("ru = 'Выбор действия (%1%2)';
	|en = 'Select an action (%1%2)'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
	Параметры.Отбор.Номенклатура, ХарактеристикаТекст);
	
	Элементы.НадписьЗаказаноОтгружено.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Всего заказано - %1 %2. Отгружено - %3 %4.';
	|en = 'Total ordered - %1 %2. Shipped - %3 %4.'"),
	КоличествоТребуется + КоличествоОтгружено, ЕдиницаИзмерения,
	КоличествоОтгружено, ЕдиницаИзмерения);
	
	
	Если КоличествоТребуется <= 0 Тогда
		Элементы.ГруппаВыбранноеДействие.Видимость = Ложь;
		Элементы.Выбрать.Доступность = Ложь;
	КонецЕсли;
	
//{{20200903 ГлазуновДВ
	ИдентификаторВыбраннойСтроки = Параметры.ТекущийВариант.Идентификатор;
	АдресаВХранилище = Новый Структура("АдресКорректировки, АдресТаблицыПодобраноРанее"); // первый параметр передается из формы заказа, второй из формы подбора
	ЗаполнитьЗначенияСвойств(АдресаВХранилище, Параметры);
	ОстатокОбособленно = 0;
////Заполняем найденными ЗаказамиПоставщику "ДоступныеОстатки", если заказы созданы, но либо не Проведены, либо не Подтверждены.
//		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
//	// Данный фрагмент построен конструктором.
//	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	&ДАТАПоступления КАК ДатаДоступности,
//		|	ЗаказПоставщикуТовары.КоличествоУпаковок КАК Количество,
//		|	ЗаказПоставщикуТовары.Назначение КАК Назначение,
//		|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
//		|	ЗаказПоставщикуТовары.Склад КАК Склад,
//		|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
//		|	ЗаказПоставщикуТовары.Ссылка.Проведен КАК Проведен,
//		|	ЗаказПоставщикуТовары.Ссылка.Статус КАК Статус
//		|ИЗ
//		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
//		|ГДЕ
//		|	(ЗаказПоставщикуТовары.Ссылка.Проведен = &Проведен
//		|			ИЛИ ЗаказПоставщикуТовары.Ссылка.Статус = &Статус1
//		|			ИЛИ ЗаказПоставщикуТовары.Ссылка.Статус = &Статус2)
//		|	И ЗаказПоставщикуТовары.Номенклатура = &Номенклатура
//		|	И ЗаказПоставщикуТовары.Характеристика = &Характеристика
//		|	И ЗаказПоставщикуТовары.Назначение = &Назначение
//		|	И ЗаказПоставщикуТовары.Склад = &Склад";
//	
//	Запрос.УстановитьПараметр("ДАТАПоступления", ТекущаяДатаСеанса());
//	Запрос.УстановитьПараметр("Проведен", Ложь);
//	Запрос.УстановитьПараметр("Номенклатура", Параметры.Отбор.Номенклатура);
//	Запрос.УстановитьПараметр("Характеристика", Параметры.Отбор.Характеристика);
//	Запрос.УстановитьПараметр("Назначение", Параметры.Отбор.Назначение);
//	Запрос.УстановитьПараметр("Склад", Параметры.Отбор.Склад);
//	Запрос.УстановитьПараметр("Статус1", Перечисления.СтатусыЗаказовПоставщикам.НеСогласован);
//	Запрос.УстановитьПараметр("Статус2", Перечисления.СтатусыЗаказовПоставщикам.Согласован);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		// Вставить обработку выборки ВыборкаДетальныеЗаписи
//		Если ДоступныеОстатки.ТоварыОбособленные.Количество() = 0 Тогда
//			СтрОстатков = ДоступныеОстатки.ТоварыОбособленные.Добавить();
//			ЗаполнитьЗначенияСвойств(СтрОстатков, ВыборкаДетальныеЗаписи);
//		Иначе
//			ДоступныеОстатки.ТоварыОбособленные[0].Количество = ДоступныеОстатки.ТоварыОбособленные[0].Количество + ВыборкаДетальныеЗаписи.Количество;
//		КонецЕсли;
//	КонецЦикла;
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Для Каждого СтрокаОстаток Из ДоступныеОстатки.ТоварыОбособленные Цикл
		//Если СтрокаОстаток.ДатаДоступности = Дата('00010101') И СтрокаОстаток.Количество > 0 Тогда
		Если СтрокаОстаток.Количество > 0 Тогда
			ОстатокОбособленно = СтрокаОстаток.Количество;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//А_ТаблицаПодобраноРанее = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыПодобраноРанее);
//}}20200903 ГлазуновДВ

	//++Шерстюк Ю.Ю. 19.05.2021 Задача 8127
	  Рин1_ОстатокОбособленоНеПодтверждено = ПолучитьКоличествоНеподтвержденных(Параметры.Отбор);
	//--Шерстюк Ю.Ю.
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоНеподтвержденных(ПараметрыОтбор)
//++Шерстюк Ю.Ю. 19.05.2021 Задача 8127
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ГрафикПоступленияТоваровОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ГрафикПоступленияТоваровОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ГрафикПоступленияТоваровОстаткиИОбороты.Склад КАК Склад,
	|	ГрафикПоступленияТоваровОстаткиИОбороты.Назначение КАК Назначение,
	|	ГрафикПоступленияТоваровОстаткиИОбороты.КоличествоПодЗаказСНеподтвержденнымиКонечныйОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ГрафикПоступленияТоваров.ОстаткиИОбороты(
	|			,
	|			,
	|			,
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Склад = &Склад
	|				И Назначение = &Назначение) КАК ГрафикПоступленияТоваровОстаткиИОбороты");
	Запрос.УстановитьПараметр("Номенклатура",ПараметрыОтбор.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",ПараметрыОтбор.Характеристика);
	Запрос.УстановитьПараметр("Склад",ПараметрыОтбор.Склад);
	Запрос.УстановитьПараметр("Назначение",ПараметрыОтбор.Назначение);
	тзГрафикНеподтвержденных = Запрос.Выполнить().Выгрузить();
	Если тзГрафикНеподтвержденных.Количество() > 0 Тогда 
		Возврат тзГрафикНеподтвержденных[0].Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
//--Шерстюк Ю.Ю.	
КонецФункции

&НаКлиенте
&После("ОбновитьИнформациюПоСтроке")
Процедура Рин1_ОбновитьИнформациюПоСтроке()
	
	Если не Обеспечивать = "Обособленно" Тогда
		Действие3 = ПолучитьОбособленныеОстатки();
	Иначе 
		Действие3 = "";
	КонецЕсли;	
	
	Если Действие3 = "" Тогда
		Элементы.ГруппаДействие3.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаДействие3.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбособленныеОстатки()
	
	Если ДействияОбособленные.Количество() = 0 Тогда
		Возврат "";
	Иначе
		КоличествоДоступно = 0;
		Для каждого Строка Из ДействияОбособленные Цикл
			Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				  КоличествоДоступно = Строка.КоличествоДоступно;
			КонецЕсли;
		КонецЦикла;
		Возврат ?(КоличествоДоступно = 0,"",Строка(КоличествоДоступно) + " " + Строка(ЕдиницаИзмерения) + ", Отгрузить обособленно");
	КонецЕсли;
	
КонецФункции // ПолучитьОбособленныеОстатки()

//{{20200903 ГлазуновДВ
&НаКлиенте
&Вместо("ОбеспечиватьПриИзменении")
Процедура Рин1_ОбеспечиватьПриИзменении(Элемент)
	// Вставить содержимое метода.
	//ПродолжитьВызов(Элемент);
//{{20200903 ГлазуновДВ
	Отказ = ПолучитьИзВременногоХранилищаТаблицу(АдресаВХранилище.АдресТаблицыПодобраноРанее);
//}}20200903 ГлазуновДВ
	
	ПриПереключенииОбеспечивать();
	ОбновитьНадписьОбеспечено();
	Если Обеспечивать <> "Обособленно" Тогда

//{{20200903 ГлазуновДВ
		Если Отказ Тогда
			Обеспечивать = "Обособленно";
			ПриПереключенииОбеспечивать();
			ОбновитьНадписьОбеспечено();
			//ОбновитьИнформациюПоСтроке();
			Сообщить("Данная строка уже обеспечивается обособленно, переключение невозможно.");
			Возврат;
		КонецЕсли;
//}}20200903 ГлазуновДВ
		
		ВыбраннаяСтрока = Элементы.Действия.ТекущиеДанные;
	
		Если ВыбраннаяСтрока = Неопределено Тогда
			Элементы.Действия.ТекущаяСтрока = Действия[Действия.Количество() - 1].ПолучитьИдентификатор();
			ВыбраннаяСтрока = Элементы.Действия.ТекущиеДанные;
		Иначе
			ОбновитьИнформациюПоСтроке();
		КонецЕсли;

	Иначе
		ОбновитьИнформациюПоСтроке();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьИзВременногоХранилищаТаблицу(АдресХранилищаСтрок)
	ТаблицаПодобраноРанее = ПолучитьИзВременногоХранилища(АдресХранилищаСтрок);
	//УдалитьИзВременногоХранилища(АдресХранилищаСтрок);
	Если СтрНайти(Параметры.ТекущийВариант.ВариантОбеспечения,"обособленно") > 0 Тогда
		//Параметры.ТекущийВариант.ВариантОбеспечения
		
//найдем строки документа, которые надо суммировать
		СуммаЗаказанного = 0;
		Номерстроки = 0;
		Для Каждого СтрокаДок Из ТаблицаПодобраноРанее Цикл
			
			//Номерстроки = Номерстроки + 1;
			Если СтрокаДок.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
			//	Если Номерстроки + 1 = СтрокаДок.НомерСтроки Тогда
				Если ИдентификаторВыбраннойСтроки < СтрокаДок.Идентификатор Тогда
					Прервать;
				КонецЕсли;
				СуммаЗаказанного = СуммаЗаказанного + СтрокаДок.Количество;
			КонецЕсли;
		КонецЦикла;
		
		//СуммаЗаказанного = СуммаЗаказанного + Параметры.ТекущийВариант.Количество;
		//++Шерстюк Ю.Ю. 19.05.2021 Задача 8127 проверять нужно не тольно подтвержденные, но и согласованные заказы
		//Если Не (ОстатокОбособленно - СуммаЗаказанного - Параметры.ТекущийВариант.Количество < 0)
		// Или (ОстатокОбособленно - СуммаЗаказанного > 0 И Цел((ОстатокОбособленно - СуммаЗаказанного)/Параметры.ТекущийВариант.Количество) = 0) Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Если Не (ОстатокОбособленно + Рин1_ОстатокОбособленоНеПодтверждено - СуммаЗаказанного - Параметры.ТекущийВариант.Количество < 0)
		 Или (ОстатокОбособленно + Рин1_ОстатокОбособленоНеПодтверждено - СуммаЗаказанного > 0 И Цел((ОстатокОбособленно + Рин1_ОстатокОбособленоНеПодтверждено - СуммаЗаказанного)/Параметры.ТекущийВариант.Количество) = 0) Тогда
			Возврат Истина;
		КонецЕсли;

		//--Шерстюк Ю.Ю.
	КонецЕсли;
	Возврат Ложь;
КонецФункции
//}}20200903 ГлазуновДВ
