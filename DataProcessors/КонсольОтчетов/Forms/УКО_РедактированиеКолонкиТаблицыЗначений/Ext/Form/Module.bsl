#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Режим = "Перечисление.УКО_РежимРедактированияКолонкиТаблицыЗначений.Добавление" Тогда
		ЗаголовокФормы = НСтр("ru = 'Добавление колонки'; en = 'Adding a column'");
	ИначеЕсли Параметры.Режим = "Перечисление.УКО_РежимРедактированияКолонкиТаблицыЗначений.Изменение" Тогда		
		ЗаголовокФормы = НСтр("ru = 'Редактирование колонки'; en = 'Editing a column'");;
	КонецЕсли;
	УКО_ФормыКлиентСервер_Заголовок(ЭтаФорма, ЗаголовокФормы);

	Идентификатор = Параметры.Идентификатор;
	Тип = Параметры.ОписаниеТипов;
	Индексировать = Параметры.Индексировать;
	
	ЗанятыеИдентификаторы.ЗагрузитьЗначения(Параметры.ЗанятыеИдентификаторы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИдентификаторПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ПриИзмененииДанныхПослеОжидания", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ПриИзмененииДанныхПослеОжидания", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ОшибкиИдентификатора = УКО_СтрокиКлиентСервер_ПроверкаИдентификатора(Идентификатор, ЗанятыеИдентификаторы.ВыгрузитьЗначения());
	ОшибкиТипа = УКО_СтрокиКлиентСервер_ПроверкаОписанияТипов(Тип);
	
	Если Не ЗначениеЗаполнено(ОшибкиИдентификатора) 
		И Не ЗначениеЗаполнено(ОшибкиТипа) Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Имя", Идентификатор);
		Результат.Вставить("Тип", Тип);
		Результат.Вставить("Индексировать", Индексировать);
		
		Закрыть(Результат);
		
	Иначе
		
		Если ЗначениеЗаполнено(ОшибкиИдентификатора) Тогда
			ТекущийЭлемент = Элементы.Идентификатор;
		ИначеЕсли ЗначениеЗаполнено(ОшибкиТипа) Тогда
			ТекущийЭлемент = Элементы.Тип;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьЭлементыФормы()
	
	ОшибкиИдентификатора = УКО_СтрокиКлиентСервер_ПроверкаИдентификатора(Идентификатор, ЗанятыеИдентификаторы.ВыгрузитьЗначения());
	ОшибкиТипа = УКО_СтрокиКлиентСервер_ПроверкаОписанияТипов(Тип);
	
	ОшибкиКолонки = ОшибкиИдентификатора;
	Если ЗначениеЗаполнено(ОшибкиТипа) Тогда
		ОшибкиКолонки.Добавить(ОшибкиТипа[0]);
	КонецЕсли;
	
	Ошибки = СтрСоединить(ОшибкиКолонки, Символы.ПС);
	Элементы.Ошибки.Высота = СтрЧислоСтрок(Ошибки);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПриИзмененииДанныхПослеОжидания()

	ОбновитьЭлементыФормы();

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет идентификатор
//
// Параметры:
//   Идентификатор - Строка - Идентификатор
//   ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//
// Возвращаемое значение:
//   Массив - Ошибки проверки
//
Функция УКО_СтрокиКлиентСервер_ПроверкаИдентификатора(Идентификатор, ЗанятыеИдентификаторы = Неопределено) Экспорт
	
	Ошибки = Новый Массив;
	
	Если ЗанятыеИдентификаторы = Неопределено Тогда
		ЗанятыеИдентификаторы = Новый Массив;
	КонецЕсли;
	
	КорректныйИдентификатор = УКО_СтрокиКлиентСервер_ЭтоКорректныйИдентификатор(Идентификатор);
	Если Не КорректныйИдентификатор Тогда
		Ошибки.Добавить(НСтр("ru = 'Неверное имя.
                              |Имя должно состоять из одного слова, начинаться с буквы или ""_""
                              |и не содержать специальных символов кроме ""_""'; en = 'Invalid name.
                              |The name must consist of one word, begin with a letter or ""_""
                              |and do not contain special characters except ""_""'"));
	КонецЕсли;
	
	ИдентификаторИспользуется = (ЗанятыеИдентификаторы.Найти(Идентификатор) <> Неопределено);
	Если ИдентификаторИспользуется Тогда
		Ошибки.Добавить(НСтр("ru = 'Идентификатор используется'; en = 'ID used'"));
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет описание типов
//
// Параметры:
//   Тип - ОписаниеТипов - Описание типа
//
// Возвращаемое значение:
//   Массив - Ошибки проверки
//
Функция УКО_СтрокиКлиентСервер_ПроверкаОписанияТипов(Тип) Экспорт
	
	Ошибки = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Тип) Тогда
		Ошибки.Добавить(НСтр("ru = 'Не заполнен тип'; en = 'Type not filled'"));
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЦифры()
	
	Возврат "0123456789";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет является ли строка корректным идентификатором, строка вида СуммаКонтрагента, _Идентификатор
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, идентификатор корректный
//
Функция УКО_СтрокиКлиентСервер_ЭтоКорректныйИдентификатор(Строка) Экспорт
	
	ПервыйСимволСимволы = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	ПоследующиеСимволы = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + УКО_СтрокиКлиентСервер_НаборСимволовЦифры() + "_";
	 
	Если ПустаяСтрока(Строка) ИЛИ Не СтрНайти(ПервыйСимволСимволы, Лев(Строка, 1)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Сч = 2 По СтрДлина(Строка) Цикл 
		
		Символ = Сред(Строка, Сч, 1);
		
		Если Не СтрНайти(ПоследующиеСимволы, Символ) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Обновляет заголовок формы
//
// Параметры:
//  Форма - Форма - Форма
//  Заголовок - Строка - Заголовок формы
//  Дополнение - Булево - Дополнять заголовок названием расширения
//
Процедура УКО_ФормыКлиентСервер_Заголовок(Форма, Заголовок, Дополнение = Ложь) Экспорт
	
	НовыйЗаголовок = Заголовок;
	
	Если Дополнение Тогда
		НовыйЗаголовок = НовыйЗаголовок + " : " + УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения();
	КонецЕсли;
	
	Форма.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы()
	
	НаборСимволов = "QWERTYUIOPASDFGHJKLZXCVBNM";
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает набор символов букв русского и английского языков
// Возвращаемое значение:
//   Строка - Набор символов букв
Функция УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы()
	
	НаборСимволовРусскиеБуквы = "ЙЦУКЕ" + Символ(1025) + "НГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"; //1025 - Код символа буквы ежик, елка
	НаборСимволовРусскиеБуквы = НаборСимволовРусскиеБуквы + НРег(НаборСимволовРусскиеБуквы);
	
	Возврат НаборСимволовРусскиеБуквы + УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы();
	
КонецФункции
