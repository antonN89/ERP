
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапроса()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеСостоянийСотрудников.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|ГДЕ
	|	НЕ ДанныеСостоянийСотрудников.Состояние = &СостояниеРабота
	|	И НЕ ДанныеСостоянийСотрудников.Состояние = &СостояниеУволен
	|	И ДанныеСостоянийСотрудников.Начало <= &Дата
	|	И ДанныеСостоянийСотрудников.Окончание >= &Дата
	|	И ДанныеСостоянийСотрудников.Сотрудник.ФизическоеЛицо = &ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0) КАК РабочихЧасов
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Дата = &Дата
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ВидУчетаВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОперативногоУчетаРабочегоВремениСотрудниковОбороты.ЧасыОборот КАК ЧасыОборот
	|ИЗ
	|	РегистрНакопления.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Обороты(&Дата, &Дата, Авто, Сотрудник.ФизическоеЛицо = &ФизическоеЛицо) КАК ДанныеОперативногоУчетаРабочегоВремениСотрудниковОбороты";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

&НаСервере
Функция ДоступностьПоНовому(ДатаПериода,ВидРабочегоЦентра)
	
	//получим сотрудников в регистре по врц
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Рин1_НазначенияСотрудниковВРЦСрезПоследних.Период) КАК Период,
	|	Рин1_НазначенияСотрудниковВРЦСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрСведений.Рин1_НазначенияСотрудниковВРЦ.СрезПоследних(&Период, ВРЦ = &ВРЦ) КАК Рин1_НазначенияСотрудниковВРЦСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	Рин1_НазначенияСотрудниковВРЦСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	0 КАК РабочихЧасов
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рин1_НазначениеСотрудниковНаВРЦ.ТабличнаяЧастьНазначений КАК Рин1_НазначениеСотрудниковНаВРЦТабличнаяЧастьНазначений
	|		ПО (ВременнаяТаблица.Сотрудник = Рин1_НазначениеСотрудниковНаВРЦТабличнаяЧастьНазначений.Сотрудник)
	|			И (ВременнаяТаблица.Период = Рин1_НазначениеСотрудниковНаВРЦТабличнаяЧастьНазначений.ДатаНазначения)
	|ГДЕ
	|	Рин1_НазначениеСотрудниковНаВРЦТабличнаяЧастьНазначений.ВРЦ = &ВРЦ
	|	И НЕ Рин1_НазначениеСотрудниковНаВРЦТабличнаяЧастьНазначений.ОсвободитьОтНазначений";
	
	Запрос.УстановитьПараметр("ВРЦ", ВидРабочегоЦентра);
	Запрос.УстановитьПараметр("Период", ДатаПериода);
	
	ТЗ_Сотрудников = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из ТЗ_Сотрудников Цикл
		//проверим уволен ли сотрудник
		Если не Уволен(Строка.Сотрудник.ФизическоеЛицо,ДатаПериода) Тогда
			
			//получим график сотрудника
			КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Ложь,Строка.Сотрудник,"ГрафикРаботы",ДатаПериода,);
			ГрафикРаботы = КадровыеДанные[0].ГрафикРаботы;
			
			ЗапросПакетов = Новый Запрос;
			ЗапросПакетов.Текст = ПолучитьТекстЗапроса();
			//проверим на отсутствия и если отсутствует то продолжаем цикл
			ЗапросПакетов.УстановитьПараметр("Дата", ДатаПериода);
			ЗапросПакетов.УстановитьПараметр("СостояниеРабота", Перечисления.СостоянияСотрудника.Работа);
			ЗапросПакетов.УстановитьПараметр("СостояниеУволен", Перечисления.СостоянияСотрудника.Увольнение);
			ЗапросПакетов.УстановитьПараметр("ФизическоеЛицо", Строка.Сотрудник.ФизическоеЛицо); //только физлицо!!!
			ЗапросПакетов.УстановитьПараметр("ВидУчетаВремени", Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Явка"));
			ЗапросПакетов.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
			
			МассивРезультатов = ЗапросПакетов.ВыполнитьПакет();
						
			Если не МассивРезультатов[0].Пустой() Тогда
				Продолжить; //есть отсутствия РабочихЧасов = 0
			КонецЕсли;
			
			//проверим сколько рабочих часов по графику
			Если не МассивРезультатов[1].Пустой() Тогда
				Строка.РабочихЧасов = МассивРезультатов[1].Выгрузить()[0].РабочихЧасов;
			КонецЕсли;
			//если есть внутрисменные отсутствия то убавим РабочихЧасов						
			Выборка2 = МассивРезультатов[2].Выбрать();
			Пока Выборка2.Следующий() Цикл
				Строка.РабочихЧасов = Строка.РабочихЧасов - Выборка2.ЧасыОборот; 
			КонецЦикла;
			
			Если Строка.РабочихЧасов < 0 Тогда
				Строка.РабочихЧасов = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗ_Сотрудников.Итог("РабочихЧасов") * 3600;//в секундах	
КонецФункции 

&НаСервере
Функция Уволен(ФизическоеЛицо,Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ДанныеСостоянийСотрудников.Состояние) КАК Работа
	|ПОМЕСТИТЬ ВТ_Работа
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|ГДЕ
	|	ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)
	|	И ДанныеСостоянийСотрудников.Начало <= &Дата
	|	И ДанныеСостоянийСотрудников.Сотрудник.ФизическоеЛицо = &ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ДанныеСостоянийСотрудников.Состояние) КАК Увольнение
	|ПОМЕСТИТЬ ВТ_Увольнение
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|ГДЕ
	|	ДанныеСостоянийСотрудников.Сотрудник.ФизическоеЛицо = &ФизическоеЛицо
	|	И ДанныеСостоянийСотрудников.Начало <= &Дата
	|	И ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Работа.Работа, 0) - ЕСТЬNULL(ВТ_Увольнение.Увольнение, 0) <= 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Уволен,
	|	ВТ_Работа.Работа КАК Работа,
	|	ВТ_Увольнение.Увольнение КАК Увольнение
	|ИЗ
	|	ВТ_Работа КАК ВТ_Работа,
	|	ВТ_Увольнение КАК ВТ_Увольнение";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
	
		Возврат РезультатЗапроса.Выгрузить()[0].Уволен;
	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
&Вместо("ЗаполнитьДоступностьПоВидамРЦ")
Процедура Рин1_ЗаполнитьДоступностьПоВидамРЦ(СписокВидовРЦ)
	
	Если СписокВидовРЦ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Получим данные выбранных видов РЦ
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПроизводствоСервер.СоздатьВТГрафикиРаботыВидовРЦ(СписокВидовРЦ, МенеджерВременныхТаблиц, "ВТГрафикиРаботы");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРабочихЦентров.Ссылка КАК ВидРабочегоЦентра,
	|	ВидыРабочихЦентров.КоличествоРабочихЦентров КАК КоличествоРабочихЦентров,
	|	ВЫБОР ВидыРабочихЦентров.ЕдиницаИзмеренияДоступностиРЦ
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА 60
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА 3600
	|		ИНАЧЕ 86400
	|	КОНЕЦ * ВидыРабочихЦентров.МаксимальнаяДоступностьРЦ КАК МаксимальнаяДоступностьРЦ
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Ссылка В(&СписокВидовРЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТГрафикиРаботы.Ссылка КАК ВидРабочегоЦентра,
	|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	ВТГрафикиРаботы КАК ВТГрафикиРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	ВТГрафикиРаботы КАК ВТГрафикиРаботы";
	
	Запрос.УстановитьПараметр("СписокВидовРЦ", СписокВидовРЦ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеВидовРЦ = МассивРезультатов[0].Выгрузить();
	ГрафикиВидовРЦ = МассивРезультатов[1].Выгрузить();
	
	РасписанияРаботы = ГрафикиРаботы.РасписанияРаботыНаПериод(
	МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("ГрафикРаботы"),
	НачалоПериода,
	ОкончаниеПериода);
	РасписанияРаботы.Свернуть("ГрафикРаботы,ДатаГрафика");
	РасписанияРаботы.Индексы.Добавить("ГрафикРаботы,ДатаГрафика");
	
	// Заполним доступность
	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	Для каждого ВидРабочегоЦентра Из СписокВидовРЦ Цикл
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ВидРабочегоЦентра);
		
		СтрокаВидРЦ = ДоступностьВидовРЦ.НайтиСтроки(СтруктураПоиска)[0];
		РеквизитыВидаРЦ = ДанныеВидовРЦ.НайтиСтроки(СтруктураПоиска)[0];
		ГрафикиВидаРЦ = ГрафикиВидовРЦ.НайтиСтроки(СтруктураПоиска);
		
		Если РеквизитыВидаРЦ.КоличествоРабочихЦентров = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У вида рабочих центров ""%1"" не указано количество рабочих центров.';
			|en = 'Number of the work centers is not specified for the ""%1"" work center kind.'"),
			ВидРабочегоЦентра);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВидРабочегоЦентра); 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаВидРЦ.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			НомерОтображаемойДоступности = 1;
		ИначеЕсли СтрокаВидРЦ.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			НомерОтображаемойДоступности = 2;
		ИначеЕсли СтрокаВидРЦ.ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			НомерОтображаемойДоступности = 3;
		КонецЕсли;
		
		Для каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
			
			ЕстьРабочиеДниВПериоде = Ложь;
			Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
				
				Для каждого СтрокаГрафик Из ГрафикиВидаРЦ Цикл
					
					СтруктураПоиска = Новый Структура("ДатаГрафика,ГрафикРаботы", ДатаПериода, СтрокаГрафик.ГрафикРаботы);
					СписокСтрок = РасписанияРаботы.НайтиСтроки(СтруктураПоиска);
					Если СписокСтрок.Количество() <> 0 Тогда
						ЕстьРабочиеДниВПериоде = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
					ДатыИнтервала = ДатыВыбранногоПериода(ДатаПериода, КонецНедели(ОкончаниеПериода), Перечисления.ТочностьГрафикаПроизводства.День);
				Иначе
					ДатыИнтервала = ДатыВыбранногоПериода(ДатаПериода, КонецМесяца(ОкончаниеПериода), Перечисления.ТочностьГрафикаПроизводства.День);
				КонецЕсли;
				
				Для каждого ДатаИнтервала Из ДатыИнтервала Цикл
					
					Для каждого СтрокаГрафик Из ГрафикиВидаРЦ Цикл
						
						СтруктураПоиска = Новый Структура("ДатаГрафика,ГрафикРаботы", ДатаИнтервала, СтрокаГрафик.ГрафикРаботы);
						СписокСтрок = РасписанияРаботы.НайтиСтроки(СтруктураПоиска);
						Если СписокСтрок.Количество() <> 0 Тогда
							ЕстьРабочиеДниВПериоде = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЕстьРабочиеДниВПериоде Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли; 
			
			Если ЕстьРабочиеДниВПериоде Тогда
				
				//bercut091219
				//ДоступностьСекунд = РеквизитыВидаРЦ.КоличествоРабочихЦентров * РеквизитыВидаРЦ.МаксимальнаяДоступностьРЦ;
				ДоступностьСекунд = ДоступностьПоНовому(ДатаПериода,РеквизитыВидаРЦ.ВидРабочегоЦентра);
				//
				
			Иначе
				ДоступностьСекунд = 0;
			КонецЕсли;
			
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			
			СтрокаВидРЦ[ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности] = ДоступностьСекунд / 3600;
			
			СтрокаВидРЦ[ИмяКолонкиПериода + "ДоступностьСекунд" + НомерОтображаемойДоступности] = ДоступностьСекунд;

			ПриИзмененииДоступностиВСтроке(СтрокаВидРЦ, ДатаПериода, НомерОтображаемойДоступности);
			
		КонецЦикла;
		
		ЗаполнитьИтогоВСтроке(СтрокаВидРЦ, НомерОтображаемойДоступности, ДатыВыбранногоПериода, ЭтаФорма);
		
	КонецЦикла;	
	
КонецПроцедуры


