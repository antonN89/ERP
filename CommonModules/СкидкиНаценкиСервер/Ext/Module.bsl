
&Вместо("АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище")
Функция Рин1_АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Форма, ИмяТаблицы, УникальныйИдентификатор, ТолькоДляВыделенныхСтрок, ИмяТаблицыВыделенныхСтрок, ТолькоАктивныеСтроки, ИспользоватьОграничения, РеализацияСверхЗаказа)
	
	СоглашениеСКлиентом = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Соглашение") Тогда
		СоглашениеСКлиентом = Форма.Объект.Соглашение;
	КонецЕсли;
	
	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьОграниченияРучныхСкидокВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	
	Если ЗначениеЗаполнено(СоглашениеСКлиентом) Тогда
		ИспользоватьОграниченияПоСоглашениям = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	Иначе
		ИспользоватьОграниченияПоСоглашениям = Ложь;
	КонецЕсли;
	
	ИспользоватьОграниченияРучныхСкидок = ИспользоватьОграничения И ИспользоватьРучныеСкидки И (ИспользоватьОграниченияРучныхСкидокВПродажах ИЛИ ИспользоватьОграниченияПоСоглашениям);
	
	Если ИмяТаблицы = "Услуги" Тогда
		ИмяКоличества = "Количество";
		
	// + [Rineco], [Киселев А.] [04.08.2021] 
	// Задача: [№ 8311], [#Убрать закомментированные строки для корректно расчета]					
	//++Шерстюк Ю.Ю. без автора	
	ИначеЕсли ТипЗнч(Форма) = Тип("УправляемаяФорма")
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И Форма.Объект.Свойство("Ссылка")
		И ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		ИмяКоличества = "Количество";
    //--Шерстюк Ю.Ю.
	// - [Rineco], [Киселев А.] [04.08.2021]

	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить(ИмяКоличества,               Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Цена",                      Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаРучнойСкидки",         Новый ОписаниеТипов("Число"));
	
	Если ТолькоДляВыделенныхСтрок Тогда
		
		Для Каждого ТекСтрока Из Форма.Элементы[?(ИмяТаблицыВыделенныхСтрок = Неопределено, ИмяТаблицы, ИмяТаблицыВыделенныхСтрок)].ВыделенныеСтроки Цикл
			
			СтрокаКоллекции = Форма.Объект[ИмяТаблицы].НайтиПоИдентификатору(ТекСтрока);
			
			Если ?(РеализацияСверхЗаказа, СтрокаКоллекции = Неопределено ИЛИ СтрокаКоллекции.КодСтроки > 0, СтрокаКоллекции = Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			
		КонецЦикла;
	Иначе
		Если РеализацияСверхЗаказа Тогда
			НайденныеСтроки = Форма.Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("КодСтроки", 0));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		ИначеЕсли ТолькоАктивныеСтроки Тогда
			НайденныеСтроки =Форма.Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("Активность", Истина));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТаблицы] Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОграниченияРучныхСкидок Тогда
		
		ОграниченияРучныхСкидок = НастройкиПродажДляПользователейСервер.ОграниченияСкидокНаценок(СоглашениеСКлиентом, Пользователи.ТекущийПользователь());
		ЦеновыеГруппы = ОграниченияРучныхСкидок.ВыгрузитьКолонку("ЦеноваяГруппа");
		Если ОграниченияРучныхСкидок.Колонки.Найти("Деактивирован") = Неопределено Тогда
			ОграниченияРучныхСкидок.Колонки.Добавить("Деактивирован", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	Иначе
		
		ОграниченияРучныхСкидок = Новый ТаблицаЗначений;
		ОграниченияРучныхСкидок.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойСкидки",  Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойНаценки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		//ГИГ Признак деактивации скидки по ценовой группе
		ОграниченияРучныхСкидок.Колонки.Добавить("Деактивирован", Новый ОписаниеТипов("Булево"));
		//ГИГ
		Ограничение = ОграниченияРучныхСкидок.Добавить();
		Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Ограничение.МаксимальныйПроцентРучнойСкидки  = 999.99;
		Ограничение.МаксимальныйПроцентРучнойНаценки = 999.99;
		
	КонецЕсли;
	
	//++Гольм А.А. (Гигабайт) 20.11.2018 10:34:58
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары." + ИмяКоличества + " " + "КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблица КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияРучныхСкидок.ЦеноваяГруппа КАК ЦеноваяГруппа,"
	+ ?(ИспользоватьОграниченияРучныхСкидок = Истина, "", "
	|	ЕСТЬNULL(ОграниченияРучныхСкидок.Деактивирован, ЛОЖЬ) КАК Деактивирован,
	|") +
	"	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки
	|ПОМЕСТИТЬ ОграниченияРучныхСкидок
	|ИЗ
	|	&ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Т.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Т.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Т.СуммаРучнойСкидки КАК СуммаРучнойСкидки,"
	+ ?(ИспользоватьОграниченияРучныхСкидок = Истина, "", "
	|	ЕСТЬNULL(ОграниченияРучныхСкидок.Деактивирован,Ложь) КАК Деактивирован,
	|") +
	"	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(31,2)) КАК МаксимальнаяСуммаРучнойСкидки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(31,2)) КАК МаксимальнаяСуммаРучнойНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ КАК ЦеноваяГруппа,
	|		СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.КоличествоУпаковок * ВременнаяТаблицаТовары.ЦенаЗаУпаковку КАК ЧИСЛО(31,2))) КАК СуммаБезСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ) КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|		ПО (ОграниченияРучныхСкидок.ЦеноваяГруппа = Т.ЦеноваяГруппа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	Товары.Номенклатура КАК Номенклатура,
	//|	Товары." + ИмяКоличества + " " + "КАК КоличествоУпаковок,
	//|	Товары.Цена КАК ЦенаЗаУпаковку,
	//|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	//|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	//|ПОМЕСТИТЬ ВременнаяТаблица
	//|ИЗ
	//|	&Товары КАК Товары
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Товары.Номенклатура КАК Номенклатура,
	//|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	//|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	//|	Товары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	//|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	//|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	//|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	//|ИЗ
	//|	ВременнаяТаблица КАК Товары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	//|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ОграниченияРучныхСкидок.ЦеноваяГруппа КАК ЦеноваяГруппа,
	//|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	//|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки
	//|ПОМЕСТИТЬ ОграниченияРучныхСкидок
	//|ИЗ
	//|	&ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Т.ЦеноваяГруппа КАК ЦеноваяГруппа,
	//|	Т.СуммаБезСкидки КАК СуммаБезСкидки,
	//|	Т.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	//|	Т.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	//|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	//|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки,
	//|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(15, 2)) КАК МаксимальнаяСуммаРучнойСкидки,
	//|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(15, 2)) КАК МаксимальнаяСуммаРучнойНаценки
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ВЫБОР
	//|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	//|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	//|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	//|		КОНЕЦ КАК ЦеноваяГруппа,
	//|		СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.КоличествоУпаковок * ВременнаяТаблицаТовары.ЦенаЗаУпаковку КАК ЧИСЛО(15, 2))) КАК СуммаБезСкидки,
	//|		СУММА(ВременнаяТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	//|		СУММА(ВременнаяТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	//|	ИЗ
	//|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	//|	
	//|	СГРУППИРОВАТЬ ПО
	//|		ВЫБОР
	//|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	//|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	//|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	//|		КОНЕЦ) КАК Т
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	//|		ПО (ОграниченияРучныхСкидок.ЦеноваяГруппа = Т.ЦеноваяГруппа)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	//|	ВременнаяТаблицаТовары.ЦеноваяГруппа КАК ЦеноваяГруппа
	//|ИЗ
	//|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	//--Гольм А.А. (Гигабайт) 20.11.2018 10:38:39
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Товары", Товары);
	Запрос.Параметры.Вставить("ОграниченияРучныхСкидок", ОграниченияРучныхСкидок);
	Запрос.Параметры.Вставить("ЦеновыеГруппы", ЦеновыеГруппы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Ограничения = Результат[3].Выгрузить();
	Ограничения.Индексы.Добавить("ЦеноваяГруппа");
	
	Товары = Результат[4].Выгрузить();
	Товары.Индексы.Добавить("Номенклатура");
	
	Возврат ПоместитьВоВременноеХранилище(Новый Структура("Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок", Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок), УникальныйИдентификатор);
	
КонецФункции

&Вместо("ПрименитьРезультатРасчетаКОбъекту")
Процедура Рин1_ПрименитьРезультатРасчетаКОбъекту(Объект, ИмяТЧ, ПримененныеСкидкиНаценки, РассчитыватьСуммуСНДС, РассчитыватьСуммуВзаиморасчетов, РеализацияСверхЗаказа)
	//++Шерстюк Ю.Ю. изменения без комментариев код отсутствовал. Добавлю обратно, чтобы при обновлении легче было сравнивать
	//Если РеализацияСверхЗаказа Тогда
	//Для каждого СтрокаСкидок Из ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки Цикл
	//		СтрокаТЧ = Объект.СкидкиНаценки.Добавить();
	//		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаСкидок);		
	//КонецЦикла; 
	//Иначе	
		Объект.СкидкиНаценки.Загрузить(ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки);	
	//КонецЕсли;											
	АвтоматическиеСкидкиНаценки = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Скопировать(Новый Структура("СпособПримененияСкидки", Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок));
	НачисленныеБонусныеБаллы = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Скопировать(Новый Структура("СпособПримененияСкидки", Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы));
	
	// Заполнение скидок в табличной части "Товары"
	АвтоматическиеСкидкиНаценки.Свернуть("КлючСвязи", "Сумма");
	АвтоматическиеСкидкиНаценки.Индексы.Добавить("КлючСвязи");
	
	Если ИмяТЧ="Услуги" Тогда
		ИмяКоличества = "Количество";
	//++Шерстюк Ю.Ю. код удален кем-то зачем-то, верну и закомментирую
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура")
	//	И Объект.Свойство("Ссылка")
	//	И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
	//	ИмяКоличества = "Количество";
	//
	Иначе
	    //++Шерстюк Ю.Ю. без автора
		//ИмяКоличества = "КоличествоУпаковок";
		ИмяКоличества = "Количество";
		//--Шерстюк Ю.Ю.
	КонецЕсли;
	
	//если документ заказ клиента был записан а авто скидки не были установленны  -сказал убрать 060220
	//Если Объект[ИмяТЧ].Итог("ПроцентАвтоматическойСкидки") = 0 Тогда
	//	
	//	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
	//		
	//		Если РеализацияСверхЗаказа И СтрокаТЧ.КодСтроки > 0 Тогда 
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		СтрокаТаблицы = АвтоматическиеСкидкиНаценки.Найти(СтрокаТЧ.КлючСвязи, "КлючСвязи");
	//		Если СтрокаТаблицы = Неопределено Тогда
	//			СуммаАвтоматическойСкидки = 0;
	//		Иначе
	//			СуммаАвтоматическойСкидки = Окр(СтрокаТаблицы.Сумма, 2);
	//		КонецЕсли;
	//		
	//		РассчитыватьСуммуВзаиморасчетовПоСтроке = (РассчитыватьСуммуВзаиморасчетов И СтрокаТЧ.СуммаАвтоматическойСкидки <> СуммаАвтоматическойСкидки);
	//		
	//		СтрокаТЧ.СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки;
	//		
	//		// Применение автоматической скидки.
	//		СуммаБезСкидки = Окр(?(СтрокаТЧ[ИмяКоличества] = 0,1,СтрокаТЧ[ИмяКоличества]) * СтрокаТЧ.Цена,2);
	//		
	//		СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
	//		
	//		Если не СтрокаТЧ.СуммаРучнойСкидки = 0 Тогда
	//			
	//			СтрокаТЧ.СуммаРучнойСкидки = СтрокаТЧ.СуммаРучнойСкидки - СуммаАвтоматическойСкидки;
	//			СтрокаТЧ.ПроцентРучнойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки);
	//			
	//		Иначе
	//			
	//			СтрокаТЧ.СуммаРучнойСкидки = СуммаАвтоматическойСкидки*-1;
	//			СтрокаТЧ.ПроцентРучнойСкидки = СтрокаТЧ.ПроцентАвтоматическойСкидки*-1;
	//			
	//		КонецЕсли;
	//		
	//		СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
	//		
	//		СтрокаТЧ.ПроцентОбщий = СтрокаТЧ.ПроцентРучнойСкидки + СтрокаТЧ.ПроцентАвтоматическойСкидки;
	//		СтрокаТЧ.СуммаПроцентОбщий = СуммаСкидки;
	//		
	//		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект);
	//		
	//		Если РассчитыватьСуммуСНДС Тогда
	//			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
	//		КонецЕсли;
	//		
	//		Если РассчитыватьСуммуВзаиморасчетовПоСтроке Тогда
	//			СтрокаТЧ.СуммаВзаиморасчетов = 0;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//Иначе	
		
		Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
			
			Если СтрокаТЧ.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка() Тогда
				Продолжить;
			КонецЕсли;
			
			Если РеализацияСверхЗаказа И СтрокаТЧ.КодСтроки > 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = АвтоматическиеСкидкиНаценки.Найти(СтрокаТЧ.КлючСвязи, "КлючСвязи");
			Если СтрокаТаблицы = Неопределено Тогда
				СуммаАвтоматическойСкидки = 0;
			Иначе
				СуммаАвтоматическойСкидки = Окр(СтрокаТаблицы.Сумма, 2);
			КонецЕсли;
			
			РассчитыватьСуммуВзаиморасчетовПоСтроке = (РассчитыватьСуммуВзаиморасчетов И СтрокаТЧ.СуммаАвтоматическойСкидки <> СуммаАвтоматическойСкидки);
			
			СтрокаТЧ.СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки;
			
			// Применение автоматической скидки.
			//++Гольм А.А. (Гигабайт)
			//СуммаБезСкидки = Окр(СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена,2);
			СуммаБезСкидки = Окр(?(СтрокаТЧ[ИмяКоличества] = 0,1,СтрокаТЧ[ИмяКоличества]) * СтрокаТЧ.Цена,2);
			//--Гольм А.А. (Гигабайт)
			
			Если СуммаБезСкидки <> 0 Тогда
				СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
			КонецЕсли;
			
			СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
			
			СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
			СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект);
			
			Если РассчитыватьСуммуСНДС Тогда
				СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			КонецЕсли;
			
			Если РассчитыватьСуммуВзаиморасчетовПоСтроке Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	//КонецЕсли;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры

&Вместо("РассчитатьСкидку")
Процедура Рин1_РассчитатьСкидку(СтрокаДерева, ПараметрыРасчета)
	
	Товары = СтрокиТоваровДляРаспределения(СтрокаДерева, ПараметрыРасчета);
	// Добавлено начало ГИГ
	Для каждого СтрокаТоваров из Товары цикл
		Если СтрокаТоваров.КоличествоУпаковок = 0 и СтрокаТоваров.Сумма =  0 и СтрокаТоваров.Количество = 0 Тогда 
			СтрокаТоваров.КоличествоУпаковок = 1;
			СтрокаТоваров.Количество = 1;
			СтрокаТоваров.Сумма = СтрокаТоваров.Цена;
		КонецЕсли;	
		
	КонецЦикла;
	// Добавлено конец ГИГ 
	РезультатРасчета = ПустаяТаблицаСкидокСРасшифровкой(ПараметрыРасчета);
	
	Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		
		ЭтоУмножение = СтрокаДерева.ПрименятьУмножениеВРамкахВышестоящейГруппы;
		
		Для Каждого Товар Из Товары Цикл
			
			Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
				Сумма = ЗначениеСкидкиНаценки(СтрокаДерева, Товар, ПараметрыРасчета) / 100 * ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета, ЭтоУмножение);
			Иначе
				Сумма = 0;
			КонецЕсли; 
			
			ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, Сумма, Товар, РезультатРасчета, ПараметрыРасчета);
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		
		СуммаСкидки = СтрокаДерева.ЗначениеСкидкиНаценки * КратностьВыполнения(СтрокаДерева);
		
		РаспределитьЗначениеСкидкиНаТовары(СтрокаДерева, СуммаСкидки, Товары, РезультатРасчета, ПараметрыРасчета);
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки Тогда
		
		КратностьВыполнения = КратностьВыполнения(СтрокаДерева);
		
		Для Каждого Товар Из Товары Цикл
			
			СуммаСкидки = ЗначениеСкидкиНаценки(СтрокаДерева, Товар, ПараметрыРасчета) * КратностьВыполнения;
			
			ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, СуммаСкидки, Товар, РезультатРасчета, ПараметрыРасчета);
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		
		Для Каждого Товар Из Товары Цикл
			
			ЦенаЗаУпаковку = ПолучитьЦенуНоменклатурыПоВидуЦен(Товар, ПараметрыРасчета, СтрокаДерева.ВидЦены);
			Если ЦенаЗаУпаковку <> 0 Тогда
				СуммаСкидки = Товар.Сумма - Товар.КоличествоУпаковок * ЦенаЗаУпаковку;
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;
			
			ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, СуммаСкидки, Товар, РезультатРасчета, ПараметрыРасчета);
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение
		ИЛИ СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КартаЛояльности Тогда
		
		Для Каждого Товар Из Товары Цикл
			
			НоваяСтрока              = РезультатРасчета.Добавить();
			НоваяСтрока.КлючСвязи    = Товар.КлючСвязи;
			НоваяСтрока.Действует    = Истина;
			НоваяСтрока.Расшифровка  = ПолучитьРасшифровкуСкидки(СтрокаДерева, 0, ПараметрыРасчета, Истина);
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Количество Тогда
		
		ТаблицаОдинаковыхТоваров = Новый ТаблицаЗначений;
		ТаблицаОдинаковыхТоваров.Колонки.Добавить("КлючСвязи",      Новый ОписаниеТипов("Число"));
		ТаблицаОдинаковыхТоваров.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Если СтрокаДерева.УчитыватьХарактеристики Тогда
			ТаблицаОдинаковыхТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		КонецЕсли;
		ТаблицаОдинаковыхТоваров.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
		ТаблицаОдинаковыхТоваров.Колонки.Добавить("Сумма",     Новый ОписаниеТипов("Число"));
		
		Для Каждого Товар Из Товары Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаОдинаковыхТоваров.Добавить(), Товар);
		КонецЦикла;
		
		ТаблицаОдинаковыхТоваровКопия = ТаблицаОдинаковыхТоваров.Скопировать();
		Если СтрокаДерева.УчитыватьХарактеристики Тогда
			ТаблицаОдинаковыхТоваров.Свернуть("Номенклатура, Характеристика", "Количество, Сумма");
		Иначе
			ТаблицаОдинаковыхТоваров.Свернуть("Номенклатура", "Количество, Сумма");
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура");
		Если СтрокаДерева.УчитыватьХарактеристики Тогда
			Отбор.Вставить("Характеристика");
		КонецЕсли;
		
		Для Каждого Товар Из ТаблицаОдинаковыхТоваров Цикл
			
			Если Товар.Количество <> 0 Тогда
				КратностьВыполнения = Окр((Товар.Количество / СтрокаДерева.УсловиеДляСкидкиКоличеством) - 0.5, 0, РежимОкругления.Окр15как20);
			Иначе
				КратностьВыполнения = 0;
			КонецЕсли;
			
			Если КратностьВыполнения > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(Отбор, Товар);
				СтрокиТоваров = ТаблицаОдинаковыхТоваровКопия.НайтиСтроки(Отбор);
				
				СуммаСкидки = СтоимостьСамыхДешевыхТоваров(КратностьВыполнения * СтрокаДерева.ЗначениеСкидкиНаценки, СтрокиТоваров);
				РаспределитьЗначениеСкидкиНаТовары(СтрокаДерева, СуммаСкидки, СтрокиТоваров, РезультатРасчета, ПараметрыРасчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		
		Если ЗначениеЗаполнено(СтрокаДерева.СегментПодарков) Тогда
			ТоварыСегментаПодарков = ПараметрыРасчета.ТоварыПоСегментам.НайтиСтроки(Новый Структура("СегментНоменклатуры", СтрокаДерева.СегментПодарков));
		Иначе
			ТоварыСегментаПодарков = ПараметрыРасчета.Товары;
		КонецЕсли;
		
		СуммаСкидки = СтоимостьСамыхДешевыхТоваров(КратностьВыполнения(СтрокаДерева) * СтрокаДерева.ЗначениеСкидкиНаценки, ТоварыСегментаПодарков);
		
		РаспределитьЗначениеСкидкиНаТовары(СтрокаДерева, СуммаСкидки, Товары, РезультатРасчета, ПараметрыРасчета);
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ОкруглениеСуммы Тогда
		
		СуммаТоваров = 0;
		Для Каждого Товар Из Товары Цикл
			СуммаТоваров = СуммаТоваров + Окр(ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета), 2);
		КонецЦикла;
		
		СуммаСкидки = 0;
		Если СтрокаДерева.ЗначениеСкидкиНаценки <= СуммаТоваров Тогда
			
			Если ЗначениеЗаполнено(СтрокаДерева.ТочностьОкругления) Тогда
				СуммаСкидки = СуммаТоваров - ЦенообразованиеКлиентСервер.ОкруглитьЦену(СуммаТоваров, СтрокаДерева.ТочностьОкругления, СтрокаДерева.ВариантОкругления);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДерева.ПсихологическоеОкругление) Тогда
				СуммаСкидки = СуммаТоваров + СуммаСкидки - ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(СуммаТоваров, СтрокаДерева.ПсихологическоеОкругление);
			КонецЕсли;
			
		КонецЕсли;
		
		РаспределитьЗначениеСкидкиНаТовары(СтрокаДерева, СуммаСкидки, Товары, РезультатРасчета, ПараметрыРасчета);
		
	ИначеЕсли ТипЗнч(СтрокаДерева.СпособПредоставления) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		
		ВнешняяОбработка = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(СтрокаДерева.СпособПредоставления);
		УстановитьБезопасныйРежим(Истина);
		РезультатРасчета = ВнешняяОбработка.Рассчитать(
		СтрокаДерева,
		СтрокаДерева.ПараметрыВнешнейОбработки.Получить(),
		Товары,
		ПараметрыРасчета);
		УстановитьБезопасныйРежим(Ложь);
		
	КонецЕсли;
	
	СтрокаДерева.Рассчитано = Истина;
	СтрокаДерева.РезультатРасчета = РезультатРасчета;
	
КонецПроцедуры

&Вместо("РассчитатьПоКоммерческомуПредложениюКлиенту")
Функция Рин1_РассчитатьПоКоммерческомуПредложениюКлиенту(Объект, ВходныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	
	ИспользоватьНаборы = Ложь;
	
	//++Шерстюк Ю.Ю. изменения без автора
	//ИмяКолонкиУпаковка = "Упаковка";
	//ИмяКолонкиУпаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();

	//ИмяКолонкиКоличествоУпаковок = "Количество";
	ИмяКолонкиКоличествоУпаковок = 1;
    //--Шерстюк Ю.Ю.
	
	Если ВходныеПараметры.Свойство("ИмяКолонкиУпаковка") Тогда
		ИмяКолонкиУпаковка = "Товары." + ВходныеПараметры.ИмяКолонкиУпаковка;
	КонецЕсли;
	
	Если ВходныеПараметры.Свойство("ИмяКолонкиКоличествоУпаковок") Тогда
		 //++Шерстюк Ю.Ю. изменения без автора
		 //ИмяКолонкиКоличествоУпаковок = "Товары." + ИмяКолонкиКоличествоУпаковок;
		 ИмяКолонкиКоличествоУпаковок = "Товары." + ВходныеПараметры.ИмяКолонкиКоличествоУпаковок;
		 //--Шерстюк Ю.Ю.
	КонецЕсли;
	
	
	// Обработка табличной части "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КлючСвязи                                    КАК КлючСвязи,
	|	Товары.Номенклатура                                 КАК Номенклатура,
	|	Товары.Характеристика                               КАК Характеристика,
	//++Шерстюк Ю.Ю. изменения без автора
	//|	&ТоварыУпаковка                                     КАК Упаковка,
	//--Шерстюк Ю.Ю.
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)            КАК Склад,
	|	Товары.ВидЦены                                      КАК ВидЦены,
	|	Товары.Количество                                   КАК Количество,
	|	&ТоварыКоличествоУпаковок                           КАК КоличествоУпаковок,
	|	Товары.Цена                                         КАК Цена,
	|	Товары.Цена * &ТоварыКоличествоУпаковок             КАК Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи,
	|	%Поля%
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	//++Шерстюк Ю.Ю. изменения без автора
	//|	Таблица.Упаковка,
	//--Шерстюк Ю.Ю.
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|%ИмяВременнойТаблицы%
	|ИЗ
	|	ВТТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Таблица.Номенклатура
	|		%Соединение%
	|";
	//++Шерстюк Ю.Ю. изменения без автора
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТоварыУпаковка",           ИмяКолонкиУпаковка);
	//--Шерстюк Ю.Ю.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТоварыКоличествоУпаковок", ИмяКолонкиКоличествоУпаковок);
	
	ТаблицаТовары = Объект.Товары.Выгрузить();

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Товары", ТаблицаТовары);
	ДанныеПоТоварамИНаборам = ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы);
	
	ПараметрыСкидокДляОптовойТорговли = Новый Структура;
	ПараметрыСкидокДляОптовойТорговли.Вставить("НеИспользоватьСоглашенияСКлиентами", Истина);
	
	СкидкиНаценки = СкидкиНаценкиДляОптовойТорговли(
		Объект.Дата,
		Справочники.Склады.ПустаяСсылка(),
		Справочники.СоглашенияСКлиентами.ПустаяСсылка(),
		Объект.КартаЛояльности);
	
	ПараметрыРасчета = ПараметрыРасчета();
	ПараметрыРасчета.СкидкиНаценки = СкидкиНаценки;
	ПараметрыРасчета.Партнер       = Объект.Клиент;
	ПараметрыРасчета.Регистратор   = Объект.Ссылка;
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.ДеньНедели   = Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1);
	ПараметрыРасчета.ТекущееВремя = ПолучитьТекущееВремяОбъекта(Объект);
	ПараметрыРасчета.ТекущаяДата  = ПолучитьТекущуюДатуОбъекта(Объект);
	
	// Карты лояльности
	ПараметрыРасчета.КартаЛояльности = Объект.КартаЛояльности;
	
	ПараметрыРасчета.Товары                     = ДанныеПоТоварамИНаборам.Товары;
	ПараметрыРасчета.ВалютаДокумента            = Объект.Валюта;
	ПараметрыРасчета.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ПараметрыРасчета.Пользователь               = Объект.Менеджер;
	ПараметрыРасчета.Объект                     = Объект;
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценокНовое(ПараметрыРасчета, ВходныеПараметры);
	
	Если ИспользоватьНаборы И НЕ ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, ДанныеПоТоварамИНаборам.СоответствиеКлючей, ТаблицаТовары);
	КонецЕсли;
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаККоммерческомуПредложениюКлиенту(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции

Функция РассчитатьДеревоСкидокНаценокНовое(ПараметрыРасчета, ВходныеПараметры)
	
	ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОсновныеТаблицы = ПакетЗапросовСоздать();
	ОсновныеТаблицы.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УдалятьВременныеТаблицы = Ложь;
	ПреобразовыватьПараметры = Ложь;
	Для Каждого КлючИЗначение Из ПараметрыРасчета Цикл
		ОсновныеТаблицы.Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ПакетЗапросовВставитьЗапросВПакет(ЗапросВременнаяТаблицаТоварыНовая(ПараметрыРасчета, ОсновныеТаблицы),
		ОсновныеТаблицы,
		Неопределено,
		УдалятьВременныеТаблицы,
		ПреобразовыватьПараметры);
		
	ПакетЗапросовВставитьЗапросВПакет(ЗапросКурсыВалют(ПараметрыРасчета),              ОсновныеТаблицы, "КурсыВалют",              УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	ПакетЗапросовВставитьЗапросВПакет(ЗапросСкидкиНаценки(ПараметрыРасчета),           ОсновныеТаблицы, "СкидкиНаценки",           УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	ПакетЗапросовВставитьЗапросВПакет(ЗапросТЧУсловияПредоставления(ПараметрыРасчета), ОсновныеТаблицы, "ТЧУсловияПредоставления", УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	ПакетЗапросовВставитьЗапросВПакет(ЗапросУсловияПредоставления(ПараметрыРасчета),   ОсновныеТаблицы, "УсловияПредоставления",   УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	// Для Подарков
	ПакетЗапросовВставитьЗапросВПакет(ЗапросТоварыПоСегментамНовая(ПараметрыРасчета),       ОсновныеТаблицы, "ТоварыПоСегментам",       УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	// Для Специальной цены
	ПакетЗапросовВставитьЗапросВПакет(ЗапросЦеныНоменклатуры(ПараметрыРасчета),        ОсновныеТаблицы, "ЦеныНоменклатуры",        УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	Если ИспользоватьЦеновыеГруппы Тогда
		ПакетЗапросовВставитьЗапросВПакет(
			ЗапросСкидкиНаценкиПоЦеновымГруппам(ПараметрыРасчета),
			ОсновныеТаблицы,
			"УточненияЗначенияСкидкиНаценкиПоЦеновымГруппам",
			УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	КонецЕсли;
	
	ПакетЗапросовВыполнить(ОсновныеТаблицы);
	
	КурсыВалют = ПакетЗапросовРезультатПоИмени("КурсыВалют", ОсновныеТаблицы).Выгрузить();
	Для Каждого СтрокаТЧ Из КурсыВалют Цикл
		Если СтрокаТЧ.Курс = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Для валюты %1 не установлен курс.
				           |Перед расчетом скидок (наценок) курсы валют должны быть установлены.';
				           |en = 'Exchange rate is not set for currency %1.
				           |Exchange rates must be set before discount (markup) calculation. '"), СтрокаТЧ.Валюта);
		КонецЕсли;
	КонецЦикла;
	
	Условия               = ПакетЗапросовРезультатПоИмени("ТЧУсловияПредоставления", ОсновныеТаблицы).Выгрузить();
	УсловияПредоставления = ПакетЗапросовРезультатПоИмени("УсловияПредоставления", ОсновныеТаблицы).Выгрузить();
	ДеревоСкидок          = СформироватьДеревоСкидок(ОсновныеТаблицы);
	
	ДеревоСкидок.Колонки.Добавить("Рассчитано", Новый ОписаниеТипов("Булево"));
	
	Скидки = ДеревоСкидок.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
	
	ТаблицаВыполненныеУсловия = ВыполнитьЗапросыУсловийПредоставления(
		УсловияПредоставления,
		Скидки,
		ПараметрыРасчета,
		МенеджерВременныхТаблиц);
	ПроверитьУсловияРекурсивно(ДеревоСкидок, Скидки, Условия, ТаблицаВыполненныеУсловия);
	
	Если ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		
		ВозвращаемыеДанные = Новый Структура;
		ВозвращаемыеДанные.Вставить("ДеревоСкидок",         ДеревоСкидок);
		ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ПустаяТаблицаСкидкиНаценки());
		ВозвращаемыеДанные.Вставить("ПараметрыРасчета",     ПараметрыРасчета);
		
		Возврат ВозвращаемыеДанные;
		
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("ИспользоватьЦеновыеГруппы", ИспользоватьЦеновыеГруппы);
	ПараметрыРасчета.Вставить("ЦеныНоменклатуры",      ПакетЗапросовРезультатПоИмени("ЦеныНоменклатуры",  ОсновныеТаблицы).Выгрузить());
	ПараметрыРасчета.Вставить("ТоварыПоСегментам",     ПакетЗапросовРезультатПоИмени("ТоварыПоСегментам", ОсновныеТаблицы).Выгрузить());
	ПараметрыРасчета.Вставить("УсловияПредоставления", ПакетЗапросовРезультатПоИмени("УсловияПредоставления",         ОсновныеТаблицы).Выгрузить());
	
	ПараметрыРасчета.Вставить("ПримененныеСкидкиУмножение", ПустаяТаблицаСкидкиНаценки());
	ПараметрыРасчета.Вставить("ВыполненныеУсловия",         ТаблицаВыполненныеУсловия);
	ПараметрыРасчета.Вставить("КурсыВалют",                 КурсыВалют);
	
	ПараметрыРасчета.Вставить("ПустаяТаблицаСкидокСРасшифровкой", ПустаяТаблицаСкидокСРасшифровкой());
	ПараметрыРасчета.Вставить("ПустаяТаблицаРасшифровка",         ПустаяТаблицаРасшифровка());
	ПараметрыРасчета.Вставить("ПустаяТаблицаСкидкиНаценки",       ПустаяТаблицаСкидкиНаценки());
	
	ПараметрыРасчета.Вставить("КешУмножениеГруппы", Новый Соответствие);
	ПараметрыРасчета.Вставить("КешУмножениеСуммы",  Новый Соответствие);
	
	Если ИспользоватьЦеновыеГруппы Тогда
		
		ПараметрыРасчета.Вставить("УточненияЗначенияСкидкиНаценки", Новый Соответствие);
		
		УточненияЗначенияСкидкиНаценкиПоЦеновымГруппам = ПакетЗапросовРезультатПоИмени(
			"УточненияЗначенияСкидкиНаценкиПоЦеновымГруппам", ОсновныеТаблицы).Выгрузить();
		
		ТекущаяСкидка = Неопределено;
		Уточнения = Неопределено;
		
		Для Каждого СтрокаТЧ Из УточненияЗначенияСкидкиНаценкиПоЦеновымГруппам Цикл
			Если ТекущаяСкидка <> СтрокаТЧ.СкидкаНаценка Тогда
				Если ТекущаяСкидка <> Неопределено Тогда
					ПараметрыРасчета.УточненияЗначенияСкидкиНаценки.Вставить(ТекущаяСкидка, Уточнения);
				КонецЕсли;
				Уточнения = ПустаяТаблицаУточненияЗначенияСкидкиНаценки();
				ТекущаяСкидка = СтрокаТЧ.СкидкаНаценка;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Уточнения.Добавить(), СтрокаТЧ);
		КонецЦикла;
		
		Если ТекущаяСкидка <> Неопределено Тогда
			ПараметрыРасчета.УточненияЗначенияСкидкиНаценки.Вставить(ТекущаяСкидка, Уточнения);
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатРасчета = РассчитатьДеревоСкидок(ДеревоСкидок, ПараметрыРасчета);
	
	Возврат РезультатРасчета;
	
КонецФункции

Функция ЗапросТоварыПоСегментамНовая(ПараметрыРасчета)
	
	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КлючСвязи             КАК КлючСвязи,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Количество            КАК Количество,
	|	Товары.КоличествоУпаковок    КАК КоличествоУпаковок,
	|	Товары.Серия                 КАК Серия,
	|	Товары.ВидЦены               КАК ВидЦены,
	|	НоменклатураСегмента.Сегмент КАК СегментНоменклатуры,
	|	Т.ЦеноваяГруппа              КАК ЦеноваяГруппа,
	|	Товары.Сумма                 КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО    Товары.Номенклатура   = НоменклатураСегмента.Номенклатура
	|			И Товары.Характеристика = НоменклатураСегмента.Характеристика
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Т
	|		ПО Т.Ссылка = Товары.Номенклатура
	|");
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВременнаяТаблицаТоварыНовая(ПараметрыРасчета, ОсновныеТаблицы)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА 9999999999
	|		ИНАЧЕ ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ТекущаяДата, Товары.СрокГодности, ДЕНЬ) КАК ЧИСЛО(10, 0))
	|	КОНЕЦ КАК КоличествоДнейДоОкончанияСрокаГодности,
	|	Товары.ВидЦены КАК ВидЦены,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.КоличествоУпаковок * Товары.Цена КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&ТоварыСоСрокомГодности КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика");
	
	ТоварыСоСрокомГодности = ПараметрыРасчета.Товары.Скопировать();
	ТоварыСоСрокомГодности.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Дата"));
	Для каждого СтрокаТоваров Из ТоварыСоСрокомГодности Цикл
		Если ЗначениеЗаполнено(СтрокаТоваров.Серия) Тогда
			СтрокаТоваров.СрокГодности = СтрокаТоваров.Серия.ГоденДо;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Параметры.Вставить("ТоварыСоСрокомГодности", ТоварыСоСрокомГодности);
	Запрос.Параметры.Вставить("ТекущаяДата",            ПараметрыРасчета.ТекущаяДата);
	
	ОсновныеТаблицы.Запрос.Параметры.Вставить("ТоварыСоСрокомГодности", ТоварыСоСрокомГодности);
	
	Возврат Запрос;
	
КонецФункции

