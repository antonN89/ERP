
&Перед("ОбработкаПроверкиЗаполнения")
Процедура Рин1_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Желаемая дата отгрузки в подвале должна быть заполнена
	Если не ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) Тогда
		
		//ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть заполнена!'");
		//ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		//
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//ТекстОшибки,
		//ЭтотОбъект,
		//"ЖелаемаяДатаОтгрузки",
		//,
		//Отказ);
		ЖелаемаяДатаОтгрузки = ТекущаяДата();
		
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту")
Процедура Рин1_ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту(Знач Основание)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Ссылка КАК ДокументОснование,
	//++Шерстюк Ю.Ю. 02.06.2021 Задача 8311 Партнер и Контрагент должены заполняться
	|	КоммерческоеПредложениеКлиенту.Клиент КАК Партнер,
	|	КоммерческоеПредложениеКлиенту.Контрагент КАК Контрагент,
	//--Шерстюк Ю.Ю.
	|	КоммерческоеПредложениеКлиенту.Сделка КАК Сделка,
	|	КоммерческоеПредложениеКлиенту.Валюта КАК Валюта,
	|	КоммерческоеПредложениеКлиенту.СуммаДокумента КАК СуммаДокумента,
	//|	КоммерческоеПредложениеКлиенту.СрокПоставки КАК СрокПоставки,
	//|	КоммерческоеПредложениеКлиенту.ГрафикОплаты КАК ГрафикОплаты,
	|	КоммерческоеПредложениеКлиенту.Организация КАК Организация,
	//|	КоммерческоеПредложениеКлиенту.Соглашение КАК Соглашение,
	//|	КоммерческоеПредложениеКлиенту.Соглашение.ПорядокОплаты КАК ПорядокОплаты,
	//|	КоммерческоеПредложениеКлиенту.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	//|	КоммерческоеПредложениеКлиенту.НалогообложениеНДС КАК НалогообложениеНДС,
	//|	КоммерческоеПредложениеКлиенту.ФормаОплаты КАК ФормаОплаты,
	|	КоммерческоеПредложениеКлиенту.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	//|	КоммерческоеПредложениеКлиенту.Склад КАК Склад,
	|	КоммерческоеПредложениеКлиенту.Статус КАК СтатусДокумента,
	|	КоммерческоеПредложениеКлиенту.КартаЛояльности КАК КартаЛояльности,
	//|	КоммерческоеПредложениеКлиенту.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
	//|	КоммерческоеПредложениеКлиенту.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	//|	КоммерческоеПредложениеКлиенту.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
	//|	КоммерческоеПредложениеКлиенту.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
	|	(НЕ КоммерческоеПредложениеКлиенту.Проведен) КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	//|	КоммерческоеПредложениеКлиенту.СпособДоставки КАК СпособДоставки,
	|	КоммерческоеПредложениеКлиенту.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		КлючСвязи КАК КлючСвязи,
	//|		НоменклатураНабора КАК НоменклатураНабора,
	//|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеНоменклатурыПолное,
	|		Характеристика КАК Характеристика,
	|		Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
	|		Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	//++Шерстюк Ю.Ю. 02.06.2021 Задача 8311 Количество должено заполняться
	//|		Упаковка КАК Упаковка,
	|		Количество КАК КоличествоУпаковок,
	//--Шерстюк Ю.Ю.
	|		Количество КАК Количество,
	|		ВидЦены КАК ВидЦены,
	|		Цена КАК Цена,
	|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		СуммаСНДС КАК СуммаСНДС,
	|		Сумма КАК Сумма,
	//|		Активность КАК Активность,
	//<++ Гигабайт Казаков М.В. Схемы обеспечения потребностей
	|		ГИГ_СхемаОбеспечения КАК ГИГ_СхемаОбеспечения,
	|		ГИГ_СрокПоставки КАК ГИГ_СрокПоставки,
	|		ДатаОтгрузки КАК ДатаОтгрузки,
	|		ВариантОбеспечения КАК ВариантОбеспечения,
	//++> Гигабайт Казаков М.В.
	//|		ВЫБОР
	//|			КОГДА КоммерческоеПредложениеКлиенту.Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	//|					ИЛИ КоммерческоеПредложениеКлиенту.Склад.ЭтоГруппа
	//|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//|			ИНАЧЕ КоммерческоеПредложениеКлиенту.Склад
	//|		КОНЕЦ КАК Склад
	|	) КАК Товары,
	|	КоммерческоеПредложениеКлиенту.СкидкиНаценки.(
	|		КлючСвязи КАК КлючСвязи,
	|		СкидкаНаценка КАК СкидкаНаценка,
	|		Сумма КАК Сумма
	|	) КАК СкидкиНаценки,
	|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Основание");
	
	Запрос.УстановитьПараметр("Основание",Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
	Выборка.ДокументОснование,
	Выборка.СтатусДокумента,
	Выборка.ЕстьОшибкиПроведен,
	Выборка.ЕстьОшибкиСтатус,
	МассивДопустимыхСтатусов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ДатаНачала = ?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДатаСеанса());
	
	//Если ЗначениеЗаполнено(Выборка.СрокПоставки) И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")Тогда
	//	ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, Выборка.СрокПоставки) + 1;
	//КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Активность", Истина);
	
	ТаблицаТовары = Выборка.Товары.Выгрузить();
	//ТаблицаТовары = ТаблицаТовары.Скопировать(ПараметрыОтбора);
	ТаблицаТовары.Сортировать("НомерСтроки Возр");
	
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
			НоваяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ТекСтрока.НаименованиеНоменклатурыПолное, 
			ТекСтрока.НаименованиеХарактеристикиПолное);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеСтрокиДляУдаления = Новый Соответствие;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперация, Валюта);
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Новый СписокЗначений);
	
	СкидкиНаценки.Загрузить(Выборка.СкидкиНаценки.Выгрузить());
	СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(ЭтотОбъект, СтруктураПараметры);
	СкидкиРассчитаны = Истина;
	
	СуммаЗаказанныхСтрок = ПолучитьСуммуЗаказанныхСтрок();
	СуммаЗалоговойТары = ПолучитьСуммуЗаказанныхСтрок(Истина);
	
	Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
		ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(
		ЭтотОбъект,
		СуммаЗаказанныхСтрок - СуммаЗалоговойТары,
		СуммаЗалоговойТары,
		Ложь);
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ОбработкаПроведения")
Процедура Рин1_ОбработкаПроведения(Отказ, РежимПроведения)
	
	// добавлено начало ГИГ
	ГИГ_КонтрольПороговОграничения.ВыполнитьПроверкуПоПорогамЦеновыхГрупп(Отказ, ЭтотОбъект, РежимПроведения);			
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	//добавлено конец ГИГ
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ЗаказКлиента.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ЗаказКлиентаЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Ссылка, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПродажиСервер.ВыполнитьКонтрольЗаказаПослеПроведения(Ссылка, Отказ);
	//{Гига suv 15.01.2018 СхемыОбеспеченияДляЗаказов
	Если НЕ Отказ Тогда
		ГИГ_ОбеспечениеСервер.СформироватьПеремещенияПоСхемамОбеспечения(ЭтотОбъект,Отказ);
	КонецЕсли;
	//Гига suv 15.01.2018}
	
	// + [Rineco], [Киселев А.Н.] [17.08.2021] 
	// Задача: [№ 14441], [#Учет продажи не ликвидов]
	Если Не Отказ Тогда
		РегистрыНакопления.Рин1_НеЛиквидныеТовары.ОтразитьНеЛиквидныеТоварыПриход(ЭтотОбъект,Движения,ЭтотОбъект.Товары);
	КонецЕсли;
	// - [Rineco], [Киселев А.Н.] [17.08.2021]
	
	
КонецПроцедуры

&Вместо("ПередЗаписью")
Процедура Рин1_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	ОперацииПередачи = ПродажиСервер.ОперацииПередачиТоваров();
	
	Если (ОперацииПередачи.Найти(ХозяйственнаяОперация) <> Неопределено
		Или Не ВернутьМногооборотнуюТару)
		И ТребуетсяЗалогЗаТару Тогда
		
		ТребуетсяЗалогЗаТару = Ложь;
		
	КонецЕсли;
	
	СуммаДокумента = ПолучитьСуммуЗаказанныхСтрок();
	СуммаВозвратнойТары = ПолучитьСуммуВозвратнойТары();
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
	КонецЕсли;
	
	Если ОперацииПередачи.Найти(ХозяйственнаяОперация) <> Неопределено
		Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре Тогда
		
		ЭтапыГрафикаОплаты.Очистить();
		СуммаАвансаДоОбеспечения = 0;
		СуммаПредоплатыДоОтгрузки = 0;
		
	Иначе
		
		Если Не ТребуетсяЗалогЗаТару Тогда
			Для Каждого ЭтапОплаты Из ЭтапыГрафикаОплаты Цикл
				ЭтапОплаты.СуммаЗалогаЗаТару = 0;
			КонецЦикла;
		КонецЕсли;
		
		ПродажиСервер.ЗаполнитьСуммыАвансаПредоплаты(ЭтотОбъект);
		
	КонецЕсли;
	
	Если Не НеОтгружатьЧастями Тогда
		НоваяДатаОтгрузки = Дата(1,1,1);
		
		Если Товары.Количество() > 0 Тогда
			
			Если Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению
				ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке
				ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Отменено", Ложь);
				СтрокиКОбеспечению = Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиКОбеспечению.Количество() > 0 Тогда
					
					ТаблицаСтрокКОбеспечению = Товары.Выгрузить(СтрокиКОбеспечению, "ДатаОтгрузки");
					ТаблицаСтрокКОбеспечению.Сортировать("ДатаОтгрузки Возр");
					НоваяДатаОтгрузки = ТаблицаСтрокКОбеспечению[0].ДатаОтгрузки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаОтгрузки = НоваяДатаОтгрузки;
	Иначе
		ОбеспечениеСервер.ЗаполнитьДатыОтгрузкиВТаблице(ДатаОтгрузки, Товары, "ДатаОтгрузки");
	КонецЕсли;
	
	ДокументСогласован = Согласован;
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
	ЭтотОбъект,
	РежимЗаписи,
	Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	
	// Установим дату согласования, если документ согласован
	Если Не ДокументСогласован И Согласован Тогда
		ДатаСогласования = ТекущаяДатаСеанса();
	//++Шерстюк Ю.Ю. 26.05.2021 Задача 8889 если документ не согласован, то устанавливаем
	ИначеЕсли Не Согласован и Не ЗначениеЗаполнено(ДатаСогласования) Тогда 
		пКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		ДатаСогласования = КалендарныеГрафики.ДатаПоКалендарю(пКалендарь, ТекущаяДатаСеанса(), 3);// текущая дата + 3 дня
	//--Шерстюк Ю.Ю.
	КонецЕсли;
	
	//++Шерстюк Ю.Ю. 07.04.2021 Задача № 1385 добавляем свою дату согласования, чтобы типовая осталась типовой
	Если Не ЗначениеЗаполнено(Рин1_ДатаСогласованияФакт) и Согласован Тогда 
		Рин1_ДатаСогласованияФакт = ТекущаяДатаСеанса();
	ИначеЕсли ЗначениеЗаполнено(Рин1_ДатаСогласованияФакт) и Не Согласован Тогда 
		Рин1_ДатаСогласованияФакт = Дата(1,1,1);
	КонецЕсли;	
	//--Шерстюк Ю.Ю.

	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаказКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
	ХозяйственнаяОперация,
	МассивВсехРеквизитов,
	МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
	ЭтотОбъект,
	МассивВсехРеквизитов,
	МассивРеквизитовОперации);
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказКлиента));
	
	//{Гига suv 15.01.2018 СхемыОбеспеченияДляЗаказов
	//при первой записи документа получим сторки которые содержат схему перемещения и установим для них режим обеспечения "Обособлено"
	Если Отказ = Ложь И Ссылка.Пустая() Тогда
		ТаблицаПеремещений = ГИГ_ОбеспечениеСервер.ТаблицаПеремещенийПоЗаказу(ЭтотОбъект);
		ДополнительныеСвойства.Вставить("ТаблицаПеремещений",ТаблицаПеремещений);
		Если НЕ ТаблицаПеремещений = Неопределено Тогда
			Для Каждого Стр Из ТаблицаПеремещений Цикл
				СтрТЧ = Товары[Стр.НомерСтроки-1];
				СтрТЧ.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//Гига suv 15.01.2018}
	ШаблонНазначения = Документы.ЗаказКлиента.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения, ЭтотОбъект, "НаправлениеДеятельности", Отказ);
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	Иначе
		ИдентификаторПлатежа = Неопределено;
	КонецЕсли; 
	
	ЗаказКлиентаЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

&После("ПриКопировании")
Процедура Рин1_ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.Рин1_УсловныеСрокиПоставки.Очистить();
	 //++Шерстюк Ю.Ю. 8379
	 пПустаяСсылкаНазначение = Справочники.Назначения.ПустаяСсылка();
	 //--Шерстюк Ю.Ю.
	Для каждого Строка Из ЭтотОбъект.Товары Цикл
		 Строка.ДатаКлиента = Дата(1,1,1);
		 //++Шерстюк Ю.Ю. 8379 при копировании не должно наследоваться значение ОЕМ потребность
		 Строка.ГИГ_Назначение = пПустаяСсылкаНазначение;
		 Строка.ГИГ_НазначениеУстановлено = Ложь;
		 //--Шерстюк Ю.Ю.
	КонецЦикла;
	
КонецПроцедуры

&Перед("ОбработкаУдаленияПроведения")
Процедура Рин1_ОбработкаУдаленияПроведения(Отказ)
	
	Если не РольДоступна("ПолныеПрава") Тогда
		Если Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению или Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю("Запрещается отмена проведения/пометка удаления документа в статусе " + Строка(Статус) + "!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//{{20200714 ГлазуновДВ
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ЗаполнитьДокументНаОснованииАктаОРасхожденияхПослеОтгрузки(Знач ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реализация.АдресДоставки,
	|	Реализация.БанковскийСчетОрганизации,
	|	Реализация.БанковскийСчетКонтрагента,
	|	Реализация.БанковскийСчетГрузоотправителя,
	|	Реализация.БанковскийСчетГрузополучателя,
	|	Реализация.Валюта,
	|	Реализация.ВалютаВзаиморасчетов,
	|	Реализация.Грузоотправитель,
	|	Реализация.Грузополучатель,
	|	Реализация.ДатаРаспоряжения,
	|	Реализация.ДоверенностьВыдана,
	|	Реализация.ДоверенностьДата,
	|	Реализация.ДоверенностьЛицо,
	|	Реализация.ДоверенностьНомер,
	|	Реализация.ЗаказКлиента,
	|	Реализация.Организация,
	|	Реализация.Контрагент,
	|	Реализация.НалогообложениеНДС,
	|	Реализация.Партнер,
	|	Реализация.Подразделение,
	|	Реализация.Сделка,
	|	Реализация.СкидкиРассчитаны,
	|	Реализация.Склад,
	|	Реализация.Соглашение,
	|	Реализация.СуммаВзаиморасчетов,
	|	Реализация.ФормаОплаты,
	|	Реализация.ХозяйственнаяОперация,
	|	Реализация.ЦенаВключаетНДС,
	|	Реализация.Касса,
	|	Реализация.Отпустил,
	|	Реализация.ОтпустилДолжность,
	|	Реализация.РеализацияПоЗаказам,
	|	Реализация.ГруппаФинансовогоУчета,
	|	Реализация.КартаЛояльности,
	|	Реализация.Договор,
	|	Реализация.Основание,
	|	Реализация.СпособДоставки,
	|	Реализация.ЗонаДоставки,
	|	Реализация.АдресДоставкиЗначенияПолей,
	|	Реализация.ПеревозчикПартнер,
	|	Реализация.ВремяДоставкиС,
	|	Реализация.ВремяДоставкиПо,
	|	Реализация.АдресДоставкиПеревозчика,
	|	Реализация.АдресДоставкиПеревозчикаЗначенияПолей,
	|	Реализация.ДополнительнаяИнформацияПоДоставке,
	|	Реализация.КонтактноеЛицо,
	|	Реализация.Руководитель,
	|	Реализация.ГлавныйБухгалтер,
	|	Реализация.ПорядокРасчетов,
	|	Реализация.ВернутьМногооборотнуюТару,
	|	Реализация.ДатаВозвратаМногооборотнойТары,
	|	Реализация.СостояниеЗаполненияМногооборотнойТары,
	|	Реализация.ТребуетсяЗалогЗаТару,
	|	Реализация.ОснованиеДата,
	|	Реализация.ОснованиеНомер,
	|	Реализация.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|ГДЕ
	|	Реализация.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Номенклатура КАК Номенклатура,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Характеристика КАК Характеристика,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Назначение КАК Назначение,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Серия КАК Серия,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Упаковка КАК Упаковка,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Цена КАК Цена,
	|	АктОРасхожденияхПослеОтгрузкиТовары.СтавкаНДС КАК СтавкаНДС,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Склад КАК Склад,
	|	АктОРасхожденияхПослеОтгрузкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Количество КАК Количество,
	|	АктОРасхожденияхПослеОтгрузкиТовары.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	АктОРасхожденияхПослеОтгрузкиТовары.СуммаПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Сумма КАК Сумма,
	|	АктОРасхожденияхПослеОтгрузкиТовары.СуммаНДСПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.СуммаНДС КАК СуммаНДС,
	|	АктОРасхожденияхПослеОтгрузкиТовары.СуммаСНДСПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.СуммаСНДС КАК СуммаСНДС,
	|	АктОРасхожденияхПослеОтгрузкиТовары.ЗаказКлиента,
	|	АктОРасхожденияхПослеОтгрузкиТовары.КодСтроки
	|ПОМЕСТИТЬ ТоварыРеализации
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Реализация = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыРеализации.Номенклатура,
	|	ТоварыРеализации.Характеристика,
	|	ТоварыРеализации.Назначение,
	|	ТоварыРеализации.Серия,
	|	ТоварыРеализации.Упаковка,
	|	ТоварыРеализации.Цена,
	|	ТоварыРеализации.СтавкаНДС,
	|	ТоварыРеализации.Склад,
	|	ТоварыРеализации.Количество,
	|	ТоварыРеализации.КоличествоУпаковок,
	|	ТоварыРеализации.Сумма,
	|	ТоварыРеализации.СуммаНДС,
	|	ТоварыРеализации.СуммаСНДС,
	|	ТоварыРеализации.ЗаказКлиента,
	|	ТоварыРеализации.КодСтроки
	|ИЗ
	|	ТоварыРеализации КАК ТоварыРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыРеализации.ЗаказКлиента
	|ИЗ
	|	ТоварыРеализации КАК ТоварыРеализации
	|ГДЕ
	|	ТоварыРеализации.ЗаказКлиента <> НЕОПРЕДЕЛЕНО";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения.Реализация);
	Запрос.УстановитьПараметр("АктОРасхождениях", ДанныеЗаполнения.АктОРасхождениях);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаШапка = ПакетЗапросов[0].Выбрать();
	ВыборкаШапка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Рин1_ДопоставкаПоРеализации = ДанныеЗаполнения.Реализация;
	ЖелаемаяДатаОтгрузки = ТекущаяДата();
	
	Товары.Загрузить(ПакетЗапросов[2].Выгрузить());
	ОбеспечениеСервер.ЗаполнитьДатыОтгрузкиВТаблице(ЖелаемаяДатаОтгрузки, Товары, "ДатаОтгрузки");
	
	ВыборкаЗаказы = ПакетЗапросов[3].Выбрать();
	ЭлементовВВыборкеЗаказы = ВыборкаЗаказы.Количество();
	Если ЭлементовВВыборкеЗаказы > 0 Тогда
		РеализацияПоЗаказам = Истина;
		Если ЭлементовВВыборкеЗаказы = 1 Тогда
			ВыборкаЗаказы.Следующий();
			ЗаказКлиента = ВыборкаЗаказы.ЗаказКлиента;
		КонецЕсли;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(Статус) Тогда
	//	Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	//КонецЕсли;
	
КонецПроцедуры

&Вместо("ОбработкаЗаполнения")
Процедура Рин1_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	// Вставить содержимое метода.
//	ПродолжитьВызов(ДанныеЗаполнения, СтандартнаяОбработка);
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("АктОРасхождениях") 
			И ДанныеЗаполнения.Свойство("Реализация") Тогда
			ЗаполнитьДокументНаОснованииАктаОРасхожденияхПослеОтгрузки(ДанныеЗаполнения);
		Иначе
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииСделкиПоПродаже(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаданиеТорговомуПредставителю") Тогда
		ЗаполнитьДокументНаОснованииЗаданияТорговомуПредставителю(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьУсловияПродаж();
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, Товары, Ложь);
	
	Если Не ЗначениеЗаполнено(ПорядокОплаты) Тогда
		ВалютаОплаты              = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты, БанковскийСчет, Касса);
		ПорядокОплаты             = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта,НалогообложениеНДС,ВалютаОплаты);
	КонецЕсли;
		
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
	ЗаказКлиентаЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецЕсли
//}}20200714 ГлазуновДВ

//++Шерстюк Ю.Ю. 16.04.2021 задача 7625 заполняем менеджера и подразделение из договора
&После("ИнициализироватьДокумент")
Процедура Рин1_ИнициализироватьДокумент(ДанныеЗаполнения) //задача 7625
	Если ЗначениеЗаполнено(Договор) Тогда 
		Менеджер = Договор.Менеджер;
		Подразделение = Договор.Подразделение;
	КонецЕсли;
КонецПроцедуры

// + [Rineco], [Киселев А.Н.] [09.09.2021] 
// Задача: [№ 17177], [# ЗК Заполнение менеджера по договору ]
&Вместо("ЗаполнитьУсловияПродаж")
Процедура Рин1_ЗаполнитьУсловияПродаж(Знач УсловияПродаж)
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.ВалютаВзаиморасчетов;
	ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	ЦенаВключаетНДС      		   = УсловияПродаж.ЦенаВключаетНДС;
	ВернутьМногооборотнуюТару 	   = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	СрокВозвратаМногооборотнойТары = УсловияПродаж.СрокВозвратаМногооборотнойТары;
	ТребуетсяЗалогЗаТару 		   = УсловияПродаж.ТребуетсяЗалогЗаТару;
	НаправлениеДеятельности 	   = УсловияПродаж.НаправлениеДеятельности;
	
	ИзмененаОрганизация = ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Организация;
	ИзмененаФормаОплаты = ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) И УсловияПродаж.ФормаОплаты <> ФормаОплаты;
	
	ФормаОплаты = УсловияПродаж.ФормаОплаты;
	
	Если ИзмененаОрганизация Тогда
		Организация = УсловияПродаж.Организация;
	КонецЕсли;
	
	Если ИзмененаОрганизация Или ИзмененаФормаОплаты Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;

		Касса  = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) 
			И НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда

		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперация, Валюта);
		
		// + [Rineco], [Киселев А.Н.] [09.09.2021] 
		// Задача: [№ 17177], [#Менеджер по договору по умолчанию]
		Если ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Договор.Менеджер) Тогда
			ЭтотОбъект.Менеджер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Договор,"Менеджер");
		КонецЕсли;
		// - [Rineco], [Киселев А.Н.] [09.09.2021]
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, Соглашение, Договор);
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
		ИЛИ НЕ УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		ПорядокОплаты = УсловияПродаж.ПорядокОплаты;
	Иначе
		ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокОплаты");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Склад = УсловияПродаж.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки)
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала,Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
	Иначе
		ЖелаемаяДатаОтгрузки = Дата(1,1,1);
	КонецЕсли;

КонецПроцедуры
// - [Rineco], [Киселев А.Н.] [09.09.2021]