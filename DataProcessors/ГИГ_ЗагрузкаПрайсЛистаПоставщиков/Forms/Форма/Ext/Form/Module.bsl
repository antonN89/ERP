&НаКлиенте
Перем ЗакрытиеРазрешено;

&НаСервере
Функция ПрочитатьФайл(АдресВХранилище, РасширениеФайла)
	
	Объект.ПравилаЗагрузки.Очистить();
	
	Попытка
		
		Если ЗначениеЗаполнено(АдресТабличногоДокументаВХранилище) Тогда
			УдалитьИзВременногоХранилища(АдресТабличногоДокументаВХранилище);
		КонецЕсли; 
		
		ДанныйФайл = ПолучитьИзВременногоХранилища(АдресВХранилище);
		ФайлЕксель = ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДанныйФайл.Записать(ФайлЕксель);
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		//ТабличныйДокумент.Прочитать(ФайлЕксель, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		ТабличныйДокумент.Прочитать(ФайлЕксель);
		АдресТабличногоДокументаВХранилище = ПоместитьВоВременноеХранилище(ТабличныйДокумент, УникальныйИдентификатор);
		
		УдалитьИзВременногоХранилища(АдресВХранилище);
		УдалитьФайлы(ФайлЕксель);
		
	Исключение
		
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		// сообщение о том, что необходимо сохранить файл ч/з норм офис
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Структура выбранного файла системе не доступна!"+Символы.ПС+"Необходимо создать новую книгу в формате EXCEL, скопировать содержимое указанного выйла и сохранить новый файл с нужным расширением!";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Для Каждого ОбластьТД ИЗ ТабличныйДокумент.Области Цикл
		СтрокаТаблицыПравил = Объект.ПравилаЗагрузки.Добавить();
		СтрокаТаблицыПравил.ИмяЛиста = ОбластьТД.Имя;
	КонецЦикла;
	
	Возврат Объект.ПравилаЗагрузки.Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореФайлаExcel(ИмяФайла)
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если Не ВыбФайл.Существует() Или Не ВыбФайл.ЭтоФайл() Тогда
		Сообщить("Выбранный файл не возможно загрузить. Проверьте правильность выбора.");
		Возврат;
	КонецЕсли; 
	
	Состояние("Пожалуйста подождите, производится чтение файла...");
	
	ПроверкаПройдена = Ложь;
	СписокЗагруженныхДанных.Очистить();
	
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор); 
	ПрочитатьФайл(АдресФайлаВХранилище, ВыбФайл.Расширение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = "Файлы Excel(*.xlsx;*.xls)|*.xlsx;*.xls";
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ИмяФайлаЗагрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ПриВыбореФайлаExcel(Объект.ИмяФайлаЗагрузки);
	Иначе
		Объект.ИмяФайлаЗагрузки = "";
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаЗагрузки) Тогда
		ПриВыбореФайлаExcel(Объект.ИмяФайлаЗагрузки);
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция  ЗагрузитьМетодом_EXCEL1C(АдресВХранилище, ИмяЛистаЗагрузки, ТекущееПравилоЗагрузки, НачСтрока, КонСтрока, ТолькоПроверить = Ложь)
	
	Попытка
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Исключение
		
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка получения табличного документа из хранилища! Попробуйте перевыбрать загружаемый файл.";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
		Возврат 0;
		
	КонецПопытки;
	
	ОбластьФайла = ТабличныйДокумент.ПолучитьОбласть(ИмяЛистаЗагрузки);
	КолВоСтрокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоВертикали();
	КолВоКолонокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоГоризонтали();
	
	// Проверка заполненности листа.
	Если КолвоСтрокФайла = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	КолВоКолонокФайла = Мин(КолВоКолонокФайла, 45); // максимально сейчас работает с 45 колонками
	
	ТаблицаРезультат = РеквизитФормыВЗначение("ТаблицаДанных");
	
	НачСтрока = ?(НачСтрока = 0, 1, НачСтрока);
	КонСтрока = ?(КонСтрока = 0, КолвоСтрокФайла, КонСтрока);
	
	Для нСтрока = НачСтрока По КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ.НомерСтроки = нСтрока;
		НоваяСтрокаТФ[0] = нСтрока;
		Для нКолонка = 1 По КолВоКолонокФайла Цикл
			
			ТекущаяОбласть = ОбластьФайла.Область(нСтрока, нКолонка);
			
			//Если ТекущаяОбласть.СодержитЗначение Тогда
			//	ЗначениеЯчейки = ТекущаяОбласть.Значение;        // Число, Дата.
			//Иначе
			//	ЗначениеЯчейки = СокрЛП(ТекущаяОбласть.Текст);    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
			//	Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			//		ЗначениеЯчейки = ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(ЗначениеЯчейки);
			//		Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда
			//			ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли; 
			
			ЗначениеЯчейки = СокрЛП(ТекущаяОбласть.Текст);
			
			НоваяСтрокаТФ["N" + нКолонка] = ЗначениеЯчейки;

		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаРезультат, "ТаблицаДанных");
	
	Если ТолькоПроверить Тогда
		ПроверитьНаСервере(ТаблицаРезультат, ТекущееПравилоЗагрузки, ИмяЛистаЗагрузки);
	Иначе
		//++Шерстюк Ю.Ю.
		//ЗагрузитьНаСервере(ТаблицаРезультат, ТекущееПравилоЗагрузки, ИмяЛистаЗагрузки);
		
		 тзНоменклатураДляИзменения = ЗагрузитьНаСервере(ТаблицаРезультат, ТекущееПравилоЗагрузки, ИмяЛистаЗагрузки);
		//--Шерстюк Ю.Ю.
	КонецЕсли; 
//++Шерстюк Ю.Ю.
	Возврат тзНоменклатураДляИзменения
//--Шерстюк Ю.Ю.
	
КонецФункции

&НаСервере
Функция ПолучитьИПрочитатьКолонкиФайлаПоПравилу(ТекущееПравилоЗагрузки, ЧислоНеобходимыхКолонок, СтрокаНаименованийКолонок)
	
	СтруктураКолонок = Новый Структура;
	
	СтруктураКолонок.Вставить("КолонкаУникальныйИдентификатор");
	СтруктураКолонок.Вставить("КолонкаДополнительныйУникальныйИдентификатор");
	СтруктураКолонок.Вставить("КолонкаНаименования");
	СтруктураКолонок.Вставить("КолонкаЗначениеТарифа");		
	СтруктураКолонок.Вставить("КолонкаЗначениеТарифаСНДС");		
	СтруктураКолонок.Вставить("КолонкаЕдиницаИзмеренияТарифа"); 		
	СтруктураКолонок.Вставить("КолонкаБазоваяЕдиницаИзмерения");		
	СтруктураКолонок.Вставить("КолонкаОсновнаяЕдиницаИзмерения");		
	СтруктураКолонок.Вставить("КолонкаТранспортнаяЕдиницаИзмерения");   		
	СтруктураКолонок.Вставить("КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения");		
	СтруктураКолонок.Вставить("КолонкаЗначениеОбъема");		
	СтруктураКолонок.Вставить("КолонкаЗначениеВеса");		
	СтруктураКолонок.Вставить("КолонкаШтрихКодДляБазовойЕдиницыИзмерения");
	СтруктураКолонок.Вставить("КолонкаКоэффициентОсновнойЕдиницыИзмерения");
	СтруктураКолонок.Вставить("КолонкаКоэффициентТранспортнойЕдиницыИзмерения");
	СтруктураКолонок.Вставить("КолонкаКоэффициентЕдиницыИзмеренияТарифа");
	СтруктураКолонок.Вставить("КолонкаМРЦСНДС");
	СтруктураКолонок.Вставить("КолонкаМРЦБезНДС");
	СтруктураКолонок.Вставить("КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения");
	СтруктураКолонок.Вставить("ЦеноваяКатегория");
	СтруктураКолонок.Вставить("КоличествоЕдиницВТарифе");
	
	СтруктураКолонок.Вставить("КолонкаСвойстваСкладскойСтатус");
	СтруктураКолонок.Вставить("КолонкаСрокПоставкиСОсновногоСклада");
	
	СтруктураКолонок.Вставить("КолонкаАналитика1");
	СтруктураКолонок.Вставить("КолонкаАналитика2");
	СтруктураКолонок.Вставить("КолонкаАналитика3");
	СтруктураКолонок.Вставить("КолонкаАналитика4");
	СтруктураКолонок.Вставить("КолонкаАналитика5");
	
	СтруктураКолонок.Вставить("КолонкаCOS1");
	СтруктураКолонок.Вставить("КолонкаCOS2");
	СтруктураКолонок.Вставить("КолонкаCOS3");
	СтруктураКолонок.Вставить("КолонкаCOS4");
	СтруктураКолонок.Вставить("КолонкаCOS5");
	
	СтруктураКолонок.Вставить("КолонкаЕдиницаВеса");
	СтруктураКолонок.Вставить("КолонкаЕдиницаОбъема");
	//++Шерстюк Ю.Ю. 04.05.2021 Задача 8025
	СтруктураКолонок.Вставить("КолонкаЕдиницаВысоты");
	СтруктураКолонок.Вставить("КолонкаЕдиницаШирины");
	СтруктураКолонок.Вставить("КолонкаЕдиницаГлубины");
	СтруктураКолонок.Вставить("КолонкаЗначениеВысоты");		
	СтруктураКолонок.Вставить("КолонкаЗначениеШирины");		
	СтруктураКолонок.Вставить("КолонкаЗначениеГлубины");
	
	СтруктураКолонок.Вставить("Марка");	
	СтруктураКолонок.Вставить("СкладскаяГруппа");		

	//--Шерстюк Ю.Ю.
	
	СтруктураКолонок.Вставить("ДополнительнаяАналитика1");
	СтруктураКолонок.Вставить("ДополнительнаяАналитика2");
	СтруктураКолонок.Вставить("ДополнительнаяАналитика3");
	СтруктураКолонок.Вставить("ДополнительнаяАналитика4");
	СтруктураКолонок.Вставить("ДополнительнаяАналитика5");
	
	СоответствиеКолонок = Новый Соответствие;
	Для нКолонка = 1 по ЧислоНеобходимыхКолонок Цикл
		ИмяКолонки = "N" + нКолонка;
		ЗначениеКолонки = СокрЛП(СтрЗаменить(СтрокаНаименованийКолонок[ИмяКолонки], Символы.ПС, ""));
		Если ЗначениеЗаполнено(ЗначениеКолонки) Тогда
			СоответствиеКолонок.Вставить(ЗначениеКолонки, ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекКолонка Из СтруктураКолонок Цикл
		ТекЗначение = ТекущееПравилоЗагрузки[ТекКолонка.Ключ];
		Если ЗначениеЗаполнено(ТекЗначение) И ТипЗнч(ТекЗначение) = Тип("Строка") Тогда
			ИмяКолонки = СоответствиеКолонок.Получить(ТекЗначение);
			СтруктураКолонок.Вставить(ТекКолонка.Ключ, ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураКолонок.Вставить("СрокПоставки", СтруктураКолонок.КолонкаСрокПоставкиСОсновногоСклада);
	СтруктураКолонок.Вставить("СкладскойСтатус", СтруктураКолонок.КолонкаСвойстваСкладскойСтатус);
	
	Возврат СтруктураКолонок;
	
КонецФункции	


&НаСервере
Функция ЗагрузитьНаСервере(ТаблицаДанных_Полная, ТекущееПравилоЗагрузки, ИмяЛистаЗагрузки)
	//++Шерстюк Ю.Ю.
	пПустаяСтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	пУпаковкиЕдиницыИзмеренияПусто = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	пМаркаПусто = Справочники.Марки.ПустаяСсылка();
	пСкладсакяГруппаПусто = Справочники.СкладскиеГруппыНоменклатуры.ПустаяСсылка();
    //--Шерстюк Ю.Ю.
	
	КЧ = Новый КвалификаторыЧисла(15, 2);
	ТекстДокумент = СписокЗагруженныхДанных;
	СчетчикДобавленныхНоменклатур = 0;
	СчетчикДобавленныхЦГ = 0;  
	СчетчикДобавленныхИерархийЦГ = 0;

	КопияТаблицаДанных =  ТаблицаДанных.Выгрузить();
	
	// начинаем основную часть загрузки по правилу	
	СтрокаНаименованийКолонок = КопияТаблицаДанных[?(ТекущееПравилоЗагрузки.ПерваяСтрокаПрайса = 0, 0, ТекущееПравилоЗагрузки.ПерваяСтрокаПрайса-1)];
	ЧислоКолонокФайла = КопияТаблицаДанных.Колонки.Количество() - 2;
	СтруктураКолонок = ПолучитьИПрочитатьКолонкиФайлаПоПравилу(ТекущееПравилоЗагрузки, ЧислоКолонокФайла, СтрокаНаименованийКолонок);
	
	// основной Цикл загрузки... 
	ТЗДляЗагрузки = Новый ТаблицаЗначений;
	Для Каждого ТекущийРеквизит из Метаданные.Справочники.ГИГ_НоменклатураПроизводителей.Реквизиты Цикл
		ТЗДляЗагрузки.Колонки.Добавить(ТекущийРеквизит.Имя);
	КонецЦикла;
	
	ТЗДляЗагрузки.Колонки.Добавить("Наименование");
	ТЗДляЗагрузки.Колонки.Добавить("Родитель");
	ТЗДляЗагрузки.Колонки.Добавить("СсылкаНаЭлемент",     Новый ОписаниеТипов("СправочникСсылка.ГИГ_НоменклатураПроизводителей"));
	
	ТЗДляЗагрузки.Колонки.Добавить("ТарифПоставщика",     Новый ОписаниеТипов("Число",,,КЧ));
	ТЗДляЗагрузки.Колонки.Добавить("ТарифПоставщикаСНДС", Новый ОписаниеТипов("Число",,,КЧ));
	ТЗДляЗагрузки.Колонки.Добавить("МРЦСНДС",             Новый ОписаниеТипов("Число",,,КЧ));
	ТЗДляЗагрузки.Колонки.Добавить("МРЦБезНДС",           Новый ОписаниеТипов("Число",,,КЧ)); 	
	ТЗДляЗагрузки.Колонки.Добавить("ВалютаТарифа",        Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	ТЗДляЗагрузки.Колонки.Добавить("ДатаЗагрузкиТарифа",       Новый ОписаниеТипов("Дата"));
	ТЗДляЗагрузки.Колонки.Добавить("ДатаНачалаДействияТарифа", Новый ОписаниеТипов("Дата"));
	ТЗДляЗагрузки.Колонки.Добавить("ДатаТарифа_Реквизит",      Новый ОписаниеТипов("Дата"));
	
	ТЗДляЗагрузки.Индексы.Добавить("Артикул");
	
	БазоваяОсновнаяЕИ = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("упак", Истина);
	ТаблицаСопоставленийЕдиницИзмерения = ПолучитьТаблицуСопоставлениеЕдиницИзмерения();
	ТаблицаСопоставленийЕдиницИзмерения.Свернуть("НаименованиеЕдИзмеренияПрайс,НаименованиеЕдИзмеренияБаза");
	
	Для каждого СтрокаТаблицы Из КопияТаблицаДанных Цикл
		
		Если СтрокаТаблицы.НомерСтроки <= ТекущееПравилоЗагрузки.ПерваяСтрокаПрайса Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.НомерСтроки >= Объект.ЗагружатьДоСтроки и Объект.ЗагружатьДоСтроки <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		//ТекАртикул = УбратьПробелы(СтрокаТаблицы[СтруктураКолонок.КолонкаУникальныйИдентификатор]);
		ТекАртикул = СокрЛП(СтрокаТаблицы[СтруктураКолонок.КолонкаУникальныйИдентификатор]);
		Если Не ТЗДляЗагрузки.Найти(ТекАртикул, "Артикул") = Неопределено Тогда
			Сообщить("Ошибка загрузки дубриующегося артикула: " + ТекАртикул);
			Продолжить;
		КонецЕсли; 
		
		СтрокаТЗДляЗагрузки = ТЗДляЗагрузки.Добавить();
		СтрокаТЗДляЗагрузки.Производитель      = Объект.Производитель;
		СтрокаТЗДляЗагрузки.Артикул            = ТекАртикул;
		СтрокаТЗДляЗагрузки.Наименование       = ?(СтруктураКолонок.КолонкаНаименования <> "-" и СтруктураКолонок.КолонкаНаименования <> Неопределено, СтрЗаменить(СтрокаТаблицы[СтруктураКолонок.КолонкаНаименования],Символы.ПС,""),"");
		СтрокаТЗДляЗагрузки.НаименованиеПолное = ?(СтруктураКолонок.КолонкаНаименования <> "-" и СтруктураКолонок.КолонкаНаименования <> Неопределено, СтрЗаменить(СтрокаТаблицы[СтруктураКолонок.КолонкаНаименования],Символы.ПС,""),"");
		СтрокаТЗДляЗагрузки.Родитель           = ТекущееПравилоЗагрузки.ГруппаНоменклатуры;
		
		//++Шерстюк Ю.Ю. 07.05.2021 Задача 8025 
		Если СтруктураКолонок.Марка = "-" или СтруктураКолонок.Марка = Неопределено Тогда
			СтрокаТЗДляЗагрузки.Марка      = ?(ТипЗнч(ТекущееПравилоЗагрузки.Марка)= Тип("СправочникСсылка.Марки") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.Марка),ТекущееПравилоЗагрузки.Марка,пМаркаПусто); 
		Иначе
			 СтрокаТЗДляЗагрузки.Марка  = Справочники.Марки.НайтиПоНаименованию(СтрокаТаблицы[СтруктураКолонок.Марка]);
		КонецЕсли;
		//--Шерстюк Ю.Ю.
		
		//++Шерстюк Ю.Ю. 18.05.2021 Задача 7595 
		Если СтруктураКолонок.СкладскаяГруппа = "-" или СтруктураКолонок.СкладскаяГруппа = Неопределено Тогда
			СтрокаТЗДляЗагрузки.СкладскаяГруппа      = ?(ТипЗнч(ТекущееПравилоЗагрузки.СкладскаяГруппа)= Тип("СправочникСсылка.СкладскиеГруппыНоменклатуры") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.СкладскаяГруппа),ТекущееПравилоЗагрузки.СкладскаяГруппа,пСкладсакяГруппаПусто); 
		Иначе
			 СтрокаТЗДляЗагрузки.СкладскаяГруппа  = Справочники.СкладскиеГруппыНоменклатуры.НайтиПоНаименованию(СтрокаТаблицы[СтруктураКолонок.СкладскаяГруппа]);
		КонецЕсли;
		//--Шерстюк Ю.Ю.

		
		Если СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения = "-" или СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения = Неопределено Тогда
			СтрокаТЗДляЗагрузки.БазоваяЕдиницаИзмерения      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения),ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения,пУпаковкиЕдиницыИзмеренияПусто); 
		Иначе
			//++Шерстюк Ю.Ю. 25.06.19
			//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицы[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения],".","");
			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения];
			//++Шерстюк Ю.Ю. 25.06.19
			СтруктураОтбораПоРегистру = Новый Структура;
			СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
			МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
			Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
				 ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
			Иначе
				// это ошибка, сообщение о которой будет выведено в проверке... но ед изм оставляем пустой...
				 ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
			КонецЕсли;	
			СтрокаТЗДляЗагрузки.БазоваяЕдиницаИзмерения      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения),ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения,ТекущаяЕдиницаБазы); 
		КонецЕсли;
		
		
		Если СтруктураКолонок.КолонкаОсновнаяЕдиницаИзмерения = "-" или СтруктураКолонок.КолонкаОсновнаяЕдиницаИзмерения = Неопределено Тогда
			СтрокаТЗДляЗагрузки.ОсновнаяЕдиницаИзмерения      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаОсновнаяЕдиницаИзмерения)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаОсновнаяЕдиницаИзмерения),ТекущееПравилоЗагрузки.КолонкаОсновнаяЕдиницаИзмерения,пУпаковкиЕдиницыИзмеренияПусто); 
		Иначе
			//++Шерстюк Ю.Ю. 25.06.19
			//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицы[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения],".","");
//Исходное			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения];
		//{{20200716 ГлазуновДВ Исправили
			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаОсновнаяЕдиницаИзмерения];
		//}}20200716 ГлазуновДВ
			//--Шерстюк Ю.Ю. 25.06.19
			СтруктураОтбораПоРегистру = Новый Структура;
			СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
			МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
			Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
				 ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
			Иначе
				// это ошибка, сообщение о которой будет выведено в проверке... но ед изм оставляем пустой...
				 ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
			КонецЕсли;	
			СтрокаТЗДляЗагрузки.ОсновнаяЕдиницаИзмерения      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаОсновнаяЕдиницаИзмерения)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаОсновнаяЕдиницаИзмерения),ТекущееПравилоЗагрузки.КолонкаОсновнаяЕдиницаИзмерения,ТекущаяЕдиницаБазы); 
		КонецЕсли;
		
		Если СтруктураКолонок.КолонкаТранспортнаяЕдиницаИзмерения = "-" или СтруктураКолонок.КолонкаТранспортнаяЕдиницаИзмерения = Неопределено Тогда
			СтрокаТЗДляЗагрузки.ТранспортнаяЕдиницаИзмерения      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаТранспортнаяЕдиницаИзмерения)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаТранспортнаяЕдиницаИзмерения),ТекущееПравилоЗагрузки.КолонкаТранспортнаяЕдиницаИзмерения,пУпаковкиЕдиницыИзмеренияПусто); 
		Иначе
			//++Шерстюк Ю.Ю. 25.06.19
			//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицы[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения],".","");
			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения];
			//--Шерстюк Ю.Ю. 25.06.19
			СтруктураОтбораПоРегистру = Новый Структура;
			СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
			МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
			Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
				 ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
			Иначе
				// это ошибка, сообщение о которой будет выведено в проверке... но ед изм оставляем пустой...
				 ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
			КонецЕсли;	
			СтрокаТЗДляЗагрузки.ТранспортнаяЕдиницаИзмерения      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаТранспортнаяЕдиницаИзмерения)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаТранспортнаяЕдиницаИзмерения),ТекущееПравилоЗагрузки.КолонкаТранспортнаяЕдиницаИзмерения,ТекущаяЕдиницаБазы); 
		КонецЕсли;  
		
		Если СтруктураКолонок.КолонкаЕдиницаИзмеренияТарифа = "-" или СтруктураКолонок.КолонкаЕдиницаИзмеренияТарифа = Неопределено  Тогда
			СтрокаТЗДляЗагрузки.ЕдиницаИзмеренияТарифа      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа),ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа,пУпаковкиЕдиницыИзмеренияПусто); 
		Иначе
			//++Шерстюк Ю.Ю. 25.06.19
			//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицы[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения],".","");
//Исходное			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения];
		//{{20200716 ГлазуновДВ Исправили
			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаЕдиницаИзмеренияТарифа];
		//}}20200716 ГлазуновДВ
			//++Шерстюк Ю.Ю. 25.06.19
			СтруктураОтбораПоРегистру = Новый Структура;
			СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
			МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
			Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
				 ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
			Иначе
				// это ошибка, сообщение о которой будет выведено в проверке... но ед изм оставляем пустой...
				 ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
			 КонецЕсли;
			СтрокаТЗДляЗагрузки.ЕдиницаИзмеренияТарифа      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа),ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа,ТекущаяЕдиницаБазы); 
		КонецЕсли;  
		
		//ЕИ Веса
		Если СтруктураКолонок.КолонкаЕдиницаВеса = "-" или СтруктураКолонок.КолонкаЕдиницаВеса = Неопределено  Тогда
			СтрокаТЗДляЗагрузки.ЕИВеса      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаВеса)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаВеса),ТекущееПравилоЗагрузки.КолонкаЕдиницаВеса,пУпаковкиЕдиницыИзмеренияПусто); 
		Иначе
			//++Шерстюк Ю.Ю. 25.06.19
			//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицы[СтруктураКолонок.КолонкаЕдиницаВеса],".","");
			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаЕдиницаВеса];
			//--Шерстюк Ю.Ю. 25.06.19
			СтруктураОтбораПоРегистру = Новый Структура;
			СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
			МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
			Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
				 ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
			Иначе
				// это ошибка, сообщение о которой будет выведено в проверке... но ед изм оставляем пустой...
				 ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
			КонецЕсли;	
			СтрокаТЗДляЗагрузки.ЕИВеса      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаВеса)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаВеса),ТекущееПравилоЗагрузки.КолонкаЕдиницаВеса,ТекущаяЕдиницаБазы); 
		КонецЕсли; 
		
		//ЕИ Объема
		Если СтруктураКолонок.КолонкаЕдиницаОбъема = "-" или СтруктураКолонок.КолонкаЕдиницаОбъема = Неопределено  Тогда
			СтрокаТЗДляЗагрузки.ЕИОбъема      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаОбъема)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаОбъема),ТекущееПравилоЗагрузки.КолонкаЕдиницаОбъема,пУпаковкиЕдиницыИзмеренияПусто); 
		Иначе    
			//++Шерстюк Ю.Ю. 25.06.19
			//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицы[СтруктураКолонок.КолонкаЕдиницаОбъема],".","");
			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаЕдиницаОбъема];
			//--Шерстюк Ю.Ю. 25.06.19
			СтруктураОтбораПоРегистру = Новый Структура;
			СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
			МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
			Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
				 ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
			Иначе
				// это ошибка, сообщение о которой будет выведено в проверке... но ед изм оставляем пустой...
				 ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
			КонецЕсли;	
			СтрокаТЗДляЗагрузки.ЕИОбъема      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаОбъема)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаОбъема),ТекущееПравилоЗагрузки.КолонкаЕдиницаОбъема,ТекущаяЕдиницаБазы); 
		КонецЕсли;  
		
		//++Шерстюк Ю.Ю. 04.05.2021 Задача 8025
		//СтрокаТЗДляЗагрузки.Марка = Объект.Марка;
		
		//ЕИ Высоты
		Если СтруктураКолонок.КолонкаЕдиницаВысоты = "-" или СтруктураКолонок.КолонкаЕдиницаВысоты = Неопределено  Тогда
			СтрокаТЗДляЗагрузки.ЕИВысота      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаВысоты)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаВысоты),ТекущееПравилоЗагрузки.КолонкаЕдиницаВысоты,пУпаковкиЕдиницыИзмеренияПусто); 
		Иначе    
			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаЕдиницаВысоты];
			СтруктураОтбораПоРегистру = Новый Структура;
			СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
			МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
			Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
				 ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
			Иначе
				// это ошибка, сообщение о которой будет выведено в проверке... но ед изм оставляем пустой...
				 ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
			КонецЕсли;	
			СтрокаТЗДляЗагрузки.ЕИВысота      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаВысоты)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаВысоты),ТекущееПравилоЗагрузки.КолонкаЕдиницаВысоты,ТекущаяЕдиницаБазы); 
		КонецЕсли;
		
		//ЕИ Ширины
		Если СтруктураКолонок.КолонкаЕдиницаШирины = "-" или СтруктураКолонок.КолонкаЕдиницаШирины = Неопределено  Тогда
			СтрокаТЗДляЗагрузки.ЕИШирина      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаШирины)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаШирины),ТекущееПравилоЗагрузки.КолонкаЕдиницаШирины,пУпаковкиЕдиницыИзмеренияПусто); 
		Иначе    
			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаЕдиницаШирины];
			СтруктураОтбораПоРегистру = Новый Структура;
			СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
			МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
			Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
				 ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
			Иначе
				// это ошибка, сообщение о которой будет выведено в проверке... но ед изм оставляем пустой...
				 ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
			КонецЕсли;	
			СтрокаТЗДляЗагрузки.ЕИШирина      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаШирины)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаШирины),ТекущееПравилоЗагрузки.КолонкаЕдиницаШирины,ТекущаяЕдиницаБазы); 
		КонецЕсли;

		//ЕИ Глубины
		Если СтруктураКолонок.КолонкаЕдиницаГлубины = "-" или СтруктураКолонок.КолонкаЕдиницаГлубины = Неопределено  Тогда
			СтрокаТЗДляЗагрузки.ЕИГлубина      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаГлубины)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаГлубины),ТекущееПравилоЗагрузки.КолонкаЕдиницаГлубины,пУпаковкиЕдиницыИзмеренияПусто); 
		Иначе    
			ИмяЕдиницыВФайле = СтрокаТаблицы[СтруктураКолонок.КолонкаЕдиницаГлубины];
			СтруктураОтбораПоРегистру = Новый Структура;
			СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
			МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
			Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
				 ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
			Иначе
				// это ошибка, сообщение о которой будет выведено в проверке... но ед изм оставляем пустой...
				 ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
			КонецЕсли;	
			СтрокаТЗДляЗагрузки.ЕИГлубина      = ?(ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаГлубины)= Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаГлубины),ТекущееПравилоЗагрузки.КолонкаЕдиницаГлубины,ТекущаяЕдиницаБазы); 
		КонецЕсли;
		
		СтрокаТЗДляЗагрузки.ВысотаБазовой                   = ?(СтруктураКолонок.КолонкаЗначениеВысоты <> "-" и СтруктураКолонок.КолонкаЗначениеВысоты <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаЗначениеВысоты],"");
		СтрокаТЗДляЗагрузки.ШиринаБазовой                   = ?(СтруктураКолонок.КолонкаЗначениеШирины <> "-" и СтруктураКолонок.КолонкаЗначениеШирины <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаЗначениеШирины],"");
		СтрокаТЗДляЗагрузки.ГлубинаБазовой                   = ?(СтруктураКолонок.КолонкаЗначениеГлубины <> "-" и СтруктураКолонок.КолонкаЗначениеГлубины <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаЗначениеГлубины],"");

		
		//--Шерстюк Ю.Ю.
		СтрокаТЗДляЗагрузки.ВесБазовой                   = ?(СтруктураКолонок.КолонкаЗначениеВеса <> "-" и СтруктураКолонок.КолонкаЗначениеВеса <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаЗначениеВеса],"");
		СтрокаТЗДляЗагрузки.ОбъемБазовой                 = ?(СтруктураКолонок.КолонкаЗначениеОбъема <> "-" и СтруктураКолонок.КолонкаЗначениеОбъема <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаЗначениеОбъема],"");
		СтрокаТЗДляЗагрузки.ШтрихКодБазовой              = ?(СтруктураКолонок.КолонкаШтрихКодДляБазовойЕдиницыИзмерения <> "-" и СтруктураКолонок.КолонкаШтрихКодДляБазовойЕдиницыИзмерения <> Неопределено ,УбратьПробелы(СтрокаТаблицы[СтруктураКолонок.КолонкаШтрихКодДляБазовойЕдиницыИзмерения]),"");
		
		СтрокаТЗДляЗагрузки.КоэффициентОсновнойЕдИзм     = ?(СтруктураКолонок.КолонкаКоэффициентОсновнойЕдиницыИзмерения <> "-" и СтруктураКолонок.КолонкаКоэффициентОсновнойЕдиницыИзмерения <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаКоэффициентОсновнойЕдиницыИзмерения],"");
		СтрокаТЗДляЗагрузки.КоэффициентТранспортнойЕдИзм = ?(СтруктураКолонок.КолонкаКоэффициентТранспортнойЕдиницыИзмерения <> "-" и СтруктураКолонок.КолонкаКоэффициентТранспортнойЕдиницыИзмерения <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаКоэффициентТранспортнойЕдиницыИзмерения],"");
	
		Если НЕ ЗначениеЗаполнено(СтрокаТЗДляЗагрузки.ОсновнаяЕдиницаИзмерения) и ЗначениеЗаполнено(СтрокаТЗДляЗагрузки.КоэффициентОсновнойЕдИзм) Тогда
			Если Число(СтрокаТЗДляЗагрузки.КоэффициентОсновнойЕдИзм) > 1 Тогда 
				СтрокаТЗДляЗагрузки.ОсновнаяЕдиницаИзмерения = БазоваяОсновнаяЕИ;
			Иначе
				СтрокаТЗДляЗагрузки.ОсновнаяЕдиницаИзмерения = пУпаковкиЕдиницыИзмеренияПусто;
				СтрокаТЗДляЗагрузки.КоэффициентОсновнойЕдИзм = 0;				
			КонецЕсли;
		КонецЕсли;	
		
		СтрокаТЗДляЗагрузки.ТарифПоставщика              = ?(СтруктураКолонок.КолонкаЗначениеТарифа <> "-" и СтруктураКолонок.КолонкаЗначениеТарифа <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаЗначениеТарифа],0);
		//++Шерстюк Ю.Ю.
//Исходное		//СтрокаТЗДляЗагрузки.ТарифПоставщикаСНДС          = ?(СтруктураКолонок.КолонкаЗначениеТарифаСНДС <> "-" и СтруктураКолонок.КолонкаЗначениеТарифаСНДС <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаЗначениеТарифаСНДС],0);
		
//Исходное		Если СтруктураКолонок.КолонкаЗначениеТарифаСНДС <> "-" и СтруктураКолонок.КолонкаЗначениеТарифаСНДС <> Неопределено Тогда 
		//	
		//	СтрокаТЗДляЗагрузки.ТарифПоставщикаСНДС      = СтрокаТаблицы[СтруктураКолонок.КолонкаЗначениеТарифаСНДС];
		//	
		//ИначеЕсли СтруктураКолонок.КолонкаЗначениеТарифа <> "-" и СтруктураКолонок.КолонкаЗначениеТарифа <> Неопределено Тогда
		//	
		//	пПеречислениеСтавка = ТекущееПравилоЗагрузки.СтавкаНДС;
		//	
		//	Если пПеречислениеСтавка = пПустаяСтавкаНДС Тогда
		//		
		//		 пНоменклатураПроизводителя = Справочники.ГИГ_НоменклатураПроизводителей.НайтиПоРеквизиту("Артикул",ТекАртикул);
		//		 
		//		 пПеречислениеСтавка = ?(пНоменклатураПроизводителя.СтавкаНДС=пПустаяСтавкаНДС,Перечисления.СтавкиНДС.НДС20,пНоменклатураПроизводителя.СтавкаНДС);
		//		 
		//	КонецЕсли;
		//	
		//	
		//	Если пПеречислениеСтавка = Перечисления.СтавкиНДС.НДС0 Тогда 
		//		пСтавкаНДС = 0;
		//	ИначеЕсли пПеречислениеСтавка = Перечисления.СтавкиНДС.НДС10 Тогда 
		//		пСтавкаНДС = 10;
		//	ИначеЕсли пПеречислениеСтавка = Перечисления.СтавкиНДС.НДС18 Тогда 
		//		пСтавкаНДС = 18;
		//	ИначеЕсли пПеречислениеСтавка = Перечисления.СтавкиНДС.НДС20 Тогда 
		//		пСтавкаНДС = 20;
		//			
		//	КонецЕсли;
		//	
		//	СтрокаТЗДляЗагрузки.ТарифПоставщикаСНДС      = (100+пСтавкаНДС)*СтрокаТЗДляЗагрузки.ТарифПоставщика/100;
		//	
		//Иначе
		//	 СтрокаТЗДляЗагрузки.ТарифПоставщикаСНДС     = 0;
//Исходное		КонецЕсли;

	//{{20200811 ГлазуновДВ ну и Я переделаю	
		пПеречислениеСтавка = ТекущееПравилоЗагрузки.СтавкаНДС;
		Если пПеречислениеСтавка = пПустаяСтавкаНДС Тогда
			 пНоменклатураПроизводителя = Справочники.ГИГ_НоменклатураПроизводителей.НайтиПоРеквизиту("Артикул",ТекАртикул);
			 пПеречислениеСтавка = ?(пНоменклатураПроизводителя.СтавкаНДС=пПустаяСтавкаНДС,Перечисления.СтавкиНДС.НДС20,пНоменклатураПроизводителя.СтавкаНДС);
		КонецЕсли;
		Если пПеречислениеСтавка = Перечисления.СтавкиНДС.НДС0 Тогда 
			пСтавкаНДС = 0;
		ИначеЕсли пПеречислениеСтавка = Перечисления.СтавкиНДС.НДС10 Тогда 
			пСтавкаНДС = 10;
		ИначеЕсли пПеречислениеСтавка = Перечисления.СтавкиНДС.НДС18 Тогда 
			пСтавкаНДС = 18;
		ИначеЕсли пПеречислениеСтавка = Перечисления.СтавкиНДС.НДС20 Тогда 
			пСтавкаНДС = 20;
		КонецЕсли;
		
		СтрокаТЗДляЗагрузки.ТарифПоставщикаСНДС          = ?(СтруктураКолонок.КолонкаЗначениеТарифаСНДС <> "-" и СтруктураКолонок.КолонкаЗначениеТарифаСНДС <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаЗначениеТарифаСНДС],0);
		
		Если СтрокаТЗДляЗагрузки.ТарифПоставщика > 0 И СтрокаТЗДляЗагрузки.ТарифПоставщикаСНДС = 0 Тогда
			СтрокаТЗДляЗагрузки.ТарифПоставщикаСНДС = Окр((100 + пСтавкаНДС) * СтрокаТЗДляЗагрузки.ТарифПоставщика / 100, 2);
		КонецЕсли;
		
	//Заполняем Тариф Если вдруг есть только цена с НДС	
		Если СтрокаТЗДляЗагрузки.ТарифПоставщика = 0 И СтрокаТЗДляЗагрузки.ТарифПоставщикаСНДС > 0 Тогда
			СтрокаТЗДляЗагрузки.ТарифПоставщика = Окр(СтрокаТЗДляЗагрузки.ТарифПоставщикаСНДС * 100 / (100 + пСтавкаНДС),2,1);
		КонецЕсли;
	//}}20200811 ГлазуновДВ
		
		//--Шерстюк Ю.Ю.
		СтрокаТЗДляЗагрузки.ВалютаТарифа                 = ТекущееПравилоЗагрузки.ВалютаТарифа;
		
		СтрокаТЗДляЗагрузки.ДатаЗагрузкиТарифа           = ТекущаяДата();
		СтрокаТЗДляЗагрузки.ДатаНачалаДействияТарифа     = Объект.ДатаТарифа;
		СтрокаТЗДляЗагрузки.ДатаТарифа_Реквизит          = Объект.ДатаТарифа_Реквизит;
		
		СтрокаТЗДляЗагрузки.КоэффициентЕдИзмТарифа       = ?(СтруктураКолонок.КолонкаКоэффициентЕдиницыИзмеренияТарифа <> "-" и СтруктураКолонок.КолонкаКоэффициентЕдиницыИзмеренияТарифа <> Неопределено, СтрокаТаблицы[СтруктураКолонок.КолонкаКоэффициентЕдиницыИзмеренияТарифа], 1);
		СтрокаТЗДляЗагрузки.КоличествоЕдиницВТарифе      = ?(СтруктураКолонок.КоличествоЕдиницВТарифе <> "-" и СтруктураКолонок.КоличествоЕдиницВТарифе <> Неопределено, СтрокаТаблицы[СтруктураКолонок.КоличествоЕдиницВТарифе], 1);
		
		СтрокаТЗДляЗагрузки.СтавкаНДС                    = пПеречислениеСтавка; //20200811 ГлазуновДВ //ИСПРАВИЛИ ТекущееПравилоЗагрузки.СтавкаНДС;
		СтрокаТЗДляЗагрузки.ЦенаВключаетНДС              = ТекущееПравилоЗагрузки.ЦенаВключаетНДС;
		СтрокаТЗДляЗагрузки.ВидНоменклатуры              = ТекущееПравилоЗагрузки.ВидНоменклатурыПоУмолчанию;

		СтрокаТЗДляЗагрузки.МРЦСНДС             = ?(СтруктураКолонок.КолонкаМРЦСНДС <> "-" и СтруктураКолонок.КолонкаМРЦСНДС <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаМРЦСНДС],0); //20200811 ГлазуновДВ БЫЛО ,"");
		СтрокаТЗДляЗагрузки.МРЦБезНДС           = ?(СтруктураКолонок.КолонкаМРЦБезНДС <> "-" и СтруктураКолонок.КолонкаМРЦБезНДС <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаМРЦБезНДС],0); //20200811 ГлазуновДВ БЫЛО ,"");
		СтрокаТЗДляЗагрузки.МинимальныйЗаказ    = ?(СтруктураКолонок.КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения <> "-" и СтруктураКолонок.КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения],"");
	//{{20200811 ГлазуновДВ добавлено
		Если СтрокаТЗДляЗагрузки.МРЦБезНДС > 0 И СтрокаТЗДляЗагрузки.МРЦСНДС = 0 Тогда
			СтрокаТЗДляЗагрузки.МРЦСНДС = Окр((100 + пСтавкаНДС) * СтрокаТЗДляЗагрузки.МРЦБезНДС / 100, 2);
		КонецЕсли;
		
	//Заполняем Тариф Если вдруг есть только цена с НДС	
		Если СтрокаТЗДляЗагрузки.МРЦБезНДС = 0 И СтрокаТЗДляЗагрузки.МРЦСНДС > 0 Тогда
			СтрокаТЗДляЗагрузки.МРЦБезНДС = Окр(СтрокаТЗДляЗагрузки.МРЦСНДС * 100 / (100 + пСтавкаНДС),2,1);
		КонецЕсли;
	//}}20200811 ГлазуновДВ
		
		// данные по ценовым категориям!!! 
		// с иерархией!!!
		// по производителям!!!
		
		// данные кода иерархии
		СтрокаТЗДляЗагрузки.КолонкаCOS1 = ?(СтруктураКолонок.КолонкаCOS1 <> "-" и СтруктураКолонок.КолонкаCOS1 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаCOS1],"");
		СтрокаТЗДляЗагрузки.КолонкаCOS2 = ?(СтруктураКолонок.КолонкаCOS2 <> "-" и СтруктураКолонок.КолонкаCOS2 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаCOS2],"");
		СтрокаТЗДляЗагрузки.КолонкаCOS3 = ?(СтруктураКолонок.КолонкаCOS3 <> "-" и СтруктураКолонок.КолонкаCOS3 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаCOS3],"");
		СтрокаТЗДляЗагрузки.КолонкаCOS4 = ?(СтруктураКолонок.КолонкаCOS4 <> "-" и СтруктураКолонок.КолонкаCOS4 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаCOS4],"");
		СтрокаТЗДляЗагрузки.КолонкаCOS5 = ?(СтруктураКолонок.КолонкаCOS5 <> "-" и СтруктураКолонок.КолонкаCOS5 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаCOS5],"");
		
		// данные наименования иерархии
		СтрокаТЗДляЗагрузки.КолонкаАналитика1 = ?(СтруктураКолонок.КолонкаАналитика1 <> "-" и СтруктураКолонок.КолонкаАналитика1 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаАналитика1],"");
		СтрокаТЗДляЗагрузки.КолонкаАналитика2 = ?(СтруктураКолонок.КолонкаАналитика2 <> "-" и СтруктураКолонок.КолонкаАналитика2 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаАналитика2],"");
		СтрокаТЗДляЗагрузки.КолонкаАналитика3 = ?(СтруктураКолонок.КолонкаАналитика3 <> "-" и СтруктураКолонок.КолонкаАналитика3 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаАналитика3],"");
		СтрокаТЗДляЗагрузки.КолонкаАналитика4 = ?(СтруктураКолонок.КолонкаАналитика4 <> "-" и СтруктураКолонок.КолонкаАналитика4 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаАналитика4],"");
		СтрокаТЗДляЗагрузки.КолонкаАналитика5 = ?(СтруктураКолонок.КолонкаАналитика5 <> "-" и СтруктураКолонок.КолонкаАналитика5 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаАналитика5],"");
		
		// данные дополнительной аналитики
		СтрокаТЗДляЗагрузки.ДополнительнаяАналитика1 = ?(СтруктураКолонок.ДополнительнаяАналитика1 <> "-" и СтруктураКолонок.ДополнительнаяАналитика1 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.ДополнительнаяАналитика1],"");
		СтрокаТЗДляЗагрузки.ДополнительнаяАналитика2 = ?(СтруктураКолонок.ДополнительнаяАналитика2 <> "-" и СтруктураКолонок.ДополнительнаяАналитика2 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.ДополнительнаяАналитика2],"");
		СтрокаТЗДляЗагрузки.ДополнительнаяАналитика3 = ?(СтруктураКолонок.ДополнительнаяАналитика3 <> "-" и СтруктураКолонок.ДополнительнаяАналитика3 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.ДополнительнаяАналитика3],"");
		СтрокаТЗДляЗагрузки.ДополнительнаяАналитика4 = ?(СтруктураКолонок.ДополнительнаяАналитика4 <> "-" и СтруктураКолонок.ДополнительнаяАналитика4 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.ДополнительнаяАналитика4],"");
		СтрокаТЗДляЗагрузки.ДополнительнаяАналитика5 = ?(СтруктураКолонок.ДополнительнаяАналитика5 <> "-" и СтруктураКолонок.ДополнительнаяАналитика5 <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.ДополнительнаяАналитика5],"");
		
		// доп реквизиты еще..
		СтрокаТЗДляЗагрузки.ДополнительныйАртикул = ?(СтруктураКолонок.КолонкаДополнительныйУникальныйИдентификатор <> "-" и СтруктураКолонок.КолонкаДополнительныйУникальныйИдентификатор <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаДополнительныйУникальныйИдентификатор],"");
		СтрокаТЗДляЗагрузки.СкладскойСтатус       = ?(СтруктураКолонок.СкладскойСтатус <> "-" и СтруктураКолонок.СкладскойСтатус <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.СкладскойСтатус],"");
		СтрокаТЗДляЗагрузки.СрокПоставки          = ?(СтруктураКолонок.СрокПоставки <> "-" и СтруктураКолонок.СрокПоставки <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.СрокПоставки],"");
		
		// и ценовая категория... 
		// должна создаваться с учетом вложенности справочника "Иерархия ценовых групп"		
		Если СтруктураКолонок.ЦеноваяКатегория = "-" или СтруктураКолонок.ЦеноваяКатегория = Неопределено Тогда
			СтрокаТЗДляЗагрузки.ЦеноваяКатегория         = ?(ТипЗнч(ТекущееПравилоЗагрузки.ЦеноваяКатегория) = Тип("СправочникСсылка.ЦеновыеГруппы") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.ЦеноваяКатегория),ТекущееПравилоЗагрузки.ЦеноваяКатегория,Справочники.ЦеновыеГруппы.ПустаяСсылка()); 
		Иначе //Создаем новую ЦГ  
			//ЗначениеЦК = УбратьПробелы(СтрокаТаблицы[СтруктураКолонок.ЦеноваяКатегория]);
			ЗначениеЦК = СокрЛП(СтрокаТаблицы[СтруктураКолонок.ЦеноваяКатегория]);
			//bercut 161019
			//СсылкаНаЭлементЦГ = Справочники.ЦеновыеГруппы.НайтиПоНаименованию(""+ЗначениеЦК,Истина);
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЦеновыеГруппы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЦеновыеГруппы КАК ЦеновыеГруппы
			|ГДЕ
			|	ЦеновыеГруппы.Производитель = &Производитель
			|	И ЦеновыеГруппы.Наименование ПОДОБНО &Наименование";
			
			Запрос.УстановитьПараметр("Наименование",ЗначениеЦК);
			Запрос.УстановитьПараметр("Производитель",Объект.Производитель);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда
				Результат = РезультатЗапроса.Выгрузить();
				СсылкаНаЭлементЦГ = Результат[0].Ссылка;
			Иначе
				СсылкаНаЭлементЦГ = Справочники.ЦеновыеГруппы.ПустаяСсылка();
			КонецЕсли;
			//
			Если Объект.СоздаватьЦеновуюГруппу = Истина Тогда 
				Если СсылкаНаЭлементЦГ = Справочники.ЦеновыеГруппы.ПустаяСсылка() Тогда
					ТекОбъектЦГ = Справочники.ЦеновыеГруппы.СоздатьЭлемент();
					ТекОбъектЦГ.Наименование = ЗначениеЦК;
					ТекОбъектЦГ.Производитель = Объект.Производитель;
					ТекОбъектЦГ.Записать();
					СчетчикДобавленныхЦГ = СчетчикДобавленныхЦГ + 1;
					СсылкаНаЭлементЦГ = ТекОбъектЦГ.Ссылка;
					МетаданныеОбъекта = Метаданные.Справочники.ЦеновыеГруппы;
					ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
					ЗаписьЖурналаРегистрации(
											"Данные. Добавление",
											УровеньЖурналаРегистрации.Информация,
											МетаданныеОбъекта,
											ТекОбъектЦГ.Ссылка,
											ТекстСообщения);
					Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
						ТекстСтрокиТекстДокумента = "Создана ценовая группа "+СсылкаНаЭлементЦГ.Наименование;
						ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			СтрокаТЗДляЗагрузки.ЦеноваяКатегория         = ?(ТипЗнч(ТекущееПравилоЗагрузки.ЦеноваяКатегория) = Тип("СправочникСсылка.ЦеновыеГруппы") и ЗначениеЗаполнено(ТекущееПравилоЗагрузки.ЦеноваяКатегория),ТекущееПравилоЗагрузки.ЦеноваяКатегория,СсылкаНаЭлементЦГ); 
		КонецЕсли;  
		
		// теперь, когда известны обязательные реквизиты, создаем номенклатуру поставщика...		
        //bercut 161019
		//--ТекНоменклатура = Справочники.ГИГ_НоменклатураПроизводителей.НайтиПоРеквизиту("Артикул", ТекАртикул,,Объект.Производитель);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГИГ_НоменклатураПроизводителей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГИГ_НоменклатураПроизводителей КАК ГИГ_НоменклатураПроизводителей
		|ГДЕ
		|	ГИГ_НоменклатураПроизводителей.Артикул = &Артикул
		|	И ГИГ_НоменклатураПроизводителей.Производитель = &Производитель";
		
		Запрос.УстановитьПараметр("Артикул",ТекАртикул);
		Запрос.УстановитьПараметр("Производитель",Объект.Производитель);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			Результат = РезультатЗапроса.Выгрузить();
			ТекНоменклатура = Результат[0].Ссылка;
		Иначе
			ТекНоменклатура = Неопределено;
		КонецЕсли;
		//
		
		Если ТекНоменклатура = Неопределено Или ТекНоменклатура = Справочники.ГИГ_НоменклатураПроизводителей.ПустаяСсылка() Тогда   // создаем новый номенклатуры по правилам и данным файла
			// предположим что Артикул - указан в правилах ВСЕГДА!
			НовыйОбъект = Справочники.ГИГ_НоменклатураПроизводителей.СоздатьЭлемент();
			НовыйОбъект.Родитель      = ТекущееПравилоЗагрузки.ГруппаНоменклатуры;
			НовыйОбъект.Артикул       = ТекАртикул;
			НовыйОбъект.Наименование  = ?(СтруктураКолонок.КолонкаНаименования <> "-" и СтруктураКолонок.КолонкаНаименования <> Неопределено ,СтрокаТаблицы[СтруктураКолонок.КолонкаНаименования],"");
			НовыйОбъект.Производитель = Объект.Производитель.Ссылка;
			НовыйОбъект.ЦеноваяКатегория = СтрокаТЗДляЗагрузки.ЦеноваяКатегория;
			НовыйОбъект.ВидНоменклатуры  = ТекущееПравилоЗагрузки.ВидНоменклатурыПоУмолчанию;
			НовыйОбъект.БазоваяЕдиницаИзмерения  = СтрокаТЗДляЗагрузки.БазоваяЕдиницаИзмерения;
			Попытка
				НовыйОбъект.Записать();
				СчетчикДобавленныхНоменклатур = СчетчикДобавленныхНоменклатур + 1;
				ТекНоменклатураЗаписи = НовыйОбъект.Ссылка;
				Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
					ТекстСтрокиТекстДокумента = "Создан элемент справочника Номенклатура производителей: "+ТекНоменклатураЗаписи.Наименование+ " артикул: "+ТекНоменклатураЗаписи.Артикул;
					ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
				КонецЕсли;
				ТекстСообщения = "Обработка загрузки Прайс листа производителя";
				МетаданныеОбъекта = Метаданные.Справочники.ГИГ_НоменклатураПроизводителей;
				ЗаписьЖурналаРегистрации(
					"Данные. Добавление",
					УровеньЖурналаРегистрации.Информация,
					МетаданныеОбъекта,
					ТекНоменклатураЗаписи,
					ТекстСообщения);
			Исключение
				ТекНоменклатураЗаписи = Справочники.ГИГ_НоменклатураПроизводителей.ПустаяСсылка();
			КонецПопытки;
			
			ТекНоменклатураЗаписиНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
			
		Иначе
			ТекНоменклатураЗаписи = ТекНоменклатура.Ссылка;
			ТекНоменклатураЗаписиНоменклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекНоменклатураЗаписи, "Номенклатура");
		КонецЕсли;
		
		СтрокаТЗДляЗагрузки.СсылкаНаЭлемент = ТекНоменклатураЗаписи;
		СтрокаТЗДляЗагрузки.Номенклатура    = ТекНоменклатураЗаписиНоменклатура;
		
	КонецЦикла;
	
	Если Объект.СоздаватьИерархиюЦеновойГруппы = Истина Тогда 
		ТаблицаДляОбработкиЦеновыхГрупп = ТЗДляЗагрузки.Скопировать(,"ЦеноваяКатегория,КолонкаАналитика1,КолонкаАналитика2,КолонкаАналитика3,КолонкаАналитика4,КолонкаАналитика5,КолонкаCOS1,КолонкаCOS2,КолонкаCOS3,КолонкаCOS4,КолонкаCOS5");
		ТаблицаДляОбработкиЦеновыхГрупп.Свернуть("ЦеноваяКатегория,КолонкаАналитика1,КолонкаАналитика2,КолонкаАналитика3,КолонкаАналитика4,КолонкаАналитика5,КолонкаCOS1,КолонкаCOS2,КолонкаCOS3,КолонкаCOS4,КолонкаCOS5");
		ОбработатьЦеновыеГруппы(ТаблицаДляОбработкиЦеновыхГрупп, ТекстДокумент, СчетчикДобавленныхИерархийЦГ);
	КонецЕсли;
	
	СчетчикИзмененныхНоменклатур = 0;
	Для Каждого СтрокаТЗЗагрузки из ТЗДляЗагрузки Цикл
		Если ЗначениеЗаполнено(СтрокаТЗЗагрузки.СсылкаНаЭлемент) Тогда 
			ОбъектЗагрузки = СтрокаТЗЗагрузки.СсылкаНаЭлемент.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОбъектЗагрузки, СтрокаТЗЗагрузки);
			ОбъектЗагрузки.Записать();
			СчетчикИзмененныхНоменклатур = СчетчикИзмененныхНоменклатур + 1;
			// запись журнала регистрации
			//МетаданныеОбъекта = Метаданные.Справочники.ГИГ_НоменклатураПроизводителей;
			ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
			ЗаписьЖурналаРегистрации(
					"Данные. Изменение",
					УровеньЖурналаРегистрации.Информация,
					Метаданные.Справочники.ГИГ_НоменклатураПроизводителей,
					ОбъектЗагрузки.Ссылка,
					ТекстСообщения);
					
			Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
				ДобавитьСтрокиОписанияДанных(СтрокаТЗДляЗагрузки,ТекстДокумент);
			КонецЕсли;
		Иначе
			ТекстСообщения = "Номенклатура "+СтрокаТЗЗагрузки.Наименование+" не найдена и не создана по причине не корректного заполнения строки файла!"+" Строка в файле: "+Число(ТЗДляЗагрузки.Индекс(СтрокаТЗЗагрузки)+ТекущееПравилоЗагрузки.ПерваяСтрокаПрайса+1);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
	// по прочитанным и обработанным данным формируем записи в регистр изменения цен....
	ТЗДляЗагрузки.Свернуть("СсылкаНаЭлемент,ДатаНачалаДействияТарифа,ДатаЗагрузкиТарифа,ДатаТарифа_Реквизит,МРЦСНДС,МРЦБезНДС,ВалютаТарифа,ТарифПоставщика,ТарифПоставщикаСНДС");
	
	ТЗДляЗагрузки.Колонки.СсылкаНаЭлемент.Имя          = "НоменклатураПроизводителя";
	ТЗДляЗагрузки.Колонки.ДатаНачалаДействияТарифа.Имя = "Период";
	ТЗДляЗагрузки.Колонки.ДатаЗагрузкиТарифа.Имя       = "ДатаЗагрузки";
	ТЗДляЗагрузки.Колонки.ДатаТарифа_Реквизит.Имя      = "ДатаТарифа";
	ТЗДляЗагрузки.Колонки.ТарифПоставщика.Имя          = "ТарифБезНДС";
	ТЗДляЗагрузки.Колонки.ТарифПоставщикаСНДС.Имя      = "ТарифСНДС";
	ТЗДляЗагрузки.Колонки.Добавить("ТарифБезНДССоздан",    Новый ОписаниеТипов("Число",,,КЧ)); 
	ТЗДляЗагрузки.Колонки.Добавить("ТарифСНДССоздан",      Новый ОписаниеТипов("Число",,,КЧ)); 
	ТЗДляЗагрузки.Колонки.Добавить("ТарифМРЦСНДССоздан",   Новый ОписаниеТипов("Число",,,КЧ)); 
	ТЗДляЗагрузки.Колонки.Добавить("ТарифМРЦБезНДССоздан", Новый ОписаниеТипов("Число",,,КЧ)); 
	
	ГИГ_МодульСервер.ОбработатьДанныеЦен(ТЗДляЗагрузки, Объект.ДатаТарифа, Объект.ЗагружатьТолькоИзмененныеЦены, "ДобавитьЗаписьВРегистрЦены");
	
	// вывод итоговых сообщений для пользователя
	ТекстСообщения = 
	"Результат загрузки по листу: " + ИмяЛистаЗагрузки + " 
	|Количество добавленных элементов справочника Номенклатура производителей: " + СчетчикДобавленныхНоменклатур + "
	|Количество изменных элементов справочника Номенклатура производителей: " + СчетчикИзмененныхНоменклатур + "
	|Количество добавленных элементов справочника Ценовые группы: " + СчетчикДобавленныхЦГ + "
	|Количество добавленных элементов справочника Иерархия ценовой группы: " + СчетчикДобавленныхИерархийЦГ;
	Сообщение = Новый СообщениеПользователю;
 	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
	
	//++ Шерстюк Ю.Ю.
	 тзНоменклатураДляИзменения = ТЗДляЗагрузки.ВыгрузитьКолонку("НоменклатураПроизводителя");
	 Возврат тзНоменклатураДляИзменения;
	//--Шерстюк Ю.Ю.
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиОписанияДанных(СтрокаТЗДляЗагрузки,ТекстДокумент)
	
	ТекстСтрокиТекстДокумента = "Установлены загруженные реквизиты для элемента справочника <Номенклатура производителей> : "+СтрокаТЗДляЗагрузки.Наименование+" Артикул: "+СтрокаТЗДляЗагрузки.Артикул;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	/////////////////////////////////////////////////////////////////////////////////////
	ТекстСтрокиТекстДокумента = "Производитель: "                   + СтрокаТЗДляЗагрузки.Производитель;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Артикул: "                         + СтрокаТЗДляЗагрузки.Артикул;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Дополнительный артикул: "          + СтрокаТЗДляЗагрузки.ДополнительныйАртикул;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Наименование: "                    + СтрокаТЗДляЗагрузки.Наименование;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Родитель: "                        + СтрокаТЗДляЗагрузки.Родитель;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Базовая единица измерения: "       + СтрокаТЗДляЗагрузки.БазоваяЕдиницаИзмерения; 
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Основная единица измерения: "      + СтрокаТЗДляЗагрузки.ОсновнаяЕдиницаИзмерения; 
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Транспортная единица измерения: "  + СтрокаТЗДляЗагрузки.ТранспортнаяЕдиницаИзмерения; 
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Единица измерения тарифа: "        + СтрокаТЗДляЗагрузки.ЕдиницаИзмеренияТарифа; 
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Ед. зм. веса: "                    + СтрокаТЗДляЗагрузки.ЕИВеса; 
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Ед. изм объема: "                  + СтрокаТЗДляЗагрузки.ЕИОбъема; 
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Вес: "                    + СтрокаТЗДляЗагрузки.ВесБазовой;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Объем: "                  + СтрокаТЗДляЗагрузки.ОбъемБазовой;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Штрих код базовой Ед.Изм.: "      + СтрокаТЗДляЗагрузки.ШтрихКодБазовой;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Коэфф основной Ед.Изм.: "         + СтрокаТЗДляЗагрузки.КоэффициентОсновнойЕдИзм;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Коэфф транспортной Ед.Изм.: "     + СтрокаТЗДляЗагрузки.КоэффициентТранспортнойЕдИзм;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Основная единица измерения: "     + СтрокаТЗДляЗагрузки.ОсновнаяЕдиницаИзмерения;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Тариф поставщика: "               + СтрокаТЗДляЗагрузки.ТарифПоставщика;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Валюта тарифа: "                  + СтрокаТЗДляЗагрузки.ВалютаТарифа;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Дата загрузки тарифа: "           + СтрокаТЗДляЗагрузки.ДатаЗагрузкиТарифа; 
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Дата начала действия тарифа: "    + СтрокаТЗДляЗагрузки.ДатаНачалаДействияТарифа; 
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Коэффициент тарифа: "             + СтрокаТЗДляЗагрузки.КоэффициентЕдИзмТарифа;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Количество единиц в Тарифе: "     + СтрокаТЗДляЗагрузки.КоличествоЕдиницВТарифе;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Ставка НДС: "                     + СтрокаТЗДляЗагрузки.СтавкаНДС;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Цена включает НДС: "              + СтрокаТЗДляЗагрузки.ЦенаВключаетНДС;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "МРЦ с НДС: "                      + СтрокаТЗДляЗагрузки.МРЦСНДС;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "МРЦ без НДС: "                    + СтрокаТЗДляЗагрузки.МРЦБезНДС;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Минимальный заказ: "              + СтрокаТЗДляЗагрузки.МинимальныйЗаказ;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "COS1: "                   + СтрокаТЗДляЗагрузки.КолонкаCOS1;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "COS2: "                   + СтрокаТЗДляЗагрузки.КолонкаCOS2;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "COS3:"                   + СтрокаТЗДляЗагрузки.КолонкаCOS3;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "COS4: "                   + СтрокаТЗДляЗагрузки.КолонкаCOS4;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "COS5: "                   + СтрокаТЗДляЗагрузки.КолонкаCOS5;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Иерархия / Аналитика1: "             + СтрокаТЗДляЗагрузки.КолонкаАналитика1;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Иерархия / Аналитика2: "             + СтрокаТЗДляЗагрузки.КолонкаАналитика2;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Иерархия / Аналитика3: "             + СтрокаТЗДляЗагрузки.КолонкаАналитика3;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Иерархия / Аналитика4: "             + СтрокаТЗДляЗагрузки.КолонкаАналитика4;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Иерархия / Аналитика5: "             + СтрокаТЗДляЗагрузки.КолонкаАналитика5;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Дополнительная аналитика1: "      + СтрокаТЗДляЗагрузки.ДополнительнаяАналитика1;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Дополнительная аналитика2: "      + СтрокаТЗДляЗагрузки.ДополнительнаяАналитика2;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Дополнительная аналитика3: "      + СтрокаТЗДляЗагрузки.ДополнительнаяАналитика3;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Дополнительная аналитика4: "      + СтрокаТЗДляЗагрузки.ДополнительнаяАналитика4;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Дополнительная аналитика5: "      + СтрокаТЗДляЗагрузки.ДополнительнаяАналитика5;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Ценовая категория: "            + СтрокаТЗДляЗагрузки.ЦеноваяКатегория;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Складской статус: "         + СтрокаТЗДляЗагрузки.СкладскойСтатус;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
	
	ТекстСтрокиТекстДокумента = "Срок поставки с основного склада: "         + СтрокаТЗДляЗагрузки.СрокПоставки;
	ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
КонецПроцедуры 	

&НаСервере
Функция ПолучитьТаблицуСопоставлениеЕдиницИзмерения()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СопоставлениеЕдиницИзмерения.НаименованиеЕдИзмеренияПрайс,
	|	СопоставлениеЕдиницИзмерения.НаименованиеЕдИзмеренияБаза
	|ИЗ
	|	РегистрСведений.ГИГ_СопоставлениеЕдиницИзмерения КАК СопоставлениеЕдиницИзмерения";
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции	

&НаСервере
Процедура ОбработатьЦеновыеГруппы(ТаблицаИерархииЦеновыхГрупп,ТекстДокумент,СчетчикДобавленныхИерархийЦГ)
	Для Каждого СтрокаТЗЦГ из  ТаблицаИерархииЦеновыхГрупп Цикл
		//**********************************************************************************************************************************
		// по 1 уровню
		Если (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS1) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика1)) и (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS2) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика2)) Тогда
			ЭлементПервогоУровня = Справочники.ГИГ_ИерархияЦеновыхГрупп.ПустаяСсылка();
			СтруктураОтбора = Новый Структура;
			Если ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS1) Тогда 
				СтруктураОтбора.Вставить("КодИерархии",СтрокаТЗЦГ.КолонкаCOS1);
			Иначе
				СтруктураОтбора.Вставить("Наименование",СтрокаТЗЦГ.КолонкаАналитика1);
			КонецЕсли;
			Выборка = Справочники.ГИГ_ИерархияЦеновыхГрупп.Выбрать(,,СтруктураОтбора);
			Пока Выборка.Следующий() Цикл
				Если Выборка.Производитель = Объект.Производитель Тогда
					ЭлементПервогоУровня =  Выборка.Ссылка;
				КонецЕсли;	
			КонецЦикла;
			Если ЭлементПервогоУровня = Справочники.ГИГ_ИерархияЦеновыхГрупп.ПустаяСсылка() Тогда
				// создаем новый элемент иерархии!! 
				ТекЭлемент = Справочники.ГИГ_ИерархияЦеновыхГрупп.СоздатьЭлемент();
				ТекЭлемент.КодИерархии = СтрокаТЗЦГ.КолонкаCOS1;
				ТекЭлемент.Наименование =  СтрокаТЗЦГ.КолонкаАналитика1;
				ТекЭлемент.Производитель = Объект.Производитель;
				ТекЭлемент.Записать();
				СчетчикДобавленныхИерархийЦГ = СчетчикДобавленныхИерархийЦГ + 1;
				МетаданныеОбъекта = Метаданные.Справочники.ГИГ_ИерархияЦеновыхГрупп;
				ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
				ЗаписьЖурналаРегистрации(
				"Данные. Добавление",
										УровеньЖурналаРегистрации.Информация,
										МетаданныеОбъекта,
										ТекЭлемент.Ссылка,
										ТекстСообщения);
				Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
					ТекстСтрокиТекстДокумента = "Создан элемент справочника Иерархия ценовых групп (1 уровень): "+ТекЭлемент.Ссылка.Наименование;
					ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
				КонецЕсли;
				ЭлементПервогоУровня = ТекЭлемент.Ссылка;			
			КонецЕсли;
		Иначе  // если последущего уровня нет, то это элемент ЦГ, а не иерархии...
			Если (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS1) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика1)) Тогда 
				ЗначениеЦК = УбратьПробелы(СтрокаТЗЦГ.ЦеноваяКатегория);
				СсылкаНаЭлементЦГ = Справочники.ЦеновыеГруппы.НайтиПоНаименованию(""+ЗначениеЦК,Истина);
				Если  СсылкаНаЭлементЦГ.КодГруппыИерархии <> СтрокаТЗЦГ.КолонкаCOS1 и СсылкаНаЭлементЦГ.НаименованиеГруппыИерархии <> СтрокаТЗЦГ.КолонкаАналитика1 Тогда 
					ОбъектЭлемента = СсылкаНаЭлементЦГ.ПолучитьОбъект();
					ОбъектЭлемента.КодГруппыИерархии = СтрокаТЗЦГ.КолонкаCOS1;
					ОбъектЭлемента.НаименованиеГруппыИерархии = СтрокаТЗЦГ.КолонкаАналитика1;
					ОбъектЭлемента.Описание = ?(ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS1),СтрокаТЗЦГ.КолонкаCOS1+" / "+СтрокаТЗЦГ.КолонкаАналитика1+"",""+СтрокаТЗЦГ.КолонкаАналитика1);
					ОбъектЭлемента.Записать();
					МетаданныеОбъекта = Метаданные.Справочники.ЦеновыеГруппы;
					ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
					ЗаписьЖурналаРегистрации(
										"Данные. Изменение",
										УровеньЖурналаРегистрации.Информация,
										МетаданныеОбъекта,
										ОбъектЭлемента.Ссылка,
										ТекстСообщения);
					Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
						ТекстСтрокиТекстДокумента = "Установлен реквизит <наименование группы иерархии> для справочника <Ценовые группы>: "+СтрокаТЗЦГ.КолонкаАналитика1+" для элемента ценовой категории: "+ОбъектЭлемента.Ссылка.Наименование;
						ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//**********************************************************************************************************************************
		// по 2 уровню
		Если (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS2) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика2)) и (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS3) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика3)) Тогда
			ЭлементВторогоУровня = Справочники.ГИГ_ИерархияЦеновыхГрупп.ПустаяСсылка();
			СтруктураОтбора = Новый Структура;
			Если ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS2) Тогда 
				СтруктураОтбора.Вставить("КодИерархии",СтрокаТЗЦГ.КолонкаCOS2);
			Иначе
				СтруктураОтбора.Вставить("Наименование",СтрокаТЗЦГ.КолонкаАналитика2);
			КонецЕсли;
			Выборка = Справочники.ГИГ_ИерархияЦеновыхГрупп.Выбрать(ЭлементПервогоУровня,,СтруктураОтбора);
			Пока Выборка.Следующий() Цикл
				Если Выборка.Производитель = Объект.Производитель Тогда
					ЭлементВторогоУровня =  Выборка.Ссылка;
				КонецЕсли;	
			КонецЦикла;
			Если ЭлементВторогоУровня = Справочники.ГИГ_ИерархияЦеновыхГрупп.ПустаяСсылка() Тогда
				// создаем новый элемент иерархии!! 
				ТекЭлемент = Справочники.ГИГ_ИерархияЦеновыхГрупп.СоздатьЭлемент();
				ТекЭлемент.КодИерархии   = СтрокаТЗЦГ.КолонкаCOS2;
				ТекЭлемент.Наименование  = СтрокаТЗЦГ.КолонкаАналитика2;
				ТекЭлемент.Родитель      = ЭлементПервогоУровня.Ссылка;
				ТекЭлемент.Производитель = Объект.Производитель;
				ТекЭлемент.Записать();
				СчетчикДобавленныхИерархийЦГ = СчетчикДобавленныхИерархийЦГ + 1;
				МетаданныеОбъекта = Метаданные.Справочники.ГИГ_ИерархияЦеновыхГрупп;
				ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
				ЗаписьЖурналаРегистрации(
										"Данные. Добавление",
										УровеньЖурналаРегистрации.Информация,
										МетаданныеОбъекта,
										ТекЭлемент.Ссылка,
										ТекстСообщения);
				Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
					ТекстСтрокиТекстДокумента = "Создан элемент справочника Иерархия ценовых групп (2 уровень): "+ТекЭлемент.Ссылка.Наименование;
					ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
				КонецЕсли;
				ЭлементВторогоУровня = ТекЭлемент.Ссылка;
			КонецЕсли;
		Иначе  // если последущего уровня нет, то это элемент ЦГ, а не иерархии...
			Если (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS2) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика2))  Тогда 
				ЗначениеЦК = УбратьПробелы(СтрокаТЗЦГ.ЦеноваяКатегория);
				СсылкаНаЭлементЦГ = Справочники.ЦеновыеГруппы.НайтиПоНаименованию(""+ЗначениеЦК,Истина);
				Если  СсылкаНаЭлементЦГ.КодГруппыИерархии <> СтрокаТЗЦГ.КолонкаCOS2 и СсылкаНаЭлементЦГ.НаименованиеГруппыИерархии <> СтрокаТЗЦГ.КолонкаАналитика2 Тогда 
					ОбъектЭлемента = СсылкаНаЭлементЦГ.ПолучитьОбъект(); 
					ОбъектЭлемента.Иерархия = ЭлементПервогоУровня.Ссылка;
					ОбъектЭлемента.КодГруппыИерархии = СтрокаТЗЦГ.КолонкаCOS2;
					ОбъектЭлемента.НаименованиеГруппыИерархии = СтрокаТЗЦГ.КолонкаАналитика2;
					ОбъектЭлемента.Описание = ?(ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS2),СтрокаТЗЦГ.КолонкаCOS2+" / "+СтрокаТЗЦГ.КолонкаАналитика2+"",""+СтрокаТЗЦГ.КолонкаАналитика2);
					ОбъектЭлемента.Записать();
					МетаданныеОбъекта = Метаданные.Справочники.ЦеновыеГруппы;
					ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
					ЗаписьЖурналаРегистрации(
										"Данные. Изменение",
										УровеньЖурналаРегистрации.Информация,
										МетаданныеОбъекта,
										ОбъектЭлемента.Ссылка,
										ТекстСообщения);
					Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
						ТекстСтрокиТекстДокумента = "Установлен реквизит <наименование группы иерархии>: "+СтрокаТЗЦГ.КолонкаАналитика2+" для элемента ценовой категории: "+ОбъектЭлемента.Ссылка.Наименование;
						ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//**********************************************************************************************************************************
		// по 3 уровню
		Если (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS3) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика3)) и (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS4) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика4)) Тогда
			ЭлементТретьегоУровня = Справочники.ГИГ_ИерархияЦеновыхГрупп.ПустаяСсылка();
			СтруктураОтбора = Новый Структура;
			Если ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS3) Тогда 
				СтруктураОтбора.Вставить("КодИерархии",СтрокаТЗЦГ.КолонкаCOS3);
			Иначе
				СтруктураОтбора.Вставить("Наименование",СтрокаТЗЦГ.КолонкаАналитика3);
			КонецЕсли;
			Выборка = Справочники.ГИГ_ИерархияЦеновыхГрупп.Выбрать(ЭлементВторогоУровня,,СтруктураОтбора);
			Пока Выборка.Следующий() Цикл
				Если Выборка.Производитель = Объект.Производитель Тогда
					ЭлементТретьегоУровня =  Выборка.Ссылка;
				КонецЕсли;	
			КонецЦикла;
			Если ЭлементТретьегоУровня = Справочники.ГИГ_ИерархияЦеновыхГрупп.ПустаяСсылка() Тогда
				// создаем новый элемент иерархии!! 
				ТекЭлемент = Справочники.ГИГ_ИерархияЦеновыхГрупп.СоздатьЭлемент();
				ТекЭлемент.КодИерархии   = СтрокаТЗЦГ.КолонкаCOS3;
				ТекЭлемент.Наименование  = СтрокаТЗЦГ.КолонкаАналитика3;
				ТекЭлемент.Родитель      = ЭлементВторогоУровня.Ссылка;
				ТекЭлемент.Производитель = Объект.Производитель;
				ТекЭлемент.Записать();
				СчетчикДобавленныхИерархийЦГ = СчетчикДобавленныхИерархийЦГ + 1;
				МетаданныеОбъекта = Метаданные.Справочники.ГИГ_ИерархияЦеновыхГрупп;
				ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
				ЗаписьЖурналаРегистрации(
										"Данные. Добавление",
										УровеньЖурналаРегистрации.Информация,
										МетаданныеОбъекта,
										ТекЭлемент.Ссылка,
										ТекстСообщения);
				Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
					ТекстСтрокиТекстДокумента = "Создан элемент справочника Иерархия ценовых групп (3 уровень): "+ТекЭлемент.Ссылка.Наименование;
					ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
				КонецЕсли;
				ЭлементТретьегоУровня = ТекЭлемент.Ссылка;			
			КонецЕсли;
		Иначе  // если последущего уровня нет, то это элемент ЦГ, а не иерархии...
			Если (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS3) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика3)) Тогда 
				ЗначениеЦК = УбратьПробелы(СтрокаТЗЦГ.ЦеноваяКатегория);
				СсылкаНаЭлементЦГ = Справочники.ЦеновыеГруппы.НайтиПоНаименованию(""+ЗначениеЦК,Истина);
				Если  СсылкаНаЭлементЦГ.КодГруппыИерархии <> СтрокаТЗЦГ.КолонкаCOS3 и СсылкаНаЭлементЦГ.НаименованиеГруппыИерархии <> СтрокаТЗЦГ.КолонкаАналитика3 Тогда 
					ОбъектЭлемента = СсылкаНаЭлементЦГ.ПолучитьОбъект(); 
					ОбъектЭлемента.Иерархия = ЭлементВторогоУровня.Ссылка;
					ОбъектЭлемента.КодГруппыИерархии = СтрокаТЗЦГ.КолонкаCOS3;
					ОбъектЭлемента.НаименованиеГруппыИерархии = СтрокаТЗЦГ.КолонкаАналитика3;
					ОбъектЭлемента.Описание = ?(ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS3),СтрокаТЗЦГ.КолонкаCOS3+" / "+СтрокаТЗЦГ.КолонкаАналитика3+"",""+СтрокаТЗЦГ.КолонкаАналитика3);
					ОбъектЭлемента.Записать();
					МетаданныеОбъекта = Метаданные.Справочники.ЦеновыеГруппы;
					ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
					ЗаписьЖурналаРегистрации(
										"Данные. Изменение",
										УровеньЖурналаРегистрации.Информация,
										МетаданныеОбъекта,
										ОбъектЭлемента.Ссылка,
										ТекстСообщения);
					Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
						ТекстСтрокиТекстДокумента = "Установлен реквизит <наименование группы иерархии>: "+СтрокаТЗЦГ.КолонкаАналитика3+" для элемента ценовой категории: "+ОбъектЭлемента.Ссылка.Наименование;
						ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//**********************************************************************************************************************************
		// по 4 уровню
		Если (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS4) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика4)) и (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS5) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика5)) Тогда
			ЭлементЧетвертогоУровня = Справочники.ГИГ_ИерархияЦеновыхГрупп.ПустаяСсылка();
			СтруктураОтбора = Новый Структура;
			Если ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS4) Тогда 
				СтруктураОтбора.Вставить("КодИерархии",СтрокаТЗЦГ.КолонкаCOS4);
			Иначе
				СтруктураОтбора.Вставить("Наименование",СтрокаТЗЦГ.КолонкаАналитика4);
			КонецЕсли;
			Выборка = Справочники.ГИГ_ИерархияЦеновыхГрупп.Выбрать(ЭлементТретьегоУровня,,СтруктураОтбора);
			Пока Выборка.Следующий() Цикл
				Если Выборка.Производитель = Объект.Производитель Тогда
					ЭлементЧетвертогоУровня =  Выборка.Ссылка;
				КонецЕсли;	
			КонецЦикла;
			Если ЭлементЧетвертогоУровня = Справочники.ГИГ_ИерархияЦеновыхГрупп.ПустаяСсылка() Тогда
				// создаем новый элемент иерархии!! 
				ТекЭлемент = Справочники.ГИГ_ИерархияЦеновыхГрупп.СоздатьЭлемент();
				ТекЭлемент.КодИерархии   = СтрокаТЗЦГ.КолонкаCOS4;
				ТекЭлемент.Наименование  = СтрокаТЗЦГ.КолонкаАналитика4;
				ТекЭлемент.Родитель      = ЭлементТретьегоУровня.Ссылка;
				ТекЭлемент.Производитель = Объект.Производитель;
				ТекЭлемент.Записать();
				СчетчикДобавленныхИерархийЦГ = СчетчикДобавленныхИерархийЦГ + 1;
				МетаданныеОбъекта = Метаданные.Справочники.ГИГ_ИерархияЦеновыхГрупп;
				ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
				ЗаписьЖурналаРегистрации(
										"Данные. Добавление",
										УровеньЖурналаРегистрации.Информация,
										МетаданныеОбъекта,
										ТекЭлемент.Ссылка,
										ТекстСообщения);
				Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
					ТекстСтрокиТекстДокумента = "Создан элемент справочника Иерархия ценовых групп (4 уровень): "+ТекЭлемент.Ссылка.Наименование;
					ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
				КонецЕсли;
				ЭлементЧетвертогоУровня = ТекЭлемент.Ссылка;			
			КонецЕсли;
		Иначе  // если последущего уровня нет, то это элемент ЦГ, а не иерархии...
			Если (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS4) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика4)) Тогда 
				ЗначениеЦК = УбратьПробелы(СтрокаТЗЦГ.ЦеноваяКатегория);
				СсылкаНаЭлементЦГ = Справочники.ЦеновыеГруппы.НайтиПоНаименованию(""+ЗначениеЦК,Истина);
				Если  СсылкаНаЭлементЦГ.КодГруппыИерархии <> СтрокаТЗЦГ.КолонкаCOS4 и СсылкаНаЭлементЦГ.НаименованиеГруппыИерархии <> СтрокаТЗЦГ.КолонкаАналитика4 Тогда 
					ОбъектЭлемента = СсылкаНаЭлементЦГ.ПолучитьОбъект(); 
					ОбъектЭлемента.Иерархия = ЭлементТретьегоУровня.Ссылка;
					ОбъектЭлемента.КодГруппыИерархии = СтрокаТЗЦГ.КолонкаCOS4;
					ОбъектЭлемента.НаименованиеГруппыИерархии = СтрокаТЗЦГ.КолонкаАналитика4;
					ОбъектЭлемента.Описание = ?(ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS4),СтрокаТЗЦГ.КолонкаCOS4+" / "+СтрокаТЗЦГ.КолонкаАналитика4+"",""+СтрокаТЗЦГ.КолонкаАналитика4);
					ОбъектЭлемента.Записать();
					МетаданныеОбъекта = Метаданные.Справочники.ЦеновыеГруппы;
					ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
					ЗаписьЖурналаРегистрации(
										"Данные. Изменение",
										УровеньЖурналаРегистрации.Информация,
										МетаданныеОбъекта,
										ОбъектЭлемента.Ссылка,
										ТекстСообщения);
					Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
						ТекстСтрокиТекстДокумента = "Установлен реквизит <наименование группы иерархии>: "+СтрокаТЗЦГ.КолонкаАналитика4+" для элемента ценовой категории: "+ОбъектЭлемента.Ссылка.Наименование;
						ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//**********************************************************************************************************************************
		// по 5 уровню  Тут уже однозначно элемент ценовой группы....
		Если (ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS5) или ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаАналитика5)) Тогда
			ЗначениеЦК = УбратьПробелы(СтрокаТЗЦГ.ЦеноваяКатегория);
			СсылкаНаЭлементЦГ = Справочники.ЦеновыеГруппы.НайтиПоНаименованию(""+ЗначениеЦК,Истина);
			Если  СсылкаНаЭлементЦГ.КодГруппыИерархии <> СтрокаТЗЦГ.КолонкаCOS5 и СсылкаНаЭлементЦГ.НаименованиеГруппыИерархии <> СтрокаТЗЦГ.КолонкаАналитика5 Тогда 
				ОбъектЭлемента = СсылкаНаЭлементЦГ.ПолучитьОбъект(); 
				ОбъектЭлемента.Иерархия = ЭлементЧетвертогоУровня.Ссылка;
				ОбъектЭлемента.КодГруппыИерархии = СтрокаТЗЦГ.КолонкаCOS5;
				ОбъектЭлемента.НаименованиеГруппыИерархии = СтрокаТЗЦГ.КолонкаАналитика5;
				ОбъектЭлемента.Описание = ?(ЗначениеЗаполнено(СтрокаТЗЦГ.КолонкаCOS5),СтрокаТЗЦГ.КолонкаCOS5+" / "+СтрокаТЗЦГ.КолонкаАналитика5+"",""+СтрокаТЗЦГ.КолонкаАналитика5);
				ОбъектЭлемента.Записать();
				МетаданныеОбъекта = Метаданные.Справочники.ЦеновыеГруппы;
				ТекстСообщения = "Обработка загрузки Прайс листа производителя"; 
				ЗаписьЖурналаРегистрации(
										"Данные. Изменение",
										УровеньЖурналаРегистрации.Информация,
										МетаданныеОбъекта,
										ОбъектЭлемента.Ссылка,
										ТекстСообщения);
				Если Объект.ФормироватьСписокданныхЗагрузки = Истина Тогда 
					ТекстСтрокиТекстДокумента = "Установлен реквизит <наименование группы иерархии>: "+СтрокаТЗЦГ.КолонкаАналитика5+" для элемента ценовой категории: "+ОбъектЭлемента.Ссылка.Наименование;
					ТекстДокумент.ДобавитьСтроку(ТекстСтрокиТекстДокумента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Функция ЗагрузкаВозможна()
	
	Если ЗначениеЗаполнено(АдресТабличногоДокументаВХранилище) Тогда
		ЕстьТабДок = Истина;
	Иначе
		ЕстьТабДок = Ложь;
		Сообщить("Файл не был загружен!", СтатусСообщения.Важное);
	КонецЕсли; 
	
	ЕстьПравило = Ложь;
	Для каждого СтрокаТаблицыЛистов Из Объект.ПравилаЗагрузки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыЛистов.Правило) Тогда 
			ЕстьПравило = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ЕстьПравило Тогда 
		Сообщить("Необходимо указать правила загрузки для листов файла!", СтатусСообщения.Важное);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Производитель) Тогда 
		ЕстьПроизводитель = Истина;
	Иначе
		ЕстьПроизводитель = Ложь;
		Сообщить("Поле < Производитель > обязательно для заполнения!", СтатусСообщения.Важное);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ПоставщикПрайса) Тогда 
		ЕстьПоставщик = Истина;
	Иначе
		ЕстьПоставщик = Ложь;
		Сообщить("Поле < Поставщик > обязательно для заполнения!", СтатусСообщения.Важное);
	КонецЕсли;	
	
	Если Объект.ДатаТарифа = Дата(1,1,1) Тогда
		ЕстьДата = Ложь;
		Сообщить("Дата начала действия тарифа должна быть заполнена!", СтатусСообщения.Важное);
	Иначе
		ЕстьДата = Истина;
	КонецЕсли; 
	
	Возврат ЕстьТабДок И ЕстьПравило И ЕстьПроизводитель И ЕстьПоставщик И ЕстьДата;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗагрузку(ТолькоПроверить = Ложь)
	
	пИтоговыйМассив = Новый Массив;
	
	Если Не ЗагрузкаВозможна() Тогда
		Возврат;
	КонецЕсли;
	
//{{20201005 ГлазуновДВ Убираем строки без установленных правил загрузки
	НомерСтроки = 0;
	Пока НомерСтроки < Объект.ПравилаЗагрузки.Количество() Цикл
		Если Не ЗначениеЗаполнено(Объект.ПравилаЗагрузки[НомерСтроки].Правило) Тогда 
			Объект.ПравилаЗагрузки.Удалить(НомерСтроки);
			НомерСтроки = НомерСтроки - 1;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ЕстьПравило = Неопределено;
//}}20201005 ГлазуновДВ
	
	Сообщить("Начало выполнения:" + ТекущаяДата());
	
	Для Каждого СтрокаТаблицыЛистов Из Объект.ПравилаЗагрузки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыЛистов.Правило) Тогда 
			
			Состояние(?(ТолькоПроверить, "Проверка листа ", "Загрузка листа ") + СтрокаТаблицыЛистов.ИмяЛиста + " по правилу"); 
			
			ТаблицаДанных.Очистить();
			
			НачСтрока = 1;
			КонСтрока = ?(ТолькоПроверить, Объект.ПроверятьДоСтроки, Объект.ЗагружатьДоСтроки);
			//++Шерстюк Ю.Ю.
			//ЗагрузитьМетодом_EXCEL1C(АдресТабличногоДокументаВХранилище, СтрокаТаблицыЛистов.ИмяЛиста, СтрокаТаблицыЛистов.Правило, НачСтрока, КонСтрока, ТолькоПроверить);
			
			МассивНоменклатуры = ЗагрузитьМетодом_EXCEL1C(АдресТабличногоДокументаВХранилище, СтрокаТаблицыЛистов.ИмяЛиста, СтрокаТаблицыЛистов.Правило, НачСтрока, КонСтрока, ТолькоПроверить);

			Если Не ТолькоПроверить и Объект.ПометитьНаУдалениеНеНайденнуюНоменклатуру  Тогда 
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(пИтоговыйМассив,МассивНоменклатуры,Истина);
				//ОбработатьНоменклатуруПроизводителя(пИтоговыйМассив,Объект.Производитель);
			КонецЕсли;
			
			//--Шерстюк Ю.Ю.
			
			ЕстьПравило = СтрокаТаблицыЛистов.Правило;
		КонецЕсли;
		
	//20201005 ГлазуновДВ перенес внуть Цикла, для возможности обработки, каждой строки со своим "Правилом"	
		//++Шерстюк Ю.Ю.
		Если Не ТолькоПроверить и Объект.ПометитьНаУдалениеНеНайденнуюНоменклатуру Тогда 
			ОбработатьНоменклатуруПроизводителя(пИтоговыйМассив, Объект.Производитель, ЕстьПравило);
		КонецЕсли;
		//--Шерстюк Ю.Ю.
	КонецЦикла;	
	
	Сообщить(?(ТолькоПроверить, "Проверка завершена.", "Загрузка завершена."));
	Сообщить("Окончание выполнения:" + ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНоменклатуруПроизводителя(пИтоговыйМассив,пПроизводитель, пЕстьПравило = Неопределено)

	тзНоменклатураПроизводителя = Новый ТаблицаЗначений;
	тзНоменклатураПроизводителя.Колонки.Добавить("НПИзПрайса", Новый ОписаниеТипов("СправочникСсылка.ГИГ_НоменклатураПроизводителей"));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(тзНоменклатураПроизводителя, пИтоговыйМассив, "НПИзПрайса");
//{{20201005 ГлазуновДВ
	пГруппаНоменклатуры = ?(пЕстьПравило = Неопределено, Неопределено, пЕстьПравило.ГруппаНоменклатуры);
//}}20201005 ГлазуновДВ
	тзДляИзменения = ПолучитьТаблицуДляИзменения(тзНоменклатураПроизводителя, пПроизводитель, пГруппаНоменклатуры);
	пПВДДопРеквизПусто = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
    пСообщение = "";
	
	Для Каждого Стр из тзДляИзменения Цикл
		
		//Если Стр.МожноПометитьНаУдаление Тогда 
			пОбъектНомненклатураПроизводителя = Стр.Ссылка.ПолучитьОбъект();
			пОбъектНомненклатураПроизводителя.ПометкаУдаления = Истина;
			пОбъектНомненклатураПроизводителя.Записать();
			пСообщение = пСообщение + Стр.Ссылка.Наименование + " помечен на удаление" + Символы.ПС; 
		//Иначе
			пНаименованиеВидаХарактеристик = "Исключен из прайса";
			пИсклИзПрайса = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(пНаименованиеВидаХарактеристик, Истина);
			Если пИсклИзПрайса = пПВДДопРеквизПусто Тогда
				пИсклИзПрайса = СоздатьДопРеквизит(пНаименованиеВидаХарактеристик);
				//Создать
			КонецЕсли;
			
//Исходное				УстановитьДополнительныйРеквизитОбъекта(Стр.Ссылка,пИсклИзПрайса,Истина);
		//{{20200907 ГлазуновДВ Исправили передачу параметра для установки ДопРеквизита
			Если Не Стр.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				УстановитьДополнительныйРеквизитОбъекта(Стр.Номенклатура, пИсклИзПрайса, Истина);
			КонецЕсли;
		//}}20200907 ГлазуновДВ
			
		//КонецЕсли;
		
	КонецЦикла;
//{{20200909 ГлазуновДВ Добавили для отбора Номенклатуры в Прайсе по помеченной на удалении
	тзДляИзменения1 = ПолучитьТаблицуДляИзменения1(тзНоменклатураПроизводителя, пПроизводитель, пГруппаНоменклатуры);
	Для Каждого Стр из тзДляИзменения1 Цикл
		
			пОбъектНомненклатураПроизводителя = Стр.Ссылка.ПолучитьОбъект();
			пОбъектНомненклатураПроизводителя.ПометкаУдаления = Ложь;
			пОбъектНомненклатураПроизводителя.Записать();
			пСообщение = пСообщение + Стр.Ссылка.Наименование + " сняли пометку на удаление" + Символы.ПС;
			
			пНаименованиеВидаХарактеристик = "Исключен из прайса";
			пИсклИзПрайса = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(пНаименованиеВидаХарактеристик, Истина);
			Если пИсклИзПрайса = пПВДДопРеквизПусто Тогда
				пИсклИзПрайса = СоздатьДопРеквизит(пНаименованиеВидаХарактеристик);
				//Создать
			КонецЕсли;
			
			Если Не Стр.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				УстановитьДополнительныйРеквизитОбъекта(Стр.Номенклатура, пИсклИзПрайса, Ложь);
			КонецЕсли;
	КонецЦикла;
//}}20200909 ГлазуновДВ
	
КонецПроцедуры
&НаСервере
Процедура УстановитьДополнительныйРеквизитОбъекта(Ссылка, ЭлПВХ_Ссылка, ЗначениеРеквизита)

	//ЭлПВХ_Ссылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок",ИмяРеквизита);
	//Если ЭлПВХ_Ссылка.Пустая() Тогда
	//    Сообщить("Не найден доп. реквизит "+ИмяРеквизита+", значение не установлено!");
	//    Возврат;
	//КонецЕсли;
	пОбъект = Ссылка.ПолучитьОбъект();

    СтрДопРеквизиты = пОбъект.ДополнительныеРеквизиты.Найти(ЭлПВХ_Ссылка, "Свойство");
    Если СтрДопРеквизиты = Неопределено Тогда
        СтрДопРеквизиты = пОбъект.ДополнительныеРеквизиты.Добавить();
    КонецЕсли;
    СтрДопРеквизиты.Свойство = ЭлПВХ_Ссылка;
    СтрДопРеквизиты.Значение = ЗначениеРеквизита;
	
	пОбъект.Записать();

КонецПроцедуры

&НаСервере
Функция СоздатьДопРеквизит(пНаименованиеВидаХарактеристик)
	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	НР = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	НР.Виден 								= Истина ;
	НР.Заголовок                            = пНаименованиеВидаХарактеристик;
	НР.Наименование 						= пНаименованиеВидаХарактеристик;
	НР.ДополнительныеЗначенияСВесом 		= Ложь ;
	
	пНаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Справочник ""Номенклатура"" (Общие)");
	НР.НаборСвойств 						= пНаборСвойств;
	НР.Доступен 							= Истина ;
	//ЗаголовокОбъекта = пНаименованиеВидаХарактеристик;
	//ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ЗаголовокОбъекта, "");
	//ЗаголовокОбъектаЧастями = СтрРазделить(ЗаголовокОбъекта, " ", Ложь);
	// НР.Имя = НР.Имя + ВРег(Лев(ЧастьЗаголовка, 1)) + Сред(ЧастьЗаголовка, 2);
	НР.Имя = пНаименованиеВидаХарактеристик;
	
	УИД = Новый УникальныйИдентификатор();
	СтрокаУИД = СтрЗаменить(Строка(УИД), "-", "");
	НР.Имя = НР.Имя + "_" + СтрокаУИД;
	НР.ДополнительныеЗначенияИспользуются 	= Ложь ;
	НР.ТипЗначения = ОписаниеБулево;

	НР.Записать();
	
	Набор = пНаборСвойств;
	НаборСвойствОбъект = Набор.ПолучитьОбъект();
	НоваяСтрока = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();
	НоваяСтрока.Свойство = НР.Ссылка;
	НаборСвойствОбъект.Записать();
	
	Возврат НР.Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуДляИзменения(тзНоменклатураПроизводителя, пПроизводитель, пГруппаНоменклатуры = Неопределено)
	
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = "ВЫБРАТЬ
	                |	ГИГ_НоменклатураПроизводителей.Ссылка КАК Ссылка,
	                |	ГИГ_НоменклатураПроизводителей.Номенклатура КАК Номенклатура,
	                |	ИСТИНА КАК МожноПометитьНаУдаление
	                |ИЗ
	                |	Справочник.ГИГ_НоменклатураПроизводителей КАК ГИГ_НоменклатураПроизводителей
	                |ГДЕ
	                |	ГИГ_НоменклатураПроизводителей.Производитель = &Производитель
	                |	И ГИГ_НоменклатураПроизводителей.ПометкаУдаления = &ПометкаУдаления
	                |	И НЕ ГИГ_НоменклатураПроизводителей.Ссылка В (&НоменклатураПроизводителейИзПрайса)";
				Если пГруппаНоменклатуры <> Неопределено ТОгда
					пЗапрос.Текст = пЗапрос.Текст + "
	                |	И ГИГ_НоменклатураПроизводителей.Родитель = &ГруппаНоменклатуры";
				КонецЕсли;	
	пЗапрос.Текст = пЗапрос.Текст + "
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ГИГ_НоменклатураПроизводителей.Ссылка,
	                |	ГИГ_НоменклатураПроизводителей.Номенклатура
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	МожноПометитьНаУдаление УБЫВ";
	
	пЗапрос.УстановитьПараметр("Производитель", пПроизводитель);
	пЗапрос.УстановитьПараметр("ГруппаНоменклатуры", пГруппаНоменклатуры);
	пЗапрос.УстановитьПараметр("НоменклатураПроизводителейИзПрайса", тзНоменклатураПроизводителя);
	пЗапрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Возврат пЗапрос.Выполнить().Выгрузить();
	
КонецФункции

//{{20200909 ГлазуновДВ Добавили для отбора Номенклатуры в Прайсе по помеченной на удалении
&НаСервере
Функция ПолучитьТаблицуДляИзменения1(тзНоменклатураПроизводителя, пПроизводитель, пГруппаНоменклатуры = Неопределено)
	
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = "ВЫБРАТЬ
	                |	ГИГ_НоменклатураПроизводителей.Ссылка КАК Ссылка,
	                |	ГИГ_НоменклатураПроизводителей.Номенклатура КАК Номенклатура,
	                |	ИСТИНА КАК МожноПометитьНаУдаление
	                |ИЗ
	                |	Справочник.ГИГ_НоменклатураПроизводителей КАК ГИГ_НоменклатураПроизводителей
	                |ГДЕ
	                |	ГИГ_НоменклатураПроизводителей.Производитель = &Производитель
	                |	И ГИГ_НоменклатураПроизводителей.ПометкаУдаления = &ПометкаУдаления
	                |	И ГИГ_НоменклатураПроизводителей.Ссылка В (&НоменклатураПроизводителейИзПрайса)";
				Если пГруппаНоменклатуры <> Неопределено ТОгда
					пЗапрос.Текст = пЗапрос.Текст + "
	                |	И ГИГ_НоменклатураПроизводителей.Родитель = &ГруппаНоменклатуры";
				КонецЕсли;	
	пЗапрос.Текст = пЗапрос.Текст + "
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ГИГ_НоменклатураПроизводителей.Ссылка,
	                |	ГИГ_НоменклатураПроизводителей.Номенклатура
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	МожноПометитьНаУдаление УБЫВ";
	
	пЗапрос.УстановитьПараметр("Производитель", пПроизводитель);
	пЗапрос.УстановитьПараметр("ГруппаНоменклатуры", пГруппаНоменклатуры);
	пЗапрос.УстановитьПараметр("НоменклатураПроизводителейИзПрайса", тзНоменклатураПроизводителя);
	пЗапрос.УстановитьПараметр("ПометкаУдаления", Истина);
	
	Возврат пЗапрос.Выполнить().Выгрузить();
	
КонецФункции
//}}20200909 ГлазуновДВ

&НаКлиенте
Процедура Проверить(Команда)
	
	ВыполнитьЗагрузку(Истина);

КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ВыполнитьЗагрузку();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.10.0") < 0 Тогда
		Сообщить("Для работы обработки необходима версия платформы 1С:Предприятие не ниже 8.3.10");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Объект.ДатаЗаписи = ТекущаяДата();
	ПроверкаПройдена = Ложь;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция УбратьПробелы(Знач Строка)
	Возврат СтрЗаменить(Строка, " ", "");
КонецФункции

&НаСервере
Функция ПолучитьСписокПроверяемыхКолонок(ТекущееПравилоЗагрузки)
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("КолонкаУникальныйИдентификатор");
	СписокКолонок.Добавить("КолонкаНаименования");
	СписокКолонок.Добавить("КолонкаЗначениеТарифа");
	СписокКолонок.Добавить("КолонкаЕдиницаИзмеренияТарифа");
	СписокКолонок.Добавить("КолонкаБазоваяЕдиницаИзмерения");
	СписокКолонок.Добавить("КолонкаОсновнаяЕдиницаИзмерения");
	СписокКолонок.Добавить("КолонкаТранспортнаяЕдиницаИзмерения");
	СписокКолонок.Добавить("КолонкаЗначенияМинимальногоЗаказаВБазовойЕдиницеИзмерения");
	СписокКолонок.Добавить("КолонкаЗначениеОбъема");
	СписокКолонок.Добавить("КолонкаЗначениеВеса");
	СписокКолонок.Добавить("КолонкаШтрихКодДляБазовойЕдиницыИзмерения");
	СписокКолонок.Добавить("КолонкаКоэффициентОсновнойЕдиницыИзмерения");
	СписокКолонок.Добавить("КолонкаКоэффициентТранспортнойЕдиницыИзмерения");
	СписокКолонок.Добавить("КолонкаКоэффициентЕдиницыИзмеренияТарифа");
	СписокКолонок.Добавить("КоличествоЕдиницВТарифе");
	СписокКолонок.Добавить("КолонкаМРЦСНДС");
	СписокКолонок.Добавить("КолонкаМРЦБезНДС");
	СписокКолонок.Добавить("ЦеноваяКатегория");
	СписокКолонок.Добавить("КолонкаАналитика1");
	СписокКолонок.Добавить("КолонкаАналитика2");
	СписокКолонок.Добавить("КолонкаАналитика3");
	СписокКолонок.Добавить("КолонкаАналитика4");
	СписокКолонок.Добавить("КолонкаАналитика5");
	СписокКолонок.Добавить("КолонкаЕдиницаОбъема");
	СписокКолонок.Добавить("КолонкаЕдиницаВеса");
	//++Шерстюк Ю.Ю. 04.05.2021 Задача 8025
	СписокКолонок.Добавить("КолонкаЕдиницаВысоты");
	СписокКолонок.Добавить("КолонкаЕдиницаШирины");
	СписокКолонок.Добавить("КолонкаЕдиницаГлубины");
	СписокКолонок.Добавить("КолонкаЗначениеВысоты");
	СписокКолонок.Добавить("КолонкаЗначениеШирины");
	СписокКолонок.Добавить("КолонкаЗначениеГлубины");
	СписокКолонок.Добавить("Марка");
	СписокКолонок.Добавить("СкладскаяГруппа");
	//--Шерстюк Ю.Ю.
	Возврат СписокКолонок;
КонецФункции	
	
&НаСервере
Процедура ПроверитьНаСервере(ТаблицаДанных_Полная, ТекущееПравилоЗагрузки, ИмяЛистаЗагрузки)
	//++Шерстюк Ю.Ю. 25.06.19
	пУпаковкиЕдиницыИзмеренияПусто = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	//--Шерстюк Ю.Ю 25.06.19
	
	//++Шерстюк Ю.Ю. 07.05.2021 Задача 8025
	пМаркаПусто = Справочники.Марки.ПустаяСсылка();
	пСкладскаяГруппаПусто = Справочники.СкладскиеГруппыНоменклатуры.ПустаяСсылка();
	//--Шерстюк Ю.Ю.
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	КопияТаблицаДанных =  ТаблицаДанных.Выгрузить();
	Попытка
		СтрокаНаименованийКолонок = КопияТаблицаДанных[ТекущееПравилоЗагрузки.ПерваяСтрокаПрайса-1]; 
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найдена или не верно указана строка заголовка прайса! Проверьте правила загрузки по листу: "+ИмяЛистаЗагрузки;
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	ЧислоКолонокФайла = КопияТаблицаДанных.Колонки.Количество() - 2;
	СтруктураКолонок = ПолучитьИПрочитатьКолонкиФайлаПоПравилу(ТекущееПравилоЗагрузки,ЧислоКолонокФайла,СтрокаНаименованийКолонок);
	СписокПроверяемыхКолонок = ПолучитьСписокПроверяемыхКолонок(ТекущееПравилоЗагрузки);
	
	ТЗДляЗагрузки = Новый ТаблицаЗначений;
	ТЗДляЗагрузки.Колонки.Добавить("ИмяРеквизитаПравила");
	ТЗДляЗагрузки.Колонки.Добавить("ЗначениеРеквизитаПравила");		
	ТЗДляЗагрузки.Колонки.Добавить("ИмяКолонкиФайла");
	Для Каждого СтрокаСписка из СписокПроверяемыхКолонок Цикл
		// проверяем реквизиты которые должны быть сопоставлены по колонкам таблицы и имеют строковые значения.
		Если ТипЗнч(ТекущееПравилоЗагрузки[СтрокаСписка.Значение]) = Тип("Строка") Тогда
			СтрокаТаблицы = ТЗДляЗагрузки.Добавить();
			СтрокаТаблицы.ИмяРеквизитаПравила =  СтрокаСписка.Значение;
			СтрокаТаблицы.ЗначениеРеквизитаПравила =  ТекущееПравилоЗагрузки[СтрокаСписка.Значение];
			СтрокаТаблицы.ИмяКолонкиФайла =  СтруктураКолонок[СтрокаСписка.Значение];
		КонецЕсли;
	КонецЦикла;	
	
	КолЗамечаний = 0;
	
	Сообщить("Начало проверки правила по листу: "+ИмяЛистаЗагрузки);
	
	Если ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		Если НЕ ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа) Тогда 
			Сообщить("В реквизите правила <Единица измерения тарифа> не указано значение!");
			КолЗамечаний = КолЗамечаний + 1;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ТипЗнч(ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		Если НЕ ЗначениеЗаполнено(ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения) Тогда 
			Сообщить("В реквизите правила <Базовая единица измерения> не указано значение!");
			КолЗамечаний = КолЗамечаний + 1;
		КонецЕсли;	
	КонецЕсли;	
	
	Сообщить("Окончание проверки правила по листу: "+ИмяЛистаЗагрузки);
	
	Сообщить("Начало проверки сопоставлений имен колонок в правиле и файле по листу: "+ИмяЛистаЗагрузки);
	
	Для Каждого СтрокаТаблицы из ТЗДляЗагрузки Цикл
		
		Если СтрокаТаблицы.ЗначениеРеквизитаПравила <> "" и СтрокаТаблицы.ИмяКолонкиФайла = Неопределено Тогда
			Сообщить("Для реквизита правила <"+ Метаданные.Справочники.ГИГ_ПравилаЗагрузки.Реквизиты[СтрокаТаблицы.ИмяРеквизитаПравила]+"> не найдено сопоставление колонки в файле прайс листа!");
			КолЗамечаний = КолЗамечаний + 1;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЗначениеРеквизитаПравила <> "" и СтрокаТаблицы.ИмяКолонкиФайла = "-" Тогда
			Сообщить("Для реквизита правила <"+ Метаданные.Справочники.ГИГ_ПравилаЗагрузки.Реквизиты[СтрокаТаблицы.ИмяРеквизитаПравила]+"> не найдено сопоставление колонки в файле прайс листа!");
			КолЗамечаний = КолЗамечаний + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Окончание проверки сопоставлений имен колонок в правиле и файле по листу: "+ИмяЛистаЗагрузки+"  "+?(КолЗамечаний = 0,"Ошибок не обнаружено.", "Количество ошибок: "+КолЗамечаний));
	
	Если КолЗамечаний <> 0 Тогда 
		Сообщить("Необходимо устранить замечания и повторить проверку файла! ",СтатусСообщения.ОченьВажное);
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если КолЗамечаний = 0 Тогда
		// далее проверка на поля: пока только основные - Наименование, артикул,ЦК, число тарифа ед изм тарифа и основной....
		Сообщить("Начало проверки строк файла листа "+ИмяЛистаЗагрузки);
		КолонкаПроверкиАртикул = СтруктураКолонок["КолонкаУникальныйИдентификатор"];
		КолонкаПроверкиНаименование = СтруктураКолонок["КолонкаНаименования"];
		КолонкаПроверкиЕдиницаИзмеренияТарифа = СтруктураКолонок["КолонкаЕдиницаИзмеренияТарифа"];
		КолонкаПроверкиБазоваяЕдиницаИзмерения = СтруктураКолонок["КолонкаБазоваяЕдиницаИзмерения"];
		
		КолонкаПроверкиЕдиницаОбъема = СтруктураКолонок["КолонкаЕдиницаОбъема"];
		КолонкаПроверкиЕдиницаВеса   = СтруктураКолонок["КолонкаЕдиницаВеса"];
		КолонкаПроверкиОбъема = СтруктураКолонок["КолонкаЗначениеОбъема"];
		КолонкаПроверкиВеса   = СтруктураКолонок["КолонкаЗначениеВеса"];
		//++Шерстюк Ю.Ю. 04.05.2021 Задача 8025
		КолонкаПроверкиВысоты   = СтруктураКолонок["КолонкаЗначениеВысоты"];
		КолонкаПроверкиШирины   = СтруктураКолонок["КолонкаЗначениеШирины"];
		КолонкаПроверкиГлубины   = СтруктураКолонок["КолонкаЗначениеГлубины"];
		
		КолонкаПроверкиЕдиницаВысоты = СтруктураКолонок["КолонкаЕдиницаВысоты"];
		КолонкаПроверкиЕдиницаШирины = СтруктураКолонок["КолонкаЕдиницаШирины"];
		КолонкаПроверкиЕдиницаГлубины = СтруктураКолонок["КолонкаЕдиницаГлубины"];
		
		КолонкаПроверкиМарки = СтруктураКолонок["Марка"];
		КолонкаПроверкиСкладскаяГруппа = СтруктураКолонок["СкладскаяГруппа"];
		//--Шерстюк Ю.Ю.	
		
		КолЗамечанийСтрок = 0;
		ТаблицаСопоставленийЕдиницИзмерения = ПолучитьТаблицуСопоставлениеЕдиницИзмерения();
		ТаблицаСопоставленийЕдиницИзмерения.Свернуть("НаименованиеЕдИзмеренияПрайс,НаименованиеЕдИзмеренияБаза");
		Для Каждого СтрокаТаблицыКонтроль из КопияТаблицаДанных Цикл
			Если СтрокаТаблицыКонтроль.НомерСтроки >  ТекущееПравилоЗагрузки.ПерваяСтрокаПрайса Тогда
				
				// наименование
				Если СтрокаТаблицыКонтроль[КолонкаПроверкиАртикул] = ""  или СтрокаТаблицыКонтроль[КолонкаПроверкиАртикул] = "-"  Тогда
					Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не заполненно значение в колонке: "+ТекущееПравилоЗагрузки.КолонкаУникальныйИдентификатор);
					КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
				КонецЕсли;
				
				// артикул
				Если СтрокаТаблицыКонтроль[КолонкаПроверкиНаименование] = "" Тогда
					Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не заполненно значение в колонке: "+ТекущееПравилоЗагрузки.КолонкаНаименования);
					КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
				КонецЕсли;
				
				// ед изм тарифа
				Если ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
					Если СтрокаТаблицыКонтроль[КолонкаПроверкиЕдиницаИзмеренияТарифа] = "" или СтрокаТаблицыКонтроль[КолонкаПроверкиЕдиницаИзмеренияТарифа] = 0 Тогда
						Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" значение тарифа не заполненно или равно 0 в колонке: "+ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа);
						КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
					Иначе 	// Проверка по сопоставлению единиц измерения
						//++Шерстюк Ю.Ю. 25.06.19
						//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаЕдиницаИзмеренияТарифа],".","");
						 ИмяЕдиницыВФайле = СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаЕдиницаИзмеренияТарифа];
						//--Шерстюк Ю.Ю. 25.06.19

						СтруктураОтбораПоРегистру = Новый Структура;
						СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
						МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
						Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
							ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
						Иначе
							ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
							Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не найдено сопоставление ед.изм.тарифа в колонке: "+ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа);
							КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// базовая ед изм
				Если ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаИзмеренияТарифа) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
					Если СтрокаТаблицыКонтроль[КолонкаПроверкиБазоваяЕдиницаИзмерения] = "" Тогда        
						Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" значение не заполненно в колонке: "+ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения);
						КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
					Иначе  	// Проверка по сопоставлению единиц измерения
						//++Шерстюк Ю.Ю. 25.06.19
						//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения],".","");
						  ИмяЕдиницыВФайле = СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаБазоваяЕдиницаИзмерения];

						//--Шерстюк Ю.Ю. 25.06.19
						СтруктураОтбораПоРегистру = Новый Структура;
						СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
						МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
						Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
							ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
						Иначе
							ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
							Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не найдено сопоставление базовой ед.изм. в колонке: "+ТекущееПравилоЗагрузки.КолонкаБазоваяЕдиницаИзмерения);
							КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// ед изм объема
				Если КолонкаПроверкиОбъема <> Неопределено Тогда 
					Если СтрокаТаблицыКонтроль[КолонкаПроверкиОбъема] = "" Тогда 
						// не нужно контролировать единицу объема
					Иначе  	// Проверка по сопоставлению единиц измерения
						Если ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаОбъема) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
							//++Шерстюк Ю.Ю. 25.06.19
							//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаЕдиницаОбъема],".","");
							ИмяЕдиницыВФайле = СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаЕдиницаОбъема];
							//--Шерстюк Ю.Ю. 25.06.19
							СтруктураОтбораПоРегистру = Новый Структура;
							СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
							МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
							Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
								ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
							Иначе
								ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
								Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не найдено сопоставление  ед.изм. объема в колонке: "+ТекущееПравилоЗагрузки.КолонкаЕдиницаОбъема);
								КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// ед изм веса
				Если КолонкаПроверкиВеса <> Неопределено Тогда 
					Если СтрокаТаблицыКонтроль[КолонкаПроверкиВеса] = "" Тогда 
						// не нужно контролировать единицу объема
					Иначе  	// Проверка по сопоставлению единиц измерения
						Если ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаВеса) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
							//++Шерстюк Ю.Ю. 25.06.19
							//ИмяЕдиницыВФайле = СтрЗаменить(СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаЕдиницаВеса],".","");
							ИмяЕдиницыВФайле = СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаЕдиницаВеса];
							//--Шерстюк Ю.Ю. 25.06.19
							СтруктураОтбораПоРегистру = Новый Структура;
							СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
							МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
							Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
								ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
							Иначе
								ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
								Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не найдено сопоставление  ед.изм. веса в колонке: "+ТекущееПравилоЗагрузки.КолонкаЕдиницаВеса);
								КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				//++Шерстюк Ю.Ю. 04.05.2021 Задача 8025
				// Марка
				Если КолонкаПроверкиМарки <> Неопределено Тогда 
					Если СтрокаТаблицыКонтроль[КолонкаПроверкиМарки] = "" Тогда 
						// не нужно контролировать единицу объема
					Иначе  	// Проверка по сопоставлению единиц измерения
						Если ТипЗнч(ТекущееПравилоЗагрузки.Марка) <> Тип("СправочникСсылка.Марки") Тогда
							ИмяВФайле = СтрокаТаблицыКонтроль[СтруктураКолонок.Марка];
							ТекущаяМаркаБазы = Справочники.Марки.НайтиПоНаименованию(ИмяВФайле);
							Если  ТекущаяМаркаБазы = пМаркаПусто Тогда 
								Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не найдено сопоставление  марки в колонке: "+ТекущееПравилоЗагрузки.Марка);
								КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// Складская группа
				Если КолонкаПроверкиСкладскаяГруппа <> Неопределено Тогда 
					Если СтрокаТаблицыКонтроль[КолонкаПроверкиСкладскаяГруппа] = "" Тогда 
						// не нужно контролировать единицу объема
					Иначе  	// Проверка по сопоставлению единиц измерения                      
						Если ТипЗнч(ТекущееПравилоЗагрузки.СкладскаяГруппа) <> Тип("СправочникСсылка.СкладскиеГруппыНоменклатуры") Тогда     
							ИмяВФайле = СтрокаТаблицыКонтроль[СтруктураКолонок.СкладскаяГруппа];
							ТекущаяСкладскаяГруппаБазы = Справочники.СкладскиеГруппыНоменклатуры.НайтиПоНаименованию(ИмяВФайле);
							Если  ТекущаяСкладскаяГруппаБазы = пСкладскаяГруппаПусто Тогда 
								Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не найдено сопоставление  складской группы в колонке: "+ТекущееПравилоЗагрузки.СкладскаяГруппа);
								КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// ед изм высоты
				Если КолонкаПроверкиВысоты <> Неопределено Тогда 
					Если СтрокаТаблицыКонтроль[КолонкаПроверкиОбъема] = "" Тогда 
						// не нужно контролировать единицу объема
					Иначе  	// Проверка по сопоставлению единиц измерения
						Если ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаВысоты) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
							ИмяЕдиницыВФайле = СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаЕдиницаВысоты];
							СтруктураОтбораПоРегистру = Новый Структура;
							СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
							МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
							Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
								ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
							Иначе
								ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
								Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не найдено сопоставление  ед.изм. высоты в колонке: "+ТекущееПравилоЗагрузки.КолонкаЕдиницаВысоты);
								КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// ед изм Глубины
				Если КолонкаПроверкиГлубины <> Неопределено Тогда 
					Если СтрокаТаблицыКонтроль[КолонкаПроверкиГлубины] = "" Тогда 
						// не нужно контролировать единицу объема
					Иначе  	// Проверка по сопоставлению единиц измерения
						Если ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаГлубины) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
							ИмяЕдиницыВФайле = СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаЕдиницаГлубины];
							СтруктураОтбораПоРегистру = Новый Структура;
							СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
							МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
							Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
								ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
							Иначе
								ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
								Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не найдено сопоставление  ед.изм. высоты в колонке: "+ТекущееПравилоЗагрузки.КолонкаЕдиницаГлубины);
								КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// ед изм Ширины
				Если КолонкаПроверкиШирины <> Неопределено Тогда 
					Если СтрокаТаблицыКонтроль[КолонкаПроверкиШирины] = "" Тогда 
						// не нужно контролировать единицу объема
					Иначе  	// Проверка по сопоставлению единиц измерения
						Если ТипЗнч(ТекущееПравилоЗагрузки.КолонкаЕдиницаШирины) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
							ИмяЕдиницыВФайле = СтрокаТаблицыКонтроль[СтруктураКолонок.КолонкаЕдиницаШирины];
							СтруктураОтбораПоРегистру = Новый Структура;
							СтруктураОтбораПоРегистру.Вставить("НаименованиеЕдИзмеренияПрайс",ИмяЕдиницыВФайле);
							МассивСтрокСопоставлений = ТаблицаСопоставленийЕдиницИзмерения.НайтиСтроки(СтруктураОтбораПоРегистру);
							Если  МассивСтрокСопоставлений.Количество() > 0 Тогда 
								ТекущаяЕдиницаБазы = МассивСтрокСопоставлений[0].НаименованиеЕдИзмеренияБаза;
							Иначе
								ТекущаяЕдиницаБазы = пУпаковкиЕдиницыИзмеренияПусто;
								Сообщить("В строке: "+СтрокаТаблицыКонтроль.НомерСтроки+" не найдено сопоставление  ед.изм. высоты в колонке: "+ТекущееПравилоЗагрузки.КолонкаЕдиницаШирины);
								КолЗамечанийСтрок = КолЗамечанийСтрок + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				//--Шерстюк Ю.Ю.
				
			КонецЕсли;
		КонецЦикла;	
		Сообщить("Окончание проверки строк файла по листу: "+ИмяЛистаЗагрузки+"  "+?(КолЗамечанийСтрок = 0,"Ошибок не обнаружено.", "Количество ошибок при проверки строк файла: "+КолЗамечанийСтрок));
	КонецЕсли;
	
	Если КолЗамечанийСтрок = 0 И КолЗамечанийСтрок = 0 Тогда 
		ПроверкаПройдена = Истина;
	Иначе
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.СписокЗагруженныхДанных.Видимость = Объект.ФормироватьСписокданныхЗагрузки;
	Элементы.Загрузить.Доступность = ПроверкаПройдена;
	
	Элементы.ПроверитьФайл.Доступность = (ЗначениеЗаполнено(АдресТабличногоДокументаВХранилище) И Объект.ПравилаЗагрузки.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСписокданныхЗагрузкиПриИзменении(Элемент)
	Элементы.СписокЗагруженныхДанных.Видимость = Объект.ФормироватьСписокданныхЗагрузки;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖРОбъектов(Команда)
	
	МассивСобытий = Новый Массив;
	МассивСобытий.Добавить("Данные. Изменение");
	МассивСобытий.Добавить("Данные. Добавление");
	
	ПараметрыФормы = Новый Структура("СобытиеЖурналаРегистрации,ДатаНачала, ДатаОкончания,Комменарий",
			                         МассивСобытий,НачалоДня(ТекущаяДата()) , ТекущаяДата(), "Обработка загрузки Прайс листа производителя");
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы);
	
КонецПроцедуры

// ПРЕОБРАЗОВАНИЕ СТРОКИ К ТИПИЗОВАННОМУ ЗНАЧЕНИЮ 1С.

&НаСервере
Функция ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(Знач ИсходноеЗначение)
	
	Если Не ЗначениеЗаполнено(ИсходноеЗначение) Тогда
		Возврат ИсходноеЗначение;
	КонецЕсли;
	
	// Попробуем привести к числу
	Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИсходноеЗначение);
	Если Не Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Попробуем привести к булево
	ВРегИсходноеЗначение = ВРег(ИсходноеЗначение);
	
	Если ВРегИсходноеЗначение = "ИСТИНА"
	 Или ВРегИсходноеЗначение = ("ИСТИНА" + Символы.ПС)
	 Или ВРегИсходноеЗначение = "TRUE"
	 Или ВРегИсходноеЗначение = ("TRUE" + Символы.ПС)
	Тогда
		Возврат Истина;
	ИначеЕсли ВРегИсходноеЗначение = "ЛОЖЬ"
	      Или ВРегИсходноеЗначение = ("ЛОЖЬ" + Символы.ПС)
	      Или ВРегИсходноеЗначение = "FALSE"
	      Или ВРегИсходноеЗначение = ("FALSE" + Символы.ПС)
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Попробуем привести к дате
	Попытка
		Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(ИсходноеЗначение);
		Если ЗначениеЗаполнено(Результат) Тогда
			Возврат Результат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ИсходноеЗначение;
	
КонецФункции


// ПОЛУЧЕНИЕ ЗНАЧЕНИЯ ДЛЯ РЕКВИЗИТА ТИПА "ФАЙЛ КАРТИНКИ".

&НаКлиенте
Процедура ПравилаЗагрузкиПравилоПриИзменении(Элемент)
	
	ПроверкаПройдена = Ложь;
	УправлениеФормой();
	
КонецПроцедуры

// закрытие формы

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = "Работа в данном окне не завершена! Необходимо корректное закрытие обработки!";
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытиеРазрешено = Истина;
		Закрыть();			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЦенНоменклатуры(Команда)
	ЗапускЗадания();
КонецПроцедуры

&НаСервере
Процедура ЗапускЗадания()
	Задание = Метаданные.РегламентныеЗадания.ГИГ_ОбновлениеЦенНоменклатуры;
	РезультатВыполоненияЗадания = РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(Задание);
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуру(Команда)
	//ТаблицаСопоставления = СопоставитьНоменклатуруНаСервере(Объект.Производитель);
	//П = Новый Структура("Производитель", Объект.Производитель); 
 //ОповещениеОВыборе  = Новый ОписаниеОповещения("ОткрытиеСправочникаПослеВыбора", ЭтаФорма, Новый Структура("ИмяКоманды", Команда.Имя));
  ОткрытьФорму("Обработка.ГИГ_ЗагрузкаПрайсЛистаПоставщиков.Форма.ФормаСопоставления",, ЭтаФорма,,,, , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	//пФормаСравнения = ПолучитьФорму("ВнешняяОбработка.ЗагрузкаДокументовИзФайла.Форма.ФормаСопоставления2", П);
	//пФормаСравнения.Производитель = Объект.Производитель;
	//пФормаСравнения.ТаблицаСравнения = ТаблицаСопоставления;
	//пФормаСравнения.Открыть();

КонецПроцедуры


	//проверим и создадим строковый доп. реквизит к справочнику номенклатура и номенклатура производителя
&НаСервере
Процедура ПроверитьДобавитьДопРеквизитСпрНоменкНоменклПроиз(ИмяРеквизита)

    //пробуем найти доп. реквизит по заголовку
    ЭлПВХ_Ссылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок",ИмяРеквизита);
    Если ЭлПВХ_Ссылка.Пустая() Тогда
        //если не найдено, то создадим новый
        ЭлПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
        ЭлПВХ.Заголовок = ИмяРеквизита;
        ЭлПВХ.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура;
        ЭлПВХ.Наименование = ЭлПВХ.Заголовок+" ("+ЭлПВХ.НаборСвойств+")";
        ЭлПВХ.ТипЗначения = Новый ОписаниеТипов("Булево");
        ЭлПВХ.Записать();
        ЭлПВХ_Ссылка = ЭлПВХ.Ссылка;
    КонецЕсли;

    //проверим, что реквизит указан в наборе доп. реквизитов спр. Номенклатура
    НаборОб = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура.ПолучитьОбъект();
    Если НаборОб.ДополнительныеРеквизиты.Найти(ЭлПВХ_Ссылка, "Свойство") = Неопределено Тогда
        //добавим реквизит в набор
        СтрНаборОб = НаборОб.ДополнительныеРеквизиты.Добавить();
        СтрНаборОб.Свойство = ЭлПВХ_Ссылка;
    КонецЕсли;
    Если НаборОб.Модифицированность() Тогда
        //запишем при необходимости
        НаборОб.Записать();
    КонецЕсли;

КонецПроцедуры


