
&НаКлиенте
Процедура ЗагружаемыйФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Сообщить("Перед загрузкой файла выберите поставщика!");
		Возврат;
	КонецЕсли;
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытия.ПолноеИмяФайла = "";
	ДиалогОткрытия.Фильтр = "Файлы Excel(*.xlsx;*.xls)|*.xlsx;*.xls";
	ДиалогОткрытия.Заголовок = "Выберите файл";
	
	Если ДиалогОткрытия.Выбрать() Тогда
		Объект.ФайлЗагрузки = ДиалогОткрытия.ПолноеИмяФайла;
		ПриВыбореФайлаExcel(Объект.ФайлЗагрузки);
	Иначе
		Объект.ФайлЗагрузки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаExcel(ИмяФайла)
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если Не ВыбФайл.Существует() Или Не ВыбФайл.ЭтоФайл() Тогда
		Сообщить("Выбранный файл не возможно загрузить. Проверьте правильность выбора.");
		Возврат;
	КонецЕсли; 
	
	Состояние("Пожалуйста подождите, производится чтение файла...");
	
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор); 
	ПрочитатьФайл(АдресФайлаВХранилище, ВыбФайл.Расширение);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайл(АдресВХранилище, РасширениеФайла)
	
	//
	Элементы.ГруппаДополнительная.Видимость = Ложь;
	Элементы.Декорация4.Видимость = Ложь;
	//
	
	Попытка
		
		ДанныйФайл = ПолучитьИзВременногоХранилища(АдресВХранилище);
		ФайлЕксель = ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДанныйФайл.Записать(ФайлЕксель);
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ФайлЕксель);
		АдресТабличногоДокументаВХранилище = ПоместитьВоВременноеХранилище(ТабличныйДокумент, УникальныйИдентификатор);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю("Структура выбранного файла системе не доступна!"+Символы.ПС+"Необходимо создать новую книгу в формате EXCEL, скопировать содержимое указанного выйла и сохранить новый файл с нужным расширением!");
		
	КонецПопытки;
	
	НомерЛистаФайла = ?(ЭтаФорма.НомерЛиста = 1 или ЭтаФорма.НомерЛиста = 0,0,ЭтаФорма.НомерЛиста - 1);
	
	Попытка
		ОбластьТД = ТабличныйДокумент.Области[НомерЛистаФайла];
		ЗагрузитьEXCEL(АдресТабличногоДокументаВХранилище, ОбластьТД.Имя, ЭтаФорма.ПерваяСтрока, ЭтаФорма.ПоследняяСтрока);	
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Ошибка загрузки выбранного листа файла Excel");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьExcel(АдресВХранилище, ИмяЛистаЗагрузки, Знач НачСтрока, Знач КонСтрока)
	
	Попытка
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Исключение
		
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка получения табличного документа из хранилища! Попробуйте перевыбрать загружаемый файл.";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
	КонецПопытки;
	
	ОбластьФайла = ТабличныйДокумент.ПолучитьОбласть(ИмяЛистаЗагрузки);
	КолВоСтрокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоВертикали();
	КолВоКолонокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоГоризонтали();
	
	// Проверка заполненности листа.
	Если КолвоСтрокФайла = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультат = РеквизитФормыВЗначение("ТаблицаДанных");
	ТаблицаРезультат.Очистить();
	ТаблицаВходящихДокументов.Очистить();
	
	НачСтрока = ?(НачСтрока = 0, 1, НачСтрока);
	КонСтрока = ?(КонСтрока = 0, КолвоСтрокФайла, КонСтрока);
	
	Для нСтрока = НачСтрока По КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();		
		Для нКолонка = 1 По КолВоКолонокФайла Цикл
			ТекущаяОбласть = ОбластьФайла.Область(нСтрока, нКолонка);
			ЗначениеЯчейки = СокрЛП(ТекущаяОбласть.Текст);
			Если нКолонка = ЭтаФорма.КолонкаВходящийДокумент Тогда
				НоваяСтрокаТФ.ВходящийДокумент = ЗначениеЯчейки;
			ИначеЕсли нКолонка = ЭтаФорма.КолонкаЗаказПоставщику Тогда
				НоваяСтрокаТФ.ЗаказПоставщику = ЗначениеЯчейки;
			ИначеЕсли нКолонка = ЭтаФорма.КолонкаАртикул Тогда
				НоваяСтрокаТФ.Артикул = ЗначениеЯчейки;
			//{{20201226 ГлазуновДВ	
			//++Шерстюк Ю.Ю. 23.03.2021 поиск номенклатуры должен осуществляться по Артикулу и Производителю
				//НоваяСтрокаТФ.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", ЗначениеЯчейки);
				НоваяСтрокаТФ.Номенклатура = НайтиНоменклатуру(ЗначениеЯчейки,Производитель);
							
			//--Шерстюк Ю.Ю.		
			//Проверка на присутствие Номеклатуры в Заказе
			    ЗаказПоставщику = НайтиЗаказПоставщику(НоваяСтрокаТФ.ЗаказПоставщику);
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура
				|ИЗ
				|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
				|ГДЕ
				|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
				|	И НЕ ЗаказПоставщикуТовары.Отменено
				|	И ЗаказПоставщикуТовары.Номенклатура = &Номенклатура
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДатаПоступления,
				|	Назначение УБЫВ";
				
				Запрос.УстановитьПараметр("Ссылка", ЗаказПоставщику);
				Запрос.УстановитьПараметр("Номенклатура", НоваяСтрокаТФ.Номенклатура);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если РезультатЗапроса.Пустой() Тогда
					Сообщить("По строке " + нСтрока + " - номенклатура из файла не найдена в указанном Заказе № " + НоваяСтрокаТФ.ЗаказПоставщику);
				КонецЕсли;
				НоваяСтрокаТФ.НомерСтроки = нСтрока;
			//}}20201226 ГлазуновДВ	
			ИначеЕсли нКолонка = ЭтаФорма.КолонкаКоличество Тогда
				НоваяСтрокаТФ.Количество = ЗначениеЯчейки;
			ИначеЕсли нКолонка = ЭтаФорма.КолонкаЦена Тогда
				НоваяСтрокаТФ.Цена = ЗначениеЯчейки;
//{{20201124 ГлазуновДВ	
			ИначеЕсли нКолонка = ЭтаФорма.КолонкаСумма Тогда
				НоваяСтрокаТФ.Сумма = ЗначениеЯчейки;
//}}20201124 ГлазуновДВ	
			ИначеЕсли нКолонка = ЭтаФорма.КолонкаНомераГТД Тогда
				НоваяСтрокаТФ.НомераГТД = ЗначениеЯчейки;
			ИначеЕсли нКолонка = ЭтаФорма.КолонкаСтранаПроисхождения Тогда
				НоваяСтрокаТФ.СтранаПроисхождения = ЗначениеЯчейки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаРезультат, "ТаблицаДанных");
	
	ТабличныйДокумент.Очистить();
	
	ПолучитьВходящиеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлПовторно(Команда)
	
	Если ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ПриВыбореФайлаExcel(Объект.ФайлЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанные(Команда)
	
	МожноОбработать = Ложь;
	Для каждого Строка Из ТаблицаВходящихДокументов Цикл
		Если Строка.Отметка Тогда
			МожноОбработать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МожноОбработать Тогда
		ОчиститьСообщения();
		ОбработатьExcel();
	Иначе 
		Сообщить("Отсутствуют данные для обработки!");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере 
Процедура ОбработатьExcel() //Переработано 20201112-20201125 ГлазуновДВ
	
	Отказ = Ложь;
	ОбработкаСтрокиПоСумме = Ложь;
	////++Шерстюк Ю.Ю. 31.03.2021
	//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	////--Шерстюк Ю.Ю. 31.03.2021

	МассивОбрабатываемыхДокументов = ТаблицаВходящихДокументов.НайтиСтроки(Новый Структура("Отметка", Истина));
	
 	Для Каждого СтрокаПриобретения Из МассивОбрабатываемыхДокументов Цикл
		
		НайденныеЗаказыПоставщику = Новый СписокЗначений;
		
		Если ТипЗнч(СтрокаПриобретения.ПТУ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			 
			//Сперва проверим на соответствие к загруженному ПТУ и если нет соответствия то не обрабатываем 
			ТЗ_Товары = СтрокаПриобретения.ПТУ.Товары.Выгрузить(, "Номенклатура, КоличествоУпаковок");
			ТЗ_Товары.Свернуть("Номенклатура", "КоличествоУпаковок");
			
			ТЗ_ВхТовары = ТаблицаДанных.Выгрузить(Новый Структура("ВходящийДокумент", СтрокаПриобретения.ВходящийДокумент), "Артикул,Количество");
			ТЗ_ВхТовары.Свернуть("Артикул", "Количество");
			
			Если Не ТЗ_Товары.Итог("КоличествоУпаковок") = ТЗ_ВхТовары.Итог("Количество") Или Не ТЗ_Товары.Количество() = ТЗ_ВхТовары.Количество() Тогда
				ОбщегоНазначения.СообщитьПользователю("Входящий документ приобретения " + СтрокаПриобретения.ВходящийДокумент + " расходится с " + 
				СтрокаПриобретения.ПТУ + " по табличной части товары." + Символы.ПС + "Обработать входящий документ нельзя!");	
				Отказ = Истина;
				Продолжить;
			Иначе 
				Отказ = Ложь;
			КонецЕсли;
			//
			
			ПриобретениеОбъект = СтрокаПриобретения.ПТУ.ПолучитьОбъект();
			ПриобретениеОбъект.ПоступлениеПоЗаказам = Ложь;
			ПриобретениеОбъект.Комментарий = ПриобретениеОбъект.Комментарий + Символы.ПС + "Автоматическая загрузка исполнения заказов поставщиков." + ТекущаяДата();
			СкладУказан = Истина;
			
			ПриобретениеТовары = ПриобретениеОбъект.Товары;
			//очистим тч от заполненных заказов
			Для Каждого Строка Из ПриобретениеТовары Цикл
                Строка.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
				Строка.КодСтроки = 0;
			КонецЦикла;			
			//
			
		Иначе //создаем новое приобретение
			
			ПриобретениеОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
			
			//заполнение шапки
			ПриобретениеОбъект.НомерВходящегоДокумента = СтрокаПриобретения.ВходящийДокумент; 
			ПриобретениеОбъект.ПоступлениеПоЗаказам = Ложь;
			ПриобретениеОбъект.Партнер = Объект.Поставщик;
			ПриобретениеОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
			ПриобретениеОбъект.Комментарий = ПриобретениеОбъект.Комментарий + Символы.ПС + "Автоматическая загрузка исполнения заказов поставщиков." + ТекущаяДата();
			СкладУказан = Ложь;
			
			ПриобретениеТовары = ПриобретениеОбъект.Товары;
			
			//заполнение тч		
			МассивАртикуловЗаказов = ТаблицаДанных.НайтиСтроки(Новый Структура("ВходящийДокумент", СтрокаПриобретения.ВходящийДокумент));
			//Создадим ТЧ Товары в ПТУ			
			Для Каждого СтрокаМассива Из МассивАртикуловЗаказов Цикл
				
				НоменклатураСсылка = НайтиНоменклатуру(СтрокаМассива.Артикул, Производитель); //ищем в базе по артикулу и производителю
				
				Если Не НоменклатураСсылка = Неопределено Тогда
					
					ВставитьНомерГТД = Ложь;
					Если НоменклатураСсылка.ВестиУчетПоГТД И СтрокаМассива.НомераГТД <> "" Тогда
						
						ВставитьНомерГТД = Истина;
						//получим гтд или создадим
						НомерГТД = Справочники.НомераГТД.НайтиПоКоду(СокрЛП(СтрокаМассива.НомераГТД));
						Если НомерГТД = Справочники.НомераГТД.ПустаяСсылка() и СоздаватьГТД Тогда
							СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию(СокрЛП(СтрокаМассива.СтранаПроисхождения));
							Если СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка() И СтранаПроисхожденияПоУмолчанию <> Справочники.СтраныМира.ПустаяСсылка() Тогда
								СтранаПроисхождения = СтранаПроисхожденияПоУмолчанию;
							КонецЕсли;
							НовГТД = Справочники.НомераГТД.СоздатьЭлемент();
							НовГТД.Код = СтрокаМассива.НомераГТД;
							//{{20200930 ГлазуновДВ 
								НовГТД.РегистрационныйНомер = СтрокаМассива.НомераГТД;
							//}}20200930 ГлазуновДВ 	
							НовГТД.СтранаПроисхождения = СтранаПроисхождения;
							Попытка
								//информируем пользователя о не критических ошибках
								Если не НаличиеОшибокВНомереДекларации(НовГТД.Код) = 0 Тогда
									ОбщегоНазначения.СообщитьПользователю("Для номенклатуры " + Строка(НоменклатураСсылка) + ", созданный ГТД " + Строка(НомерГТД) + " имеет ошибки в своем составе (длина,формат и тд.)");
								КонецЕсли;
								//
								НовГТД.Записать();
								НомерГТД = НовГТД.Ссылка;
							Исключение
								ВставитьНомерГТД = Ложь;
								ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
									
					НоваяСтрока = ПриобретениеТовары.Добавить();
					НоваяСтрока.Номенклатура = НоменклатураСсылка;
					НоваяСтрока.Количество = Число(СтрокаМассива.Количество);
					НоваяСтрока.КоличествоУпаковок = Число(СтрокаМассива.Количество);
					НоваяСтрока.Цена = Число(СтрокаМассива.Цена);
					Если СтрокаМассива.Сумма <> "" Тогда
						НоваяСтрока.Сумма = Число(СтрокаМассива.Сумма);
						ОбработкаСтрокиПоСумме = Истина;
					КонецЕсли;
					
					НоваяСтрока.СтавкаНДС = НоменклатураСсылка.СтавкаНДС;
					Если ВставитьНомерГТД Тогда
						НоваяСтрока.НомерГТД = НомерГТД;
					КонецЕсли;
					НоваяСтрока.КодСтроки = 0;
	                НоваяСтрока.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
					
				Иначе 	
					ОбщегоНазначения.СообщитьПользователю("Номенклатура с артикулом " + Строка.Артикул + ", производителя " + Производитель + " в информационной базе не обнаружена!"
					+ Символы.ПС + "Обработать входящий документ нельзя!");
					Отказ = Истина;
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Отказ Тогда
				ОбщегоНазначения.СообщитьПользователю("Обработка не выполнена. Присутствуют ошибки!");
				Возврат;
			КонецЕсли;
			
			//дозаполнение основных реквизитов
			ПриобретениеОбъект.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
			
			//обработаем тч
			Для Каждого СтрокаТч Из ПриобретениеТовары Цикл
				Если ОбработкаСтрокиПоСумме Тогда
					ОбработатьСтрокуПоСумме(СтрокаТч, ПриобретениеОбъект);
				Иначе	
					ОбработатьСтроку(СтрокаТч, ПриобретениеОбъект);
				КонецЕсли;
			КонецЦикла;
			
			//дозаполним этапыОплаты
			Для Каждого Этап Из ПриобретениеОбъект.ЭтапыГрафикаОплаты Цикл
				Этап.ДатаПлатежа = ТекущаяДата();
			КонецЦикла;					
			
			ПриобретениеОбъект.Дата = ТекущаяДата();
			ПриобретениеОбъект.УстановитьНовыйНомер();
			//Попытка
			//	ПриобретениеОбъект.Записать(РежимЗаписиДокумента.Запись);
			//	ОбщегоНазначения.СообщитьПользователю("Создано новое " + Строка(ПриобретениеОбъект.Ссылка));
			//Исключение
			//	Отказ = Истина;
			//	ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			//КонецПопытки;	
			
		КонецЕсли;	

//++Шерстюк Ю.Ю. 31.03.2021 по задаче 7123 изменен алгоритм При проведении ПТУ проверяется наличие строк свех заказа (с кодом строки 0), если такие есть, то 
//пользователю предлагается распределить такой документ, поэтому заполним только заказ поставщику
///////////ОБЩИЙ МЕТОД РАСПРЕДЕЛЕНИЯ			
//////			
/////////////////////////////
//////		ПриобретениеТоварыНовая = ПриобретениеОбъект.Товары.Выгрузить();
//////		ПриобретениеТоварыНовая.Очистить();
//////		ПриобретениеТоварыДляПроверки = ПриобретениеОбъект.Товары.Выгрузить();
//////		ПриобретениеТоварыДляПроверки.Свернуть("Номенклатура", "Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС");
/////////////////////////////

//////		МассивАртикуловЗаказов = ТаблицаДанных.НайтиСтроки(Новый Структура("ВходящийДокумент",СтрокаПриобретения.ВходящийДокумент));

//////		//пошли по входящей номенклатуре
//////		Для Каждого Строка Из МассивАртикуловЗаказов Цикл
//////			
//////			НоменклатураСсылка = НайтиНоменклатуру(Строка.Артикул, Производитель); //ищем в базе по артикулу и производителю
//////			СтрокаОсталосьРаспределить = Число(Строка.Количество);
//////			
//////			Если Не НоменклатураСсылка = Неопределено Тогда
//////				
//////				ВставитьНомерГТД = Ложь;
//////				Если НоменклатураСсылка.ВестиУчетПоГТД И Строка.НомераГТД <> "" Тогда
//////					
//////					ВставитьНомерГТД = Истина;
//////					//получим гтд или создадим
//////					НомерГТД = Справочники.НомераГТД.НайтиПоКоду(СокрЛП(Строка.НомераГТД));
//////					Если НомерГТД = Справочники.НомераГТД.ПустаяСсылка() и СоздаватьГТД Тогда
//////						СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию(СокрЛП(Строка.СтранаПроисхождения));
//////						Если СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка() И СтранаПроисхожденияПоУмолчанию <> Справочники.СтраныМира.ПустаяСсылка() Тогда
//////							СтранаПроисхождения = СтранаПроисхожденияПоУмолчанию;
//////						КонецЕсли;
//////						НовГТД = Справочники.НомераГТД.СоздатьЭлемент();
//////						НовГТД.Код = Строка.НомераГТД;
//////						//{{20200930 ГлазуновДВ 
//////							НовГТД.РегистрационныйНомер = Строка.НомераГТД;
//////						//}}20200930 ГлазуновДВ 	
//////						НовГТД.СтранаПроисхождения = СтранаПроисхождения;
//////						Попытка
//////							//информируем пользователя о не критических ошибках
//////							Если Не НаличиеОшибокВНомереДекларации(НовГТД.Код) = 0 Тогда
//////								ОбщегоНазначения.СообщитьПользователю("Для номенклатуры " + Строка(НоменклатураСсылка) + ", созданный ГТД " + Строка(НомерГТД) + " имеет ошибки в своем составе (длина,формат и тд.)");
//////							КонецЕсли;
//////							//
//////							НовГТД.Записать();
//////							НомерГТД = НовГТД.Ссылка;
//////						Исключение
//////							ВставитьНомерГТД = Ложь;
//////							ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
//////						КонецПопытки;
//////					КонецЕсли;
//////				КонецЕсли;
//////				
//////				ЗаказПоставщику = НайтиЗаказПоставщику(Строка.ЗаказПоставщику);
//////				Если Не ЗаказПоставщику = Неопределено Тогда
//////					Если Не СкладУказан Тогда
//////						ПриобретениеОбъект.Склад = ЗаказПоставщику.Склад;
//////						СкладУказан = Истина;
//////					КонецЕсли;
//////					
//////					Если ЗаказПоставщику.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Тогда
//////						
//////						Запрос = Новый Запрос;
//////						Запрос.Текст = 
//////						"ВЫБРАТЬ
//////						|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
//////						|	ЗаказПоставщикуТовары.Количество КАК Количество,
//////						|	ЗаказПоставщикуТовары.Назначение КАК Назначение,
//////						|	ЗаказПоставщикуТовары.ДатаПоступления КАК ДатаПоступления,
//////						|	ЗаказПоставщикуТовары.КодСтроки КАК КодСтроки,
//////						|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
//////						|	ЗаказПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковок,
//////						|	ЗаказПоставщикуТовары.Упаковка КАК Упаковка
//////						|ИЗ
//////						|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
//////						|ГДЕ
//////						|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
//////						|	И НЕ ЗаказПоставщикуТовары.Отменено
//////						|	И ЗаказПоставщикуТовары.Номенклатура = &Номенклатура
//////						|
//////						|УПОРЯДОЧИТЬ ПО
//////						|	ДатаПоступления,
//////						|	Назначение УБЫВ";
//////						
//////						Запрос.УстановитьПараметр("Ссылка", ЗаказПоставщику);
//////						Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
//////						
//////						РезультатЗапроса = Запрос.Выполнить();
//////						
//////						ТЗ_НоменклатурыЗаказаПоставщику = РезультатЗапроса.Выгрузить();
//////						
//////						Если не ТЗ_НоменклатурыЗаказаПоставщику.Количество() = 0 Тогда
//////							НайденныеЗаказыПоставщику.Добавить(ЗаказПоставщику);//просто счетчик
//////						КонецЕсли;
//////						
//////						ЗаказОсталосьРаспределить = 0;
//////						ТЗ_НоменклатурыЗаказаПоставщику.Колонки.Добавить("КоличествоОсталось");
//////						ГраничныйИндекс = ТЗ_НоменклатурыЗаказаПоставщику.Количество()-1;
//////						
//////						Если ГраничныйИндекс >= 0 Тогда
//////							
//////							Для Индекс = 0 По ГраничныйИндекс Цикл
//////								
//////								СтрокаЗаказПоставщику = ТЗ_НоменклатурыЗаказаПоставщику[Индекс];
//////								
//////		///Собираем Остаток ПО заказу и Номенклатуре в ЗаказеПоставщику в "СтрокаЗаказПоставщику.КоличествоОсталось"
//////								//СтрокаЗаказПоставщику.КоличествоОсталось = СтрокаЗаказПоставщику.Количество;
//////								
//////								//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
//////								// Данный фрагмент построен конструктором.
//////								// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
//////								
//////								Запрос = Новый Запрос;
//////								Запрос.Текст = 
//////									"ВЫБРАТЬ
//////									|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
//////									|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
//////									|	ЗаказыПоставщикамОстатки.КодСтроки КАК КодСтроки,
//////									|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
//////									|ИЗ
//////									|	РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
//////									|ГДЕ
//////									|	ЗаказыПоставщикамОстатки.ЗаказПоставщику = &ЗаказПоставщику
//////									|	И ЗаказыПоставщикамОстатки.Номенклатура = &Номенклатура
//////									|	И ЗаказыПоставщикамОстатки.КодСтроки = &КодСтроки";
//////								
//////								Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
//////								Запрос.УстановитьПараметр("КодСтроки", СтрокаЗаказПоставщику.КодСтроки);
//////								Запрос.УстановитьПараметр("Номенклатура", СтрокаЗаказПоставщику.Номенклатура);
//////								
//////								РезультатЗапроса = Запрос.Выполнить();
//////								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//////								Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//////									// Вставить обработку выборки ВыборкаДетальныеЗаписи
//////									СтрокаЗаказПоставщику.КоличествоОсталось = ВыборкаДетальныеЗаписи.ЗаказаноОстаток;
//////								Иначе
//////									Сообщить("Ошибка, в файле по заказу '" + ЗаказПоставщику + "' указано количество по Номенклатуре " + НоменклатураСсылка + " уже полностью распределено");
//////									Отказ = Истина;
//////									Прервать;
//////								КонецЕсли;
//////								//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
//////								
//////							//Начало проверки на уже распределенное в "ПриобретениеТоварыНовая"
//////							   //++Шерстюк Ю.Ю. 29.03.2021 если в ПТУ распределение по разным заказам поставщику и одинаковым кодом строки, то возникает ошибка, включаем в поиск и Заказ поставщику
//////								//МассивСтрокНоменклатурыПриобретенияНовая = ПриобретениеТоварыНовая.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, КодСтроки", СтрокаЗаказПоставщику.Номенклатура, СтрокаЗаказПоставщику.Характеристика, СтрокаЗаказПоставщику.КодСтроки));
//////								МассивСтрокНоменклатурыПриобретенияНовая = ПриобретениеТоварыНовая.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, КодСтроки, ЗаказПоставщику", СтрокаЗаказПоставщику.Номенклатура, СтрокаЗаказПоставщику.Характеристика, СтрокаЗаказПоставщику.КодСтроки,ЗаказПоставщику));
//////                                //--Шерстюк Ю.Ю.
//////								Для Каждого СтрокаПриобретениеТоваровНовая Из МассивСтрокНоменклатурыПриобретенияНовая Цикл
//////									СтрокаЗаказПоставщику.КоличествоОсталось = СтрокаЗаказПоставщику.КоличествоОсталось - СтрокаПриобретениеТоваровНовая.КоличествоУпаковок;
//////								КонецЦикла;
//////								Если СтрокаЗаказПоставщику.КоличествоОсталось <= 0 Тогда
//////									Продолжить;
//////								КонецЕсли;
//////							//Конец	проверки на уже распределенное в "ПриобретениеТоварыНовая"
//////								
//////							//Сумма Остатка для ошибки, если в файле меньше, чем в заказе
//////								Если СтрокаЗаказПоставщику.КоличествоОсталось > СтрокаОсталосьРаспределить Тогда
//////									ЗаказОсталосьРаспределить = ЗаказОсталосьРаспределить + СтрокаЗаказПоставщику.КоличествоОсталось - СтрокаОсталосьРаспределить;
//////								КонецЕсли;
//////								
//////		///Выбираем минимум из файла и из "СтрокаЗаказПоставщику.КоличествоОсталось"
//////								СтрокаЗаказПоставщику.КоличествоОсталось = Мин(СтрокаЗаказПоставщику.КоличествоОсталось, СтрокаОсталосьРаспределить); 
//////								
//////								МассивСтрокНоменклатурыПриобретения = ПриобретениеТовары.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",СтрокаЗаказПоставщику.Номенклатура,СтрокаЗаказПоставщику.Характеристика));
//////								
//////								Если не МассивСтрокНоменклатурыПриобретения.Количество() = 0 Тогда
//////									
//////									Для Каждого СтрокаПриобретениеТоваров Из МассивСтрокНоменклатурыПриобретения Цикл
//////										Если СтрокаПриобретениеТоваров.Количество = 0 Тогда
//////											Продолжить;
//////										КонецЕсли;
//////										Если СтрокаЗаказПоставщику.КоличествоОсталось = 0 Тогда
//////											Прервать;
//////										КонецЕсли;
//////										Если СтрокаОсталосьРаспределить = 0 Тогда
//////											Прервать;
//////										КонецЕсли;
//////										
//////										НоваяСтрока = ПриобретениеТоварыНовая.Добавить();
//////										ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриобретениеТоваров);
//////										НоваяСтрока.Склад = ЗаказПоставщику.Склад;
//////										НоваяСтрока.ЗаказПоставщику = ЗаказПоставщику;
//////										НоваяСтрока.Назначение = СтрокаЗаказПоставщику.Назначение;
//////										НоваяСтрока.КодСтроки = СтрокаЗаказПоставщику.КодСтроки;
//////										Если ВставитьНомерГТД Тогда
//////											НоваяСтрока.НомерГТД = НомерГТД;
//////										КонецЕсли;
//////										//НоваяСтрока.Количество = СтрокаПриобретениеТоваров.КоличествоУпаковок;
//////	//		//	ЗаполнитьЗначенияСвойств(НовСтр,СтрокаПриобретениеТоваров,,"Назначение,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов"); 
//////	//		//	СтрокаПриобретениеТоваров.Упаковка = СтрокаЗаказПоставщику.Упаковка;
//////	//		//	НовСтр.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();//если у строки с которой брали свойства указана упаковка то работаем с базовыми единицами
//////											
//////										Если СтрокаЗаказПоставщику.КоличествоОсталось >= СтрокаПриобретениеТоваров.Количество Тогда
//////											НоваяСтрока.Количество			 = СтрокаПриобретениеТоваров.Количество;
//////											НоваяСтрока.КоличествоУпаковок	 = СтрокаПриобретениеТоваров.Количество;
//////											
//////											СтрокаЗаказПоставщику.КоличествоОсталось = СтрокаЗаказПоставщику.КоличествоОсталось - СтрокаПриобретениеТоваров.Количество;
//////											СтрокаПриобретениеТоваров.Количество = 0;
//////										Иначе
//////											НоваяСтрока.Количество			 = СтрокаЗаказПоставщику.КоличествоОсталось;
//////											НоваяСтрока.КоличествоУпаковок	 = СтрокаЗаказПоставщику.КоличествоОсталось;
//////											
//////											СтрокаПриобретениеТоваров.Количество = СтрокаПриобретениеТоваров.Количество - СтрокаЗаказПоставщику.КоличествоОсталось;
//////											СтрокаПриобретениеТоваров.КоличествоУпаковок = СтрокаПриобретениеТоваров.Количество;
//////											СтрокаЗаказПоставщику.КоличествоОсталось = 0;
//////											
//////											ОбработкаСуммСтрок(НоваяСтрока, СтрокаПриобретениеТоваров);
//////											
//////										КонецЕсли;
//////										
//////										СтрокаОсталосьРаспределить = СтрокаОсталосьРаспределить - НоваяСтрока.КоличествоУпаковок;
//////										
//////									//Это "СверхЗаказа"	
//////										Если СтрокаЗаказПоставщику.КоличествоОсталось = 0 И СтрокаОсталосьРаспределить > 0 И Индекс = ГраничныйИндекс Тогда
//////											НоваяСтрока = ПриобретениеТоварыНовая.Добавить();
//////											ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПриобретениеТоваров);
//////											НоваяСтрока.Количество = СтрокаПриобретениеТоваров.Количество;
//////											НоваяСтрока.КоличествоУпаковок	 = СтрокаПриобретениеТоваров.КоличествоУпаковок;
//////											//НоваяСтрока.Количество			 = СтрокаОсталосьРаспределить;
//////											//НоваяСтрока.КоличествоУпаковок	 = СтрокаОсталосьРаспределить;
//////											НоваяСтрока.ЗаказПоставщику = ЗаказПоставщику;
//////											НоваяСтрока.Склад = ЗаказПоставщику.Склад;
//////											НоваяСтрока.Назначение = СтрокаЗаказПоставщику.Назначение;
//////											Если ВставитьНомерГТД Тогда
//////												НоваяСтрока.НомерГТД = НомерГТД;
//////											КонецЕсли;
//////											
//////											СтрокаПриобретениеТоваров.Количество = СтрокаПриобретениеТоваров.Количество - СтрокаОсталосьРаспределить;
//////											СтрокаПриобретениеТоваров.КоличествоУпаковок = СтрокаПриобретениеТоваров.Количество;
//////											Сообщить("Ошибка, в файле по заказу '" + ЗаказПоставщику + "' указано количество по Номенклатуре " + НоменклатураСсылка + " больше приобретенного на " + СтрокаОсталосьРаспределить);
//////										КонецЕсли;
//////									КонецЦикла;
//////									
//////								//Это В ЗаказеОстаток для распределения по Номенклатуре
//////									//ЗаказОсталосьРаспределить = ЗаказОсталосьРаспределить + СтрокаЗаказПоставщику.КоличествоОсталось;
//////									//Если ЗаказОсталосьРаспределить > 0  И Индекс = ГраничныйИндекс Тогда
//////									//	Сообщить("Ошибка, в Документе ЗаказПоставщику '" + ЗаказПоставщику + "' по Номенклатуре " + НоменклатураСсылка + " остаток для распреления " + ЗаказОсталосьРаспределить);
//////									//КонецЕсли;
//////									
//////								КонецЕсли;
//////							КонецЦикла;
//////						Иначе
//////							ОбщегоНазначения.СообщитьПользователю("Номенклатура с артикулом " + Строка.Артикул + ", производителя " + Производитель + " в заказе " + ЗаказПоставщику + " не обнаружена!");
//////						КонецЕсли;
//////					Иначе
//////						ОбщегоНазначения.СообщитьПользователю("Статус найденного в информационной базе " + ЗаказПоставщику +  " должен быть - ПОДТВЕРЖДЕН!"
//////						+ Символы.ПС + "Обработать входящий документ нельзя!");
//////						Отказ = Истина;
//////						Прервать;
//////					КонецЕсли;
//////				Иначе
//////					ОбщегоНазначения.СообщитьПользователю("По строке " + СтрокаПриобретения.ВходящийДокумент + " Документ заказ поставщику с номером поставщика " + Строка.ЗаказПоставщику + " не обнаружен!" 
//////					+ Символы.ПС + "Обработать входящий документ нельзя!");
//////					Отказ = Истина;
//////					Прервать;
//////				КонецЕсли;					
//////			Иначе 	
//////				ОбщегоНазначения.СообщитьПользователю("Номенклатура с артикулом " + Строка.Артикул + ", производителя " + Производитель + " в информационной базе не обнаружена!"
//////				+ Символы.ПС + "Обработать входящий документ нельзя!");
//////				Отказ = Истина;
//////				Прервать;
//////			КонецЕсли;
//////			
//////		КонецЦикла;
//--Шерстюк Ю.Ю. 		
		Если Не Отказ Тогда
			Попытка
					
			//++Шерстюк Ю.Ю. 31.03.2021 по задаче 7123
			Если ТипЗнч(СтрокаПриобретения.ПТУ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				тзРаспределения = СформироватьТаблицуРаспределения(СтрокаПриобретения.ПТУ.Товары.Выгрузить(),ТаблицаДанных.НайтиСтроки(Новый Структура("ВходящийДокумент", СтрокаПриобретения.ВходящийДокумент)));
				ЗаполнитьТЧТовары(тзРаспределения,ПриобретениеОбъект.Товары);	
                ПриобретениеОбъект.ПоступлениеПоЗаказам = Истина;
			Иначе
				тзРаспределения = СформироватьТаблицуРаспределения(ПриобретениеТовары.Выгрузить(),ТаблицаДанных.НайтиСтроки(Новый Структура("ВходящийДокумент", СтрокаПриобретения.ВходящийДокумент)));
				ЗаполнитьТЧТовары(тзРаспределения,ПриобретениеТовары);	
                ПриобретениеОбъект.ПоступлениеПоЗаказам = Истина;
			КонецЕсли;
	        //--Шерстюк Ю.Ю. 31.03.2021 по задаче 7123
	
				
			//++Шерстюк Ю.Ю. 31.03.2021 по задаче 7123	
			//////	Если не НайденныеЗаказыПоставщику.Количество() = 0 Тогда
			//////		ПриобретениеОбъект.ПоступлениеПоЗаказам = Истина;
			//////		Если НайденныеЗаказыПоставщику.Количество() = 1 Тогда
			//////			ПриобретениеОбъект.ЗаказПоставщику = НайденныеЗаказыПоставщику[0].Значение;
			//////		КонецЕсли;
			//////	КонецЕсли;
			//////	
			////////Добавляем строки из ТЧ "ПриобретениеТовары", которые не были распределены.
			//////	Для Каждого СтрокаПриобретениеТоваров Из ПриобретениеТовары Цикл
			//////		Если СтрокаПриобретениеТоваров.Количество > 0 Тогда
			//////			НоваяСтрока = ПриобретениеТоварыНовая.Добавить();
			//////			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриобретениеТоваров);
			//////		КонецЕсли;
			//////	КонецЦикла;
				
			////////Проверка на Правильные Суммы "До и После"	распределения
			//////	СуммаВсегоПоДокументу = 0;
			//////	Для Каждого Строка	Из ПриобретениеТоварыДляПроверки Цикл
			//////		МассивНоменклатуры = ПриобретениеТоварыНовая.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
			//////		КоличествоМ = 0;
			//////		КоличествоУпаковокМ = 0;
			//////		СуммаМ = 0;
			//////		СуммаНДСМ = 0;
			//////		СуммаСНДСМ = 0;
			//////		Для Каждого СтрокаМассива Из МассивНоменклатуры Цикл
			//////			КоличествоМ = КоличествоМ + СтрокаМассива.Количество;
			//////			КоличествоУпаковокМ = КоличествоУпаковокМ + СтрокаМассива.КоличествоУпаковок;
			//////			СуммаМ = СуммаМ + СтрокаМассива.Сумма;
			//////			СуммаНДСМ = СуммаНДСМ + СтрокаМассива.СуммаНДС;
			//////			СуммаСНДСМ = СуммаСНДСМ + СтрокаМассива.СуммаСНДС;
			//////		КонецЦикла;
			//////		Если Строка.Количество <> КоличествоМ Тогда
			//////			Сообщить("По Номенклатуре " + Строка.Номенклатура + " неверно распределилось Количество, было " + Строка.Количество + ", распределилось " + КоличествоМ);
			//////		КонецЕсли;
			//////		Если Строка.КоличествоУпаковок <> КоличествоУпаковокМ Тогда
			//////			Сообщить("По Номенклатуре " + Строка.Номенклатура + " неверно распределилось Количество упаковок, было " + Строка.КоличествоУпаковок + ", распределилось " + КоличествоУпаковокМ);
			//////		КонецЕсли;
			//////		Если Строка.Сумма <> СуммаМ Тогда
			//////			Сообщить("По Номенклатуре " + Строка.Номенклатура + " неверно распределилась Сумма, было " + Строка.Сумма + ", распределилось " + СуммаМ);
			//////		КонецЕсли;
			//////		Если Строка.СуммаНДС <> СуммаНДСМ Тогда
			//////			Сообщить("По Номенклатуре " + Строка.Номенклатура + " неверно распределилось Сумма НДС, было " + Строка.СуммаНДС + ", распределилось " + СуммаНДСМ);
			//////		КонецЕсли;
			//////		Если Строка.СуммаСНДС <> СуммаСНДСМ Тогда
			//////			Сообщить("По Номенклатуре " + Строка.Номенклатура + " неверно распределилось Сумма С НДС, было " + Строка.СуммаСНДС + ", распределилось " + СуммаСНДСМ);
			//////		КонецЕсли;
			//////	КонецЦикла;
				
				////////ПриобретениеТовары.Загрузить(ПриобретениеТоварыНовая);
			//++Шерстюк Ю.Ю. 31.03.2021 по задаче 7123	
				Если ПриобретениеОбъект.Проведен Тогда
					ПриобретениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ПриобретениеОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				////ПриобретениеОбъект.Записать();
			Исключение
				Отказ = Истина;
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	
	КонецЦикла;
	
	Если Не Отказ Тогда
		ТаблицаВходящихДокументов.Очистить();
		ПолучитьВходящиеДокументы();
		ОбщегоНазначения.СообщитьПользователю("Обработка успешно завершена!");
	Иначе 
		ОбщегоНазначения.СообщитьПользователю("Обработка не выполнена. Присутствуют ошибки!");
	КонецЕсли;
	
КонецПроцедуры // ОбработатьExcel()

//++Шерстюк Ю.Ю. 31.03.2021 7123
&НаСервере
Функция СформироватьТаблицуРаспределения(ТзДокумента,МассивАртикулов)
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;

	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	Таблица.НомераГТД КАК НомераГТД,
	               	|	Таблица.Номенклатура КАК Номенклатура,
	               	|	Таблица.ЗаказПоставщику КАК Заказ,
	               	|	Таблица.Количество КАК Количество,
	               	|	ЛОЖЬ КАК НоваяСтрока
	               	|ПОМЕСТИТЬ ТаблицаПТУ
	               	|ИЗ
	               	|	&Таблица КАК Таблица
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ТаблицаТЧ.Номенклатура КАК Номенклатура,
	               	|	ТаблицаТЧ.НомерГТД КАК НомераГТД,					
	               	|	ТаблицаТЧ.ЗаказПоставщику КАК ЗаказПоставщику,
	               	|	ТаблицаТЧ.Количество КАК Количество,
	               	|	ЛОЖЬ КАК НоваяСтрока
	               	|ПОМЕСТИТЬ ТаблицаТчПТУ
	               	|ИЗ
	               	|	&ТаблицаТЧ КАК ТаблицаТЧ
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ТаблицаПТУ.НомераГТД КАК НомераГТД,
	               	|	ТаблицаПТУ.Номенклатура КАК Номенклатура,
	               	|	СУММА(ТаблицаПТУ.Количество) КАК Количество,
	               	|	ТаблицаПТУ.НоваяСтрока КАК НоваяСтрока,
	               	|	ЕСТЬNULL(ЗаказПоставщику.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ЗаказПоставщику,
	               	|	ТаблицаПТУ.Заказ КАК ЗаказПоставщикуНомер
	               	|ИЗ
	               	|	ТаблицаПТУ КАК ТаблицаПТУ
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               	|		ПО (ЗаказПоставщику.НомерПоДаннымПоставщика = ТаблицаПТУ.Заказ)
	               	|			И (ЗаказПоставщику.Проведен)
	               	|
	               	|СГРУППИРОВАТЬ ПО
	               	|	ТаблицаПТУ.НомераГТД,
	               	|	ТаблицаПТУ.Номенклатура,
	               	|	ТаблицаПТУ.НоваяСтрока,
	               	|	ЕСТЬNULL(ЗаказПоставщику.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)),
	               	|	ТаблицаПТУ.Заказ";
	
	пТаблицаЗначенийДляЗапроса = Новый ТаблицаЗначений;
	КвалификаторыСтроки = Новый КвалификаторыСтроки(50);
	пТаблицаЗначенийДляЗапроса.Колонки.Добавить("НомераГТД",Новый ОписаниеТипов("Строка",,КвалификаторыСтроки));
	пТаблицаЗначенийДляЗапроса.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	пТаблицаЗначенийДляЗапроса.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
    пТаблицаЗначенийДляЗапроса.Колонки.Добавить("ЗаказПоставщику",Новый ОписаниеТипов("Строка",,КвалификаторыСтроки));

	Для Каждого ЭлементМассива из МассивАртикулов Цикл 
		НоваяСтрокаТз = пТаблицаЗначенийДляЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТз,ЭлементМассива);
		НоваяСтрокаТз.Количество = Число(ЭлементМассива.Количество);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Таблица",пТаблицаЗначенийДляЗапроса);
	Запрос.УстановитьПараметр("ТаблицаТЧ",ТзДокумента);

	Попытка
		Результат = Запрос.ВыполнитьПакет();
	Исключение
		     Сообщить("Распределение не выполнено");
		     Возврат 0;
	КонецПопытки;

	ТабДокумента = МВТ.Таблицы.Найти("ТаблицаТчПТУ").ПолучитьДанные().Выгрузить();
	ТабДокумента.Колонки.Добавить("Индекс");

	ТабЗаказыПоставщику = Результат[Результат.ВГраница()].Выгрузить(); 
	ТабДляРаспределения = ТабДокумента.Скопировать(); // Основная таблица, по которой будут заполняться и проводиться документы
	ТабДляРаспределения.Очистить();
	//Очистим заполненные коды строк, для нового распределения
	пИндекс = 0;
	Для Каждого СтрТаблица из ТабДокумента Цикл 
		//СтрТаблица.КодСтроки = 0;
		СтрТаблица.Индекс = пИндекс;
		пИндекс = пИндекс + 1;
	КонецЦикла;
	
	Для Каждого СтрТаблица из ТабДокумента Цикл 
		СтруктураПоиска = Новый Структура("Номенклатура, НомераГТД",СтрТаблица.Номенклатура,СтрТаблица.НомераГТД.РегистрационныйНомер);
	    //Ищем все непогашенные строки по заказу поставщика с отбором по номенклатуре
		СтрокиОстатки = ТабЗаказыПоставщику.НайтиСтроки(СтруктураПоиска);
		
		ОсталосьРаспределитьПоПТУ = СтрТаблица.Количество;
		РазделитьСтроку = Ложь; // Используем для разделения строки

		Для Каждого СтрОстатки из СтрокиОстатки Цикл 
			Если ОсталосьРаспределитьПоПТУ = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Если СтрОстатки.Количество = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ОсталосьРаспределитьПоПТУ <= СтрОстатки.Количество Тогда 
				НоваяСтрока = ТабДляРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТаблица);
				//НоваяСтрока.КодСтроки = СтрОстатки.КодСтроки;
				НоваяСтрока.Количество = ОсталосьРаспределитьПоПТУ;
				НоваяСтрока.НоваяСтрока = РазделитьСтроку;
				НоваяСтрока.ЗаказПоставщику = СтрОстатки.ЗаказПоставщику;
				СтрОстатки.Количество = СтрОстатки.Количество - НоваяСтрока.Количество;
				ОсталосьРаспределитьПоПТУ = 0;
				РазделитьСтроку = Ложь;
			Иначе 
				НоваяСтрока = ТабДляРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТаблица);
				//НоваяСтрока.КодСтроки = СтрОстатки.КодСтроки;
				НоваяСтрока.Количество = СтрОстатки.Количество;
				НоваяСтрока.ЗаказПоставщику = СтрОстатки.ЗаказПоставщику;
				НоваяСтрока.НоваяСтрока = РазделитьСтроку;
				СтрОстатки.Количество = СтрОстатки.Количество - НоваяСтрока.Количество;
	            ОсталосьРаспределитьПоПТУ = ОсталосьРаспределитьПоПТУ - НоваяСтрока.Количество;
				РазделитьСтроку = Истина;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ОсталосьРаспределитьПоПТУ > 0 Тогда //остаток сверх заказа
			НоваяСтрока = ТабДляРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТаблица);
			НоваяСтрока.Количество = ОсталосьРаспределитьПоПТУ;
			НоваяСтрока.НоваяСтрока = РазделитьСтроку;
			//НоваяСтрока.ЗаказПоставщику = СтрОстатки.ЗаказПоставщику;
			ОсталосьРаспределитьПоПТУ = 0;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТабДляРаспределения;
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧТовары(тзРаспределения,ТчТовары)
	 //ТчТовары = Объект.Товары;
	 ТЗТовары = ТчТовары.Выгрузить();
	 пИндекс = 0;
	 Для Каждого СтрТЧ из ТЗТовары Цикл 
		 СтруктураПоиска = Новый Структура("Индекс",пИндекс);

		 МассивНовыхСтрок = тзРаспределения.НайтиСтроки(СтруктураПоиска);
		 
		 пКоличествоНовыхСтрок = МассивНовыхСтрок.Количество();
		 
		 Если пКоличествоНовыхСтрок > 0 Тогда 
			 Если пКоличествоНовыхСтрок = 1 и Не МассивНовыхСтрок[0].НоваяСтрока Тогда //если не новая строка, то пересчет суммы не требуется
				 ТекущаяСтрока = ТчТовары.Получить(пИндекс);
				 //ТекущаяСтрока.КодСтроки = МассивНовыхСтрок[0].КодСтроки;
				 //ТекущаяСтрока.Назначение = МассивНовыхСтрок[0].Назначение; 
				 //ТекущаяСтрока.РасхождениеЗаказ = 0;
				 ТекущаяСтрока.ЗаказПоставщику = МассивНовыхСтрок[0].ЗаказПоставщику;
				 пИндекс = пИндекс + 1;
				 Продолжить;
			 Иначе
				 Для Каждого ЭлементМассива из МассивНовыхСтрок Цикл
					 
					 Если Не ЭлементМассива.НоваяСтрока Тогда 
						  ТекущаяСтрока = ТчТовары.Получить(пИндекс);
						  Если ТекущаяСтрока.Количество <> ЭлементМассива.Количество  Тогда 
							  //ТекущаяСтрока.КодСтроки = ЭлементМассива.КодСтроки;
							  ТекущаяСтрока.Количество = ЭлементМассива.Количество;
	                          ТекущаяСтрока.КоличествоУпаковок = ЭлементМассива.Количество;
							 ТекущаяСтрока.ЗаказПоставщику = ЭлементМассива.ЗаказПоставщику;  
						  КонецЕсли;
					  Иначе 
						  НоваяСтрока = ТчТовары.Добавить();
						  ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТЧ);
						  //НоваяСтрока.КодСтроки = ЭлементМассива.КодСтроки;
						  НоваяСтрока.Количество = ЭлементМассива.Количество;
						  НоваяСтрока.КоличествоУпаковок = ЭлементМассива.Количество;
						  НоваяСтрока.ЗаказПоставщику = ЭлементМассива.ЗаказПоставщику;
						  ОбработкаСуммСтрок(НоваяСтрока, ТекущаяСтрока);

					 КонецЕсли;
					 
				 КонецЦикла;
				 
				 
			 КонецЕсли;
			 
		 КонецЕсли;
		 пИндекс = пИндекс + 1;
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ОбработатьСтроку(ТекущаяСтрока, Приобретение)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Приобретение);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Приобретение.Партнер);
	СтруктураДействий.Вставить(
	"ПроверитьСопоставленнуюНоменклатуруПоставщика",
	ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
	Приобретение,
	Истина));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Приобретение.НалогообложениеНДС, Приобретение.Дата));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Приобретение.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
	Приобретение.ПоступлениеПоЗаказам, Приобретение.ТребуетсяЗалогЗаТару));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
		ТекущаяСтрока.СписатьНаРасходы = Ложь;
		ТекущаяСтрока.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
		ТекущаяСтрока.АналитикаРасходов = Неопределено;
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуру(Артикул,Производитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул
	|	И Номенклатура.Производитель = &Производитель
	|	И НЕ Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции //НайтиНоменклатуру()

&НаСервере
Функция НайтиЗаказПоставщику(НомерПоДаннымПоставщика)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|	И ЗаказПоставщику.НомерПоДаннымПоставщика = &НомерПоДаннымПоставщика";
	
	Запрос.УстановитьПараметр("НомерПоДаннымПоставщика", НомерПоДаннымПоставщика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка; 
	КонецЕсли;
	
КонецФункции // НайтиЗаказПоставщику()

&НаСервере
Функция ЭтоЧисло(Слово)
	
	Цифры = "1234567890";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПолучитьВходящиеДокументы()
	
	ТЗ = ТаблицаДанных.Выгрузить(,"ВходящийДокумент");
	ТЗ.Свернуть("ВходящийДокумент");
	
	Для каждого Строка Из ТЗ Цикл
		
		Если не ЭтоЧисло(Строка.ВходящийДокумент) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриобретениеТоваровУслугТовары.Ссылка КАК ПТУ
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента = &ВходящийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслугТовары.Ссылка";
		
		Запрос.УстановитьПараметр("ВходящийДокумент",Строка.ВходящийДокумент);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		
		Если не РезультатЗапроса.Пустой() Тогда
			Пока ВыборкаЗапроса.Следующий() Цикл
				НовЗапись = ТаблицаВходящихДокументов.Добавить();
				НовЗапись.ВходящийДокумент = Строка.ВходящийДокумент;
				НовЗапись.ПТУ = ВыборкаЗапроса.ПТУ;
				ТЗ = ВыборкаЗапроса.ПТУ.Товары.Выгрузить(,"ЗаказПоставщику");
				ТЗ.Свернуть("ЗаказПоставщику");
				Для каждого Строка Из ТЗ Цикл
					Если Строка.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
						ТЗ.Удалить(Строка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				НовЗапись.СписокЗаказов.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("ЗаказПоставщику"));
				Если не НовЗапись.СписокЗаказов.Количество() = 0 Тогда
					НовЗапись.ИтогоЗаказов = "Всего заказов: " + НовЗапись.СписокЗаказов.Количество();
				КонецЕсли;
			КонецЦикла;
		Иначе
			НовЗапись = ТаблицаВходящихДокументов.Добавить();
			НовЗапись.ВходящийДокумент = Строка.ВходящийДокумент;
			НовЗапись.ПТУ = "<Отсутствует (не найден) документ в информационной базе.>";
			//
			Элементы.ГруппаДополнительная.Видимость = Истина;
		    Элементы.Декорация4.Видимость = Истина;
			//
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолучитьПравилаПоставщика(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПравилаПоставщика(Поставщик)

	КолонкаВходящийДокумент = 0;
	КолонкаЗаказПоставщику = 0;
	КолонкаАртикул = 0;
	КолонкаКоличество = 0;
	КолонкаЦена = 0;
	КолонкаНомераГТД = 0;
	КолонкаСтранаПроисхождения = 0;
//{{20201124 ГлазуновДВ	
	КолонкаСумма = 0;
	ФлагСуммаСНДС = Ложь;
	ФлагЦенаСНДС = Ложь;
	СтранаПроисхожденияПоУмолчанию = Справочники.СтраныМира.ПустаяСсылка();
//}}20201124 ГлазуновДВ	
//{{20200831 ГлазуновДВ	
	СоздаватьГТД = Ложь;
	Производитель = Справочники.Производители.ПустаяСсылка();
	НомерЛиста = 0;
	ПерваяСтрока = 0;
	ПоследняяСтрока = 0;
//}}20200831 ГлазуновДВ
	
	ТаблицаДанных.Очистить();
	ТаблицаВходящихДокументов.Очистить();
	
	СЗ_Правила = Поставщик.Рин1_ПравилаЗагрузкиИсполненийЗаказов.Получить();
	
	Если не СЗ_Правила = Неопределено Тогда
		
		Для каждого ЭлементСписка  Из СЗ_Правила Цикл
			
			Если ЭлементСписка.Представление = "КолонкаВходящийДокумент" Тогда
				КолонкаВходящийДокумент = ЭлементСписка.Значение;
				Продолжить;
			ИначеЕсли ЭлементСписка.Представление = "КолонкаЗаказПоставщику" Тогда 	
				КолонкаЗаказПоставщику = ЭлементСписка.Значение;
				Продолжить;
			ИначеЕсли ЭлементСписка.Представление = "КолонкаАртикул" Тогда 	
				КолонкаАртикул = ЭлементСписка.Значение;
				Продолжить;
			ИначеЕсли ЭлементСписка.Представление = "КолонкаКоличество" Тогда 	
				КолонкаКоличество = ЭлементСписка.Значение;
				Продолжить;
			ИначеЕсли ЭлементСписка.Представление = "Производитель" Тогда 	
				Производитель = ЭлементСписка.Значение;
				Продолжить;	
			ИначеЕсли ЭлементСписка.Представление = "КолонкаЦена" Тогда 	
				КолонкаЦена = ЭлементСписка.Значение;
				Продолжить;
			ИначеЕсли ЭлементСписка.Представление = "КолонкаНомераГТД" Тогда 	
				КолонкаНомераГТД = ЭлементСписка.Значение;
			ИначеЕсли ЭлементСписка.Представление = "КолонкаСтранаПроисхождения" Тогда 	
				КолонкаСтранаПроисхождения = ЭлементСписка.Значение;
		//{{20200831 ГлазуновДВ добавили для восстановления
			//{{20201124 ГлазуновДВ	
			ИначеЕсли ЭлементСписка.Представление = "КолонкаСумма" Тогда 	
				КолонкаСумма = ЭлементСписка.Значение;
			ИначеЕсли ЭлементСписка.Представление = "ФлагСуммаСНДС" Тогда 	
				ФлагСуммаСНДС = ЭлементСписка.Значение;
			ИначеЕсли ЭлементСписка.Представление = "ФлагЦенаСНДС" Тогда 	
				ФлагЦенаСНДС = ЭлементСписка.Значение;
			ИначеЕсли ЭлементСписка.Представление = "СтранаПроисхожденияПоУмолчанию" Тогда 	
				СтранаПроисхожденияПоУмолчанию = ЭлементСписка.Значение;
			//}}20201124 ГлазуновДВ	
			ИначеЕсли ЭлементСписка.Представление = "СоздаватьГТД" Тогда 	
				СоздаватьГТД = ЭлементСписка.Значение;
			ИначеЕсли ЭлементСписка.Представление = "Производитель" Тогда 	
				Производитель = ЭлементСписка.Значение;
			ИначеЕсли ЭлементСписка.Представление = "НомерЛиста" Тогда 	
				НомерЛиста = ЭлементСписка.Значение;
			ИначеЕсли ЭлементСписка.Представление = "ПерваяСтрока" Тогда 	
				ПерваяСтрока = ЭлементСписка.Значение;
			ИначеЕсли ЭлементСписка.Представление = "ПоследняяСтрока" Тогда 	
				ПоследняяСтрока = ЭлементСписка.Значение;
		//}}20200831 ГлазуновДВ
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе 
		ОбщегоНазначения.СообщитьПользователю("У поставщика отсутствуют ранее записанные правила!");
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПравилаПоставщика()

&НаКлиенте
Процедура СохранитьПравила(Команда)
	
	Если не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Сообщить("Выберите поставщика для сохранения правил!");
	Иначе
		
		СЗ_Правила = Новый СписокЗначений;
		СЗ_Правила.Добавить(КолонкаВходящийДокумент,"КолонкаВходящийДокумент");
		СЗ_Правила.Добавить(КолонкаЗаказПоставщику,"КолонкаЗаказПоставщику");
		СЗ_Правила.Добавить(КолонкаАртикул,"КолонкаАртикул");
		СЗ_Правила.Добавить(КолонкаКоличество,"КолонкаКоличество");
		СЗ_Правила.Добавить(Производитель,"Производитель");
		СЗ_Правила.Добавить(КолонкаЦена,"КолонкаЦена");
		СЗ_Правила.Добавить(КолонкаНомераГТД,"КолонкаНомераГТД");
		СЗ_Правила.Добавить(КолонкаСтранаПроисхождения,"КолонкаСтранаПроисхождения");
	//{{20200831 ГлазуновДВ добавили для сохранения	
		//{{20201124 ГлазуновДВ	
		СЗ_Правила.Добавить(КолонкаСумма, "КолонкаСумма");
		СЗ_Правила.Добавить(ФлагСуммаСНДС, "ФлагСуммаСНДС");
		СЗ_Правила.Добавить(ФлагЦенаСНДС, "ФлагЦенаСНДС");
		СЗ_Правила.Добавить(СтранаПроисхожденияПоУмолчанию, "СтранаПроисхожденияПоУмолчанию");
		//}}20201124 ГлазуновДВ	
		СЗ_Правила.Добавить(СоздаватьГТД, "СоздаватьГТД");
		СЗ_Правила.Добавить(Производитель, "Производитель");
		СЗ_Правила.Добавить(НомерЛиста, "НомерЛиста");
		СЗ_Правила.Добавить(ПерваяСтрока, "ПерваяСтрока");
		СЗ_Правила.Добавить(ПоследняяСтрока, "ПоследняяСтрока");
	//}}20200831 ГлазуновДВ
		
		СохранитьПравилаПоставщика(Объект.Поставщик,СЗ_Правила);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьПравилаПоставщика(Поставщик,СЗ_Правила)
	
	Попытка
		ОбъектПоставщик = Поставщик.ПолучитьОбъект();
		ОбъектПоставщик.Рин1_ПравилаЗагрузкиИсполненийЗаказов = Новый ХранилищеЗначения(СЗ_Правила);
		ОбъектПоставщик.Записать();
		ОбщегоНазначения.СообщитьПользователю("Правила успешно сохранены.");
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПравила(Команда)
	
	Если не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Сообщить("Выберите поставщика для восстановления правил!");
	Иначе
		ПолучитьПравилаПоставщика(Объект.Поставщик);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЗагрузкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагУстановить(Команда)
	
	Для каждого Строка Из ТаблицаВходящихДокументов Цикл
		Если ТипЗнч(Строка.ПТУ) = Тип("Строка") Тогда
			Сообщить("Для входящего документа " + Строка.ВходящийДокумент + " будет создано приобретение товаров и услуг автоматически, по текущим настройкам!");
		КонецЕсли;
		Строка.отметка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагСнять(Команда)
	
	Для каждого Строка Из ТаблицаВходящихДокументов Цикл
		Строка.отметка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящихДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = ТаблицаВходящихДокументов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.ГиперссылкаЯчейки и Поле.Имя = "ТаблицаВходящихДокументовИтогоЗаказов" и не ТекущаяСтрока.СписокЗаказов.Количество() = 0 тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
		ТекущаяСтрока.СписокЗаказов,
		НСтр("ru = 'Заказы поставщикам (%КоличествоДокументов%)';
		|en = 'Purchase orders (%КоличествоДокументов%)'")
		),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящихДокументовОтметкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаВходящихДокументов.ТекущиеДанные;
	Если ТипЗнч(ТекущаяСтрока.ПТУ) = Тип("Строка") и  ТекущаяСтрока.Отметка Тогда
		Сообщить("Для входящего документа " + ТекущаяСтрока.ВходящийДокумент + " будет создано приобретение товаров и услуг автоматически, по текущим настройкам!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаличиеОшибокВНомереДекларации(НомерТаможеннойДекларации)
	
	НомерДекларацииНаТовары = СокрЛП(НомерТаможеннойДекларации);
	
	Если НЕ ЗначениеЗаполнено(НомерДекларацииНаТовары) Тогда
		// Пользователь еще ничего не ввел.
		Возврат 0;
	КонецЕсли;
	
	МассивТД = СтрРазделить(НомерДекларацииНаТовары, "/");
	
	Если МассивТД.Количество() > 4
	 ИЛИ МассивТД.Количество() < 3 Тогда
		// Ошибочное количество элементов.
		Возврат 1;
	КонецЕсли;
	
	КодТаможенногоОргана = МассивТД[0];
	
	Если СтрДлина(КодТаможенногоОргана) <> 2
		И СтрДлина(КодТаможенногоОргана) <> 5
		И СтрДлина(КодТаможенногоОргана) <> 8 Тогда
		// Ошибочная длина кода таможенного органа.
		Возврат 2;
	КонецЕсли;
	
	ДатаПринятияДекларацииНаТовары = МассивТД[1];
	
	Если СтрДлина(ДатаПринятияДекларацииНаТовары) <> 6 Тогда
		// Ошибочная длина поля дата.
		Возврат 3;
	Иначе
		// Проверим корректность указания даты.
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДатаПринятияДекларацииНаТовары) Тогда
			// Длина поля верная, но дата указана ошибочно.
			Возврат 3;
		КонецЕсли; 
		
		СтрокаВДату = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаПринятияДекларацииНаТовары);
		Если НЕ ЗначениеЗаполнено(СтрокаВДату) Тогда
			// Длина поля верная, но дата указана ошибочно.
			Возврат 3;
		Иначе
			// Проверим год на корректность указания.
			//
			//Если СтрокаВДату < НачалоКорректногоПериода 
			// ИЛИ СтрокаВДату > КонецКорректногоПериода Тогда
			//	Возврат 4;
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПорядковыйНомерДекларацииНаТовары = МассивТД[2];
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) < 7
	 ИЛИ СтрДлина(ПорядковыйНомерДекларацииНаТовары) > 8 Тогда
		// Ошибочная длина поля порядковый номер.
		Возврат 5;
	КонецЕсли;
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 7
		И НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПорядковыйНомерДекларацииНаТовары) Тогда
		// Ошибочный формат поля порядковый номер.
		Возврат 5;
	КонецЕсли;
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 8 Тогда
		ПервыеДваСимвола = ВРег(Лев(ПорядковыйНомерДекларацииНаТовары, 2));
		Если ПервыеДваСимвола = "0Б" Тогда 
			// Вместо буквы "О" указана цифра ноль.
			Возврат 6;
		ИначеЕсли ПервыеДваСимвола = "3В"
		      ИЛИ ПервыеДваСимвола = "3B" Тогда
			// Вместо буквы "З" указана цифра три.
			Возврат 7;
		ИначеЕсли ПервыеДваСимвола <> "ОБ"
		        И ПервыеДваСимвола <> "OБ"
		        И ПервыеДваСимвола <> "ЗВ"
		        И ПервыеДваСимвола <> "ЗB" Тогда 
			// Ошибочный формат поля порядковый номер.
			Возврат 5;
		КонецЕсли;
		ПоследниеШестьСимволов = ВРег(Прав(ПорядковыйНомерДекларацииНаТовары, 6));
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеШестьСимволов) Тогда
			// Ошибочный формат поля порядковый номер.
			Возврат 5;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивТД.Количество() = 4 Тогда
		ПорядковыйНомерТовара = МассивТД[3];
		Если СтрДлина(ПорядковыйНомерТовара) > 3
		 ИЛИ СтрДлина(ПорядковыйНомерТовара) < 1 Тогда
			// Ошибочная длина поля порядковый номер товара.
			Возврат 8;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

//{{20201124 ГлазуновДВ
&НаСервере
Процедура ОбработатьСтрокуПоСумме(ТекущаяСтрока, Приобретение)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Приобретение);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Приобретение.Партнер);
	СтруктураДействий.Вставить(
	"ПроверитьСопоставленнуюНоменклатуруПоставщика",
	ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
	Приобретение,
	Истина));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Приобретение.НалогообложениеНДС, Приобретение.Дата));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Приобретение.ВернутьМногооборотнуюТару);
	
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
//	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект, Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
	Приобретение.ПоступлениеПоЗаказам, Приобретение.ТребуетсяЗалогЗаТару));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
		ТекущаяСтрока.СписатьНаРасходы = Ложь;
		ТекущаяСтрока.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
		ТекущаяСтрока.АналитикаРасходов = Неопределено;
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаСуммСтрок(ПерваяСтрока, ВтораяСтрока)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
	//"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов",
	"Сумма, СуммаНДС, СуммаСНДС, СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов",
	, "КоличествоУпаковок");

	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ВтораяСтрока);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ПараметрыОбработки = ПараметрыРазбиенияСтроки();
	
	ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ПерваяСтрока);
	ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ВтораяСтрока);
	//СтруктураПересчетаСуммы.Строки.Добавить(ПерваяСтрока);
	//СтруктураПересчетаСуммы.Строки.Добавить(ВтораяСтрока);
	//СтруктураПересчетаСуммы.ИтогКоличество	= ВтораяСтрока.КоличествоУпаковок;
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыРазбиенияСтроки()
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите количество товара в новой строке';
														|en = 'Enter quantity of goods in a new line'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	
	Возврат ПараметрыРазбиенияСтроки;
	
КонецФункции
//}}20201124 ГлазуновДВ

//{{20201226 ГлазуновДВ
&НаКлиенте
Процедура ТаблицаДанныхНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	ТекущиеДанные.Артикул = ПолучениеАртикул(ВыбранноеЗначение, ТекущиеДанные.ЗаказПоставщику, ТекущиеДанные.НомерСтроки);
КонецПроцедуры

&НаСервере
Функция ПолучениеАртикул(Номенклатура, НомерПоДаннымПоставщика, НомерСтроки)
//Проверка на присутствие Номеклатуры в Заказе
    ЗаказПоставщику = НайтиЗаказПоставщику(НомерПоДаннымПоставщика);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|	И НЕ ЗаказПоставщикуТовары.Отменено
	|	И ЗаказПоставщикуТовары.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоступления,
	|	Назначение УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказПоставщику);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("По строке " + НомерСтроки + " - номенклатура из файла не найдена в указанном Заказе № " + НомерПоДаннымПоставщика + "");
	КонецЕсли;
	Возврат Номенклатура.Артикул;
КонецФункции
//}}20201226 ГлазуновДВ
