#Область Работа_с_WEB

//СтруктураМетодовЗапроса - СТРУКТУРА с методами запросов к поставщику
//("getBasicData","new-api/XML/getbasicdata?commercialRef=");  //получим ОПИСАНИЕ,СЕРИЮ,ФОТО,УПАКОВКУ,ETIM
//("getPrice","new-api/XML/getprice?commercialRef=");          //получим ЦЕНУ,
//("getCert","new-api/XML/getcert?commercialRef=");            //получим СЕРТИФИКАТЫ,
//("getStock","new-api/XML/getstock?commercialRef=");          //получим СКЛАДСКИЕ ОСТАТКИ,
//
Процедура ВыполнитьЗапрос(СтруктураМетодовЗапроса) Экспорт 
	
	Если ЗначениеЗаполнено(Артикул) Тогда
		
		АвторизационныйКлюч = "HYHlIz771aID8quFHxxq6gwNLlgcEsiZ";
		
		СтруктураПараметровСоединения = Новый Структура;
		СтруктураПараметровСоединения.Вставить("Сервер",						 "web.se-ecatalog.ru");	
		СтруктураПараметровСоединения.Вставить("Порт",							 443);	
		СтруктураПараметровСоединения.Вставить("Пользователь",					 "");	
		СтруктураПараметровСоединения.Вставить("Пароль",						 "");	
		СтруктураПараметровСоединения.Вставить("Прокси",						 Неопределено);	
		СтруктураПараметровСоединения.Вставить("Таймаут",						 0);	
		//СтруктураПараметровСоединения.Вставить("ЗащищенноеСоединение",			 Неопределено);	
		//СтруктураПараметровСоединения.Вставить("ИспользоватьАутентификациюОС",	 Ложь);	
		
		ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());

		СтруктураПараметровСоединения.Вставить("ЗащищенноеСоединение",			 ssl1);
		СтруктураПараметровСоединения.Вставить("ИспользоватьАутентификациюОС",	 Ложь);
	
		Для каждого Стр Из СтруктураМетодовЗапроса Цикл
			
			Если Стр.Ключ = "getBasicData" Тогда 
				//
				HTTPАдресРесурса = СтруктураМетодовЗапроса["getBasicData"] + СокрЛП(Артикул) + "&accessCode=" + СокрЛП(АвторизационныйКлюч);
				//
				СтруктураПараметровЗапроса = Новый Структура;
				СтруктураПараметровЗапроса.Вставить("АдресРесурса",	СокрЛП(HTTPАдресРесурса));	
				СтруктураПараметровЗапроса.Вставить("Заголовки",	Новый Соответствие);
				//
				РезультатGetЗапрос = ВыполнитьGetЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса);
				
				ПрочитатьФайлXMLЧерезDOM_getBasicData(РезультатGetЗапрос.ИмяФайлаОтвета);
				
			ИначеЕсли Стр.Ключ = "getPrice" Тогда 
				//
				HTTPАдресРесурса = СтруктураМетодовЗапроса["getPrice"] + СокрЛП(Артикул) + "&accessCode=" + СокрЛП(АвторизационныйКлюч);
				//
				СтруктураПараметровЗапроса = Новый Структура;
				СтруктураПараметровЗапроса.Вставить("АдресРесурса",	СокрЛП(HTTPАдресРесурса));	
				СтруктураПараметровЗапроса.Вставить("Заголовки",	Новый Соответствие);
				//
				РезультатGetЗапрос = ВыполнитьGetЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса);
				
				ПрочитатьФайлXMLЧерезDOM_getPrice(РезультатGetЗапрос.ИмяФайлаОтвета);
				
			ИначеЕсли Стр.Ключ = "getStock" Тогда 
				//
				HTTPАдресРесурса = СтруктураМетодовЗапроса["getStock"] + СокрЛП(Артикул) + "&accessCode=" + СокрЛП(АвторизационныйКлюч);
				//
				СтруктураПараметровЗапроса = Новый Структура;
				СтруктураПараметровЗапроса.Вставить("АдресРесурса",	СокрЛП(HTTPАдресРесурса));	
				СтруктураПараметровЗапроса.Вставить("Заголовки",	Новый Соответствие);
				//
				РезультатGetЗапрос = ВыполнитьGetЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса);
				
				ПрочитатьФайлXMLЧерезDOM_getStock(РезультатGetЗапрос.ИмяФайлаОтвета);
				
			ИначеЕсли Стр.Ключ = "getCert" Тогда 
				//
				HTTPАдресРесурса = СтруктураМетодовЗапроса["getCert"] + СокрЛП(Артикул) + "&accessCode=" + СокрЛП(АвторизационныйКлюч);
				//
				СтруктураПараметровЗапроса = Новый Структура;
				СтруктураПараметровЗапроса.Вставить("АдресРесурса",	СокрЛП(HTTPАдресРесурса));	
				СтруктураПараметровЗапроса.Вставить("Заголовки",	Новый Соответствие);
				//
				РезультатGetЗапрос = ВыполнитьGetЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса);
				
				ПрочитатьФайлXMLЧерезDOM_getCert(РезультатGetЗапрос.ИмяФайлаОтвета);
				
			КонецЕсли;
			
			Попытка
				УдалитьФайлы(РезультатGetЗапрос.ИмяФайлаОтвета);
			Исключение
				СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
		ДанныеОбработаны = Истина;
		
		Если Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Артикул = &Артикул";
			
			Запрос.УстановитьПараметр("Артикул", Артикул);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если не РезультатЗапроса.Пустой() Тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьGetЗапрос(СтруктураПараметровСоединения, СтруктураПараметровЗапроса) 
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".xml");
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".xml");
	
	// Создаем новое HTTP соединение с указанием сервера
	// Последний параметр отвечает за использование защищенного соединения
	HTTPСоединение = Новый HTTPСоединение(СтруктураПараметровСоединения.Сервер, СтруктураПараметровСоединения.Порт, 
	СтруктураПараметровСоединения.Пользователь, СтруктураПараметровСоединения.Пароль, 
	СтруктураПараметровСоединения.Прокси, СтруктураПараметровСоединения.Таймаут, 
	СтруктураПараметровСоединения.ЗащищенноеСоединение, СтруктураПараметровСоединения.ИспользоватьАутентификациюОС);
	
	// Записываем содержимое тела в файл отправки
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(СтруктураПараметровЗапроса.АдресРесурса);          
	ТекстовыйФайл.Записать(ИмяФайлаЗапроса, КодировкаТекста.UTF8);
	ФайлОтправки = Новый Файл(ИмяФайлаЗапроса);
	
	// Отсылаем POST запрос на обработку.
	// АдресРесурса — ссылка на веб-сервер (страницу), к которой посылается POST запрос
	// Выполним POST запрос через URL
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураПараметровЗапроса.АдресРесурса, СтруктураПараметровЗапроса.Заголовки);     
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяФайлаОтвета);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаОтвета, КодировкаТекста.UTF8);
	
	ТекстОтвета = ТекстовыйДокумент.ПолучитьТекст();
		
	РезультатGetЗапрос = Новый Структура;
	РезультатGetЗапрос.Вставить("HTTPОтвет", HTTPОтвет);
	РезультатGetЗапрос.Вставить("ТекстОтвета", ТекстОтвета);	
	РезультатGetЗапрос.Вставить("ИмяФайлаОтвета", ИмяФайлаОтвета);	
	
	// Обнулим запрос, чтобы освободить чтение ИмяФайлаЗапроса!
	HTTPЗапрос = Неопределено;
	
	Попытка
		УдалитьФайлы(ИмяФайлаЗапроса);
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат РезультатGetЗапрос;
	
КонецФункции

#КонецОбласти

#Область Работа_парсеров

Процедура ПрочитатьФайлXMLЧерезDOM_getBasicData(ПутьКФайлу) 
	
	// Разбор документа через DOM (document object model)
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ПутьКФайлу);
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер);
		
	Для Каждого Элемент Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		
		// Проверка на успешную загрузку
		Если Элемент.ИмяУзла = "result" Тогда
			
			Если Элемент.ТекстовоеСодержимое = "success" Тогда
				// Файл загрузился корректно!
				Продолжить;	
			Иначе
				СообщитьПользователю("Ответ поставщика содержит ошибки. Обратитесь к разработчику!");
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		//
		Если Элемент.ИмяУзла = "data" Тогда
			
			Если Элемент.ДочерниеУзлы.Количество() = 0 Тогда
				ЭтотОбъект.Описание = "Артикул номенклатуры отсутствует в базе данных поставщика!";
				Прервать;
			КонецЕсли;
			
			Для каждого Элемент1 Из Элемент.ДочерниеУзлы Цикл
				
				Если Элемент1.ИмяУзла = "reference" Тогда
					
					ОписаниеНоменклатуры = "";
					ОписаниеСерия = "";
					
					//список основных узлов
					Для каждого Элемент2 Из Элемент1.ДочерниеУзлы Цикл
						
						Если Элемент2.ИмяУзла = "images" Тогда
							
							Для каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл
								
								//формируем ТЧ Изображения
								Если Элемент3.ИмяУзла = "image" Тогда
									
									Для каждого Элемент4 Из Элемент3.ДочерниеУзлы Цикл
										
										Если Элемент4.ИмяУзла = "url" Тогда
											
											НовСтрТЧ = ЭтотОбъект.Изображения.Добавить();
											НовСтрТЧ.Гиперссылка = Элемент4.ТекстовоеСодержимое; 
											
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
						Если Элемент2.ИмяУзла = "eComeProductDescriptions" Тогда
							ОписаниеНоменклатуры = Элемент2.ТекстовоеСодержимое;
						КонецЕсли;
						
						Если Элемент2.ИмяУзла = "etim" Тогда
							
							Для каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл
								
								Если Элемент3.ИмяУзла = "etim6" Тогда
									
									Для каждого Элемент4 Из Элемент3.ДочерниеУзлы Цикл
										//класс
										Если Элемент4.ИмяУзла = "class" Тогда
											
											Для каждого Элемент5 Из Элемент4.ДочерниеУзлы Цикл
												
												Если Элемент5.ИмяУзла = "id" Тогда
													ЭтотОбъект.ETIM_Класс = Элемент5.ТекстовоеСодержимое;
												КонецЕсли;
												Если Элемент5.ИмяУзла = "descriptionRu" Тогда
													ЭтотОбъект.ETIM_Класс_Представление = Элемент5.ТекстовоеСодержимое;
												КонецЕсли;
												
											КонецЦикла;
											
										КонецЕсли;
										//свойства и значения
										Значение = "";
										Значение_Представление = "";
										Единица_Представление = "";
										
										Если Элемент4.ИмяУзла = "features" Тогда
											
											Для каждого Элемент5 Из Элемент4.ДочерниеУзлы Цикл
												
												Если Элемент5.ИмяУзла = "feature" Тогда
													
													Для каждого Элемент6 Из Элемент5.ДочерниеУзлы Цикл
														
														Если Элемент6.ИмяУзла = "id" Тогда
															НовСтрТЧ = ЭтотОбъект.ETIM.Добавить();
															НовСтрТЧ.ETIM_Свойство = Элемент6.ТекстовоеСодержимое;
														КонецЕсли;
														Если Элемент6.ИмяУзла = "description" Тогда
															НовСтрТЧ.ETIM_Свойство_Представление = Элемент6.ТекстовоеСодержимое;
														КонецЕсли;
														Если Элемент6.ИмяУзла = "value" Тогда
															Значение = Элемент6.ТекстовоеСодержимое;
															НовСтрТЧ.ETIM_Значение = Значение;
														КонецЕсли;
														Если Элемент6.ИмяУзла = "valueDescriptionRu" Тогда
															Значение_Представление  = Элемент6.ТекстовоеСодержимое;
															НовСтрТЧ.ETIM_Значение_Представление = Значение_Представление;
														КонецЕсли;
														Если Элемент6.ИмяУзла = "unit" Тогда
															
															Для каждого Элемент7 Из Элемент6.ДочерниеУзлы Цикл
																Если Элемент7.ИмяУзла = "id" Тогда
																	НовСтрТЧ.ETIM_Единица = Элемент7.ТекстовоеСодержимое;
																КонецЕсли;
																Если Элемент7.ИмяУзла = "description_ru" Тогда
																	Единица_Представление  = Элемент7.ТекстовоеСодержимое;
																	НовСтрТЧ.ETIM_Единица_Представление = Единица_Представление;
																КонецЕсли;
															КонецЦикла;
														Иначе 
															Единица_Представление = "";
														КонецЕсли;
														
														//выведем как шнайдер выводит на веб странице
														НовСтрТЧ.ETIM_ЗначениеИПредставление = Значение_Представление + 
														?(СтрНайти(Значение,"EV") > 0 ," (","") + Значение + ?(СтрНайти(Значение,"EV") > 0 ,")","") + 
														?(СтрДлина(Единица_Представление) > 0," ","") + Единица_Представление; 
														
													КонецЦикла;
													
												КонецЕсли;
												
											КонецЦикла;
											
										КонецЕсли;
										//
									КонецЦикла;	
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
						Если Элемент2.ИмяУзла = "series" Тогда
							ОписаниеСерия = Элемент2.ТекстовоеСодержимое;
						КонецЕсли;
						
						Если Элемент2.ИмяУзла = "packing_unit" Тогда
							
							Для каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл
								
								Если Элемент3.ИмяУзла = "packing_unit_code" Тогда
									ЭтотОбъект.КодЕдиницыУпаковки = Элемент3.ТекстовоеСодержимое;
								КонецЕсли;
								Если Элемент3.ИмяУзла = "quantity_min" Тогда
									ЭтотОбъект.КоличествоМин = Элемент3.ТекстовоеСодержимое;
								КонецЕсли;
								Если Элемент3.ИмяУзла = "volume" Тогда
									ЭтотОбъект.Объем = Элемент3.ТекстовоеСодержимое;
								КонецЕсли;
								Если Элемент3.ИмяУзла = "weight" Тогда
									ЭтотОбъект.Вес = Элемент3.ТекстовоеСодержимое;
								КонецЕсли;
								Если Элемент3.ИмяУзла = "length" Тогда
									ЭтотОбъект.Длина = Элемент3.ТекстовоеСодержимое;
								КонецЕсли;
								Если Элемент3.ИмяУзла = "width" Тогда
									ЭтотОбъект.Ширина = Элемент3.ТекстовоеСодержимое;
								КонецЕсли;
								Если Элемент3.ИмяУзла = "depth" Тогда
									ЭтотОбъект.Глубина = Элемент3.ТекстовоеСодержимое;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
					//формируем ОПИСАНИЕ
					ЭтотОбъект.Описание = ОписаниеСерия + Символы.ПС + Символы.ПС + ОписаниеНоменклатуры;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Парсер.Закрыть();
	
КонецПроцедуры

Процедура ПрочитатьФайлXMLЧерезDOM_getPrice(ПутьКФайлу) 
	
	// Разбор документа через DOM (document object model)
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ПутьКФайлу);
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер);
		
	Для Каждого Элемент Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		
		// Проверка на успешную загрузку
		Если Элемент.ИмяУзла = "result" Тогда
			
			Если Элемент.ТекстовоеСодержимое = "success" Тогда
				// Файл загрузился корректно!
				Продолжить;	
			Иначе
				Прервать;
				СообщитьПользователю("Ответ поставщика содержит ошибки. Обратитесь к разработчику!");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ИмяУзла = "data" Тогда
			
			Для каждого Элемент1 Из Элемент.ДочерниеУзлы Цикл
				
				Если Элемент1.ИмяУзла = "reference" Тогда
					
					Цена = Новый ОписаниеТипов("число");
					Дата = "";
					ЕдИзм = "";
					
					//список основных узлов
					Для каждого Элемент2 Из Элемент1.ДочерниеУзлы Цикл
						
						Если Элемент2.ИмяУзла = "price" Тогда
							Цена = Число(Элемент2.ТекстовоеСодержимое);
						КонецЕсли;
						Если Элемент2.ИмяУзла = "date" Тогда
							Дата = Элемент2.ТекстовоеСодержимое;
						КонецЕсли;
						Если Элемент2.ИмяУзла = "unit" Тогда
							ЕдИзм = Элемент2.ТекстовоеСодержимое;
						КонецЕсли;
						
					КонецЦикла;
					
					//формируем ТЧ Прайс
					НовСтрТЧ = ЭтотОбъект.Прайс.Добавить();
					НовСтрТЧ.Цена = Цена;
					НовСтрТЧ.ЕдИзм = ЕдИзм;
					НовСтрТЧ.Обновлено = Дата;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Парсер.Закрыть();
	
КонецПроцедуры

Процедура ПрочитатьФайлXMLЧерезDOM_getStock(ПутьКФайлу) 
	
	// Разбор документа через DOM (document object model)
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ПутьКФайлу);
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер);
	
	Для Каждого Элемент Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		
		// Проверка на успешную загрузку
		Если Элемент.ИмяУзла = "result" Тогда
			
			Если Элемент.ТекстовоеСодержимое = "success" Тогда
				// Файл загрузился корректно!
				Продолжить;	
			Иначе
				Прервать;
				СообщитьПользователю("Ответ поставщика содержит ошибки. Обратитесь к разработчику!");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ИмяУзла = "data" Тогда
			
			Для каждого Элемент1 Из Элемент.ДочерниеУзлы Цикл
				
				Если Элемент1.ИмяУзла = "reference" Тогда
					
					//список основных узлов
					Для каждого Элемент2 Из Элемент1.ДочерниеУзлы Цикл
						
						//формируем ТЧ Остатки
						
						Если Элемент2.ИмяУзла = "warehouse" Тогда
							НовСтрТЧ = ЭтотОбъект.Остатки.Добавить();
							НовСтрТЧ.Склад = Элемент2.ТекстовоеСодержимое;
						КонецЕсли;
						
						Если Элемент2.ИмяУзла = "last_update" Тогда
							НовСтрТЧ.Обновлено = Элемент2.ТекстовоеСодержимое;
						КонецЕсли;
						
						Если Элемент2.ИмяУзла = "count" Тогда
							НовСтрТЧ.Количество = Число(Элемент2.ТекстовоеСодержимое);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Парсер.Закрыть();
	
КонецПроцедуры

Процедура ПрочитатьФайлXMLЧерезDOM_getCert(ПутьКФайлу) 
	
	// Разбор документа через DOM (document object model)
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ПутьКФайлу);
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер);
		
	Для Каждого Элемент Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		
		// Проверка на успешную загрузку
		Если Элемент.ИмяУзла = "result" Тогда
			
			Если Элемент.ТекстовоеСодержимое = "success" Тогда
				// Файл загрузился корректно!
				Продолжить;	
			Иначе
				Прервать;
				СообщитьПользователю("Ответ поставщика содержит ошибки. Обратитесь к разработчику!");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ИмяУзла = "data" Тогда
			
			Для каждого Элемент1 Из Элемент.ДочерниеУзлы Цикл
				
				Если Элемент1.ИмяУзла = "reference" Тогда
					
					Для каждого Элемент2 Из Элемент1.ДочерниеУзлы Цикл
						
						Если Элемент2.ИмяУзла = "certificates" Тогда
							
							ДатаНачала = "";
							ДатаОкончания = "";
							
							//список основных узлов
							Для каждого Элемент3 Из Элемент2.ДочерниеУзлы Цикл
								
								Для каждого Элемент4 Из Элемент3.ДочерниеУзлы Цикл
									
									Если Элемент4.ИмяУзла = "url" Тогда
										
										НовСтрТЧ = ЭтотОбъект.Сертификаты.Добавить();
										НовСтрТЧ.Гиперссылка = Элемент4.ТекстовоеСодержимое;
										
									КонецЕсли;
									
									Если Элемент4.ИмяУзла = "type" Тогда
										
										Для каждого Элемент5 Из Элемент4.ДочерниеУзлы Цикл
											
											Если Элемент5.ИмяУзла = "description" Тогда
												
												НовСтрТЧ.Описание = Элемент5.ТекстовоеСодержимое;
												
											КонецЕсли;
											
										КонецЦикла;
										
									КонецЕсли;
									
									Если Элемент4.ИмяУзла = "start_date" Тогда
										
										ДатаНачала = Элемент4.ТекстовоеСодержимое;
										
									КонецЕсли;
									
									Если Элемент4.ИмяУзла = "ended_date" Тогда
										
										ДатаОкончания = Элемент4.ТекстовоеСодержимое;
										
									КонецЕсли;
									
									Если Элемент4.ИмяУзла = "update_date" Тогда
										
										НовСтрТЧ.ДатаДействия = ДатаНачала + " - " + ДатаОкончания;
										НовСтрТЧ.Обновлено = Элемент4.ТекстовоеСодержимое;
										
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Парсер.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область Взаимодействие_с_клиентом

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - Текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - Наименование реквизита формы.
//  ПутьКДанным                - Строка - Путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//  ИдентификаторНазначения    - УникальныйИдентификатор - Позволяет точно указать,
//                               к какой форме должно быть "привязано" сообщение.
//  ЭтоОбъект                  - Булево - Устанавливает на основе переданного объекта свойства ПутьКДанным и КлючДанных.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",		
	Отказ = Ложь,
	Знач ИдентификаторНазначения = "",
	Знач ЭтоОбъект = Ложь)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст		  = ТекстСообщенияПользователю;
	Сообщение.Поле		  = Поле;
	Сообщение.ПутьКДанным = ПутьКДанным;	
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторНазначения) = Тип("УникальныйИдентификатор") Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти
